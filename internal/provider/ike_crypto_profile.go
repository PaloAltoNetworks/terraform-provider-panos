package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/objects/profiles/ikecrypto"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &IkeCryptoProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &IkeCryptoProfileDataSource{}
)

func NewIkeCryptoProfileDataSource() datasource.DataSource {
	return &IkeCryptoProfileDataSource{}
}

type IkeCryptoProfileDataSource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*ikecrypto.Entry, ikecrypto.Location, *ikecrypto.Service]
}

type IkeCryptoProfileDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type IkeCryptoProfileDataSourceModel struct {
	Location               types.Object                              `tfsdk:"location"`
	Name                   types.String                              `tfsdk:"name"`
	AuthenticationMultiple types.Int64                               `tfsdk:"authentication_multiple"`
	DhGroup                types.List                                `tfsdk:"dh_group"`
	Encryption             types.List                                `tfsdk:"encryption"`
	Hash                   types.List                                `tfsdk:"hash"`
	Lifetime               *IkeCryptoProfileDataSourceLifetimeObject `tfsdk:"lifetime"`
}
type IkeCryptoProfileDataSourceLifetimeObject struct {
	Days    types.Int64 `tfsdk:"days"`
	Hours   types.Int64 `tfsdk:"hours"`
	Minutes types.Int64 `tfsdk:"minutes"`
	Seconds types.Int64 `tfsdk:"seconds"`
}

func (o *IkeCryptoProfileDataSourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj IkeCryptoProfileLocation

	var lifetimeObj *IkeCryptoProfileDataSourceLifetimeObject
	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"name":                    types.StringType,
		"authentication_multiple": types.Int64Type,
		"dh_group":                types.ListType{},
		"encryption":              types.ListType{},
		"hash":                    types.ListType{},
		"lifetime": types.ObjectType{
			AttrTypes: lifetimeObj.AttributeTypes(),
		},
	}
}

func (o IkeCryptoProfileDataSourceModel) AncestorName() string {
	return ""
}

func (o IkeCryptoProfileDataSourceModel) EntryName() *string {
	return nil
}
func (o *IkeCryptoProfileDataSourceLifetimeObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"days":    types.Int64Type,
		"hours":   types.Int64Type,
		"minutes": types.Int64Type,
		"seconds": types.Int64Type,
	}
}

func (o IkeCryptoProfileDataSourceLifetimeObject) AncestorName() string {
	return "lifetime"
}

func (o IkeCryptoProfileDataSourceLifetimeObject) EntryName() *string {
	return nil
}

func (o *IkeCryptoProfileDataSourceModel) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ikecrypto.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	authenticationMultiple_value := o.AuthenticationMultiple.ValueInt64Pointer()
	dhGroup_pango_entries := make([]string, 0)
	diags.Append(o.DhGroup.ElementsAs(ctx, &dhGroup_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	encryption_pango_entries := make([]string, 0)
	diags.Append(o.Encryption.ElementsAs(ctx, &encryption_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	hash_pango_entries := make([]string, 0)
	diags.Append(o.Hash.ElementsAs(ctx, &hash_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var lifetime_entry *ikecrypto.Lifetime
	if o.Lifetime != nil {
		if *obj != nil && (*obj).Lifetime != nil {
			lifetime_entry = (*obj).Lifetime
		} else {
			lifetime_entry = new(ikecrypto.Lifetime)
		}
		// ModelOrObject: Model
		diags.Append(o.Lifetime.CopyToPango(ctx, ancestors, &lifetime_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ikecrypto.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).AuthenticationMultiple = authenticationMultiple_value
	(*obj).DhGroup = dhGroup_pango_entries
	(*obj).Encryption = encryption_pango_entries
	(*obj).Hash = hash_pango_entries
	(*obj).Lifetime = lifetime_entry

	return diags
}
func (o *IkeCryptoProfileDataSourceLifetimeObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ikecrypto.Lifetime, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	days_value := o.Days.ValueInt64Pointer()
	hours_value := o.Hours.ValueInt64Pointer()
	minutes_value := o.Minutes.ValueInt64Pointer()
	seconds_value := o.Seconds.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(ikecrypto.Lifetime)
	}
	(*obj).Days = days_value
	(*obj).Hours = hours_value
	(*obj).Minutes = minutes_value
	(*obj).Seconds = seconds_value

	return diags
}

func (o *IkeCryptoProfileDataSourceModel) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ikecrypto.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dhGroup_list types.List
	{
		var list_diags diag.Diagnostics
		dhGroup_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DhGroup)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var encryption_list types.List
	{
		var list_diags diag.Diagnostics
		encryption_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Encryption)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var hash_list types.List
	{
		var list_diags diag.Diagnostics
		hash_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Hash)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var lifetime_object *IkeCryptoProfileDataSourceLifetimeObject
	if obj.Lifetime != nil {
		lifetime_object = new(IkeCryptoProfileDataSourceLifetimeObject)
		diags.Append(lifetime_object.CopyFromPango(ctx, ancestors, obj.Lifetime, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var authenticationMultiple_value types.Int64
	if obj.AuthenticationMultiple != nil {
		authenticationMultiple_value = types.Int64Value(*obj.AuthenticationMultiple)
	}
	o.Name = types.StringValue(obj.Name)
	o.AuthenticationMultiple = authenticationMultiple_value
	o.DhGroup = dhGroup_list
	o.Encryption = encryption_list
	o.Hash = hash_list
	o.Lifetime = lifetime_object

	return diags
}

func (o *IkeCryptoProfileDataSourceLifetimeObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ikecrypto.Lifetime, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var days_value types.Int64
	if obj.Days != nil {
		days_value = types.Int64Value(*obj.Days)
	}
	var hours_value types.Int64
	if obj.Hours != nil {
		hours_value = types.Int64Value(*obj.Hours)
	}
	var minutes_value types.Int64
	if obj.Minutes != nil {
		minutes_value = types.Int64Value(*obj.Minutes)
	}
	var seconds_value types.Int64
	if obj.Seconds != nil {
		seconds_value = types.Int64Value(*obj.Seconds)
	}
	o.Days = days_value
	o.Hours = hours_value
	o.Minutes = minutes_value
	o.Seconds = seconds_value

	return diags
}

func (o *IkeCryptoProfileDataSourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	return components, nil
}

func IkeCryptoProfileDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": IkeCryptoProfileDataSourceLocationSchema(),

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"authentication_multiple": dsschema.Int64Attribute{
				Description: "IKEv2 SA reauthentication interval equals authetication-multiple * rekey-lifetime; 0 means reauthentication disabled",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dh_group": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"encryption": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"hash": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"lifetime": IkeCryptoProfileDataSourceLifetimeSchema(),
		},
	}
}

func (o *IkeCryptoProfileDataSourceModel) getTypeFor(name string) attr.Type {
	schema := IkeCryptoProfileDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func IkeCryptoProfileDataSourceLifetimeSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"days": dsschema.Int64Attribute{
				Description: "specify lifetime in days",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hours": dsschema.Int64Attribute{
				Description: "specify lifetime in hours",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"minutes": dsschema.Int64Attribute{
				Description: "specify lifetime in minutes",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"seconds": dsschema.Int64Attribute{
				Description: "specify lifetime in seconds",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *IkeCryptoProfileDataSourceLifetimeObject) getTypeFor(name string) attr.Type {
	schema := IkeCryptoProfileDataSourceLifetimeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func IkeCryptoProfileDataSourceLocationSchema() rsschema.Attribute {
	return IkeCryptoProfileLocationSchema()
}

// Metadata returns the data source type name.
func (d *IkeCryptoProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ike_crypto_profile"
}

// Schema defines the schema for this data source.
func (d *IkeCryptoProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = IkeCryptoProfileDataSourceSchema()
}

// Configure prepares the struct.
func (d *IkeCryptoProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	d.client = providerData.Client
	specifier, _, err := ikecrypto.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	d.manager = sdkmanager.NewEntryObjectManager[*ikecrypto.Entry, ikecrypto.Location, *ikecrypto.Service](d.client, ikecrypto.NewService(d.client), batchSize, specifier, ikecrypto.SpecMatches)
}
func (o *IkeCryptoProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state IkeCryptoProfileDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location ikecrypto.Location

	{
		var terraformLocation IkeCryptoProfileLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &ikecrypto.NgfwLocation{}
			var innerLocation IkeCryptoProfileNgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &ikecrypto.TemplateLocation{}
			var innerLocation IkeCryptoProfileTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &ikecrypto.TemplateStackLocation{}
			var innerLocation IkeCryptoProfileTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_ike_crypto_profile_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	components, err := savestate.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	object, err := o.manager.Read(ctx, location, components, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, nil, object, ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &IkeCryptoProfileResource{}
	_ resource.ResourceWithConfigure   = &IkeCryptoProfileResource{}
	_ resource.ResourceWithImportState = &IkeCryptoProfileResource{}
)

func NewIkeCryptoProfileResource() resource.Resource {
	if _, found := resourceFuncMap["panos_ike_crypto_profile"]; !found {
		resourceFuncMap["panos_ike_crypto_profile"] = resourceFuncs{
			CreateImportId: IkeCryptoProfileImportStateCreator,
		}
	}
	return &IkeCryptoProfileResource{}
}

type IkeCryptoProfileResource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*ikecrypto.Entry, ikecrypto.Location, *ikecrypto.Service]
}

func IkeCryptoProfileResourceLocationSchema() rsschema.Attribute {
	return IkeCryptoProfileLocationSchema()
}

type IkeCryptoProfileResourceModel struct {
	Location               types.Object                            `tfsdk:"location"`
	Name                   types.String                            `tfsdk:"name"`
	AuthenticationMultiple types.Int64                             `tfsdk:"authentication_multiple"`
	DhGroup                types.List                              `tfsdk:"dh_group"`
	Encryption             types.List                              `tfsdk:"encryption"`
	Hash                   types.List                              `tfsdk:"hash"`
	Lifetime               *IkeCryptoProfileResourceLifetimeObject `tfsdk:"lifetime"`
}
type IkeCryptoProfileResourceLifetimeObject struct {
	Days    types.Int64 `tfsdk:"days"`
	Hours   types.Int64 `tfsdk:"hours"`
	Minutes types.Int64 `tfsdk:"minutes"`
	Seconds types.Int64 `tfsdk:"seconds"`
}

func (r *IkeCryptoProfileResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func IkeCryptoProfileResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": IkeCryptoProfileResourceLocationSchema(),

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"authentication_multiple": rsschema.Int64Attribute{
				Description: "IKEv2 SA reauthentication interval equals authetication-multiple * rekey-lifetime; 0 means reauthentication disabled",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(0),
			},

			"dh_group": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"encryption": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"hash": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"lifetime": IkeCryptoProfileResourceLifetimeSchema(),
		},
	}
}

func (o *IkeCryptoProfileResourceModel) getTypeFor(name string) attr.Type {
	schema := IkeCryptoProfileResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func IkeCryptoProfileResourceLifetimeSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"days": rsschema.Int64Attribute{
				Description: "specify lifetime in days",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,

				Validators: []validator.Int64{
					int64validator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("days"),
						path.MatchRelative().AtParent().AtName("hours"),
						path.MatchRelative().AtParent().AtName("minutes"),
						path.MatchRelative().AtParent().AtName("seconds"),
					}...),
				},
			},

			"hours": rsschema.Int64Attribute{
				Description: "specify lifetime in hours",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"minutes": rsschema.Int64Attribute{
				Description: "specify lifetime in minutes",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"seconds": rsschema.Int64Attribute{
				Description: "specify lifetime in seconds",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *IkeCryptoProfileResourceLifetimeObject) getTypeFor(name string) attr.Type {
	schema := IkeCryptoProfileResourceLifetimeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *IkeCryptoProfileResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ike_crypto_profile"
}

func (r *IkeCryptoProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = IkeCryptoProfileResourceSchema()
}

// </ResourceSchema>

func (r *IkeCryptoProfileResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	r.client = providerData.Client
	specifier, _, err := ikecrypto.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	r.manager = sdkmanager.NewEntryObjectManager[*ikecrypto.Entry, ikecrypto.Location, *ikecrypto.Service](r.client, ikecrypto.NewService(r.client), batchSize, specifier, ikecrypto.SpecMatches)
}

func (o *IkeCryptoProfileResourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj IkeCryptoProfileLocation

	var lifetimeObj *IkeCryptoProfileResourceLifetimeObject
	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"name":                    types.StringType,
		"authentication_multiple": types.Int64Type,
		"dh_group":                types.ListType{},
		"encryption":              types.ListType{},
		"hash":                    types.ListType{},
		"lifetime": types.ObjectType{
			AttrTypes: lifetimeObj.AttributeTypes(),
		},
	}
}

func (o IkeCryptoProfileResourceModel) AncestorName() string {
	return ""
}

func (o IkeCryptoProfileResourceModel) EntryName() *string {
	return nil
}
func (o *IkeCryptoProfileResourceLifetimeObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"days":    types.Int64Type,
		"hours":   types.Int64Type,
		"minutes": types.Int64Type,
		"seconds": types.Int64Type,
	}
}

func (o IkeCryptoProfileResourceLifetimeObject) AncestorName() string {
	return "lifetime"
}

func (o IkeCryptoProfileResourceLifetimeObject) EntryName() *string {
	return nil
}

func (o *IkeCryptoProfileResourceModel) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ikecrypto.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	authenticationMultiple_value := o.AuthenticationMultiple.ValueInt64Pointer()
	dhGroup_pango_entries := make([]string, 0)
	diags.Append(o.DhGroup.ElementsAs(ctx, &dhGroup_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	encryption_pango_entries := make([]string, 0)
	diags.Append(o.Encryption.ElementsAs(ctx, &encryption_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	hash_pango_entries := make([]string, 0)
	diags.Append(o.Hash.ElementsAs(ctx, &hash_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var lifetime_entry *ikecrypto.Lifetime
	if o.Lifetime != nil {
		if *obj != nil && (*obj).Lifetime != nil {
			lifetime_entry = (*obj).Lifetime
		} else {
			lifetime_entry = new(ikecrypto.Lifetime)
		}
		// ModelOrObject: Model
		diags.Append(o.Lifetime.CopyToPango(ctx, ancestors, &lifetime_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ikecrypto.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).AuthenticationMultiple = authenticationMultiple_value
	(*obj).DhGroup = dhGroup_pango_entries
	(*obj).Encryption = encryption_pango_entries
	(*obj).Hash = hash_pango_entries
	(*obj).Lifetime = lifetime_entry

	return diags
}
func (o *IkeCryptoProfileResourceLifetimeObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ikecrypto.Lifetime, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	days_value := o.Days.ValueInt64Pointer()
	hours_value := o.Hours.ValueInt64Pointer()
	minutes_value := o.Minutes.ValueInt64Pointer()
	seconds_value := o.Seconds.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(ikecrypto.Lifetime)
	}
	(*obj).Days = days_value
	(*obj).Hours = hours_value
	(*obj).Minutes = minutes_value
	(*obj).Seconds = seconds_value

	return diags
}

func (o *IkeCryptoProfileResourceModel) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ikecrypto.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dhGroup_list types.List
	{
		var list_diags diag.Diagnostics
		dhGroup_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DhGroup)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var encryption_list types.List
	{
		var list_diags diag.Diagnostics
		encryption_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Encryption)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var hash_list types.List
	{
		var list_diags diag.Diagnostics
		hash_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Hash)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var lifetime_object *IkeCryptoProfileResourceLifetimeObject
	if obj.Lifetime != nil {
		lifetime_object = new(IkeCryptoProfileResourceLifetimeObject)
		diags.Append(lifetime_object.CopyFromPango(ctx, ancestors, obj.Lifetime, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var authenticationMultiple_value types.Int64
	if obj.AuthenticationMultiple != nil {
		authenticationMultiple_value = types.Int64Value(*obj.AuthenticationMultiple)
	}
	o.Name = types.StringValue(obj.Name)
	o.AuthenticationMultiple = authenticationMultiple_value
	o.DhGroup = dhGroup_list
	o.Encryption = encryption_list
	o.Hash = hash_list
	o.Lifetime = lifetime_object

	return diags
}

func (o *IkeCryptoProfileResourceLifetimeObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ikecrypto.Lifetime, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var days_value types.Int64
	if obj.Days != nil {
		days_value = types.Int64Value(*obj.Days)
	}
	var hours_value types.Int64
	if obj.Hours != nil {
		hours_value = types.Int64Value(*obj.Hours)
	}
	var minutes_value types.Int64
	if obj.Minutes != nil {
		minutes_value = types.Int64Value(*obj.Minutes)
	}
	var seconds_value types.Int64
	if obj.Seconds != nil {
		seconds_value = types.Int64Value(*obj.Seconds)
	}
	o.Days = days_value
	o.Hours = hours_value
	o.Minutes = minutes_value
	o.Seconds = seconds_value

	return diags
}

func (o *IkeCryptoProfileResourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	return components, nil
}

func (r *IkeCryptoProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state IkeCryptoProfileResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_ike_crypto_profile_resource",
		"function":      "Create",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	// Determine the location.

	var location ikecrypto.Location

	{
		var terraformLocation IkeCryptoProfileLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &ikecrypto.NgfwLocation{}
			var innerLocation IkeCryptoProfileNgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &ikecrypto.TemplateLocation{}
			var innerLocation IkeCryptoProfileTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &ikecrypto.TemplateStackLocation{}
			var innerLocation IkeCryptoProfileTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	if err := location.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *ikecrypto.Entry
	resp.Diagnostics.Append(state.CopyToPango(ctx, nil, &obj, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	created, err := r.manager.Create(ctx, location, components, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	resp.Diagnostics.Append(state.CopyFromPango(ctx, nil, created, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
func (o *IkeCryptoProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state IkeCryptoProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	encryptedValues, diags := req.Private.GetKey(ctx, "encrypted_values")
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location ikecrypto.Location

	{
		var terraformLocation IkeCryptoProfileLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &ikecrypto.NgfwLocation{}
			var innerLocation IkeCryptoProfileNgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &ikecrypto.TemplateLocation{}
			var innerLocation IkeCryptoProfileTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &ikecrypto.TemplateStackLocation{}
			var innerLocation IkeCryptoProfileTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_ike_crypto_profile_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	components, err := savestate.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	object, err := o.manager.Read(ctx, location, components, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, nil, object, ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *IkeCryptoProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state IkeCryptoProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	encryptedValues, diags := req.Private.GetKey(ctx, "encrypted_values")
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location ikecrypto.Location

	{
		var terraformLocation IkeCryptoProfileLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &ikecrypto.NgfwLocation{}
			var innerLocation IkeCryptoProfileNgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &ikecrypto.TemplateLocation{}
			var innerLocation IkeCryptoProfileTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &ikecrypto.TemplateStackLocation{}
			var innerLocation IkeCryptoProfileTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_ike_crypto_profile_resource",
		"function":      "Update",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	obj, err := r.manager.Read(ctx, location, components, plan.Name.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, nil, &obj, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	components, err = plan.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}

	updated, err := r.manager.Update(ctx, location, components, obj, obj.Name)

	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	copy_diags := state.CopyFromPango(ctx, nil, updated, ev)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *IkeCryptoProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state IkeCryptoProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_ike_crypto_profile_resource",
		"function":      "Delete",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var location ikecrypto.Location

	{
		var terraformLocation IkeCryptoProfileLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &ikecrypto.NgfwLocation{}
			var innerLocation IkeCryptoProfileNgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &ikecrypto.TemplateLocation{}
			var innerLocation IkeCryptoProfileTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &ikecrypto.TemplateStackLocation{}
			var innerLocation IkeCryptoProfileTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	err = r.manager.Delete(ctx, location, components, []string{state.Name.ValueString()})
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
		return
	}

}

type IkeCryptoProfileImportState struct {
	Location types.Object `json:"location"`
	Name     types.String `json:"name"`
}

func (o IkeCryptoProfileImportState) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Location *IkeCryptoProfileLocation `json:"location"`
		Name     *string                   `json:"name"`
	}
	var location_object *IkeCryptoProfileLocation
	{
		diags := o.Location.As(context.TODO(), &location_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal location into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Location: location_object,
		Name:     o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *IkeCryptoProfileImportState) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Location *IkeCryptoProfileLocation `json:"location"`
		Name     *string                   `json:"name"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var location_object types.Object
	{
		var diags_tmp diag.Diagnostics
		location_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Location.AttributeTypes(), shadow.Location)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into location", diags_tmp.Errors())
		}
	}
	o.Location = location_object
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}

func IkeCryptoProfileImportStateCreator(ctx context.Context, resource types.Object) ([]byte, error) {
	attrs := resource.Attributes()
	if attrs == nil {
		return nil, fmt.Errorf("Object has no attributes")
	}

	locationAttr, ok := attrs["location"]
	if !ok {
		return nil, fmt.Errorf("location attribute missing")
	}

	var location types.Object
	switch value := locationAttr.(type) {
	case types.Object:
		location = value
	default:
		return nil, fmt.Errorf("location attribute expected to be an object")
	}
	nameAttr, ok := attrs["name"]
	if !ok {
		return nil, fmt.Errorf("name attribute missing")
	}

	var name types.String
	switch value := nameAttr.(type) {
	case types.String:
		name = value
	default:
		return nil, fmt.Errorf("name attribute expected to be a string")
	}

	importStruct := IkeCryptoProfileImportState{
		Location: location,
		Name:     name,
	}

	return json.Marshal(importStruct)
}

func (r *IkeCryptoProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	var obj IkeCryptoProfileImportState
	data, err := base64.StdEncoding.DecodeString(req.ID)
	if err != nil {
		resp.Diagnostics.AddError("Failed to decode Import ID", err.Error())
		return
	}

	err = json.Unmarshal(data, &obj)
	if err != nil {
		var diagsErr *DiagnosticsError
		if errors.As(err, &diagsErr) {
			resp.Diagnostics.Append(diagsErr.Diagnostics()...)
		} else {
			resp.Diagnostics.AddError("Failed to unmarshal Import ID", err.Error())
		}
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("location"), obj.Location)...)
	if resp.Diagnostics.HasError() {
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("name"), obj.Name)...)
}

type IkeCryptoProfileNgfwLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
}
type IkeCryptoProfileTemplateLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type IkeCryptoProfileTemplateStackLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type IkeCryptoProfileLocation struct {
	Ngfw          types.Object `tfsdk:"ngfw"`
	Template      types.Object `tfsdk:"template"`
	TemplateStack types.Object `tfsdk:"template_stack"`
}

func IkeCryptoProfileLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"ngfw": rsschema.SingleNestedAttribute{
				Description: "Located in a specific NGFW device",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("ngfw"),
						path.MatchRelative().AtParent().AtName("template"),
						path.MatchRelative().AtParent().AtName("template_stack"),
					}...),
				},
			},
			"template": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Specific Panorama template",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_stack": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template stack",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Specific Panorama template stack",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o IkeCryptoProfileNgfwLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
	}

	obj := shadow{
		NgfwDevice: o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *IkeCryptoProfileNgfwLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o IkeCryptoProfileTemplateLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *IkeCryptoProfileTemplateLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o IkeCryptoProfileTemplateStackLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *IkeCryptoProfileTemplateStackLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o IkeCryptoProfileLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Ngfw          *IkeCryptoProfileNgfwLocation          `json:"ngfw,omitempty"`
		Template      *IkeCryptoProfileTemplateLocation      `json:"template,omitempty"`
		TemplateStack *IkeCryptoProfileTemplateStackLocation `json:"template_stack,omitempty"`
	}
	var ngfw_object *IkeCryptoProfileNgfwLocation
	{
		diags := o.Ngfw.As(context.TODO(), &ngfw_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal ngfw into JSON document", diags.Errors())
		}
	}
	var template_object *IkeCryptoProfileTemplateLocation
	{
		diags := o.Template.As(context.TODO(), &template_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template into JSON document", diags.Errors())
		}
	}
	var templateStack_object *IkeCryptoProfileTemplateStackLocation
	{
		diags := o.TemplateStack.As(context.TODO(), &templateStack_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template_stack into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Ngfw:          ngfw_object,
		Template:      template_object,
		TemplateStack: templateStack_object,
	}

	return json.Marshal(obj)
}

func (o *IkeCryptoProfileLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Ngfw          *IkeCryptoProfileNgfwLocation          `json:"ngfw,omitempty"`
		Template      *IkeCryptoProfileTemplateLocation      `json:"template,omitempty"`
		TemplateStack *IkeCryptoProfileTemplateStackLocation `json:"template_stack,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var ngfw_object types.Object
	{
		var diags_tmp diag.Diagnostics
		ngfw_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Ngfw.AttributeTypes(), shadow.Ngfw)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into ngfw", diags_tmp.Errors())
		}
	}
	var template_object types.Object
	{
		var diags_tmp diag.Diagnostics
		template_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Template.AttributeTypes(), shadow.Template)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template", diags_tmp.Errors())
		}
	}
	var templateStack_object types.Object
	{
		var diags_tmp diag.Diagnostics
		templateStack_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.TemplateStack.AttributeTypes(), shadow.TemplateStack)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template_stack", diags_tmp.Errors())
		}
	}
	o.Ngfw = ngfw_object
	o.Template = template_object
	o.TemplateStack = templateStack_object

	return nil
}

func (o *IkeCryptoProfileNgfwLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"ngfw_device": types.StringType,
	}
}
func (o *IkeCryptoProfileTemplateLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
		"ngfw_device":     types.StringType,
	}
}
func (o *IkeCryptoProfileTemplateStackLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
		"ngfw_device":     types.StringType,
	}
}
func (o *IkeCryptoProfileLocation) AttributeTypes() map[string]attr.Type {
	var ngfwObj IkeCryptoProfileNgfwLocation
	var templateObj IkeCryptoProfileTemplateLocation
	var templateStackObj IkeCryptoProfileTemplateStackLocation
	return map[string]attr.Type{
		"ngfw": types.ObjectType{
			AttrTypes: ngfwObj.AttributeTypes(),
		},
		"template": types.ObjectType{
			AttrTypes: templateObj.AttributeTypes(),
		},
		"template_stack": types.ObjectType{
			AttrTypes: templateStackObj.AttributeTypes(),
		},
	}
}
