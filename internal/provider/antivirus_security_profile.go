package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/objects/profiles/antivirus"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &AntivirusSecurityProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &AntivirusSecurityProfileDataSource{}
)

func NewAntivirusSecurityProfileDataSource() datasource.DataSource {
	return &AntivirusSecurityProfileDataSource{}
}

type AntivirusSecurityProfileDataSource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*antivirus.Entry, antivirus.Location, *antivirus.Service]
}

type AntivirusSecurityProfileDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type AntivirusSecurityProfileDataSourceModel struct {
	Location                  types.Object `tfsdk:"location"`
	Name                      types.String `tfsdk:"name"`
	ApplicationExceptions     types.List   `tfsdk:"application_exceptions"`
	Decoders                  types.List   `tfsdk:"decoders"`
	Description               types.String `tfsdk:"description"`
	DisableOverride           types.String `tfsdk:"disable_override"`
	MachineLearningModels     types.List   `tfsdk:"machine_learning_models"`
	MachineLearningExceptions types.List   `tfsdk:"machine_learning_exceptions"`
	PacketCapture             types.Bool   `tfsdk:"packet_capture"`
	ThreatExceptions          types.List   `tfsdk:"threat_exceptions"`
	WfrtHoldMode              types.Bool   `tfsdk:"wfrt_hold_mode"`
}
type AntivirusSecurityProfileDataSourceApplicationExceptionsObject struct {
	Name   types.String `tfsdk:"name"`
	Action types.String `tfsdk:"action"`
}
type AntivirusSecurityProfileDataSourceDecodersObject struct {
	Name           types.String `tfsdk:"name"`
	Action         types.String `tfsdk:"action"`
	WildfireAction types.String `tfsdk:"wildfire_action"`
	MlAction       types.String `tfsdk:"ml_action"`
}
type AntivirusSecurityProfileDataSourceMachineLearningModelsObject struct {
	Name   types.String `tfsdk:"name"`
	Action types.String `tfsdk:"action"`
}
type AntivirusSecurityProfileDataSourceMachineLearningExceptionsObject struct {
	Name        types.String `tfsdk:"name"`
	Filename    types.String `tfsdk:"filename"`
	Description types.String `tfsdk:"description"`
}
type AntivirusSecurityProfileDataSourceThreatExceptionsObject struct {
	Name types.String `tfsdk:"name"`
}

func (o *AntivirusSecurityProfileDataSourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj AntivirusSecurityProfileLocation

	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"name":                        types.StringType,
		"application_exceptions":      types.ListType{},
		"decoders":                    types.ListType{},
		"description":                 types.StringType,
		"disable_override":            types.StringType,
		"machine_learning_models":     types.ListType{},
		"machine_learning_exceptions": types.ListType{},
		"packet_capture":              types.BoolType,
		"threat_exceptions":           types.ListType{},
		"wfrt_hold_mode":              types.BoolType,
	}
}

func (o AntivirusSecurityProfileDataSourceModel) AncestorName() string {
	return ""
}

func (o AntivirusSecurityProfileDataSourceModel) EntryName() *string {
	return nil
}
func (o *AntivirusSecurityProfileDataSourceApplicationExceptionsObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":   types.StringType,
		"action": types.StringType,
	}
}

func (o AntivirusSecurityProfileDataSourceApplicationExceptionsObject) AncestorName() string {
	return "application-exceptions"
}

func (o AntivirusSecurityProfileDataSourceApplicationExceptionsObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *AntivirusSecurityProfileDataSourceDecodersObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":            types.StringType,
		"action":          types.StringType,
		"wildfire_action": types.StringType,
		"ml_action":       types.StringType,
	}
}

func (o AntivirusSecurityProfileDataSourceDecodersObject) AncestorName() string {
	return "decoders"
}

func (o AntivirusSecurityProfileDataSourceDecodersObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *AntivirusSecurityProfileDataSourceMachineLearningModelsObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":   types.StringType,
		"action": types.StringType,
	}
}

func (o AntivirusSecurityProfileDataSourceMachineLearningModelsObject) AncestorName() string {
	return "machine-learning-models"
}

func (o AntivirusSecurityProfileDataSourceMachineLearningModelsObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *AntivirusSecurityProfileDataSourceMachineLearningExceptionsObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":        types.StringType,
		"filename":    types.StringType,
		"description": types.StringType,
	}
}

func (o AntivirusSecurityProfileDataSourceMachineLearningExceptionsObject) AncestorName() string {
	return "machine-learning-exceptions"
}

func (o AntivirusSecurityProfileDataSourceMachineLearningExceptionsObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *AntivirusSecurityProfileDataSourceThreatExceptionsObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name": types.StringType,
	}
}

func (o AntivirusSecurityProfileDataSourceThreatExceptionsObject) AncestorName() string {
	return "threat-exceptions"
}

func (o AntivirusSecurityProfileDataSourceThreatExceptionsObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}

func (o *AntivirusSecurityProfileDataSourceModel) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **antivirus.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var applicationExceptions_tf_entries []AntivirusSecurityProfileDataSourceApplicationExceptionsObject
	var applicationExceptions_pango_entries []antivirus.Application
	{
		d := o.ApplicationExceptions.ElementsAs(ctx, &applicationExceptions_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range applicationExceptions_tf_entries {
			var entry *antivirus.Application
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			applicationExceptions_pango_entries = append(applicationExceptions_pango_entries, *entry)
		}
	}
	var decoders_tf_entries []AntivirusSecurityProfileDataSourceDecodersObject
	var decoders_pango_entries []antivirus.Decoder
	{
		d := o.Decoders.ElementsAs(ctx, &decoders_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range decoders_tf_entries {
			var entry *antivirus.Decoder
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			decoders_pango_entries = append(decoders_pango_entries, *entry)
		}
	}
	description_value := o.Description.ValueStringPointer()
	disableOverride_value := o.DisableOverride.ValueStringPointer()
	var machineLearningModels_tf_entries []AntivirusSecurityProfileDataSourceMachineLearningModelsObject
	var machineLearningModels_pango_entries []antivirus.MlavEngineFilebasedEnabled
	{
		d := o.MachineLearningModels.ElementsAs(ctx, &machineLearningModels_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range machineLearningModels_tf_entries {
			var entry *antivirus.MlavEngineFilebasedEnabled
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			machineLearningModels_pango_entries = append(machineLearningModels_pango_entries, *entry)
		}
	}
	var machineLearningExceptions_tf_entries []AntivirusSecurityProfileDataSourceMachineLearningExceptionsObject
	var machineLearningExceptions_pango_entries []antivirus.MlavException
	{
		d := o.MachineLearningExceptions.ElementsAs(ctx, &machineLearningExceptions_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range machineLearningExceptions_tf_entries {
			var entry *antivirus.MlavException
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			machineLearningExceptions_pango_entries = append(machineLearningExceptions_pango_entries, *entry)
		}
	}
	packetCapture_value := o.PacketCapture.ValueBoolPointer()
	var threatExceptions_tf_entries []AntivirusSecurityProfileDataSourceThreatExceptionsObject
	var threatExceptions_pango_entries []antivirus.ThreatException
	{
		d := o.ThreatExceptions.ElementsAs(ctx, &threatExceptions_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range threatExceptions_tf_entries {
			var entry *antivirus.ThreatException
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			threatExceptions_pango_entries = append(threatExceptions_pango_entries, *entry)
		}
	}
	wfrtHoldMode_value := o.WfrtHoldMode.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(antivirus.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Application = applicationExceptions_pango_entries
	(*obj).Decoder = decoders_pango_entries
	(*obj).Description = description_value
	(*obj).DisableOverride = disableOverride_value
	(*obj).MlavEngineFilebasedEnabled = machineLearningModels_pango_entries
	(*obj).MlavException = machineLearningExceptions_pango_entries
	(*obj).PacketCapture = packetCapture_value
	(*obj).ThreatException = threatExceptions_pango_entries
	(*obj).WfrtHoldMode = wfrtHoldMode_value

	return diags
}
func (o *AntivirusSecurityProfileDataSourceApplicationExceptionsObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **antivirus.Application, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	action_value := o.Action.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(antivirus.Application)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Action = action_value

	return diags
}
func (o *AntivirusSecurityProfileDataSourceDecodersObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **antivirus.Decoder, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	action_value := o.Action.ValueStringPointer()
	wildfireAction_value := o.WildfireAction.ValueStringPointer()
	mlAction_value := o.MlAction.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(antivirus.Decoder)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Action = action_value
	(*obj).WildfireAction = wildfireAction_value
	(*obj).MlavAction = mlAction_value

	return diags
}
func (o *AntivirusSecurityProfileDataSourceMachineLearningModelsObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **antivirus.MlavEngineFilebasedEnabled, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	action_value := o.Action.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(antivirus.MlavEngineFilebasedEnabled)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).MlavPolicyAction = action_value

	return diags
}
func (o *AntivirusSecurityProfileDataSourceMachineLearningExceptionsObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **antivirus.MlavException, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	filename_value := o.Filename.ValueStringPointer()
	description_value := o.Description.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(antivirus.MlavException)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Filename = filename_value
	(*obj).Description = description_value

	return diags
}
func (o *AntivirusSecurityProfileDataSourceThreatExceptionsObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **antivirus.ThreatException, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(antivirus.ThreatException)
	}
	(*obj).Name = o.Name.ValueString()

	return diags
}

func (o *AntivirusSecurityProfileDataSourceModel) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *antivirus.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var applicationExceptions_list types.List
	{
		var applicationExceptions_tf_entries []AntivirusSecurityProfileDataSourceApplicationExceptionsObject
		for _, elt := range obj.Application {
			entry := AntivirusSecurityProfileDataSourceApplicationExceptionsObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			applicationExceptions_tf_entries = append(applicationExceptions_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("application_exceptions")
		applicationExceptions_list, list_diags = types.ListValueFrom(ctx, schemaType, applicationExceptions_tf_entries)
		diags.Append(list_diags...)
	}
	var decoders_list types.List
	{
		var decoders_tf_entries []AntivirusSecurityProfileDataSourceDecodersObject
		for _, elt := range obj.Decoder {
			entry := AntivirusSecurityProfileDataSourceDecodersObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			decoders_tf_entries = append(decoders_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("decoders")
		decoders_list, list_diags = types.ListValueFrom(ctx, schemaType, decoders_tf_entries)
		diags.Append(list_diags...)
	}
	var machineLearningModels_list types.List
	{
		var machineLearningModels_tf_entries []AntivirusSecurityProfileDataSourceMachineLearningModelsObject
		for _, elt := range obj.MlavEngineFilebasedEnabled {
			entry := AntivirusSecurityProfileDataSourceMachineLearningModelsObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			machineLearningModels_tf_entries = append(machineLearningModels_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("machine_learning_models")
		machineLearningModels_list, list_diags = types.ListValueFrom(ctx, schemaType, machineLearningModels_tf_entries)
		diags.Append(list_diags...)
	}
	var machineLearningExceptions_list types.List
	{
		var machineLearningExceptions_tf_entries []AntivirusSecurityProfileDataSourceMachineLearningExceptionsObject
		for _, elt := range obj.MlavException {
			entry := AntivirusSecurityProfileDataSourceMachineLearningExceptionsObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			machineLearningExceptions_tf_entries = append(machineLearningExceptions_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("machine_learning_exceptions")
		machineLearningExceptions_list, list_diags = types.ListValueFrom(ctx, schemaType, machineLearningExceptions_tf_entries)
		diags.Append(list_diags...)
	}
	var threatExceptions_list types.List
	{
		var threatExceptions_tf_entries []AntivirusSecurityProfileDataSourceThreatExceptionsObject
		for _, elt := range obj.ThreatException {
			entry := AntivirusSecurityProfileDataSourceThreatExceptionsObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			threatExceptions_tf_entries = append(threatExceptions_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("threat_exceptions")
		threatExceptions_list, list_diags = types.ListValueFrom(ctx, schemaType, threatExceptions_tf_entries)
		diags.Append(list_diags...)
	}

	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var disableOverride_value types.String
	if obj.DisableOverride != nil {
		disableOverride_value = types.StringValue(*obj.DisableOverride)
	}
	var packetCapture_value types.Bool
	if obj.PacketCapture != nil {
		packetCapture_value = types.BoolValue(*obj.PacketCapture)
	}
	var wfrtHoldMode_value types.Bool
	if obj.WfrtHoldMode != nil {
		wfrtHoldMode_value = types.BoolValue(*obj.WfrtHoldMode)
	}
	o.Name = types.StringValue(obj.Name)
	o.ApplicationExceptions = applicationExceptions_list
	o.Decoders = decoders_list
	o.Description = description_value
	o.DisableOverride = disableOverride_value
	o.MachineLearningModels = machineLearningModels_list
	o.MachineLearningExceptions = machineLearningExceptions_list
	o.PacketCapture = packetCapture_value
	o.ThreatExceptions = threatExceptions_list
	o.WfrtHoldMode = wfrtHoldMode_value

	return diags
}

func (o *AntivirusSecurityProfileDataSourceApplicationExceptionsObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *antivirus.Application, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var action_value types.String
	if obj.Action != nil {
		action_value = types.StringValue(*obj.Action)
	}
	o.Name = types.StringValue(obj.Name)
	o.Action = action_value

	return diags
}

func (o *AntivirusSecurityProfileDataSourceDecodersObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *antivirus.Decoder, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var action_value types.String
	if obj.Action != nil {
		action_value = types.StringValue(*obj.Action)
	}
	var wildfireAction_value types.String
	if obj.WildfireAction != nil {
		wildfireAction_value = types.StringValue(*obj.WildfireAction)
	}
	var mlAction_value types.String
	if obj.MlavAction != nil {
		mlAction_value = types.StringValue(*obj.MlavAction)
	}
	o.Name = types.StringValue(obj.Name)
	o.Action = action_value
	o.WildfireAction = wildfireAction_value
	o.MlAction = mlAction_value

	return diags
}

func (o *AntivirusSecurityProfileDataSourceMachineLearningModelsObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *antivirus.MlavEngineFilebasedEnabled, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var action_value types.String
	if obj.MlavPolicyAction != nil {
		action_value = types.StringValue(*obj.MlavPolicyAction)
	}
	o.Name = types.StringValue(obj.Name)
	o.Action = action_value

	return diags
}

func (o *AntivirusSecurityProfileDataSourceMachineLearningExceptionsObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *antivirus.MlavException, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var filename_value types.String
	if obj.Filename != nil {
		filename_value = types.StringValue(*obj.Filename)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	o.Name = types.StringValue(obj.Name)
	o.Filename = filename_value
	o.Description = description_value

	return diags
}

func (o *AntivirusSecurityProfileDataSourceThreatExceptionsObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *antivirus.ThreatException, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	o.Name = types.StringValue(obj.Name)

	return diags
}

func (o *AntivirusSecurityProfileDataSourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	return components, nil
}

func AntivirusSecurityProfileDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": AntivirusSecurityProfileDataSourceLocationSchema(),

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"application_exceptions": dsschema.ListNestedAttribute{
				Description:  "Application exceptions",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: AntivirusSecurityProfileDataSourceApplicationExceptionsSchema(),
			},

			"decoders": dsschema.ListNestedAttribute{
				Description:  "Protocol decoders",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: AntivirusSecurityProfileDataSourceDecodersSchema(),
			},

			"description": dsschema.StringAttribute{
				Description: "Profile description",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"disable_override": dsschema.StringAttribute{
				Description: "Disable object override in child device groups",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"machine_learning_models": dsschema.ListNestedAttribute{
				Description:  "Machine learning models",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: AntivirusSecurityProfileDataSourceMachineLearningModelsSchema(),
			},

			"machine_learning_exceptions": dsschema.ListNestedAttribute{
				Description:  "Exceptions for ML based file scans.",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: AntivirusSecurityProfileDataSourceMachineLearningExceptionsSchema(),
			},

			"packet_capture": dsschema.BoolAttribute{
				Description: "Enable packet capture",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"threat_exceptions": dsschema.ListNestedAttribute{
				Description:  "Exceptions for specific threats",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: AntivirusSecurityProfileDataSourceThreatExceptionsSchema(),
			},

			"wfrt_hold_mode": dsschema.BoolAttribute{
				Description: "Enable hold mode for WildFire real time signature lookup",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AntivirusSecurityProfileDataSourceModel) getTypeFor(name string) attr.Type {
	schema := AntivirusSecurityProfileDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AntivirusSecurityProfileDataSourceApplicationExceptionsSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"action": dsschema.StringAttribute{
				Description: "Action for application exception. Valid values are: `default` (default), `allow`, `alert`, `drop`, `reset-client`, `reset-server`, or `reset-both`",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AntivirusSecurityProfileDataSourceApplicationExceptionsObject) getTypeFor(name string) attr.Type {
	schema := AntivirusSecurityProfileDataSourceApplicationExceptionsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AntivirusSecurityProfileDataSourceDecodersSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"action": dsschema.StringAttribute{
				Description: "Action for standard antivirus signatures. Valid values are: `default` (default), `allow`, `alert`, `drop`, `reset-client`, `reset-server`, or `reset-both`",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"wildfire_action": dsschema.StringAttribute{
				Description: "Action for signatures generated by the WildFire system. Valid values are: `default` (default), `allow`, `alert`, `drop`, `reset-client`, `reset-server`, or `reset-both`",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ml_action": dsschema.StringAttribute{
				Description: "Action for malicious threats detected in real-time by the WildFire Inline ML models. Valid values are: `default` (default), `allow`, `alert`, `drop`, `reset-client`, `reset-server`, or `reset-both`",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AntivirusSecurityProfileDataSourceDecodersObject) getTypeFor(name string) attr.Type {
	schema := AntivirusSecurityProfileDataSourceDecodersSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AntivirusSecurityProfileDataSourceMachineLearningModelsSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"action": dsschema.StringAttribute{
				Description: "Action for ML model antivirus signatures. Valid values are: `enable`, `enable(alert-only)`, or `disable`",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AntivirusSecurityProfileDataSourceMachineLearningModelsObject) getTypeFor(name string) attr.Type {
	schema := AntivirusSecurityProfileDataSourceMachineLearningModelsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AntivirusSecurityProfileDataSourceMachineLearningExceptionsSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"filename": dsschema.StringAttribute{
				Description: "File name to exclude from enforcement",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"description": dsschema.StringAttribute{
				Description: "Exception description",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AntivirusSecurityProfileDataSourceMachineLearningExceptionsObject) getTypeFor(name string) attr.Type {
	schema := AntivirusSecurityProfileDataSourceMachineLearningExceptionsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AntivirusSecurityProfileDataSourceThreatExceptionsSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},
		},
	}
}

func (o *AntivirusSecurityProfileDataSourceThreatExceptionsObject) getTypeFor(name string) attr.Type {
	schema := AntivirusSecurityProfileDataSourceThreatExceptionsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AntivirusSecurityProfileDataSourceLocationSchema() rsschema.Attribute {
	return AntivirusSecurityProfileLocationSchema()
}

// Metadata returns the data source type name.
func (d *AntivirusSecurityProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_antivirus_security_profile"
}

// Schema defines the schema for this data source.
func (d *AntivirusSecurityProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = AntivirusSecurityProfileDataSourceSchema()
}

// Configure prepares the struct.
func (d *AntivirusSecurityProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	d.client = providerData.Client
	specifier, _, err := antivirus.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	d.manager = sdkmanager.NewEntryObjectManager[*antivirus.Entry, antivirus.Location, *antivirus.Service](d.client, antivirus.NewService(d.client), batchSize, specifier, antivirus.SpecMatches)
}
func (o *AntivirusSecurityProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state AntivirusSecurityProfileDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location antivirus.Location

	{
		var terraformLocation AntivirusSecurityProfileLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &antivirus.SharedLocation{}
			var innerLocation AntivirusSecurityProfileSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &antivirus.DeviceGroupLocation{}
			var innerLocation AntivirusSecurityProfileDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &antivirus.VsysLocation{}
			var innerLocation AntivirusSecurityProfileVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_antivirus_security_profile_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	components, err := savestate.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	object, err := o.manager.Read(ctx, location, components, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, nil, object, ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &AntivirusSecurityProfileResource{}
	_ resource.ResourceWithConfigure   = &AntivirusSecurityProfileResource{}
	_ resource.ResourceWithImportState = &AntivirusSecurityProfileResource{}
)

func NewAntivirusSecurityProfileResource() resource.Resource {
	if _, found := resourceFuncMap["panos_antivirus_security_profile"]; !found {
		resourceFuncMap["panos_antivirus_security_profile"] = resourceFuncs{
			CreateImportId: AntivirusSecurityProfileImportStateCreator,
		}
	}
	return &AntivirusSecurityProfileResource{}
}

type AntivirusSecurityProfileResource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*antivirus.Entry, antivirus.Location, *antivirus.Service]
}

func AntivirusSecurityProfileResourceLocationSchema() rsschema.Attribute {
	return AntivirusSecurityProfileLocationSchema()
}

type AntivirusSecurityProfileResourceModel struct {
	Location                  types.Object `tfsdk:"location"`
	Name                      types.String `tfsdk:"name"`
	ApplicationExceptions     types.List   `tfsdk:"application_exceptions"`
	Decoders                  types.List   `tfsdk:"decoders"`
	Description               types.String `tfsdk:"description"`
	DisableOverride           types.String `tfsdk:"disable_override"`
	MachineLearningModels     types.List   `tfsdk:"machine_learning_models"`
	MachineLearningExceptions types.List   `tfsdk:"machine_learning_exceptions"`
	PacketCapture             types.Bool   `tfsdk:"packet_capture"`
	ThreatExceptions          types.List   `tfsdk:"threat_exceptions"`
	WfrtHoldMode              types.Bool   `tfsdk:"wfrt_hold_mode"`
}
type AntivirusSecurityProfileResourceApplicationExceptionsObject struct {
	Name   types.String `tfsdk:"name"`
	Action types.String `tfsdk:"action"`
}
type AntivirusSecurityProfileResourceDecodersObject struct {
	Name           types.String `tfsdk:"name"`
	Action         types.String `tfsdk:"action"`
	WildfireAction types.String `tfsdk:"wildfire_action"`
	MlAction       types.String `tfsdk:"ml_action"`
}
type AntivirusSecurityProfileResourceMachineLearningModelsObject struct {
	Name   types.String `tfsdk:"name"`
	Action types.String `tfsdk:"action"`
}
type AntivirusSecurityProfileResourceMachineLearningExceptionsObject struct {
	Name        types.String `tfsdk:"name"`
	Filename    types.String `tfsdk:"filename"`
	Description types.String `tfsdk:"description"`
}
type AntivirusSecurityProfileResourceThreatExceptionsObject struct {
	Name types.String `tfsdk:"name"`
}

func (r *AntivirusSecurityProfileResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func AntivirusSecurityProfileResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": AntivirusSecurityProfileResourceLocationSchema(),

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"application_exceptions": rsschema.ListNestedAttribute{
				Description:  "Application exceptions",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: AntivirusSecurityProfileResourceApplicationExceptionsSchema(),
			},

			"decoders": rsschema.ListNestedAttribute{
				Description:  "Protocol decoders",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: AntivirusSecurityProfileResourceDecodersSchema(),
			},

			"description": rsschema.StringAttribute{
				Description: "Profile description",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"disable_override": rsschema.StringAttribute{
				Description: "Disable object override in child device groups",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,

				Validators: []validator.String{
					stringvalidator.OneOf([]string{
						"yes",
						"no",
					}...),
				},
			},

			"machine_learning_models": rsschema.ListNestedAttribute{
				Description:  "Machine learning models",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: AntivirusSecurityProfileResourceMachineLearningModelsSchema(),
			},

			"machine_learning_exceptions": rsschema.ListNestedAttribute{
				Description:  "Exceptions for ML based file scans.",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: AntivirusSecurityProfileResourceMachineLearningExceptionsSchema(),
			},

			"packet_capture": rsschema.BoolAttribute{
				Description: "Enable packet capture",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"threat_exceptions": rsschema.ListNestedAttribute{
				Description:  "Exceptions for specific threats",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: AntivirusSecurityProfileResourceThreatExceptionsSchema(),
			},

			"wfrt_hold_mode": rsschema.BoolAttribute{
				Description: "Enable hold mode for WildFire real time signature lookup",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AntivirusSecurityProfileResourceModel) getTypeFor(name string) attr.Type {
	schema := AntivirusSecurityProfileResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AntivirusSecurityProfileResourceApplicationExceptionsSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"action": rsschema.StringAttribute{
				Description: "Action for application exception. Valid values are: `default` (default), `allow`, `alert`, `drop`, `reset-client`, `reset-server`, or `reset-both`",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("default"),
			},
		},
	}
}

func (o *AntivirusSecurityProfileResourceApplicationExceptionsObject) getTypeFor(name string) attr.Type {
	schema := AntivirusSecurityProfileResourceApplicationExceptionsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AntivirusSecurityProfileResourceDecodersSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"action": rsschema.StringAttribute{
				Description: "Action for standard antivirus signatures. Valid values are: `default` (default), `allow`, `alert`, `drop`, `reset-client`, `reset-server`, or `reset-both`",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("default"),
			},

			"wildfire_action": rsschema.StringAttribute{
				Description: "Action for signatures generated by the WildFire system. Valid values are: `default` (default), `allow`, `alert`, `drop`, `reset-client`, `reset-server`, or `reset-both`",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("default"),
			},

			"ml_action": rsschema.StringAttribute{
				Description: "Action for malicious threats detected in real-time by the WildFire Inline ML models. Valid values are: `default` (default), `allow`, `alert`, `drop`, `reset-client`, `reset-server`, or `reset-both`",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("default"),
			},
		},
	}
}

func (o *AntivirusSecurityProfileResourceDecodersObject) getTypeFor(name string) attr.Type {
	schema := AntivirusSecurityProfileResourceDecodersSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AntivirusSecurityProfileResourceMachineLearningModelsSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"action": rsschema.StringAttribute{
				Description: "Action for ML model antivirus signatures. Valid values are: `enable`, `enable(alert-only)`, or `disable`",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AntivirusSecurityProfileResourceMachineLearningModelsObject) getTypeFor(name string) attr.Type {
	schema := AntivirusSecurityProfileResourceMachineLearningModelsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AntivirusSecurityProfileResourceMachineLearningExceptionsSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"filename": rsschema.StringAttribute{
				Description: "File name to exclude from enforcement",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"description": rsschema.StringAttribute{
				Description: "Exception description",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AntivirusSecurityProfileResourceMachineLearningExceptionsObject) getTypeFor(name string) attr.Type {
	schema := AntivirusSecurityProfileResourceMachineLearningExceptionsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AntivirusSecurityProfileResourceThreatExceptionsSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},
		},
	}
}

func (o *AntivirusSecurityProfileResourceThreatExceptionsObject) getTypeFor(name string) attr.Type {
	schema := AntivirusSecurityProfileResourceThreatExceptionsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *AntivirusSecurityProfileResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_antivirus_security_profile"
}

func (r *AntivirusSecurityProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = AntivirusSecurityProfileResourceSchema()
}

// </ResourceSchema>

func (r *AntivirusSecurityProfileResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	r.client = providerData.Client
	specifier, _, err := antivirus.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	r.manager = sdkmanager.NewEntryObjectManager[*antivirus.Entry, antivirus.Location, *antivirus.Service](r.client, antivirus.NewService(r.client), batchSize, specifier, antivirus.SpecMatches)
}

func (o *AntivirusSecurityProfileResourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj AntivirusSecurityProfileLocation

	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"name":                        types.StringType,
		"application_exceptions":      types.ListType{},
		"decoders":                    types.ListType{},
		"description":                 types.StringType,
		"disable_override":            types.StringType,
		"machine_learning_models":     types.ListType{},
		"machine_learning_exceptions": types.ListType{},
		"packet_capture":              types.BoolType,
		"threat_exceptions":           types.ListType{},
		"wfrt_hold_mode":              types.BoolType,
	}
}

func (o AntivirusSecurityProfileResourceModel) AncestorName() string {
	return ""
}

func (o AntivirusSecurityProfileResourceModel) EntryName() *string {
	return nil
}
func (o *AntivirusSecurityProfileResourceApplicationExceptionsObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":   types.StringType,
		"action": types.StringType,
	}
}

func (o AntivirusSecurityProfileResourceApplicationExceptionsObject) AncestorName() string {
	return "application-exceptions"
}

func (o AntivirusSecurityProfileResourceApplicationExceptionsObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *AntivirusSecurityProfileResourceDecodersObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":            types.StringType,
		"action":          types.StringType,
		"wildfire_action": types.StringType,
		"ml_action":       types.StringType,
	}
}

func (o AntivirusSecurityProfileResourceDecodersObject) AncestorName() string {
	return "decoders"
}

func (o AntivirusSecurityProfileResourceDecodersObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *AntivirusSecurityProfileResourceMachineLearningModelsObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":   types.StringType,
		"action": types.StringType,
	}
}

func (o AntivirusSecurityProfileResourceMachineLearningModelsObject) AncestorName() string {
	return "machine-learning-models"
}

func (o AntivirusSecurityProfileResourceMachineLearningModelsObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *AntivirusSecurityProfileResourceMachineLearningExceptionsObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":        types.StringType,
		"filename":    types.StringType,
		"description": types.StringType,
	}
}

func (o AntivirusSecurityProfileResourceMachineLearningExceptionsObject) AncestorName() string {
	return "machine-learning-exceptions"
}

func (o AntivirusSecurityProfileResourceMachineLearningExceptionsObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *AntivirusSecurityProfileResourceThreatExceptionsObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name": types.StringType,
	}
}

func (o AntivirusSecurityProfileResourceThreatExceptionsObject) AncestorName() string {
	return "threat-exceptions"
}

func (o AntivirusSecurityProfileResourceThreatExceptionsObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}

func (o *AntivirusSecurityProfileResourceModel) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **antivirus.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var applicationExceptions_tf_entries []AntivirusSecurityProfileResourceApplicationExceptionsObject
	var applicationExceptions_pango_entries []antivirus.Application
	{
		d := o.ApplicationExceptions.ElementsAs(ctx, &applicationExceptions_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range applicationExceptions_tf_entries {
			var entry *antivirus.Application
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			applicationExceptions_pango_entries = append(applicationExceptions_pango_entries, *entry)
		}
	}
	var decoders_tf_entries []AntivirusSecurityProfileResourceDecodersObject
	var decoders_pango_entries []antivirus.Decoder
	{
		d := o.Decoders.ElementsAs(ctx, &decoders_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range decoders_tf_entries {
			var entry *antivirus.Decoder
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			decoders_pango_entries = append(decoders_pango_entries, *entry)
		}
	}
	description_value := o.Description.ValueStringPointer()
	disableOverride_value := o.DisableOverride.ValueStringPointer()
	var machineLearningModels_tf_entries []AntivirusSecurityProfileResourceMachineLearningModelsObject
	var machineLearningModels_pango_entries []antivirus.MlavEngineFilebasedEnabled
	{
		d := o.MachineLearningModels.ElementsAs(ctx, &machineLearningModels_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range machineLearningModels_tf_entries {
			var entry *antivirus.MlavEngineFilebasedEnabled
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			machineLearningModels_pango_entries = append(machineLearningModels_pango_entries, *entry)
		}
	}
	var machineLearningExceptions_tf_entries []AntivirusSecurityProfileResourceMachineLearningExceptionsObject
	var machineLearningExceptions_pango_entries []antivirus.MlavException
	{
		d := o.MachineLearningExceptions.ElementsAs(ctx, &machineLearningExceptions_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range machineLearningExceptions_tf_entries {
			var entry *antivirus.MlavException
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			machineLearningExceptions_pango_entries = append(machineLearningExceptions_pango_entries, *entry)
		}
	}
	packetCapture_value := o.PacketCapture.ValueBoolPointer()
	var threatExceptions_tf_entries []AntivirusSecurityProfileResourceThreatExceptionsObject
	var threatExceptions_pango_entries []antivirus.ThreatException
	{
		d := o.ThreatExceptions.ElementsAs(ctx, &threatExceptions_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range threatExceptions_tf_entries {
			var entry *antivirus.ThreatException
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			threatExceptions_pango_entries = append(threatExceptions_pango_entries, *entry)
		}
	}
	wfrtHoldMode_value := o.WfrtHoldMode.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(antivirus.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Application = applicationExceptions_pango_entries
	(*obj).Decoder = decoders_pango_entries
	(*obj).Description = description_value
	(*obj).DisableOverride = disableOverride_value
	(*obj).MlavEngineFilebasedEnabled = machineLearningModels_pango_entries
	(*obj).MlavException = machineLearningExceptions_pango_entries
	(*obj).PacketCapture = packetCapture_value
	(*obj).ThreatException = threatExceptions_pango_entries
	(*obj).WfrtHoldMode = wfrtHoldMode_value

	return diags
}
func (o *AntivirusSecurityProfileResourceApplicationExceptionsObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **antivirus.Application, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	action_value := o.Action.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(antivirus.Application)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Action = action_value

	return diags
}
func (o *AntivirusSecurityProfileResourceDecodersObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **antivirus.Decoder, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	action_value := o.Action.ValueStringPointer()
	wildfireAction_value := o.WildfireAction.ValueStringPointer()
	mlAction_value := o.MlAction.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(antivirus.Decoder)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Action = action_value
	(*obj).WildfireAction = wildfireAction_value
	(*obj).MlavAction = mlAction_value

	return diags
}
func (o *AntivirusSecurityProfileResourceMachineLearningModelsObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **antivirus.MlavEngineFilebasedEnabled, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	action_value := o.Action.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(antivirus.MlavEngineFilebasedEnabled)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).MlavPolicyAction = action_value

	return diags
}
func (o *AntivirusSecurityProfileResourceMachineLearningExceptionsObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **antivirus.MlavException, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	filename_value := o.Filename.ValueStringPointer()
	description_value := o.Description.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(antivirus.MlavException)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Filename = filename_value
	(*obj).Description = description_value

	return diags
}
func (o *AntivirusSecurityProfileResourceThreatExceptionsObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **antivirus.ThreatException, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(antivirus.ThreatException)
	}
	(*obj).Name = o.Name.ValueString()

	return diags
}

func (o *AntivirusSecurityProfileResourceModel) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *antivirus.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var applicationExceptions_list types.List
	{
		var applicationExceptions_tf_entries []AntivirusSecurityProfileResourceApplicationExceptionsObject
		for _, elt := range obj.Application {
			entry := AntivirusSecurityProfileResourceApplicationExceptionsObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			applicationExceptions_tf_entries = append(applicationExceptions_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("application_exceptions")
		applicationExceptions_list, list_diags = types.ListValueFrom(ctx, schemaType, applicationExceptions_tf_entries)
		diags.Append(list_diags...)
	}
	var decoders_list types.List
	{
		var decoders_tf_entries []AntivirusSecurityProfileResourceDecodersObject
		for _, elt := range obj.Decoder {
			entry := AntivirusSecurityProfileResourceDecodersObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			decoders_tf_entries = append(decoders_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("decoders")
		decoders_list, list_diags = types.ListValueFrom(ctx, schemaType, decoders_tf_entries)
		diags.Append(list_diags...)
	}
	var machineLearningModels_list types.List
	{
		var machineLearningModels_tf_entries []AntivirusSecurityProfileResourceMachineLearningModelsObject
		for _, elt := range obj.MlavEngineFilebasedEnabled {
			entry := AntivirusSecurityProfileResourceMachineLearningModelsObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			machineLearningModels_tf_entries = append(machineLearningModels_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("machine_learning_models")
		machineLearningModels_list, list_diags = types.ListValueFrom(ctx, schemaType, machineLearningModels_tf_entries)
		diags.Append(list_diags...)
	}
	var machineLearningExceptions_list types.List
	{
		var machineLearningExceptions_tf_entries []AntivirusSecurityProfileResourceMachineLearningExceptionsObject
		for _, elt := range obj.MlavException {
			entry := AntivirusSecurityProfileResourceMachineLearningExceptionsObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			machineLearningExceptions_tf_entries = append(machineLearningExceptions_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("machine_learning_exceptions")
		machineLearningExceptions_list, list_diags = types.ListValueFrom(ctx, schemaType, machineLearningExceptions_tf_entries)
		diags.Append(list_diags...)
	}
	var threatExceptions_list types.List
	{
		var threatExceptions_tf_entries []AntivirusSecurityProfileResourceThreatExceptionsObject
		for _, elt := range obj.ThreatException {
			entry := AntivirusSecurityProfileResourceThreatExceptionsObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			threatExceptions_tf_entries = append(threatExceptions_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("threat_exceptions")
		threatExceptions_list, list_diags = types.ListValueFrom(ctx, schemaType, threatExceptions_tf_entries)
		diags.Append(list_diags...)
	}

	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var disableOverride_value types.String
	if obj.DisableOverride != nil {
		disableOverride_value = types.StringValue(*obj.DisableOverride)
	}
	var packetCapture_value types.Bool
	if obj.PacketCapture != nil {
		packetCapture_value = types.BoolValue(*obj.PacketCapture)
	}
	var wfrtHoldMode_value types.Bool
	if obj.WfrtHoldMode != nil {
		wfrtHoldMode_value = types.BoolValue(*obj.WfrtHoldMode)
	}
	o.Name = types.StringValue(obj.Name)
	o.ApplicationExceptions = applicationExceptions_list
	o.Decoders = decoders_list
	o.Description = description_value
	o.DisableOverride = disableOverride_value
	o.MachineLearningModels = machineLearningModels_list
	o.MachineLearningExceptions = machineLearningExceptions_list
	o.PacketCapture = packetCapture_value
	o.ThreatExceptions = threatExceptions_list
	o.WfrtHoldMode = wfrtHoldMode_value

	return diags
}

func (o *AntivirusSecurityProfileResourceApplicationExceptionsObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *antivirus.Application, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var action_value types.String
	if obj.Action != nil {
		action_value = types.StringValue(*obj.Action)
	}
	o.Name = types.StringValue(obj.Name)
	o.Action = action_value

	return diags
}

func (o *AntivirusSecurityProfileResourceDecodersObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *antivirus.Decoder, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var action_value types.String
	if obj.Action != nil {
		action_value = types.StringValue(*obj.Action)
	}
	var wildfireAction_value types.String
	if obj.WildfireAction != nil {
		wildfireAction_value = types.StringValue(*obj.WildfireAction)
	}
	var mlAction_value types.String
	if obj.MlavAction != nil {
		mlAction_value = types.StringValue(*obj.MlavAction)
	}
	o.Name = types.StringValue(obj.Name)
	o.Action = action_value
	o.WildfireAction = wildfireAction_value
	o.MlAction = mlAction_value

	return diags
}

func (o *AntivirusSecurityProfileResourceMachineLearningModelsObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *antivirus.MlavEngineFilebasedEnabled, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var action_value types.String
	if obj.MlavPolicyAction != nil {
		action_value = types.StringValue(*obj.MlavPolicyAction)
	}
	o.Name = types.StringValue(obj.Name)
	o.Action = action_value

	return diags
}

func (o *AntivirusSecurityProfileResourceMachineLearningExceptionsObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *antivirus.MlavException, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var filename_value types.String
	if obj.Filename != nil {
		filename_value = types.StringValue(*obj.Filename)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	o.Name = types.StringValue(obj.Name)
	o.Filename = filename_value
	o.Description = description_value

	return diags
}

func (o *AntivirusSecurityProfileResourceThreatExceptionsObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *antivirus.ThreatException, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	o.Name = types.StringValue(obj.Name)

	return diags
}

func (o *AntivirusSecurityProfileResourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	return components, nil
}

func (r *AntivirusSecurityProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state AntivirusSecurityProfileResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_antivirus_security_profile_resource",
		"function":      "Create",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	// Determine the location.

	var location antivirus.Location

	{
		var terraformLocation AntivirusSecurityProfileLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &antivirus.SharedLocation{}
			var innerLocation AntivirusSecurityProfileSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &antivirus.DeviceGroupLocation{}
			var innerLocation AntivirusSecurityProfileDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &antivirus.VsysLocation{}
			var innerLocation AntivirusSecurityProfileVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}
	}

	if err := location.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *antivirus.Entry
	resp.Diagnostics.Append(state.CopyToPango(ctx, nil, &obj, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	created, err := r.manager.Create(ctx, location, components, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	resp.Diagnostics.Append(state.CopyFromPango(ctx, nil, created, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
func (o *AntivirusSecurityProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state AntivirusSecurityProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	encryptedValues, diags := req.Private.GetKey(ctx, "encrypted_values")
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location antivirus.Location

	{
		var terraformLocation AntivirusSecurityProfileLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &antivirus.SharedLocation{}
			var innerLocation AntivirusSecurityProfileSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &antivirus.DeviceGroupLocation{}
			var innerLocation AntivirusSecurityProfileDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &antivirus.VsysLocation{}
			var innerLocation AntivirusSecurityProfileVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_antivirus_security_profile_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	components, err := savestate.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	object, err := o.manager.Read(ctx, location, components, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, nil, object, ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *AntivirusSecurityProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state AntivirusSecurityProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	encryptedValues, diags := req.Private.GetKey(ctx, "encrypted_values")
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location antivirus.Location

	{
		var terraformLocation AntivirusSecurityProfileLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &antivirus.SharedLocation{}
			var innerLocation AntivirusSecurityProfileSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &antivirus.DeviceGroupLocation{}
			var innerLocation AntivirusSecurityProfileDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &antivirus.VsysLocation{}
			var innerLocation AntivirusSecurityProfileVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_antivirus_security_profile_resource",
		"function":      "Update",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	obj, err := r.manager.Read(ctx, location, components, plan.Name.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, nil, &obj, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	components, err = plan.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}

	updated, err := r.manager.Update(ctx, location, components, obj, obj.Name)

	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	copy_diags := state.CopyFromPango(ctx, nil, updated, ev)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *AntivirusSecurityProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state AntivirusSecurityProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_antivirus_security_profile_resource",
		"function":      "Delete",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var location antivirus.Location

	{
		var terraformLocation AntivirusSecurityProfileLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &antivirus.SharedLocation{}
			var innerLocation AntivirusSecurityProfileSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &antivirus.DeviceGroupLocation{}
			var innerLocation AntivirusSecurityProfileDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &antivirus.VsysLocation{}
			var innerLocation AntivirusSecurityProfileVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	err = r.manager.Delete(ctx, location, components, []string{state.Name.ValueString()})
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
		return
	}

}

type AntivirusSecurityProfileImportState struct {
	Location types.Object `json:"location"`
	Name     types.String `json:"name"`
}

func (o AntivirusSecurityProfileImportState) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Location *AntivirusSecurityProfileLocation `json:"location"`
		Name     *string                           `json:"name"`
	}
	var location_object *AntivirusSecurityProfileLocation
	{
		diags := o.Location.As(context.TODO(), &location_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal location into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Location: location_object,
		Name:     o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *AntivirusSecurityProfileImportState) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Location *AntivirusSecurityProfileLocation `json:"location"`
		Name     *string                           `json:"name"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var location_object types.Object
	{
		var diags_tmp diag.Diagnostics
		location_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Location.AttributeTypes(), shadow.Location)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into location", diags_tmp.Errors())
		}
	}
	o.Location = location_object
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}

func AntivirusSecurityProfileImportStateCreator(ctx context.Context, resource types.Object) ([]byte, error) {
	attrs := resource.Attributes()
	if attrs == nil {
		return nil, fmt.Errorf("Object has no attributes")
	}

	locationAttr, ok := attrs["location"]
	if !ok {
		return nil, fmt.Errorf("location attribute missing")
	}

	var location types.Object
	switch value := locationAttr.(type) {
	case types.Object:
		location = value
	default:
		return nil, fmt.Errorf("location attribute expected to be an object")
	}
	nameAttr, ok := attrs["name"]
	if !ok {
		return nil, fmt.Errorf("name attribute missing")
	}

	var name types.String
	switch value := nameAttr.(type) {
	case types.String:
		name = value
	default:
		return nil, fmt.Errorf("name attribute expected to be a string")
	}

	importStruct := AntivirusSecurityProfileImportState{
		Location: location,
		Name:     name,
	}

	return json.Marshal(importStruct)
}

func (r *AntivirusSecurityProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	var obj AntivirusSecurityProfileImportState
	data, err := base64.StdEncoding.DecodeString(req.ID)
	if err != nil {
		resp.Diagnostics.AddError("Failed to decode Import ID", err.Error())
		return
	}

	err = json.Unmarshal(data, &obj)
	if err != nil {
		var diagsErr *DiagnosticsError
		if errors.As(err, &diagsErr) {
			resp.Diagnostics.Append(diagsErr.Diagnostics()...)
		} else {
			resp.Diagnostics.AddError("Failed to unmarshal Import ID", err.Error())
		}
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("location"), obj.Location)...)
	if resp.Diagnostics.HasError() {
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("name"), obj.Name)...)
}

type AntivirusSecurityProfileSharedLocation struct {
}
type AntivirusSecurityProfileDeviceGroupLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
}
type AntivirusSecurityProfileVsysLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
	Name       types.String `tfsdk:"name"`
}
type AntivirusSecurityProfileLocation struct {
	Shared      types.Object `tfsdk:"shared"`
	DeviceGroup types.Object `tfsdk:"device_group"`
	Vsys        types.Object `tfsdk:"vsys"`
}

func AntivirusSecurityProfileLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"shared": rsschema.SingleNestedAttribute{
				Description: "Panorama shared object",
				Optional:    true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("shared"),
						path.MatchRelative().AtParent().AtName("device_group"),
						path.MatchRelative().AtParent().AtName("vsys"),
					}...),
				},
			},
			"device_group": rsschema.SingleNestedAttribute{
				Description: "Located in a specific Device Group",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Panorama device name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Device Group name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific Virtual System",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The Virtual System name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o AntivirusSecurityProfileSharedLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
	}

	obj := shadow{}

	return json.Marshal(obj)
}

func (o *AntivirusSecurityProfileSharedLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}

	return nil
}
func (o AntivirusSecurityProfileDeviceGroupLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *AntivirusSecurityProfileDeviceGroupLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o AntivirusSecurityProfileVsysLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
		Name       *string `json:"name,omitempty"`
	}

	obj := shadow{
		NgfwDevice: o.NgfwDevice.ValueStringPointer(),
		Name:       o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *AntivirusSecurityProfileVsysLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
		Name       *string `json:"name,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o AntivirusSecurityProfileLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Shared      *AntivirusSecurityProfileSharedLocation      `json:"shared,omitempty"`
		DeviceGroup *AntivirusSecurityProfileDeviceGroupLocation `json:"device_group,omitempty"`
		Vsys        *AntivirusSecurityProfileVsysLocation        `json:"vsys,omitempty"`
	}
	var shared_object *AntivirusSecurityProfileSharedLocation
	{
		diags := o.Shared.As(context.TODO(), &shared_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal shared into JSON document", diags.Errors())
		}
	}
	var deviceGroup_object *AntivirusSecurityProfileDeviceGroupLocation
	{
		diags := o.DeviceGroup.As(context.TODO(), &deviceGroup_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal device_group into JSON document", diags.Errors())
		}
	}
	var vsys_object *AntivirusSecurityProfileVsysLocation
	{
		diags := o.Vsys.As(context.TODO(), &vsys_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal vsys into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Shared:      shared_object,
		DeviceGroup: deviceGroup_object,
		Vsys:        vsys_object,
	}

	return json.Marshal(obj)
}

func (o *AntivirusSecurityProfileLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Shared      *AntivirusSecurityProfileSharedLocation      `json:"shared,omitempty"`
		DeviceGroup *AntivirusSecurityProfileDeviceGroupLocation `json:"device_group,omitempty"`
		Vsys        *AntivirusSecurityProfileVsysLocation        `json:"vsys,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var shared_object types.Object
	{
		var diags_tmp diag.Diagnostics
		shared_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Shared.AttributeTypes(), shadow.Shared)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into shared", diags_tmp.Errors())
		}
	}
	var deviceGroup_object types.Object
	{
		var diags_tmp diag.Diagnostics
		deviceGroup_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.DeviceGroup.AttributeTypes(), shadow.DeviceGroup)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into device_group", diags_tmp.Errors())
		}
	}
	var vsys_object types.Object
	{
		var diags_tmp diag.Diagnostics
		vsys_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Vsys.AttributeTypes(), shadow.Vsys)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into vsys", diags_tmp.Errors())
		}
	}
	o.Shared = shared_object
	o.DeviceGroup = deviceGroup_object
	o.Vsys = vsys_object

	return nil
}

func (o *AntivirusSecurityProfileSharedLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}
func (o *AntivirusSecurityProfileDeviceGroupLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
	}
}
func (o *AntivirusSecurityProfileVsysLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"ngfw_device": types.StringType,
		"name":        types.StringType,
	}
}
func (o *AntivirusSecurityProfileLocation) AttributeTypes() map[string]attr.Type {
	var sharedObj AntivirusSecurityProfileSharedLocation
	var deviceGroupObj AntivirusSecurityProfileDeviceGroupLocation
	var vsysObj AntivirusSecurityProfileVsysLocation
	return map[string]attr.Type{
		"shared": types.ObjectType{
			AttrTypes: sharedObj.AttributeTypes(),
		},
		"device_group": types.ObjectType{
			AttrTypes: deviceGroupObj.AttributeTypes(),
		},
		"vsys": types.ObjectType{
			AttrTypes: vsysObj.AttributeTypes(),
		},
	}
}
