package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/device/certificate"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &CertificateDataSource{}
	_ datasource.DataSourceWithConfigure = &CertificateDataSource{}
)

func NewCertificateDataSource() datasource.DataSource {
	return &CertificateDataSource{}
}

type CertificateDataSource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*certificate.Entry, certificate.Location, *certificate.Service]
}

type CertificateDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type CertificateDataSourceModel struct {
	Location        types.Object                                `tfsdk:"location"`
	Name            types.String                                `tfsdk:"name"`
	Algorithm       types.String                                `tfsdk:"algorithm"`
	Ca              types.Bool                                  `tfsdk:"ca"`
	ExpiryEpoch     types.String                                `tfsdk:"expiry_epoch"`
	Issuer          types.String                                `tfsdk:"issuer"`
	IssuerHash      types.String                                `tfsdk:"issuer_hash"`
	NotValidAfter   types.String                                `tfsdk:"not_valid_after"`
	NotValidBefore  types.String                                `tfsdk:"not_valid_before"`
	RevokeDateEpoch types.String                                `tfsdk:"revoke_date_epoch"`
	Status          types.String                                `tfsdk:"status"`
	Subject         types.String                                `tfsdk:"subject"`
	SubjectHash     types.String                                `tfsdk:"subject_hash"`
	CloudResourceId *CertificateDataSourceCloudResourceIdObject `tfsdk:"cloud_resource_id"`
	CommonName      types.String                                `tfsdk:"common_name"`
	Csr             types.String                                `tfsdk:"csr"`
	PrivateKey      types.String                                `tfsdk:"private_key"`
	PrivateKeyOnHsm types.Bool                                  `tfsdk:"private_key_on_hsm"`
	PublicKey       types.String                                `tfsdk:"public_key"`
}
type CertificateDataSourceCloudResourceIdObject struct {
	Aws   *CertificateDataSourceCloudResourceIdAwsObject   `tfsdk:"aws"`
	Azure *CertificateDataSourceCloudResourceIdAzureObject `tfsdk:"azure"`
}
type CertificateDataSourceCloudResourceIdAwsObject struct {
	Secret types.String `tfsdk:"secret"`
}
type CertificateDataSourceCloudResourceIdAzureObject struct {
	KeyVaultUri types.String `tfsdk:"key_vault_uri"`
	Secret      types.String `tfsdk:"secret"`
}

func (o *CertificateDataSourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj CertificateLocation

	var cloudResourceIdObj *CertificateDataSourceCloudResourceIdObject

	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"name":              types.StringType,
		"algorithm":         types.StringType,
		"ca":                types.BoolType,
		"expiry_epoch":      types.StringType,
		"issuer":            types.StringType,
		"issuer_hash":       types.StringType,
		"not_valid_after":   types.StringType,
		"not_valid_before":  types.StringType,
		"revoke_date_epoch": types.StringType,
		"status":            types.StringType,
		"subject":           types.StringType,
		"subject_hash":      types.StringType,
		"cloud_resource_id": types.ObjectType{
			AttrTypes: cloudResourceIdObj.AttributeTypes(),
		},
		"common_name":        types.StringType,
		"csr":                types.StringType,
		"private_key":        types.StringType,
		"private_key_on_hsm": types.BoolType,
		"public_key":         types.StringType,
	}
}

func (o CertificateDataSourceModel) AncestorName() string {
	return ""
}

func (o CertificateDataSourceModel) EntryName() *string {
	return nil
}
func (o *CertificateDataSourceCloudResourceIdObject) AttributeTypes() map[string]attr.Type {

	var awsObj *CertificateDataSourceCloudResourceIdAwsObject

	var azureObj *CertificateDataSourceCloudResourceIdAzureObject
	return map[string]attr.Type{
		"aws": types.ObjectType{
			AttrTypes: awsObj.AttributeTypes(),
		},
		"azure": types.ObjectType{
			AttrTypes: azureObj.AttributeTypes(),
		},
	}
}

func (o CertificateDataSourceCloudResourceIdObject) AncestorName() string {
	return "cloud-resource-id"
}

func (o CertificateDataSourceCloudResourceIdObject) EntryName() *string {
	return nil
}
func (o *CertificateDataSourceCloudResourceIdAwsObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"secret": types.StringType,
	}
}

func (o CertificateDataSourceCloudResourceIdAwsObject) AncestorName() string {
	return "aws"
}

func (o CertificateDataSourceCloudResourceIdAwsObject) EntryName() *string {
	return nil
}
func (o *CertificateDataSourceCloudResourceIdAzureObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"key_vault_uri": types.StringType,
		"secret":        types.StringType,
	}
}

func (o CertificateDataSourceCloudResourceIdAzureObject) AncestorName() string {
	return "azure"
}

func (o CertificateDataSourceCloudResourceIdAzureObject) EntryName() *string {
	return nil
}

func (o *CertificateDataSourceModel) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **certificate.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	algorithm_value := o.Algorithm.ValueStringPointer()
	ca_value := o.Ca.ValueBoolPointer()
	expiryEpoch_value := o.ExpiryEpoch.ValueStringPointer()
	issuer_value := o.Issuer.ValueStringPointer()
	issuerHash_value := o.IssuerHash.ValueStringPointer()
	notValidAfter_value := o.NotValidAfter.ValueStringPointer()
	notValidBefore_value := o.NotValidBefore.ValueStringPointer()
	revokeDateEpoch_value := o.RevokeDateEpoch.ValueStringPointer()
	status_value := o.Status.ValueStringPointer()
	subject_value := o.Subject.ValueStringPointer()
	subjectHash_value := o.SubjectHash.ValueStringPointer()
	var cloudResourceId_entry *certificate.CloudResourceId
	if o.CloudResourceId != nil {
		if *obj != nil && (*obj).CloudResourceId != nil {
			cloudResourceId_entry = (*obj).CloudResourceId
		} else {
			cloudResourceId_entry = new(certificate.CloudResourceId)
		}
		// ModelOrObject: Model
		diags.Append(o.CloudResourceId.CopyToPango(ctx, ancestors, &cloudResourceId_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	commonName_value := o.CommonName.ValueStringPointer()
	csr_value := o.Csr.ValueStringPointer()
	privateKey_value := o.PrivateKey.ValueStringPointer()
	privateKeyOnHsm_value := o.PrivateKeyOnHsm.ValueBoolPointer()
	publicKey_value := o.PublicKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(certificate.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Algorithm = algorithm_value
	(*obj).Ca = ca_value
	(*obj).ExpiryEpoch = expiryEpoch_value
	(*obj).Issuer = issuer_value
	(*obj).IssuerHash = issuerHash_value
	(*obj).NotValidAfter = notValidAfter_value
	(*obj).NotValidBefore = notValidBefore_value
	(*obj).RevokeDateEpoch = revokeDateEpoch_value
	(*obj).Status = status_value
	(*obj).Subject = subject_value
	(*obj).SubjectHash = subjectHash_value
	(*obj).CloudResourceId = cloudResourceId_entry
	(*obj).CommonName = commonName_value
	(*obj).Csr = csr_value
	(*obj).PrivateKey = privateKey_value
	(*obj).PrivateKeyOnHsm = privateKeyOnHsm_value
	(*obj).PublicKey = publicKey_value

	return diags
}
func (o *CertificateDataSourceCloudResourceIdObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **certificate.CloudResourceId, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var aws_entry *certificate.CloudResourceIdAws
	if o.Aws != nil {
		if *obj != nil && (*obj).Aws != nil {
			aws_entry = (*obj).Aws
		} else {
			aws_entry = new(certificate.CloudResourceIdAws)
		}
		// ModelOrObject: Object
		diags.Append(o.Aws.CopyToPango(ctx, append(ancestors, o), &aws_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var azure_entry *certificate.CloudResourceIdAzure
	if o.Azure != nil {
		if *obj != nil && (*obj).Azure != nil {
			azure_entry = (*obj).Azure
		} else {
			azure_entry = new(certificate.CloudResourceIdAzure)
		}
		// ModelOrObject: Object
		diags.Append(o.Azure.CopyToPango(ctx, append(ancestors, o), &azure_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(certificate.CloudResourceId)
	}
	(*obj).Aws = aws_entry
	(*obj).Azure = azure_entry

	return diags
}
func (o *CertificateDataSourceCloudResourceIdAwsObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **certificate.CloudResourceIdAws, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	secret_value := o.Secret.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(certificate.CloudResourceIdAws)
	}
	(*obj).Secret = secret_value

	return diags
}
func (o *CertificateDataSourceCloudResourceIdAzureObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **certificate.CloudResourceIdAzure, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	keyVaultUri_value := o.KeyVaultUri.ValueStringPointer()
	secret_value := o.Secret.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(certificate.CloudResourceIdAzure)
	}
	(*obj).KeyVaultUri = keyVaultUri_value
	(*obj).Secret = secret_value

	return diags
}

func (o *CertificateDataSourceModel) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *certificate.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var cloudResourceId_object *CertificateDataSourceCloudResourceIdObject
	if obj.CloudResourceId != nil {
		cloudResourceId_object = new(CertificateDataSourceCloudResourceIdObject)
		diags.Append(cloudResourceId_object.CopyFromPango(ctx, ancestors, obj.CloudResourceId, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var algorithm_value types.String
	if obj.Algorithm != nil {
		algorithm_value = types.StringValue(*obj.Algorithm)
	}
	var ca_value types.Bool
	if obj.Ca != nil {
		ca_value = types.BoolValue(*obj.Ca)
	}
	var expiryEpoch_value types.String
	if obj.ExpiryEpoch != nil {
		expiryEpoch_value = types.StringValue(*obj.ExpiryEpoch)
	}
	var issuer_value types.String
	if obj.Issuer != nil {
		issuer_value = types.StringValue(*obj.Issuer)
	}
	var issuerHash_value types.String
	if obj.IssuerHash != nil {
		issuerHash_value = types.StringValue(*obj.IssuerHash)
	}
	var notValidAfter_value types.String
	if obj.NotValidAfter != nil {
		notValidAfter_value = types.StringValue(*obj.NotValidAfter)
	}
	var notValidBefore_value types.String
	if obj.NotValidBefore != nil {
		notValidBefore_value = types.StringValue(*obj.NotValidBefore)
	}
	var revokeDateEpoch_value types.String
	if obj.RevokeDateEpoch != nil {
		revokeDateEpoch_value = types.StringValue(*obj.RevokeDateEpoch)
	}
	var status_value types.String
	if obj.Status != nil {
		status_value = types.StringValue(*obj.Status)
	}
	var subject_value types.String
	if obj.Subject != nil {
		subject_value = types.StringValue(*obj.Subject)
	}
	var subjectHash_value types.String
	if obj.SubjectHash != nil {
		subjectHash_value = types.StringValue(*obj.SubjectHash)
	}
	var commonName_value types.String
	if obj.CommonName != nil {
		commonName_value = types.StringValue(*obj.CommonName)
	}
	var csr_value types.String
	if obj.Csr != nil {
		csr_value = types.StringValue(*obj.Csr)
	}
	var privateKey_value types.String
	if obj.PrivateKey != nil {
		privateKey_value = types.StringValue(*obj.PrivateKey)
	}
	var privateKeyOnHsm_value types.Bool
	if obj.PrivateKeyOnHsm != nil {
		privateKeyOnHsm_value = types.BoolValue(*obj.PrivateKeyOnHsm)
	}
	var publicKey_value types.String
	if obj.PublicKey != nil {
		publicKey_value = types.StringValue(*obj.PublicKey)
	}
	o.Name = types.StringValue(obj.Name)
	o.Algorithm = algorithm_value
	o.Ca = ca_value
	o.ExpiryEpoch = expiryEpoch_value
	o.Issuer = issuer_value
	o.IssuerHash = issuerHash_value
	o.NotValidAfter = notValidAfter_value
	o.NotValidBefore = notValidBefore_value
	o.RevokeDateEpoch = revokeDateEpoch_value
	o.Status = status_value
	o.Subject = subject_value
	o.SubjectHash = subjectHash_value
	o.CloudResourceId = cloudResourceId_object
	o.CommonName = commonName_value
	o.Csr = csr_value
	o.PrivateKey = privateKey_value
	o.PrivateKeyOnHsm = privateKeyOnHsm_value
	o.PublicKey = publicKey_value

	return diags
}

func (o *CertificateDataSourceCloudResourceIdObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *certificate.CloudResourceId, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var aws_object *CertificateDataSourceCloudResourceIdAwsObject
	if obj.Aws != nil {
		aws_object = new(CertificateDataSourceCloudResourceIdAwsObject)
		diags.Append(aws_object.CopyFromPango(ctx, append(ancestors, o), obj.Aws, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var azure_object *CertificateDataSourceCloudResourceIdAzureObject
	if obj.Azure != nil {
		azure_object = new(CertificateDataSourceCloudResourceIdAzureObject)
		diags.Append(azure_object.CopyFromPango(ctx, append(ancestors, o), obj.Azure, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Aws = aws_object
	o.Azure = azure_object

	return diags
}

func (o *CertificateDataSourceCloudResourceIdAwsObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *certificate.CloudResourceIdAws, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var secret_value types.String
	if obj.Secret != nil {
		secret_value = types.StringValue(*obj.Secret)
	}
	o.Secret = secret_value

	return diags
}

func (o *CertificateDataSourceCloudResourceIdAzureObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *certificate.CloudResourceIdAzure, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var keyVaultUri_value types.String
	if obj.KeyVaultUri != nil {
		keyVaultUri_value = types.StringValue(*obj.KeyVaultUri)
	}
	var secret_value types.String
	if obj.Secret != nil {
		secret_value = types.StringValue(*obj.Secret)
	}
	o.KeyVaultUri = keyVaultUri_value
	o.Secret = secret_value

	return diags
}

func (o *CertificateDataSourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	return components, nil
}

func CertificateDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": CertificateDataSourceLocationSchema(),

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"algorithm": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ca": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"expiry_epoch": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"issuer": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"issuer_hash": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"not_valid_after": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"not_valid_before": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"revoke_date_epoch": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"status": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"subject": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"subject_hash": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"cloud_resource_id": CertificateDataSourceCloudResourceIdSchema(),

			"common_name": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"csr": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"private_key": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"private_key_on_hsm": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"public_key": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *CertificateDataSourceModel) getTypeFor(name string) attr.Type {
	schema := CertificateDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func CertificateDataSourceCloudResourceIdSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"aws": CertificateDataSourceCloudResourceIdAwsSchema(),

			"azure": CertificateDataSourceCloudResourceIdAzureSchema(),
		},
	}
}

func (o *CertificateDataSourceCloudResourceIdObject) getTypeFor(name string) attr.Type {
	schema := CertificateDataSourceCloudResourceIdSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func CertificateDataSourceCloudResourceIdAwsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("aws"),
				path.MatchRelative().AtParent().AtName("azure"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"secret": dsschema.StringAttribute{
				Description: "Cloud Secret Name",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *CertificateDataSourceCloudResourceIdAwsObject) getTypeFor(name string) attr.Type {
	schema := CertificateDataSourceCloudResourceIdAwsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func CertificateDataSourceCloudResourceIdAzureSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("aws"),
				path.MatchRelative().AtParent().AtName("azure"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"key_vault_uri": dsschema.StringAttribute{
				Description: "Azure Key Vault URI",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"secret": dsschema.StringAttribute{
				Description: "Cloud Secret Name",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *CertificateDataSourceCloudResourceIdAzureObject) getTypeFor(name string) attr.Type {
	schema := CertificateDataSourceCloudResourceIdAzureSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func CertificateDataSourceLocationSchema() rsschema.Attribute {
	return CertificateLocationSchema()
}

// Metadata returns the data source type name.
func (d *CertificateDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_certificate"
}

// Schema defines the schema for this data source.
func (d *CertificateDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = CertificateDataSourceSchema()
}

// Configure prepares the struct.
func (d *CertificateDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	d.client = providerData.Client
	specifier, _, err := certificate.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	d.manager = sdkmanager.NewEntryObjectManager[*certificate.Entry, certificate.Location, *certificate.Service](d.client, certificate.NewService(d.client), batchSize, specifier, certificate.SpecMatches)
}
func (o *CertificateDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state CertificateDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location certificate.Location

	{
		var terraformLocation CertificateLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Panorama.IsNull() {
			location.Panorama = &certificate.PanoramaLocation{}
			var innerLocation CertificatePanoramaLocation
			resp.Diagnostics.Append(terraformLocation.Panorama.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &certificate.VsysLocation{}
			var innerLocation CertificateVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &certificate.TemplateLocation{}
			var innerLocation CertificateTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
		}

		if !terraformLocation.TemplateVsys.IsNull() {
			location.TemplateVsys = &certificate.TemplateVsysLocation{}
			var innerLocation CertificateTemplateVsysLocation
			resp.Diagnostics.Append(terraformLocation.TemplateVsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateVsys.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateVsys.Template = innerLocation.Template.ValueString()
			location.TemplateVsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.TemplateVsys.Vsys = innerLocation.Vsys.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &certificate.TemplateStackLocation{}
			var innerLocation CertificateTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
		}

		if !terraformLocation.TemplateStackVsys.IsNull() {
			location.TemplateStackVsys = &certificate.TemplateStackVsysLocation{}
			var innerLocation CertificateTemplateStackVsysLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStackVsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStackVsys.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStackVsys.TemplateStack = innerLocation.TemplateStack.ValueString()
			location.TemplateStackVsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.TemplateStackVsys.Vsys = innerLocation.Vsys.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_certificate_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	components, err := savestate.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	object, err := o.manager.Read(ctx, location, components, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, nil, object, ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

type CertificatePanoramaLocation struct {
}
type CertificateVsysLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
	Name       types.String `tfsdk:"name"`
}
type CertificateTemplateLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
}
type CertificateTemplateVsysLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Template       types.String `tfsdk:"template"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
	Vsys           types.String `tfsdk:"vsys"`
}
type CertificateTemplateStackLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
}
type CertificateTemplateStackVsysLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	TemplateStack  types.String `tfsdk:"template_stack"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
	Vsys           types.String `tfsdk:"vsys"`
}
type CertificateLocation struct {
	Panorama          types.Object `tfsdk:"panorama"`
	Vsys              types.Object `tfsdk:"vsys"`
	Template          types.Object `tfsdk:"template"`
	TemplateVsys      types.Object `tfsdk:"template_vsys"`
	TemplateStack     types.Object `tfsdk:"template_stack"`
	TemplateStackVsys types.Object `tfsdk:"template_stack_vsys"`
}

func CertificateLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"panorama": rsschema.SingleNestedAttribute{
				Description: "Located in a panorama.",
				Optional:    true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("panorama"),
						path.MatchRelative().AtParent().AtName("vsys"),
						path.MatchRelative().AtParent().AtName("template"),
						path.MatchRelative().AtParent().AtName("template_vsys"),
						path.MatchRelative().AtParent().AtName("template_stack"),
						path.MatchRelative().AtParent().AtName("template_stack_vsys"),
					}...),
				},
			},
			"vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific Virtual System",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The Virtual System name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template": rsschema.SingleNestedAttribute{
				Description: "A shared resource located within a specific template",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Specific Panorama template",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template, device and vsys.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"template": rsschema.StringAttribute{
						Description: "Specific Panorama template",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"vsys": rsschema.StringAttribute{
						Description: "The vsys.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_stack": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The template stack",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_stack_vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template, device and vsys.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"template_stack": rsschema.StringAttribute{
						Description: "The template stack",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"vsys": rsschema.StringAttribute{
						Description: "The vsys.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o CertificatePanoramaLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
	}

	obj := shadow{}

	return json.Marshal(obj)
}

func (o *CertificatePanoramaLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}

	return nil
}
func (o CertificateVsysLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
		Name       *string `json:"name,omitempty"`
	}

	obj := shadow{
		NgfwDevice: o.NgfwDevice.ValueStringPointer(),
		Name:       o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *CertificateVsysLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
		Name       *string `json:"name,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o CertificateTemplateLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *CertificateTemplateLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o CertificateTemplateVsysLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Template       *string `json:"template,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
		Vsys           *string `json:"vsys,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Template:       o.Template.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
		Vsys:           o.Vsys.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *CertificateTemplateVsysLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Template       *string `json:"template,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
		Vsys           *string `json:"vsys,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Template = types.StringPointerValue(shadow.Template)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)
	o.Vsys = types.StringPointerValue(shadow.Vsys)

	return nil
}
func (o CertificateTemplateStackLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *CertificateTemplateStackLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o CertificateTemplateStackVsysLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		TemplateStack  *string `json:"template_stack,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
		Vsys           *string `json:"vsys,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		TemplateStack:  o.TemplateStack.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
		Vsys:           o.Vsys.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *CertificateTemplateStackVsysLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		TemplateStack  *string `json:"template_stack,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
		Vsys           *string `json:"vsys,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.TemplateStack = types.StringPointerValue(shadow.TemplateStack)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)
	o.Vsys = types.StringPointerValue(shadow.Vsys)

	return nil
}
func (o CertificateLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Panorama          *CertificatePanoramaLocation          `json:"panorama,omitempty"`
		Vsys              *CertificateVsysLocation              `json:"vsys,omitempty"`
		Template          *CertificateTemplateLocation          `json:"template,omitempty"`
		TemplateVsys      *CertificateTemplateVsysLocation      `json:"template_vsys,omitempty"`
		TemplateStack     *CertificateTemplateStackLocation     `json:"template_stack,omitempty"`
		TemplateStackVsys *CertificateTemplateStackVsysLocation `json:"template_stack_vsys,omitempty"`
	}
	var panorama_object *CertificatePanoramaLocation
	{
		diags := o.Panorama.As(context.TODO(), &panorama_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal panorama into JSON document", diags.Errors())
		}
	}
	var vsys_object *CertificateVsysLocation
	{
		diags := o.Vsys.As(context.TODO(), &vsys_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal vsys into JSON document", diags.Errors())
		}
	}
	var template_object *CertificateTemplateLocation
	{
		diags := o.Template.As(context.TODO(), &template_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template into JSON document", diags.Errors())
		}
	}
	var templateVsys_object *CertificateTemplateVsysLocation
	{
		diags := o.TemplateVsys.As(context.TODO(), &templateVsys_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template_vsys into JSON document", diags.Errors())
		}
	}
	var templateStack_object *CertificateTemplateStackLocation
	{
		diags := o.TemplateStack.As(context.TODO(), &templateStack_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template_stack into JSON document", diags.Errors())
		}
	}
	var templateStackVsys_object *CertificateTemplateStackVsysLocation
	{
		diags := o.TemplateStackVsys.As(context.TODO(), &templateStackVsys_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template_stack_vsys into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Panorama:          panorama_object,
		Vsys:              vsys_object,
		Template:          template_object,
		TemplateVsys:      templateVsys_object,
		TemplateStack:     templateStack_object,
		TemplateStackVsys: templateStackVsys_object,
	}

	return json.Marshal(obj)
}

func (o *CertificateLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Panorama          *CertificatePanoramaLocation          `json:"panorama,omitempty"`
		Vsys              *CertificateVsysLocation              `json:"vsys,omitempty"`
		Template          *CertificateTemplateLocation          `json:"template,omitempty"`
		TemplateVsys      *CertificateTemplateVsysLocation      `json:"template_vsys,omitempty"`
		TemplateStack     *CertificateTemplateStackLocation     `json:"template_stack,omitempty"`
		TemplateStackVsys *CertificateTemplateStackVsysLocation `json:"template_stack_vsys,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var panorama_object types.Object
	{
		var diags_tmp diag.Diagnostics
		panorama_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Panorama.AttributeTypes(), shadow.Panorama)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into panorama", diags_tmp.Errors())
		}
	}
	var vsys_object types.Object
	{
		var diags_tmp diag.Diagnostics
		vsys_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Vsys.AttributeTypes(), shadow.Vsys)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into vsys", diags_tmp.Errors())
		}
	}
	var template_object types.Object
	{
		var diags_tmp diag.Diagnostics
		template_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Template.AttributeTypes(), shadow.Template)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template", diags_tmp.Errors())
		}
	}
	var templateVsys_object types.Object
	{
		var diags_tmp diag.Diagnostics
		templateVsys_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.TemplateVsys.AttributeTypes(), shadow.TemplateVsys)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template_vsys", diags_tmp.Errors())
		}
	}
	var templateStack_object types.Object
	{
		var diags_tmp diag.Diagnostics
		templateStack_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.TemplateStack.AttributeTypes(), shadow.TemplateStack)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template_stack", diags_tmp.Errors())
		}
	}
	var templateStackVsys_object types.Object
	{
		var diags_tmp diag.Diagnostics
		templateStackVsys_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.TemplateStackVsys.AttributeTypes(), shadow.TemplateStackVsys)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template_stack_vsys", diags_tmp.Errors())
		}
	}
	o.Panorama = panorama_object
	o.Vsys = vsys_object
	o.Template = template_object
	o.TemplateVsys = templateVsys_object
	o.TemplateStack = templateStack_object
	o.TemplateStackVsys = templateStackVsys_object

	return nil
}

func (o *CertificatePanoramaLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}
func (o *CertificateVsysLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"ngfw_device": types.StringType,
		"name":        types.StringType,
	}
}
func (o *CertificateTemplateLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
	}
}
func (o *CertificateTemplateVsysLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"template":        types.StringType,
		"ngfw_device":     types.StringType,
		"vsys":            types.StringType,
	}
}
func (o *CertificateTemplateStackLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
	}
}
func (o *CertificateTemplateStackVsysLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"template_stack":  types.StringType,
		"ngfw_device":     types.StringType,
		"vsys":            types.StringType,
	}
}
func (o *CertificateLocation) AttributeTypes() map[string]attr.Type {
	var panoramaObj CertificatePanoramaLocation
	var vsysObj CertificateVsysLocation
	var templateObj CertificateTemplateLocation
	var templateVsysObj CertificateTemplateVsysLocation
	var templateStackObj CertificateTemplateStackLocation
	var templateStackVsysObj CertificateTemplateStackVsysLocation
	return map[string]attr.Type{
		"panorama": types.ObjectType{
			AttrTypes: panoramaObj.AttributeTypes(),
		},
		"vsys": types.ObjectType{
			AttrTypes: vsysObj.AttributeTypes(),
		},
		"template": types.ObjectType{
			AttrTypes: templateObj.AttributeTypes(),
		},
		"template_vsys": types.ObjectType{
			AttrTypes: templateVsysObj.AttributeTypes(),
		},
		"template_stack": types.ObjectType{
			AttrTypes: templateStackObj.AttributeTypes(),
		},
		"template_stack_vsys": types.ObjectType{
			AttrTypes: templateStackVsysObj.AttributeTypes(),
		},
	}
}
