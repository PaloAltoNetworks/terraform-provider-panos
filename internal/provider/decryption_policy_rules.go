package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/policies/rules/decryption"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &DecryptionPolicyRulesDataSource{}
	_ datasource.DataSourceWithConfigure = &DecryptionPolicyRulesDataSource{}
)

func NewDecryptionPolicyRulesDataSource() datasource.DataSource {
	return &DecryptionPolicyRulesDataSource{}
}

type DecryptionPolicyRulesDataSource struct {
	client  *pango.Client
	manager *sdkmanager.UuidObjectManager[*decryption.Entry, decryption.Location, *decryption.Service]
}

type DecryptionPolicyRulesDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type DecryptionPolicyRulesDataSourceModel struct {
	Location DecryptionPolicyRulesLocation `tfsdk:"location"`
	Position TerraformPositionObject       `tfsdk:"position"`
	Rules    types.List                    `tfsdk:"rules"`
}
type DecryptionPolicyRulesDataSourceRulesObject struct {
	Name                 types.String                                      `tfsdk:"name"`
	PacketBrokerProfile  types.String                                      `tfsdk:"packet_broker_profile"`
	Profile              types.String                                      `tfsdk:"profile"`
	Services             types.List                                        `tfsdk:"services"`
	SourceAddresses      types.List                                        `tfsdk:"source_addresses"`
	Target               *DecryptionPolicyRulesDataSourceRulesTargetObject `tfsdk:"target"`
	Type                 *DecryptionPolicyRulesDataSourceRulesTypeObject   `tfsdk:"type"`
	DestinationZones     types.List                                        `tfsdk:"destination_zones"`
	DestinationAddresses types.List                                        `tfsdk:"destination_addresses"`
	DestinationHip       types.List                                        `tfsdk:"destination_hip"`
	Disabled             types.Bool                                        `tfsdk:"disabled"`
	SourceZones          types.List                                        `tfsdk:"source_zones"`
	LogSuccess           types.Bool                                        `tfsdk:"log_success"`
	NegateSource         types.Bool                                        `tfsdk:"negate_source"`
	Category             types.List                                        `tfsdk:"category"`
	Description          types.String                                      `tfsdk:"description"`
	NegateDestination    types.Bool                                        `tfsdk:"negate_destination"`
	SourceHip            types.List                                        `tfsdk:"source_hip"`
	Uuid                 types.String                                      `tfsdk:"uuid"`
	Action               types.String                                      `tfsdk:"action"`
	GroupTag             types.String                                      `tfsdk:"group_tag"`
	LogFail              types.Bool                                        `tfsdk:"log_fail"`
	LogSetting           types.String                                      `tfsdk:"log_setting"`
	SourceUser           types.List                                        `tfsdk:"source_user"`
	Tag                  types.List                                        `tfsdk:"tag"`
}
type DecryptionPolicyRulesDataSourceRulesTargetObject struct {
	Negate  types.Bool `tfsdk:"negate"`
	Tags    types.List `tfsdk:"tags"`
	Devices types.List `tfsdk:"devices"`
}
type DecryptionPolicyRulesDataSourceRulesTargetDevicesObject struct {
	Name types.String `tfsdk:"name"`
	Vsys types.List   `tfsdk:"vsys"`
}
type DecryptionPolicyRulesDataSourceRulesTargetDevicesVsysObject struct {
	Name types.String `tfsdk:"name"`
}
type DecryptionPolicyRulesDataSourceRulesTypeObject struct {
	SshProxy             *DecryptionPolicyRulesDataSourceRulesTypeSshProxyObject             `tfsdk:"ssh_proxy"`
	SslForwardProxy      *DecryptionPolicyRulesDataSourceRulesTypeSslForwardProxyObject      `tfsdk:"ssl_forward_proxy"`
	SslInboundInspection *DecryptionPolicyRulesDataSourceRulesTypeSslInboundInspectionObject `tfsdk:"ssl_inbound_inspection"`
}
type DecryptionPolicyRulesDataSourceRulesTypeSshProxyObject struct {
}
type DecryptionPolicyRulesDataSourceRulesTypeSslForwardProxyObject struct {
}
type DecryptionPolicyRulesDataSourceRulesTypeSslInboundInspectionObject struct {
	Certificates types.List `tfsdk:"certificates"`
}

func (o *DecryptionPolicyRulesDataSourceRulesObject) CopyToPango(ctx context.Context, obj **decryption.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var target_entry *decryption.Target
	if o.Target != nil {
		if *obj != nil && (*obj).Target != nil {
			target_entry = (*obj).Target
		} else {
			target_entry = new(decryption.Target)
		}

		diags.Append(o.Target.CopyToPango(ctx, &target_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var type_entry *decryption.Type
	if o.Type != nil {
		if *obj != nil && (*obj).Type != nil {
			type_entry = (*obj).Type
		} else {
			type_entry = new(decryption.Type)
		}

		diags.Append(o.Type.CopyToPango(ctx, &type_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	packetBrokerProfile_value := o.PacketBrokerProfile.ValueStringPointer()
	profile_value := o.Profile.ValueStringPointer()
	services_pango_entries := make([]string, 0)
	diags.Append(o.Services.ElementsAs(ctx, &services_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceAddresses_pango_entries := make([]string, 0)
	diags.Append(o.SourceAddresses.ElementsAs(ctx, &sourceAddresses_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	logSuccess_value := o.LogSuccess.ValueBoolPointer()
	negateSource_value := o.NegateSource.ValueBoolPointer()
	destinationZones_pango_entries := make([]string, 0)
	diags.Append(o.DestinationZones.ElementsAs(ctx, &destinationZones_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	destinationAddresses_pango_entries := make([]string, 0)
	diags.Append(o.DestinationAddresses.ElementsAs(ctx, &destinationAddresses_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	destinationHip_pango_entries := make([]string, 0)
	diags.Append(o.DestinationHip.ElementsAs(ctx, &destinationHip_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	disabled_value := o.Disabled.ValueBoolPointer()
	sourceZones_pango_entries := make([]string, 0)
	diags.Append(o.SourceZones.ElementsAs(ctx, &sourceZones_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	category_pango_entries := make([]string, 0)
	diags.Append(o.Category.ElementsAs(ctx, &category_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	description_value := o.Description.ValueStringPointer()
	negateDestination_value := o.NegateDestination.ValueBoolPointer()
	sourceHip_pango_entries := make([]string, 0)
	diags.Append(o.SourceHip.ElementsAs(ctx, &sourceHip_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceUser_pango_entries := make([]string, 0)
	diags.Append(o.SourceUser.ElementsAs(ctx, &sourceUser_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	tag_pango_entries := make([]string, 0)
	diags.Append(o.Tag.ElementsAs(ctx, &tag_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	uuid_value := o.Uuid.ValueStringPointer()
	action_value := o.Action.ValueStringPointer()
	groupTag_value := o.GroupTag.ValueStringPointer()
	logFail_value := o.LogFail.ValueBoolPointer()
	logSetting_value := o.LogSetting.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(decryption.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Target = target_entry
	(*obj).Type = type_entry
	(*obj).PacketBrokerProfile = packetBrokerProfile_value
	(*obj).Profile = profile_value
	(*obj).Service = services_pango_entries
	(*obj).Source = sourceAddresses_pango_entries
	(*obj).LogSuccess = logSuccess_value
	(*obj).NegateSource = negateSource_value
	(*obj).To = destinationZones_pango_entries
	(*obj).Destination = destinationAddresses_pango_entries
	(*obj).DestinationHip = destinationHip_pango_entries
	(*obj).Disabled = disabled_value
	(*obj).From = sourceZones_pango_entries
	(*obj).Category = category_pango_entries
	(*obj).Description = description_value
	(*obj).NegateDestination = negateDestination_value
	(*obj).SourceHip = sourceHip_pango_entries
	(*obj).SourceUser = sourceUser_pango_entries
	(*obj).Tag = tag_pango_entries
	(*obj).Uuid = uuid_value
	(*obj).Action = action_value
	(*obj).GroupTag = groupTag_value
	(*obj).LogFail = logFail_value
	(*obj).LogSetting = logSetting_value

	return diags
}
func (o *DecryptionPolicyRulesDataSourceRulesTargetObject) CopyToPango(ctx context.Context, obj **decryption.Target, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var devices_tf_entries []DecryptionPolicyRulesDataSourceRulesTargetDevicesObject
	var devices_pango_entries []decryption.TargetDevices
	{
		d := o.Devices.ElementsAs(ctx, &devices_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range devices_tf_entries {
			var entry *decryption.TargetDevices
			diags.Append(elt.CopyToPango(ctx, &entry, encrypted)...)
			if diags.HasError() {
				return diags
			}
			devices_pango_entries = append(devices_pango_entries, *entry)
		}
	}
	negate_value := o.Negate.ValueBoolPointer()
	tags_pango_entries := make([]string, 0)
	diags.Append(o.Tags.ElementsAs(ctx, &tags_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(decryption.Target)
	}
	(*obj).Devices = devices_pango_entries
	(*obj).Negate = negate_value
	(*obj).Tags = tags_pango_entries

	return diags
}
func (o *DecryptionPolicyRulesDataSourceRulesTargetDevicesObject) CopyToPango(ctx context.Context, obj **decryption.TargetDevices, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var vsys_tf_entries []DecryptionPolicyRulesDataSourceRulesTargetDevicesVsysObject
	var vsys_pango_entries []decryption.TargetDevicesVsys
	{
		d := o.Vsys.ElementsAs(ctx, &vsys_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range vsys_tf_entries {
			var entry *decryption.TargetDevicesVsys
			diags.Append(elt.CopyToPango(ctx, &entry, encrypted)...)
			if diags.HasError() {
				return diags
			}
			vsys_pango_entries = append(vsys_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(decryption.TargetDevices)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Vsys = vsys_pango_entries

	return diags
}
func (o *DecryptionPolicyRulesDataSourceRulesTargetDevicesVsysObject) CopyToPango(ctx context.Context, obj **decryption.TargetDevicesVsys, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(decryption.TargetDevicesVsys)
	}
	(*obj).Name = o.Name.ValueString()

	return diags
}
func (o *DecryptionPolicyRulesDataSourceRulesTypeObject) CopyToPango(ctx context.Context, obj **decryption.Type, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var sshProxy_entry *decryption.TypeSshProxy
	if o.SshProxy != nil {
		if *obj != nil && (*obj).SshProxy != nil {
			sshProxy_entry = (*obj).SshProxy
		} else {
			sshProxy_entry = new(decryption.TypeSshProxy)
		}

		diags.Append(o.SshProxy.CopyToPango(ctx, &sshProxy_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sslForwardProxy_entry *decryption.TypeSslForwardProxy
	if o.SslForwardProxy != nil {
		if *obj != nil && (*obj).SslForwardProxy != nil {
			sslForwardProxy_entry = (*obj).SslForwardProxy
		} else {
			sslForwardProxy_entry = new(decryption.TypeSslForwardProxy)
		}

		diags.Append(o.SslForwardProxy.CopyToPango(ctx, &sslForwardProxy_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sslInboundInspection_entry *decryption.TypeSslInboundInspection
	if o.SslInboundInspection != nil {
		if *obj != nil && (*obj).SslInboundInspection != nil {
			sslInboundInspection_entry = (*obj).SslInboundInspection
		} else {
			sslInboundInspection_entry = new(decryption.TypeSslInboundInspection)
		}

		diags.Append(o.SslInboundInspection.CopyToPango(ctx, &sslInboundInspection_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(decryption.Type)
	}
	(*obj).SshProxy = sshProxy_entry
	(*obj).SslForwardProxy = sslForwardProxy_entry
	(*obj).SslInboundInspection = sslInboundInspection_entry

	return diags
}
func (o *DecryptionPolicyRulesDataSourceRulesTypeSshProxyObject) CopyToPango(ctx context.Context, obj **decryption.TypeSshProxy, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(decryption.TypeSshProxy)
	}

	return diags
}
func (o *DecryptionPolicyRulesDataSourceRulesTypeSslForwardProxyObject) CopyToPango(ctx context.Context, obj **decryption.TypeSslForwardProxy, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(decryption.TypeSslForwardProxy)
	}

	return diags
}
func (o *DecryptionPolicyRulesDataSourceRulesTypeSslInboundInspectionObject) CopyToPango(ctx context.Context, obj **decryption.TypeSslInboundInspection, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	certificates_pango_entries := make([]string, 0)
	diags.Append(o.Certificates.ElementsAs(ctx, &certificates_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(decryption.TypeSslInboundInspection)
	}
	(*obj).Certificates = certificates_pango_entries

	return diags
}

func (o *DecryptionPolicyRulesDataSourceRulesObject) CopyFromPango(ctx context.Context, obj *decryption.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var sourceZones_list types.List
	{
		var list_diags diag.Diagnostics
		sourceZones_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.From)
		diags.Append(list_diags...)
	}
	var destinationZones_list types.List
	{
		var list_diags diag.Diagnostics
		destinationZones_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.To)
		diags.Append(list_diags...)
	}
	var destinationAddresses_list types.List
	{
		var list_diags diag.Diagnostics
		destinationAddresses_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Destination)
		diags.Append(list_diags...)
	}
	var destinationHip_list types.List
	{
		var list_diags diag.Diagnostics
		destinationHip_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DestinationHip)
		diags.Append(list_diags...)
	}
	var sourceHip_list types.List
	{
		var list_diags diag.Diagnostics
		sourceHip_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceHip)
		diags.Append(list_diags...)
	}
	var category_list types.List
	{
		var list_diags diag.Diagnostics
		category_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Category)
		diags.Append(list_diags...)
	}
	var sourceUser_list types.List
	{
		var list_diags diag.Diagnostics
		sourceUser_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceUser)
		diags.Append(list_diags...)
	}
	var tag_list types.List
	{
		var list_diags diag.Diagnostics
		tag_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tag)
		diags.Append(list_diags...)
	}
	var services_list types.List
	{
		var list_diags diag.Diagnostics
		services_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Service)
		diags.Append(list_diags...)
	}
	var sourceAddresses_list types.List
	{
		var list_diags diag.Diagnostics
		sourceAddresses_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Source)
		diags.Append(list_diags...)
	}
	var target_object *DecryptionPolicyRulesDataSourceRulesTargetObject
	if obj.Target != nil {
		target_object = new(DecryptionPolicyRulesDataSourceRulesTargetObject)

		diags.Append(target_object.CopyFromPango(ctx, obj.Target, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var type_object *DecryptionPolicyRulesDataSourceRulesTypeObject
	if obj.Type != nil {
		type_object = new(DecryptionPolicyRulesDataSourceRulesTypeObject)

		diags.Append(type_object.CopyFromPango(ctx, obj.Type, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var disabled_value types.Bool
	if obj.Disabled != nil {
		disabled_value = types.BoolValue(*obj.Disabled)
	}
	var logSuccess_value types.Bool
	if obj.LogSuccess != nil {
		logSuccess_value = types.BoolValue(*obj.LogSuccess)
	}
	var negateSource_value types.Bool
	if obj.NegateSource != nil {
		negateSource_value = types.BoolValue(*obj.NegateSource)
	}
	var negateDestination_value types.Bool
	if obj.NegateDestination != nil {
		negateDestination_value = types.BoolValue(*obj.NegateDestination)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var logFail_value types.Bool
	if obj.LogFail != nil {
		logFail_value = types.BoolValue(*obj.LogFail)
	}
	var logSetting_value types.String
	if obj.LogSetting != nil {
		logSetting_value = types.StringValue(*obj.LogSetting)
	}
	var uuid_value types.String
	if obj.Uuid != nil {
		uuid_value = types.StringValue(*obj.Uuid)
	}
	var action_value types.String
	if obj.Action != nil {
		action_value = types.StringValue(*obj.Action)
	}
	var groupTag_value types.String
	if obj.GroupTag != nil {
		groupTag_value = types.StringValue(*obj.GroupTag)
	}
	var packetBrokerProfile_value types.String
	if obj.PacketBrokerProfile != nil {
		packetBrokerProfile_value = types.StringValue(*obj.PacketBrokerProfile)
	}
	var profile_value types.String
	if obj.Profile != nil {
		profile_value = types.StringValue(*obj.Profile)
	}
	o.Name = types.StringValue(obj.Name)
	o.Disabled = disabled_value
	o.SourceZones = sourceZones_list
	o.LogSuccess = logSuccess_value
	o.NegateSource = negateSource_value
	o.DestinationZones = destinationZones_list
	o.DestinationAddresses = destinationAddresses_list
	o.DestinationHip = destinationHip_list
	o.NegateDestination = negateDestination_value
	o.SourceHip = sourceHip_list
	o.Category = category_list
	o.Description = description_value
	o.LogFail = logFail_value
	o.LogSetting = logSetting_value
	o.SourceUser = sourceUser_list
	o.Tag = tag_list
	o.Uuid = uuid_value
	o.Action = action_value
	o.GroupTag = groupTag_value
	o.Services = services_list
	o.SourceAddresses = sourceAddresses_list
	o.Target = target_object
	o.Type = type_object
	o.PacketBrokerProfile = packetBrokerProfile_value
	o.Profile = profile_value

	return diags
}

func (o *DecryptionPolicyRulesDataSourceRulesTargetObject) CopyFromPango(ctx context.Context, obj *decryption.Target, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var devices_list types.List
	{
		var devices_tf_entries []DecryptionPolicyRulesDataSourceRulesTargetDevicesObject
		for _, elt := range obj.Devices {
			var entry DecryptionPolicyRulesDataSourceRulesTargetDevicesObject
			entry_diags := entry.CopyFromPango(ctx, &elt, encrypted)
			diags.Append(entry_diags...)
			devices_tf_entries = append(devices_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("devices")
		devices_list, list_diags = types.ListValueFrom(ctx, schemaType, devices_tf_entries)
		diags.Append(list_diags...)
	}
	var tags_list types.List
	{
		var list_diags diag.Diagnostics
		tags_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tags)
		diags.Append(list_diags...)
	}

	var negate_value types.Bool
	if obj.Negate != nil {
		negate_value = types.BoolValue(*obj.Negate)
	}
	o.Devices = devices_list
	o.Negate = negate_value
	o.Tags = tags_list

	return diags
}

func (o *DecryptionPolicyRulesDataSourceRulesTargetDevicesObject) CopyFromPango(ctx context.Context, obj *decryption.TargetDevices, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var vsys_list types.List
	{
		var vsys_tf_entries []DecryptionPolicyRulesDataSourceRulesTargetDevicesVsysObject
		for _, elt := range obj.Vsys {
			var entry DecryptionPolicyRulesDataSourceRulesTargetDevicesVsysObject
			entry_diags := entry.CopyFromPango(ctx, &elt, encrypted)
			diags.Append(entry_diags...)
			vsys_tf_entries = append(vsys_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("vsys")
		vsys_list, list_diags = types.ListValueFrom(ctx, schemaType, vsys_tf_entries)
		diags.Append(list_diags...)
	}

	o.Name = types.StringValue(obj.Name)
	o.Vsys = vsys_list

	return diags
}

func (o *DecryptionPolicyRulesDataSourceRulesTargetDevicesVsysObject) CopyFromPango(ctx context.Context, obj *decryption.TargetDevicesVsys, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	o.Name = types.StringValue(obj.Name)

	return diags
}

func (o *DecryptionPolicyRulesDataSourceRulesTypeObject) CopyFromPango(ctx context.Context, obj *decryption.Type, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var sslForwardProxy_object *DecryptionPolicyRulesDataSourceRulesTypeSslForwardProxyObject
	if obj.SslForwardProxy != nil {
		sslForwardProxy_object = new(DecryptionPolicyRulesDataSourceRulesTypeSslForwardProxyObject)

		diags.Append(sslForwardProxy_object.CopyFromPango(ctx, obj.SslForwardProxy, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sslInboundInspection_object *DecryptionPolicyRulesDataSourceRulesTypeSslInboundInspectionObject
	if obj.SslInboundInspection != nil {
		sslInboundInspection_object = new(DecryptionPolicyRulesDataSourceRulesTypeSslInboundInspectionObject)

		diags.Append(sslInboundInspection_object.CopyFromPango(ctx, obj.SslInboundInspection, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sshProxy_object *DecryptionPolicyRulesDataSourceRulesTypeSshProxyObject
	if obj.SshProxy != nil {
		sshProxy_object = new(DecryptionPolicyRulesDataSourceRulesTypeSshProxyObject)

		diags.Append(sshProxy_object.CopyFromPango(ctx, obj.SshProxy, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.SslForwardProxy = sslForwardProxy_object
	o.SslInboundInspection = sslInboundInspection_object
	o.SshProxy = sshProxy_object

	return diags
}

func (o *DecryptionPolicyRulesDataSourceRulesTypeSshProxyObject) CopyFromPango(ctx context.Context, obj *decryption.TypeSshProxy, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *DecryptionPolicyRulesDataSourceRulesTypeSslForwardProxyObject) CopyFromPango(ctx context.Context, obj *decryption.TypeSslForwardProxy, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *DecryptionPolicyRulesDataSourceRulesTypeSslInboundInspectionObject) CopyFromPango(ctx context.Context, obj *decryption.TypeSslInboundInspection, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var certificates_list types.List
	{
		var list_diags diag.Diagnostics
		certificates_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Certificates)
		diags.Append(list_diags...)
	}

	o.Certificates = certificates_list

	return diags
}

func DecryptionPolicyRulesDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": DecryptionPolicyRulesDataSourceLocationSchema(),

			"position": TerraformPositionObjectSchema(),

			"rules": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     true,
				Optional:     false,
				Computed:     false,
				Sensitive:    false,
				NestedObject: DecryptionPolicyRulesDataSourceRulesSchema(),
			},
		},
	}
}

func (o *DecryptionPolicyRulesDataSourceModel) getTypeFor(name string) attr.Type {
	schema := DecryptionPolicyRulesDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DecryptionPolicyRulesDataSourceRulesSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"source_addresses": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"target": DecryptionPolicyRulesDataSourceRulesTargetSchema(),

			"type": DecryptionPolicyRulesDataSourceRulesTypeSchema(),

			"packet_broker_profile": dsschema.StringAttribute{
				Description: "packet-broker profile",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"profile": dsschema.StringAttribute{
				Description: "decryption profile",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"services": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_zones": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"log_success": dsschema.BoolAttribute{
				Description: "Log successful TLS handshakes",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"negate_source": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"destination_zones": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"destination_addresses": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"destination_hip": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"disabled": dsschema.BoolAttribute{
				Description: "Disable the rule",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source_hip": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"category": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"description": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"negate_destination": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_setting": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source_user": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"tag": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"uuid": dsschema.StringAttribute{
				Description: "Entry UUID value",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"action": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"group_tag": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_fail": dsschema.BoolAttribute{
				Description: "Log unsuccessful TLS handshakes",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *DecryptionPolicyRulesDataSourceRulesObject) getTypeFor(name string) attr.Type {
	schema := DecryptionPolicyRulesDataSourceRulesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DecryptionPolicyRulesDataSourceRulesTargetSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"tags": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"devices": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: DecryptionPolicyRulesDataSourceRulesTargetDevicesSchema(),
			},

			"negate": dsschema.BoolAttribute{
				Description: "Target to all but these specified devices and tags",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *DecryptionPolicyRulesDataSourceRulesTargetObject) getTypeFor(name string) attr.Type {
	schema := DecryptionPolicyRulesDataSourceRulesTargetSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DecryptionPolicyRulesDataSourceRulesTargetDevicesSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"vsys": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: DecryptionPolicyRulesDataSourceRulesTargetDevicesVsysSchema(),
			},
		},
	}
}

func (o *DecryptionPolicyRulesDataSourceRulesTargetDevicesObject) getTypeFor(name string) attr.Type {
	schema := DecryptionPolicyRulesDataSourceRulesTargetDevicesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DecryptionPolicyRulesDataSourceRulesTargetDevicesVsysSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},
		},
	}
}

func (o *DecryptionPolicyRulesDataSourceRulesTargetDevicesVsysObject) getTypeFor(name string) attr.Type {
	schema := DecryptionPolicyRulesDataSourceRulesTargetDevicesVsysSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DecryptionPolicyRulesDataSourceRulesTypeSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"ssh_proxy": DecryptionPolicyRulesDataSourceRulesTypeSshProxySchema(),

			"ssl_forward_proxy": DecryptionPolicyRulesDataSourceRulesTypeSslForwardProxySchema(),

			"ssl_inbound_inspection": DecryptionPolicyRulesDataSourceRulesTypeSslInboundInspectionSchema(),
		},
	}
}

func (o *DecryptionPolicyRulesDataSourceRulesTypeObject) getTypeFor(name string) attr.Type {
	schema := DecryptionPolicyRulesDataSourceRulesTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DecryptionPolicyRulesDataSourceRulesTypeSshProxySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("ssh_proxy"),
				path.MatchRelative().AtParent().AtName("ssl_forward_proxy"),
				path.MatchRelative().AtParent().AtName("ssl_inbound_inspection"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *DecryptionPolicyRulesDataSourceRulesTypeSshProxyObject) getTypeFor(name string) attr.Type {
	schema := DecryptionPolicyRulesDataSourceRulesTypeSshProxySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DecryptionPolicyRulesDataSourceRulesTypeSslForwardProxySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("ssh_proxy"),
				path.MatchRelative().AtParent().AtName("ssl_forward_proxy"),
				path.MatchRelative().AtParent().AtName("ssl_inbound_inspection"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *DecryptionPolicyRulesDataSourceRulesTypeSslForwardProxyObject) getTypeFor(name string) attr.Type {
	schema := DecryptionPolicyRulesDataSourceRulesTypeSslForwardProxySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DecryptionPolicyRulesDataSourceRulesTypeSslInboundInspectionSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("ssh_proxy"),
				path.MatchRelative().AtParent().AtName("ssl_forward_proxy"),
				path.MatchRelative().AtParent().AtName("ssl_inbound_inspection"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"certificates": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *DecryptionPolicyRulesDataSourceRulesTypeSslInboundInspectionObject) getTypeFor(name string) attr.Type {
	schema := DecryptionPolicyRulesDataSourceRulesTypeSslInboundInspectionSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DecryptionPolicyRulesDataSourceLocationSchema() rsschema.Attribute {
	return DecryptionPolicyRulesLocationSchema()
}

// Metadata returns the data source type name.
func (d *DecryptionPolicyRulesDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_decryption_policy_rules"
}

// Schema defines the schema for this data source.
func (d *DecryptionPolicyRulesDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = DecryptionPolicyRulesDataSourceSchema()
}

// Configure prepares the struct.
func (d *DecryptionPolicyRulesDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*pango.Client)
	specifier, _, err := decryption.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	d.manager = sdkmanager.NewUuidObjectManager(d.client, decryption.NewService(d.client), specifier, decryption.SpecMatches)
}
func (o *DecryptionPolicyRulesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var state DecryptionPolicyRulesDataSourceModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_decryption_policy_rules",
		"function":      "Create",
	})

	var location decryption.Location

	if state.Location.Shared != nil {
		location.Shared = &decryption.SharedLocation{

			Rulebase: state.Location.Shared.Rulebase.ValueString(),
		}
	}
	if state.Location.Vsys != nil {
		location.Vsys = &decryption.VsysLocation{

			NgfwDevice: state.Location.Vsys.NgfwDevice.ValueString(),
			Vsys:       state.Location.Vsys.Name.ValueString(),
		}
	}
	if state.Location.DeviceGroup != nil {
		location.DeviceGroup = &decryption.DeviceGroupLocation{

			Rulebase:       state.Location.DeviceGroup.Rulebase.ValueString(),
			PanoramaDevice: state.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    state.Location.DeviceGroup.Name.ValueString(),
		}
	}

	var elements []DecryptionPolicyRulesDataSourceRulesObject
	state.Rules.ElementsAs(ctx, &elements, false)
	if len(elements) == 0 {
		return
	}

	entries := make([]*decryption.Entry, 0, len(elements))
	for _, elt := range elements {
		var entry *decryption.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, &entry, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		entries = append(entries, entry)
	}

	readEntries, err := o.manager.ReadMany(ctx, location, entries, sdkmanager.NonExhaustive)
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Failed to read entries from the server", err.Error())
		}
		return
	}

	var objects []DecryptionPolicyRulesDataSourceRulesObject
	for _, elt := range readEntries {
		var object DecryptionPolicyRulesDataSourceRulesObject
		err := object.CopyFromPango(ctx, elt, nil)
		resp.Diagnostics.Append(err...)
		if resp.Diagnostics.HasError() {
			return
		}
		objects = append(objects, object)
	}

	var list_diags diag.Diagnostics
	state.Rules, list_diags = types.ListValueFrom(ctx, state.getTypeFor("rules"), objects)
	resp.Diagnostics.Append(list_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &DecryptionPolicyRulesResource{}
	_ resource.ResourceWithConfigure   = &DecryptionPolicyRulesResource{}
	_ resource.ResourceWithImportState = &DecryptionPolicyRulesResource{}
)

func NewDecryptionPolicyRulesResource() resource.Resource {
	return &DecryptionPolicyRulesResource{}
}

type DecryptionPolicyRulesResource struct {
	client  *pango.Client
	manager *sdkmanager.UuidObjectManager[*decryption.Entry, decryption.Location, *decryption.Service]
}

func DecryptionPolicyRulesResourceLocationSchema() rsschema.Attribute {
	return DecryptionPolicyRulesLocationSchema()
}

type DecryptionPolicyRulesResourceModel struct {
	Location DecryptionPolicyRulesLocation `tfsdk:"location"`
	Position TerraformPositionObject       `tfsdk:"position"`
	Rules    types.List                    `tfsdk:"rules"`
}
type DecryptionPolicyRulesResourceRulesObject struct {
	Name                 types.String                                    `tfsdk:"name"`
	LogSuccess           types.Bool                                      `tfsdk:"log_success"`
	NegateSource         types.Bool                                      `tfsdk:"negate_source"`
	DestinationZones     types.List                                      `tfsdk:"destination_zones"`
	DestinationAddresses types.List                                      `tfsdk:"destination_addresses"`
	DestinationHip       types.List                                      `tfsdk:"destination_hip"`
	Disabled             types.Bool                                      `tfsdk:"disabled"`
	SourceZones          types.List                                      `tfsdk:"source_zones"`
	Category             types.List                                      `tfsdk:"category"`
	Description          types.String                                    `tfsdk:"description"`
	NegateDestination    types.Bool                                      `tfsdk:"negate_destination"`
	SourceHip            types.List                                      `tfsdk:"source_hip"`
	SourceUser           types.List                                      `tfsdk:"source_user"`
	Tag                  types.List                                      `tfsdk:"tag"`
	Uuid                 types.String                                    `tfsdk:"uuid"`
	Action               types.String                                    `tfsdk:"action"`
	GroupTag             types.String                                    `tfsdk:"group_tag"`
	LogFail              types.Bool                                      `tfsdk:"log_fail"`
	LogSetting           types.String                                    `tfsdk:"log_setting"`
	Target               *DecryptionPolicyRulesResourceRulesTargetObject `tfsdk:"target"`
	Type                 *DecryptionPolicyRulesResourceRulesTypeObject   `tfsdk:"type"`
	PacketBrokerProfile  types.String                                    `tfsdk:"packet_broker_profile"`
	Profile              types.String                                    `tfsdk:"profile"`
	Services             types.List                                      `tfsdk:"services"`
	SourceAddresses      types.List                                      `tfsdk:"source_addresses"`
}
type DecryptionPolicyRulesResourceRulesTargetObject struct {
	Devices types.List `tfsdk:"devices"`
	Negate  types.Bool `tfsdk:"negate"`
	Tags    types.List `tfsdk:"tags"`
}
type DecryptionPolicyRulesResourceRulesTargetDevicesObject struct {
	Name types.String `tfsdk:"name"`
	Vsys types.List   `tfsdk:"vsys"`
}
type DecryptionPolicyRulesResourceRulesTargetDevicesVsysObject struct {
	Name types.String `tfsdk:"name"`
}
type DecryptionPolicyRulesResourceRulesTypeObject struct {
	SshProxy             *DecryptionPolicyRulesResourceRulesTypeSshProxyObject             `tfsdk:"ssh_proxy"`
	SslForwardProxy      *DecryptionPolicyRulesResourceRulesTypeSslForwardProxyObject      `tfsdk:"ssl_forward_proxy"`
	SslInboundInspection *DecryptionPolicyRulesResourceRulesTypeSslInboundInspectionObject `tfsdk:"ssl_inbound_inspection"`
}
type DecryptionPolicyRulesResourceRulesTypeSshProxyObject struct {
}
type DecryptionPolicyRulesResourceRulesTypeSslForwardProxyObject struct {
}
type DecryptionPolicyRulesResourceRulesTypeSslInboundInspectionObject struct {
	Certificates types.List `tfsdk:"certificates"`
}

func (r *DecryptionPolicyRulesResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
	var resource DecryptionPolicyRulesResourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &resource)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resource.Position.ValidateConfig(resp)
}

// <ResourceSchema>

func DecryptionPolicyRulesResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": DecryptionPolicyRulesResourceLocationSchema(),

			"position": TerraformPositionObjectSchema(),

			"rules": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     true,
				Optional:     false,
				Computed:     false,
				Sensitive:    false,
				NestedObject: DecryptionPolicyRulesResourceRulesSchema(),
			},
		},
	}
}

func (o *DecryptionPolicyRulesResourceModel) getTypeFor(name string) attr.Type {
	schema := DecryptionPolicyRulesResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DecryptionPolicyRulesResourceRulesSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"category": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"description": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"negate_destination": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source_hip": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"uuid": rsschema.StringAttribute{
				Description: "Entry UUID value",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"action": rsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("no-decrypt"),

				Validators: []validator.String{
					stringvalidator.OneOf([]string{
						"no-decrypt",
						"decrypt",
						"decrypt-and-forward",
					}...),
				},
			},

			"group_tag": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_fail": rsschema.BoolAttribute{
				Description: "Log unsuccessful TLS handshakes",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_setting": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source_user": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"tag": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"packet_broker_profile": rsschema.StringAttribute{
				Description: "packet-broker profile",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"profile": rsschema.StringAttribute{
				Description: "decryption profile",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"services": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_addresses": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"target": DecryptionPolicyRulesResourceRulesTargetSchema(),

			"type": DecryptionPolicyRulesResourceRulesTypeSchema(),

			"destination_zones": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"destination_addresses": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"destination_hip": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"disabled": rsschema.BoolAttribute{
				Description: "Disable the rule",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source_zones": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"log_success": rsschema.BoolAttribute{
				Description: "Log successful TLS handshakes",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"negate_source": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *DecryptionPolicyRulesResourceRulesObject) getTypeFor(name string) attr.Type {
	schema := DecryptionPolicyRulesResourceRulesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DecryptionPolicyRulesResourceRulesTargetSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"devices": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: DecryptionPolicyRulesResourceRulesTargetDevicesSchema(),
			},

			"negate": rsschema.BoolAttribute{
				Description: "Target to all but these specified devices and tags",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tags": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *DecryptionPolicyRulesResourceRulesTargetObject) getTypeFor(name string) attr.Type {
	schema := DecryptionPolicyRulesResourceRulesTargetSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DecryptionPolicyRulesResourceRulesTargetDevicesSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"vsys": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: DecryptionPolicyRulesResourceRulesTargetDevicesVsysSchema(),
			},
		},
	}
}

func (o *DecryptionPolicyRulesResourceRulesTargetDevicesObject) getTypeFor(name string) attr.Type {
	schema := DecryptionPolicyRulesResourceRulesTargetDevicesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DecryptionPolicyRulesResourceRulesTargetDevicesVsysSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},
		},
	}
}

func (o *DecryptionPolicyRulesResourceRulesTargetDevicesVsysObject) getTypeFor(name string) attr.Type {
	schema := DecryptionPolicyRulesResourceRulesTargetDevicesVsysSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DecryptionPolicyRulesResourceRulesTypeSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"ssh_proxy": DecryptionPolicyRulesResourceRulesTypeSshProxySchema(),

			"ssl_forward_proxy": DecryptionPolicyRulesResourceRulesTypeSslForwardProxySchema(),

			"ssl_inbound_inspection": DecryptionPolicyRulesResourceRulesTypeSslInboundInspectionSchema(),
		},
	}
}

func (o *DecryptionPolicyRulesResourceRulesTypeObject) getTypeFor(name string) attr.Type {
	schema := DecryptionPolicyRulesResourceRulesTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DecryptionPolicyRulesResourceRulesTypeSshProxySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("ssh_proxy"),
				path.MatchRelative().AtParent().AtName("ssl_forward_proxy"),
				path.MatchRelative().AtParent().AtName("ssl_inbound_inspection"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *DecryptionPolicyRulesResourceRulesTypeSshProxyObject) getTypeFor(name string) attr.Type {
	schema := DecryptionPolicyRulesResourceRulesTypeSshProxySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DecryptionPolicyRulesResourceRulesTypeSslForwardProxySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("ssh_proxy"),
				path.MatchRelative().AtParent().AtName("ssl_forward_proxy"),
				path.MatchRelative().AtParent().AtName("ssl_inbound_inspection"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *DecryptionPolicyRulesResourceRulesTypeSslForwardProxyObject) getTypeFor(name string) attr.Type {
	schema := DecryptionPolicyRulesResourceRulesTypeSslForwardProxySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DecryptionPolicyRulesResourceRulesTypeSslInboundInspectionSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("ssh_proxy"),
				path.MatchRelative().AtParent().AtName("ssl_forward_proxy"),
				path.MatchRelative().AtParent().AtName("ssl_inbound_inspection"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"certificates": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *DecryptionPolicyRulesResourceRulesTypeSslInboundInspectionObject) getTypeFor(name string) attr.Type {
	schema := DecryptionPolicyRulesResourceRulesTypeSslInboundInspectionSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *DecryptionPolicyRulesResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_decryption_policy_rules"
}

func (r *DecryptionPolicyRulesResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = DecryptionPolicyRulesResourceSchema()
}

// </ResourceSchema>

func (r *DecryptionPolicyRulesResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*pango.Client)
	specifier, _, err := decryption.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	r.manager = sdkmanager.NewUuidObjectManager(r.client, decryption.NewService(r.client), specifier, decryption.SpecMatches)
}

func (o *DecryptionPolicyRulesResourceRulesObject) CopyToPango(ctx context.Context, obj **decryption.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	negateDestination_value := o.NegateDestination.ValueBoolPointer()
	sourceHip_pango_entries := make([]string, 0)
	diags.Append(o.SourceHip.ElementsAs(ctx, &sourceHip_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	category_pango_entries := make([]string, 0)
	diags.Append(o.Category.ElementsAs(ctx, &category_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	description_value := o.Description.ValueStringPointer()
	logFail_value := o.LogFail.ValueBoolPointer()
	logSetting_value := o.LogSetting.ValueStringPointer()
	sourceUser_pango_entries := make([]string, 0)
	diags.Append(o.SourceUser.ElementsAs(ctx, &sourceUser_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	tag_pango_entries := make([]string, 0)
	diags.Append(o.Tag.ElementsAs(ctx, &tag_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	uuid_value := o.Uuid.ValueStringPointer()
	action_value := o.Action.ValueStringPointer()
	groupTag_value := o.GroupTag.ValueStringPointer()
	services_pango_entries := make([]string, 0)
	diags.Append(o.Services.ElementsAs(ctx, &services_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceAddresses_pango_entries := make([]string, 0)
	diags.Append(o.SourceAddresses.ElementsAs(ctx, &sourceAddresses_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var target_entry *decryption.Target
	if o.Target != nil {
		if *obj != nil && (*obj).Target != nil {
			target_entry = (*obj).Target
		} else {
			target_entry = new(decryption.Target)
		}

		diags.Append(o.Target.CopyToPango(ctx, &target_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var type_entry *decryption.Type
	if o.Type != nil {
		if *obj != nil && (*obj).Type != nil {
			type_entry = (*obj).Type
		} else {
			type_entry = new(decryption.Type)
		}

		diags.Append(o.Type.CopyToPango(ctx, &type_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	packetBrokerProfile_value := o.PacketBrokerProfile.ValueStringPointer()
	profile_value := o.Profile.ValueStringPointer()
	disabled_value := o.Disabled.ValueBoolPointer()
	sourceZones_pango_entries := make([]string, 0)
	diags.Append(o.SourceZones.ElementsAs(ctx, &sourceZones_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	logSuccess_value := o.LogSuccess.ValueBoolPointer()
	negateSource_value := o.NegateSource.ValueBoolPointer()
	destinationZones_pango_entries := make([]string, 0)
	diags.Append(o.DestinationZones.ElementsAs(ctx, &destinationZones_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	destinationAddresses_pango_entries := make([]string, 0)
	diags.Append(o.DestinationAddresses.ElementsAs(ctx, &destinationAddresses_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	destinationHip_pango_entries := make([]string, 0)
	diags.Append(o.DestinationHip.ElementsAs(ctx, &destinationHip_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(decryption.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).NegateDestination = negateDestination_value
	(*obj).SourceHip = sourceHip_pango_entries
	(*obj).Category = category_pango_entries
	(*obj).Description = description_value
	(*obj).LogFail = logFail_value
	(*obj).LogSetting = logSetting_value
	(*obj).SourceUser = sourceUser_pango_entries
	(*obj).Tag = tag_pango_entries
	(*obj).Uuid = uuid_value
	(*obj).Action = action_value
	(*obj).GroupTag = groupTag_value
	(*obj).Service = services_pango_entries
	(*obj).Source = sourceAddresses_pango_entries
	(*obj).Target = target_entry
	(*obj).Type = type_entry
	(*obj).PacketBrokerProfile = packetBrokerProfile_value
	(*obj).Profile = profile_value
	(*obj).Disabled = disabled_value
	(*obj).From = sourceZones_pango_entries
	(*obj).LogSuccess = logSuccess_value
	(*obj).NegateSource = negateSource_value
	(*obj).To = destinationZones_pango_entries
	(*obj).Destination = destinationAddresses_pango_entries
	(*obj).DestinationHip = destinationHip_pango_entries

	return diags
}
func (o *DecryptionPolicyRulesResourceRulesTargetObject) CopyToPango(ctx context.Context, obj **decryption.Target, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	negate_value := o.Negate.ValueBoolPointer()
	tags_pango_entries := make([]string, 0)
	diags.Append(o.Tags.ElementsAs(ctx, &tags_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var devices_tf_entries []DecryptionPolicyRulesResourceRulesTargetDevicesObject
	var devices_pango_entries []decryption.TargetDevices
	{
		d := o.Devices.ElementsAs(ctx, &devices_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range devices_tf_entries {
			var entry *decryption.TargetDevices
			diags.Append(elt.CopyToPango(ctx, &entry, encrypted)...)
			if diags.HasError() {
				return diags
			}
			devices_pango_entries = append(devices_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(decryption.Target)
	}
	(*obj).Negate = negate_value
	(*obj).Tags = tags_pango_entries
	(*obj).Devices = devices_pango_entries

	return diags
}
func (o *DecryptionPolicyRulesResourceRulesTargetDevicesObject) CopyToPango(ctx context.Context, obj **decryption.TargetDevices, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var vsys_tf_entries []DecryptionPolicyRulesResourceRulesTargetDevicesVsysObject
	var vsys_pango_entries []decryption.TargetDevicesVsys
	{
		d := o.Vsys.ElementsAs(ctx, &vsys_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range vsys_tf_entries {
			var entry *decryption.TargetDevicesVsys
			diags.Append(elt.CopyToPango(ctx, &entry, encrypted)...)
			if diags.HasError() {
				return diags
			}
			vsys_pango_entries = append(vsys_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(decryption.TargetDevices)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Vsys = vsys_pango_entries

	return diags
}
func (o *DecryptionPolicyRulesResourceRulesTargetDevicesVsysObject) CopyToPango(ctx context.Context, obj **decryption.TargetDevicesVsys, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(decryption.TargetDevicesVsys)
	}
	(*obj).Name = o.Name.ValueString()

	return diags
}
func (o *DecryptionPolicyRulesResourceRulesTypeObject) CopyToPango(ctx context.Context, obj **decryption.Type, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var sshProxy_entry *decryption.TypeSshProxy
	if o.SshProxy != nil {
		if *obj != nil && (*obj).SshProxy != nil {
			sshProxy_entry = (*obj).SshProxy
		} else {
			sshProxy_entry = new(decryption.TypeSshProxy)
		}

		diags.Append(o.SshProxy.CopyToPango(ctx, &sshProxy_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sslForwardProxy_entry *decryption.TypeSslForwardProxy
	if o.SslForwardProxy != nil {
		if *obj != nil && (*obj).SslForwardProxy != nil {
			sslForwardProxy_entry = (*obj).SslForwardProxy
		} else {
			sslForwardProxy_entry = new(decryption.TypeSslForwardProxy)
		}

		diags.Append(o.SslForwardProxy.CopyToPango(ctx, &sslForwardProxy_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sslInboundInspection_entry *decryption.TypeSslInboundInspection
	if o.SslInboundInspection != nil {
		if *obj != nil && (*obj).SslInboundInspection != nil {
			sslInboundInspection_entry = (*obj).SslInboundInspection
		} else {
			sslInboundInspection_entry = new(decryption.TypeSslInboundInspection)
		}

		diags.Append(o.SslInboundInspection.CopyToPango(ctx, &sslInboundInspection_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(decryption.Type)
	}
	(*obj).SshProxy = sshProxy_entry
	(*obj).SslForwardProxy = sslForwardProxy_entry
	(*obj).SslInboundInspection = sslInboundInspection_entry

	return diags
}
func (o *DecryptionPolicyRulesResourceRulesTypeSshProxyObject) CopyToPango(ctx context.Context, obj **decryption.TypeSshProxy, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(decryption.TypeSshProxy)
	}

	return diags
}
func (o *DecryptionPolicyRulesResourceRulesTypeSslForwardProxyObject) CopyToPango(ctx context.Context, obj **decryption.TypeSslForwardProxy, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(decryption.TypeSslForwardProxy)
	}

	return diags
}
func (o *DecryptionPolicyRulesResourceRulesTypeSslInboundInspectionObject) CopyToPango(ctx context.Context, obj **decryption.TypeSslInboundInspection, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	certificates_pango_entries := make([]string, 0)
	diags.Append(o.Certificates.ElementsAs(ctx, &certificates_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(decryption.TypeSslInboundInspection)
	}
	(*obj).Certificates = certificates_pango_entries

	return diags
}

func (o *DecryptionPolicyRulesResourceRulesObject) CopyFromPango(ctx context.Context, obj *decryption.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var services_list types.List
	{
		var list_diags diag.Diagnostics
		services_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Service)
		diags.Append(list_diags...)
	}
	var sourceAddresses_list types.List
	{
		var list_diags diag.Diagnostics
		sourceAddresses_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Source)
		diags.Append(list_diags...)
	}
	var destinationZones_list types.List
	{
		var list_diags diag.Diagnostics
		destinationZones_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.To)
		diags.Append(list_diags...)
	}
	var destinationAddresses_list types.List
	{
		var list_diags diag.Diagnostics
		destinationAddresses_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Destination)
		diags.Append(list_diags...)
	}
	var destinationHip_list types.List
	{
		var list_diags diag.Diagnostics
		destinationHip_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DestinationHip)
		diags.Append(list_diags...)
	}
	var sourceZones_list types.List
	{
		var list_diags diag.Diagnostics
		sourceZones_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.From)
		diags.Append(list_diags...)
	}
	var category_list types.List
	{
		var list_diags diag.Diagnostics
		category_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Category)
		diags.Append(list_diags...)
	}
	var sourceHip_list types.List
	{
		var list_diags diag.Diagnostics
		sourceHip_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceHip)
		diags.Append(list_diags...)
	}
	var sourceUser_list types.List
	{
		var list_diags diag.Diagnostics
		sourceUser_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceUser)
		diags.Append(list_diags...)
	}
	var tag_list types.List
	{
		var list_diags diag.Diagnostics
		tag_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tag)
		diags.Append(list_diags...)
	}
	var target_object *DecryptionPolicyRulesResourceRulesTargetObject
	if obj.Target != nil {
		target_object = new(DecryptionPolicyRulesResourceRulesTargetObject)

		diags.Append(target_object.CopyFromPango(ctx, obj.Target, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var type_object *DecryptionPolicyRulesResourceRulesTypeObject
	if obj.Type != nil {
		type_object = new(DecryptionPolicyRulesResourceRulesTypeObject)

		diags.Append(type_object.CopyFromPango(ctx, obj.Type, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var packetBrokerProfile_value types.String
	if obj.PacketBrokerProfile != nil {
		packetBrokerProfile_value = types.StringValue(*obj.PacketBrokerProfile)
	}
	var profile_value types.String
	if obj.Profile != nil {
		profile_value = types.StringValue(*obj.Profile)
	}
	var disabled_value types.Bool
	if obj.Disabled != nil {
		disabled_value = types.BoolValue(*obj.Disabled)
	}
	var logSuccess_value types.Bool
	if obj.LogSuccess != nil {
		logSuccess_value = types.BoolValue(*obj.LogSuccess)
	}
	var negateSource_value types.Bool
	if obj.NegateSource != nil {
		negateSource_value = types.BoolValue(*obj.NegateSource)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var negateDestination_value types.Bool
	if obj.NegateDestination != nil {
		negateDestination_value = types.BoolValue(*obj.NegateDestination)
	}
	var uuid_value types.String
	if obj.Uuid != nil {
		uuid_value = types.StringValue(*obj.Uuid)
	}
	var action_value types.String
	if obj.Action != nil {
		action_value = types.StringValue(*obj.Action)
	}
	var groupTag_value types.String
	if obj.GroupTag != nil {
		groupTag_value = types.StringValue(*obj.GroupTag)
	}
	var logFail_value types.Bool
	if obj.LogFail != nil {
		logFail_value = types.BoolValue(*obj.LogFail)
	}
	var logSetting_value types.String
	if obj.LogSetting != nil {
		logSetting_value = types.StringValue(*obj.LogSetting)
	}
	o.Name = types.StringValue(obj.Name)
	o.PacketBrokerProfile = packetBrokerProfile_value
	o.Profile = profile_value
	o.Services = services_list
	o.SourceAddresses = sourceAddresses_list
	o.Target = target_object
	o.Type = type_object
	o.DestinationZones = destinationZones_list
	o.DestinationAddresses = destinationAddresses_list
	o.DestinationHip = destinationHip_list
	o.Disabled = disabled_value
	o.SourceZones = sourceZones_list
	o.LogSuccess = logSuccess_value
	o.NegateSource = negateSource_value
	o.Category = category_list
	o.Description = description_value
	o.NegateDestination = negateDestination_value
	o.SourceHip = sourceHip_list
	o.Uuid = uuid_value
	o.Action = action_value
	o.GroupTag = groupTag_value
	o.LogFail = logFail_value
	o.LogSetting = logSetting_value
	o.SourceUser = sourceUser_list
	o.Tag = tag_list

	return diags
}

func (o *DecryptionPolicyRulesResourceRulesTypeObject) CopyFromPango(ctx context.Context, obj *decryption.Type, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var sslInboundInspection_object *DecryptionPolicyRulesResourceRulesTypeSslInboundInspectionObject
	if obj.SslInboundInspection != nil {
		sslInboundInspection_object = new(DecryptionPolicyRulesResourceRulesTypeSslInboundInspectionObject)

		diags.Append(sslInboundInspection_object.CopyFromPango(ctx, obj.SslInboundInspection, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sshProxy_object *DecryptionPolicyRulesResourceRulesTypeSshProxyObject
	if obj.SshProxy != nil {
		sshProxy_object = new(DecryptionPolicyRulesResourceRulesTypeSshProxyObject)

		diags.Append(sshProxy_object.CopyFromPango(ctx, obj.SshProxy, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sslForwardProxy_object *DecryptionPolicyRulesResourceRulesTypeSslForwardProxyObject
	if obj.SslForwardProxy != nil {
		sslForwardProxy_object = new(DecryptionPolicyRulesResourceRulesTypeSslForwardProxyObject)

		diags.Append(sslForwardProxy_object.CopyFromPango(ctx, obj.SslForwardProxy, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.SslInboundInspection = sslInboundInspection_object
	o.SshProxy = sshProxy_object
	o.SslForwardProxy = sslForwardProxy_object

	return diags
}

func (o *DecryptionPolicyRulesResourceRulesTypeSshProxyObject) CopyFromPango(ctx context.Context, obj *decryption.TypeSshProxy, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *DecryptionPolicyRulesResourceRulesTypeSslForwardProxyObject) CopyFromPango(ctx context.Context, obj *decryption.TypeSslForwardProxy, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *DecryptionPolicyRulesResourceRulesTypeSslInboundInspectionObject) CopyFromPango(ctx context.Context, obj *decryption.TypeSslInboundInspection, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var certificates_list types.List
	{
		var list_diags diag.Diagnostics
		certificates_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Certificates)
		diags.Append(list_diags...)
	}

	o.Certificates = certificates_list

	return diags
}

func (o *DecryptionPolicyRulesResourceRulesTargetObject) CopyFromPango(ctx context.Context, obj *decryption.Target, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var devices_list types.List
	{
		var devices_tf_entries []DecryptionPolicyRulesResourceRulesTargetDevicesObject
		for _, elt := range obj.Devices {
			var entry DecryptionPolicyRulesResourceRulesTargetDevicesObject
			entry_diags := entry.CopyFromPango(ctx, &elt, encrypted)
			diags.Append(entry_diags...)
			devices_tf_entries = append(devices_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("devices")
		devices_list, list_diags = types.ListValueFrom(ctx, schemaType, devices_tf_entries)
		diags.Append(list_diags...)
	}
	var tags_list types.List
	{
		var list_diags diag.Diagnostics
		tags_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tags)
		diags.Append(list_diags...)
	}

	var negate_value types.Bool
	if obj.Negate != nil {
		negate_value = types.BoolValue(*obj.Negate)
	}
	o.Devices = devices_list
	o.Negate = negate_value
	o.Tags = tags_list

	return diags
}

func (o *DecryptionPolicyRulesResourceRulesTargetDevicesObject) CopyFromPango(ctx context.Context, obj *decryption.TargetDevices, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var vsys_list types.List
	{
		var vsys_tf_entries []DecryptionPolicyRulesResourceRulesTargetDevicesVsysObject
		for _, elt := range obj.Vsys {
			var entry DecryptionPolicyRulesResourceRulesTargetDevicesVsysObject
			entry_diags := entry.CopyFromPango(ctx, &elt, encrypted)
			diags.Append(entry_diags...)
			vsys_tf_entries = append(vsys_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("vsys")
		vsys_list, list_diags = types.ListValueFrom(ctx, schemaType, vsys_tf_entries)
		diags.Append(list_diags...)
	}

	o.Name = types.StringValue(obj.Name)
	o.Vsys = vsys_list

	return diags
}

func (o *DecryptionPolicyRulesResourceRulesTargetDevicesVsysObject) CopyFromPango(ctx context.Context, obj *decryption.TargetDevicesVsys, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	o.Name = types.StringValue(obj.Name)

	return diags
}

func (r *DecryptionPolicyRulesResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	var state DecryptionPolicyRulesResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_decryption_policy_rules_resource",
		"function":      "Create",
	})

	var location decryption.Location

	if state.Location.Shared != nil {
		location.Shared = &decryption.SharedLocation{

			Rulebase: state.Location.Shared.Rulebase.ValueString(),
		}
	}
	if state.Location.Vsys != nil {
		location.Vsys = &decryption.VsysLocation{

			NgfwDevice: state.Location.Vsys.NgfwDevice.ValueString(),
			Vsys:       state.Location.Vsys.Name.ValueString(),
		}
	}
	if state.Location.DeviceGroup != nil {
		location.DeviceGroup = &decryption.DeviceGroupLocation{

			PanoramaDevice: state.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    state.Location.DeviceGroup.Name.ValueString(),
			Rulebase:       state.Location.DeviceGroup.Rulebase.ValueString(),
		}
	}

	var elements []DecryptionPolicyRulesResourceRulesObject
	state.Rules.ElementsAs(ctx, &elements, false)
	entries := make([]*decryption.Entry, len(elements))
	for idx, elt := range elements {
		var entry *decryption.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, &entry, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		entries[idx] = entry
	}
	position := state.Position.CopyToPango()
	processed, err := r.manager.CreateMany(ctx, location, entries, sdkmanager.NonExhaustive, position)
	if err != nil {
		resp.Diagnostics.AddError("Error during CreateMany() call", err.Error())
		return
	}
	objects := make([]DecryptionPolicyRulesResourceRulesObject, len(processed))
	for idx, elt := range processed {
		var object DecryptionPolicyRulesResourceRulesObject
		copy_diags := object.CopyFromPango(ctx, elt, nil)
		resp.Diagnostics.Append(copy_diags...)
		if resp.Diagnostics.HasError() {
			return
		}
		objects[idx] = object
	}

	var list_diags diag.Diagnostics
	state.Rules, list_diags = types.ListValueFrom(ctx, state.getTypeFor("rules"), objects)
	resp.Diagnostics.Append(list_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (o *DecryptionPolicyRulesResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var state DecryptionPolicyRulesResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_decryption_policy_rules",
		"function":      "Create",
	})

	var location decryption.Location

	if state.Location.Shared != nil {
		location.Shared = &decryption.SharedLocation{

			Rulebase: state.Location.Shared.Rulebase.ValueString(),
		}
	}
	if state.Location.Vsys != nil {
		location.Vsys = &decryption.VsysLocation{

			NgfwDevice: state.Location.Vsys.NgfwDevice.ValueString(),
			Vsys:       state.Location.Vsys.Name.ValueString(),
		}
	}
	if state.Location.DeviceGroup != nil {
		location.DeviceGroup = &decryption.DeviceGroupLocation{

			PanoramaDevice: state.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    state.Location.DeviceGroup.Name.ValueString(),
			Rulebase:       state.Location.DeviceGroup.Rulebase.ValueString(),
		}
	}

	var elements []DecryptionPolicyRulesResourceRulesObject
	state.Rules.ElementsAs(ctx, &elements, false)
	if len(elements) == 0 {
		return
	}

	entries := make([]*decryption.Entry, 0, len(elements))
	for _, elt := range elements {
		var entry *decryption.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, &entry, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		entries = append(entries, entry)
	}

	readEntries, err := o.manager.ReadMany(ctx, location, entries, sdkmanager.NonExhaustive)
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Failed to read entries from the server", err.Error())
		}
		return
	}

	var objects []DecryptionPolicyRulesResourceRulesObject
	for _, elt := range readEntries {
		var object DecryptionPolicyRulesResourceRulesObject
		err := object.CopyFromPango(ctx, elt, nil)
		resp.Diagnostics.Append(err...)
		if resp.Diagnostics.HasError() {
			return
		}
		objects = append(objects, object)
	}

	var list_diags diag.Diagnostics
	state.Rules, list_diags = types.ListValueFrom(ctx, state.getTypeFor("rules"), objects)
	resp.Diagnostics.Append(list_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *DecryptionPolicyRulesResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var state, plan DecryptionPolicyRulesResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_decryption_policy_rules_resource",
		"function":      "Create",
	})

	var location decryption.Location

	if plan.Location.DeviceGroup != nil {
		location.DeviceGroup = &decryption.DeviceGroupLocation{

			PanoramaDevice: plan.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    plan.Location.DeviceGroup.Name.ValueString(),
			Rulebase:       plan.Location.DeviceGroup.Rulebase.ValueString(),
		}
	}
	if plan.Location.Shared != nil {
		location.Shared = &decryption.SharedLocation{

			Rulebase: plan.Location.Shared.Rulebase.ValueString(),
		}
	}
	if plan.Location.Vsys != nil {
		location.Vsys = &decryption.VsysLocation{

			NgfwDevice: plan.Location.Vsys.NgfwDevice.ValueString(),
			Vsys:       plan.Location.Vsys.Name.ValueString(),
		}
	}

	var elements []DecryptionPolicyRulesResourceRulesObject
	state.Rules.ElementsAs(ctx, &elements, false)
	stateEntries := make([]*decryption.Entry, len(elements))
	for idx, elt := range elements {
		var entry *decryption.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, &entry, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		stateEntries[idx] = entry
	}

	position := state.Position.CopyToPango()

	existing, err := r.manager.ReadMany(ctx, location, stateEntries, sdkmanager.NonExhaustive)
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error while reading entries from the server", err.Error())
		return
	}

	existingEntriesByName := make(map[string]*decryption.Entry, len(existing))
	for _, elt := range existing {
		existingEntriesByName[elt.Name] = elt
	}

	plan.Rules.ElementsAs(ctx, &elements, false)
	planEntries := make([]*decryption.Entry, len(elements))
	for idx, elt := range elements {
		entry, _ := existingEntriesByName[elt.Name.ValueString()]
		resp.Diagnostics.Append(elt.CopyToPango(ctx, &entry, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		planEntries[idx] = entry
	}

	processed, err := r.manager.UpdateMany(ctx, location, stateEntries, planEntries, sdkmanager.NonExhaustive, position)
	if err != nil {
		resp.Diagnostics.AddError("Failed to udpate entries", err.Error())
	}

	objects := make([]*DecryptionPolicyRulesResourceRulesObject, len(processed))
	for idx, elt := range processed {
		var object DecryptionPolicyRulesResourceRulesObject
		copy_diags := object.CopyFromPango(ctx, elt, nil)
		resp.Diagnostics.Append(copy_diags...)
		if resp.Diagnostics.HasError() {
			return
		}
		objects[idx] = &object
	}

	var list_diags diag.Diagnostics
	plan.Rules, list_diags = types.ListValueFrom(ctx, state.getTypeFor("rules"), objects)
	resp.Diagnostics.Append(list_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &plan)...)

}
func (r *DecryptionPolicyRulesResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state DecryptionPolicyRulesResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_decryption_policy_rules_resource",
		"function":      "Delete",
	})
	var elements []DecryptionPolicyRulesResourceRulesObject
	state.Rules.ElementsAs(ctx, &elements, false)

	var location decryption.Location

	if state.Location.Shared != nil {
		location.Shared = &decryption.SharedLocation{

			Rulebase: state.Location.Shared.Rulebase.ValueString(),
		}
	}
	if state.Location.Vsys != nil {
		location.Vsys = &decryption.VsysLocation{

			NgfwDevice: state.Location.Vsys.NgfwDevice.ValueString(),
			Vsys:       state.Location.Vsys.Name.ValueString(),
		}
	}
	if state.Location.DeviceGroup != nil {
		location.DeviceGroup = &decryption.DeviceGroupLocation{

			PanoramaDevice: state.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    state.Location.DeviceGroup.Name.ValueString(),
			Rulebase:       state.Location.DeviceGroup.Rulebase.ValueString(),
		}
	}

	var names []string
	for _, elt := range elements {
		names = append(names, elt.Name.ValueString())
	}
	err := r.manager.Delete(ctx, location, names, sdkmanager.NonExhaustive)
	if err != nil {
		resp.Diagnostics.AddError("error while deleting entries", err.Error())
		return
	}

}

func (r *DecryptionPolicyRulesResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

}

type DecryptionPolicyRulesSharedLocation struct {
	Rulebase types.String `tfsdk:"rulebase"`
}
type DecryptionPolicyRulesVsysLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
	Name       types.String `tfsdk:"name"`
}
type DecryptionPolicyRulesDeviceGroupLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	Rulebase       types.String `tfsdk:"rulebase"`
}
type DecryptionPolicyRulesLocation struct {
	Shared      *DecryptionPolicyRulesSharedLocation      `tfsdk:"shared"`
	Vsys        *DecryptionPolicyRulesVsysLocation        `tfsdk:"vsys"`
	DeviceGroup *DecryptionPolicyRulesDeviceGroupLocation `tfsdk:"device_group"`
}

func DecryptionPolicyRulesLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific vsys.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"name": rsschema.StringAttribute{
						Description: "The vsys name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("shared"),
						path.MatchRelative().AtParent().AtName("vsys"),
						path.MatchRelative().AtParent().AtName("device_group"),
					}...),
				},
			},
			"device_group": rsschema.SingleNestedAttribute{
				Description: "Located in a specific device group.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "The panorama device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The device group.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"rulebase": rsschema.StringAttribute{
						Description: "The rulebase.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("pre-rulebase"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"shared": rsschema.SingleNestedAttribute{
				Description: "Located in a shared rulebase",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"rulebase": rsschema.StringAttribute{
						Description: "Rulebase name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("pre-rulebase"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o DecryptionPolicyRulesSharedLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		Rulebase *string `json:"rulebase"`
	}{
		Rulebase: o.Rulebase.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *DecryptionPolicyRulesSharedLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Rulebase *string `json:"rulebase"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.Rulebase = types.StringPointerValue(shadow.Rulebase)

	return nil
}
func (o DecryptionPolicyRulesVsysLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		Name       *string `json:"name"`
		NgfwDevice *string `json:"ngfw_device"`
	}{
		Name:       o.Name.ValueStringPointer(),
		NgfwDevice: o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *DecryptionPolicyRulesVsysLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Name       *string `json:"name"`
		NgfwDevice *string `json:"ngfw_device"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.Name = types.StringPointerValue(shadow.Name)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o DecryptionPolicyRulesDeviceGroupLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		Rulebase       *string `json:"rulebase"`
		PanoramaDevice *string `json:"panorama_device"`
		Name           *string `json:"name"`
	}{
		Rulebase:       o.Rulebase.ValueStringPointer(),
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *DecryptionPolicyRulesDeviceGroupLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Rulebase       *string `json:"rulebase"`
		PanoramaDevice *string `json:"panorama_device"`
		Name           *string `json:"name"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.Rulebase = types.StringPointerValue(shadow.Rulebase)
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o DecryptionPolicyRulesLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		Shared      *DecryptionPolicyRulesSharedLocation      `json:"shared"`
		Vsys        *DecryptionPolicyRulesVsysLocation        `json:"vsys"`
		DeviceGroup *DecryptionPolicyRulesDeviceGroupLocation `json:"device_group"`
	}{
		Shared:      o.Shared,
		Vsys:        o.Vsys,
		DeviceGroup: o.DeviceGroup,
	}

	return json.Marshal(obj)
}

func (o *DecryptionPolicyRulesLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Shared      *DecryptionPolicyRulesSharedLocation      `json:"shared"`
		Vsys        *DecryptionPolicyRulesVsysLocation        `json:"vsys"`
		DeviceGroup *DecryptionPolicyRulesDeviceGroupLocation `json:"device_group"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.Shared = shadow.Shared
	o.Vsys = shadow.Vsys
	o.DeviceGroup = shadow.DeviceGroup

	return nil
}
