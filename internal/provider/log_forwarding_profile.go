package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/objects/profiles/logforwarding"

	"github.com/hashicorp/terraform-plugin-framework-validators/boolvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &LogForwardingProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &LogForwardingProfileDataSource{}
)

func NewLogForwardingProfileDataSource() datasource.DataSource {
	return &LogForwardingProfileDataSource{}
}

type LogForwardingProfileDataSource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*logforwarding.Entry, logforwarding.Location, *logforwarding.Service]
}

type LogForwardingProfileDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type LogForwardingProfileDataSourceModel struct {
	Location                   LogForwardingProfileLocation `tfsdk:"location"`
	Name                       types.String                 `tfsdk:"name"`
	Description                types.String                 `tfsdk:"description"`
	DisableOverride            types.String                 `tfsdk:"disable_override"`
	EnhancedApplicationLogging types.Bool                   `tfsdk:"enhanced_application_logging"`
	MatchList                  types.List                   `tfsdk:"match_list"`
}
type LogForwardingProfileDataSourceMatchListObject struct {
	Name           types.String `tfsdk:"name"`
	ActionDesc     types.String `tfsdk:"action_desc"`
	LogType        types.String `tfsdk:"log_type"`
	Filter         types.String `tfsdk:"filter"`
	SendToPanorama types.Bool   `tfsdk:"send_to_panorama"`
	Quarantine     types.Bool   `tfsdk:"quarantine"`
	SendSnmptrap   types.List   `tfsdk:"send_snmptrap"`
	SendEmail      types.List   `tfsdk:"send_email"`
	SendSyslog     types.List   `tfsdk:"send_syslog"`
	SendHttp       types.List   `tfsdk:"send_http"`
	Actions        types.List   `tfsdk:"actions"`
}
type LogForwardingProfileDataSourceMatchListActionsObject struct {
	Name types.String                                              `tfsdk:"name"`
	Type *LogForwardingProfileDataSourceMatchListActionsTypeObject `tfsdk:"type"`
}
type LogForwardingProfileDataSourceMatchListActionsTypeObject struct {
	Integration *LogForwardingProfileDataSourceMatchListActionsTypeIntegrationObject `tfsdk:"integration"`
	Tagging     *LogForwardingProfileDataSourceMatchListActionsTypeTaggingObject     `tfsdk:"tagging"`
}
type LogForwardingProfileDataSourceMatchListActionsTypeIntegrationObject struct {
	Action types.String `tfsdk:"action"`
}
type LogForwardingProfileDataSourceMatchListActionsTypeTaggingObject struct {
	Target       types.String                                                                 `tfsdk:"target"`
	Action       types.String                                                                 `tfsdk:"action"`
	Timeout      types.Int64                                                                  `tfsdk:"timeout"`
	Registration *LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationObject `tfsdk:"registration"`
	Tags         types.List                                                                   `tfsdk:"tags"`
}
type LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationObject struct {
	Localhost *LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationLocalhostObject `tfsdk:"localhost"`
	Panorama  *LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationPanoramaObject  `tfsdk:"panorama"`
	Remote    *LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationRemoteObject    `tfsdk:"remote"`
}
type LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationLocalhostObject struct {
}
type LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationPanoramaObject struct {
}
type LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationRemoteObject struct {
	HttpProfile types.String `tfsdk:"http_profile"`
}

func (o *LogForwardingProfileDataSourceModel) CopyToPango(ctx context.Context, obj **logforwarding.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	description_value := o.Description.ValueStringPointer()
	disableOverride_value := o.DisableOverride.ValueStringPointer()
	enhancedApplicationLogging_value := o.EnhancedApplicationLogging.ValueBoolPointer()
	var matchList_tf_entries []LogForwardingProfileDataSourceMatchListObject
	var matchList_pango_entries []logforwarding.MatchList
	{
		d := o.MatchList.ElementsAs(ctx, &matchList_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range matchList_tf_entries {
			var entry *logforwarding.MatchList
			diags.Append(elt.CopyToPango(ctx, &entry, encrypted)...)
			if diags.HasError() {
				return diags
			}
			matchList_pango_entries = append(matchList_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(logforwarding.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Description = description_value
	(*obj).DisableOverride = disableOverride_value
	(*obj).EnhancedApplicationLogging = enhancedApplicationLogging_value
	(*obj).MatchList = matchList_pango_entries

	return diags
}
func (o *LogForwardingProfileDataSourceMatchListObject) CopyToPango(ctx context.Context, obj **logforwarding.MatchList, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	actionDesc_value := o.ActionDesc.ValueStringPointer()
	logType_value := o.LogType.ValueStringPointer()
	filter_value := o.Filter.ValueStringPointer()
	sendToPanorama_value := o.SendToPanorama.ValueBoolPointer()
	quarantine_value := o.Quarantine.ValueBoolPointer()
	sendSnmptrap_pango_entries := make([]string, 0)
	diags.Append(o.SendSnmptrap.ElementsAs(ctx, &sendSnmptrap_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sendEmail_pango_entries := make([]string, 0)
	diags.Append(o.SendEmail.ElementsAs(ctx, &sendEmail_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sendSyslog_pango_entries := make([]string, 0)
	diags.Append(o.SendSyslog.ElementsAs(ctx, &sendSyslog_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sendHttp_pango_entries := make([]string, 0)
	diags.Append(o.SendHttp.ElementsAs(ctx, &sendHttp_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var actions_tf_entries []LogForwardingProfileDataSourceMatchListActionsObject
	var actions_pango_entries []logforwarding.MatchListActions
	{
		d := o.Actions.ElementsAs(ctx, &actions_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range actions_tf_entries {
			var entry *logforwarding.MatchListActions
			diags.Append(elt.CopyToPango(ctx, &entry, encrypted)...)
			if diags.HasError() {
				return diags
			}
			actions_pango_entries = append(actions_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(logforwarding.MatchList)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).ActionDesc = actionDesc_value
	(*obj).LogType = logType_value
	(*obj).Filter = filter_value
	(*obj).SendToPanorama = sendToPanorama_value
	(*obj).Quarantine = quarantine_value
	(*obj).SendSnmptrap = sendSnmptrap_pango_entries
	(*obj).SendEmail = sendEmail_pango_entries
	(*obj).SendSyslog = sendSyslog_pango_entries
	(*obj).SendHttp = sendHttp_pango_entries
	(*obj).Actions = actions_pango_entries

	return diags
}
func (o *LogForwardingProfileDataSourceMatchListActionsObject) CopyToPango(ctx context.Context, obj **logforwarding.MatchListActions, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var type_entry *logforwarding.MatchListActionsType
	if o.Type != nil {
		if *obj != nil && (*obj).Type != nil {
			type_entry = (*obj).Type
		} else {
			type_entry = new(logforwarding.MatchListActionsType)
		}

		diags.Append(o.Type.CopyToPango(ctx, &type_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(logforwarding.MatchListActions)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Type = type_entry

	return diags
}
func (o *LogForwardingProfileDataSourceMatchListActionsTypeObject) CopyToPango(ctx context.Context, obj **logforwarding.MatchListActionsType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var integration_entry *logforwarding.MatchListActionsTypeIntegration
	if o.Integration != nil {
		if *obj != nil && (*obj).Integration != nil {
			integration_entry = (*obj).Integration
		} else {
			integration_entry = new(logforwarding.MatchListActionsTypeIntegration)
		}

		diags.Append(o.Integration.CopyToPango(ctx, &integration_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var tagging_entry *logforwarding.MatchListActionsTypeTagging
	if o.Tagging != nil {
		if *obj != nil && (*obj).Tagging != nil {
			tagging_entry = (*obj).Tagging
		} else {
			tagging_entry = new(logforwarding.MatchListActionsTypeTagging)
		}

		diags.Append(o.Tagging.CopyToPango(ctx, &tagging_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(logforwarding.MatchListActionsType)
	}
	(*obj).Integration = integration_entry
	(*obj).Tagging = tagging_entry

	return diags
}
func (o *LogForwardingProfileDataSourceMatchListActionsTypeIntegrationObject) CopyToPango(ctx context.Context, obj **logforwarding.MatchListActionsTypeIntegration, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	action_value := o.Action.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(logforwarding.MatchListActionsTypeIntegration)
	}
	(*obj).Action = action_value

	return diags
}
func (o *LogForwardingProfileDataSourceMatchListActionsTypeTaggingObject) CopyToPango(ctx context.Context, obj **logforwarding.MatchListActionsTypeTagging, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	target_value := o.Target.ValueStringPointer()
	action_value := o.Action.ValueStringPointer()
	timeout_value := o.Timeout.ValueInt64Pointer()
	var registration_entry *logforwarding.MatchListActionsTypeTaggingRegistration
	if o.Registration != nil {
		if *obj != nil && (*obj).Registration != nil {
			registration_entry = (*obj).Registration
		} else {
			registration_entry = new(logforwarding.MatchListActionsTypeTaggingRegistration)
		}

		diags.Append(o.Registration.CopyToPango(ctx, &registration_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	tags_pango_entries := make([]string, 0)
	diags.Append(o.Tags.ElementsAs(ctx, &tags_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(logforwarding.MatchListActionsTypeTagging)
	}
	(*obj).Target = target_value
	(*obj).Action = action_value
	(*obj).Timeout = timeout_value
	(*obj).Registration = registration_entry
	(*obj).Tags = tags_pango_entries

	return diags
}
func (o *LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationObject) CopyToPango(ctx context.Context, obj **logforwarding.MatchListActionsTypeTaggingRegistration, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var localhost_entry *logforwarding.MatchListActionsTypeTaggingRegistrationLocalhost
	if o.Localhost != nil {
		if *obj != nil && (*obj).Localhost != nil {
			localhost_entry = (*obj).Localhost
		} else {
			localhost_entry = new(logforwarding.MatchListActionsTypeTaggingRegistrationLocalhost)
		}

		diags.Append(o.Localhost.CopyToPango(ctx, &localhost_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var panorama_entry *logforwarding.MatchListActionsTypeTaggingRegistrationPanorama
	if o.Panorama != nil {
		if *obj != nil && (*obj).Panorama != nil {
			panorama_entry = (*obj).Panorama
		} else {
			panorama_entry = new(logforwarding.MatchListActionsTypeTaggingRegistrationPanorama)
		}

		diags.Append(o.Panorama.CopyToPango(ctx, &panorama_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var remote_entry *logforwarding.MatchListActionsTypeTaggingRegistrationRemote
	if o.Remote != nil {
		if *obj != nil && (*obj).Remote != nil {
			remote_entry = (*obj).Remote
		} else {
			remote_entry = new(logforwarding.MatchListActionsTypeTaggingRegistrationRemote)
		}

		diags.Append(o.Remote.CopyToPango(ctx, &remote_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(logforwarding.MatchListActionsTypeTaggingRegistration)
	}
	(*obj).Localhost = localhost_entry
	(*obj).Panorama = panorama_entry
	(*obj).Remote = remote_entry

	return diags
}
func (o *LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationLocalhostObject) CopyToPango(ctx context.Context, obj **logforwarding.MatchListActionsTypeTaggingRegistrationLocalhost, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(logforwarding.MatchListActionsTypeTaggingRegistrationLocalhost)
	}

	return diags
}
func (o *LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationPanoramaObject) CopyToPango(ctx context.Context, obj **logforwarding.MatchListActionsTypeTaggingRegistrationPanorama, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(logforwarding.MatchListActionsTypeTaggingRegistrationPanorama)
	}

	return diags
}
func (o *LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationRemoteObject) CopyToPango(ctx context.Context, obj **logforwarding.MatchListActionsTypeTaggingRegistrationRemote, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	httpProfile_value := o.HttpProfile.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(logforwarding.MatchListActionsTypeTaggingRegistrationRemote)
	}
	(*obj).HttpProfile = httpProfile_value

	return diags
}

func (o *LogForwardingProfileDataSourceModel) CopyFromPango(ctx context.Context, obj *logforwarding.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var matchList_list types.List
	{
		var matchList_tf_entries []LogForwardingProfileDataSourceMatchListObject
		for _, elt := range obj.MatchList {
			var entry LogForwardingProfileDataSourceMatchListObject
			entry_diags := entry.CopyFromPango(ctx, &elt, encrypted)
			diags.Append(entry_diags...)
			matchList_tf_entries = append(matchList_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("match_list")
		matchList_list, list_diags = types.ListValueFrom(ctx, schemaType, matchList_tf_entries)
		diags.Append(list_diags...)
	}

	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var disableOverride_value types.String
	if obj.DisableOverride != nil {
		disableOverride_value = types.StringValue(*obj.DisableOverride)
	}
	var enhancedApplicationLogging_value types.Bool
	if obj.EnhancedApplicationLogging != nil {
		enhancedApplicationLogging_value = types.BoolValue(*obj.EnhancedApplicationLogging)
	}
	o.Name = types.StringValue(obj.Name)
	o.Description = description_value
	o.DisableOverride = disableOverride_value
	o.EnhancedApplicationLogging = enhancedApplicationLogging_value
	o.MatchList = matchList_list

	return diags
}

func (o *LogForwardingProfileDataSourceMatchListObject) CopyFromPango(ctx context.Context, obj *logforwarding.MatchList, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var sendSnmptrap_list types.List
	{
		var list_diags diag.Diagnostics
		sendSnmptrap_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SendSnmptrap)
		diags.Append(list_diags...)
	}
	var sendEmail_list types.List
	{
		var list_diags diag.Diagnostics
		sendEmail_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SendEmail)
		diags.Append(list_diags...)
	}
	var sendSyslog_list types.List
	{
		var list_diags diag.Diagnostics
		sendSyslog_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SendSyslog)
		diags.Append(list_diags...)
	}
	var sendHttp_list types.List
	{
		var list_diags diag.Diagnostics
		sendHttp_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SendHttp)
		diags.Append(list_diags...)
	}
	var actions_list types.List
	{
		var actions_tf_entries []LogForwardingProfileDataSourceMatchListActionsObject
		for _, elt := range obj.Actions {
			var entry LogForwardingProfileDataSourceMatchListActionsObject
			entry_diags := entry.CopyFromPango(ctx, &elt, encrypted)
			diags.Append(entry_diags...)
			actions_tf_entries = append(actions_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("actions")
		actions_list, list_diags = types.ListValueFrom(ctx, schemaType, actions_tf_entries)
		diags.Append(list_diags...)
	}

	var actionDesc_value types.String
	if obj.ActionDesc != nil {
		actionDesc_value = types.StringValue(*obj.ActionDesc)
	}
	var logType_value types.String
	if obj.LogType != nil {
		logType_value = types.StringValue(*obj.LogType)
	}
	var filter_value types.String
	if obj.Filter != nil {
		filter_value = types.StringValue(*obj.Filter)
	}
	var sendToPanorama_value types.Bool
	if obj.SendToPanorama != nil {
		sendToPanorama_value = types.BoolValue(*obj.SendToPanorama)
	}
	var quarantine_value types.Bool
	if obj.Quarantine != nil {
		quarantine_value = types.BoolValue(*obj.Quarantine)
	}
	o.Name = types.StringValue(obj.Name)
	o.ActionDesc = actionDesc_value
	o.LogType = logType_value
	o.Filter = filter_value
	o.SendToPanorama = sendToPanorama_value
	o.Quarantine = quarantine_value
	o.SendSnmptrap = sendSnmptrap_list
	o.SendEmail = sendEmail_list
	o.SendSyslog = sendSyslog_list
	o.SendHttp = sendHttp_list
	o.Actions = actions_list

	return diags
}

func (o *LogForwardingProfileDataSourceMatchListActionsObject) CopyFromPango(ctx context.Context, obj *logforwarding.MatchListActions, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var type_object *LogForwardingProfileDataSourceMatchListActionsTypeObject
	if obj.Type != nil {
		type_object = new(LogForwardingProfileDataSourceMatchListActionsTypeObject)

		diags.Append(type_object.CopyFromPango(ctx, obj.Type, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Name = types.StringValue(obj.Name)
	o.Type = type_object

	return diags
}

func (o *LogForwardingProfileDataSourceMatchListActionsTypeObject) CopyFromPango(ctx context.Context, obj *logforwarding.MatchListActionsType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var integration_object *LogForwardingProfileDataSourceMatchListActionsTypeIntegrationObject
	if obj.Integration != nil {
		integration_object = new(LogForwardingProfileDataSourceMatchListActionsTypeIntegrationObject)

		diags.Append(integration_object.CopyFromPango(ctx, obj.Integration, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var tagging_object *LogForwardingProfileDataSourceMatchListActionsTypeTaggingObject
	if obj.Tagging != nil {
		tagging_object = new(LogForwardingProfileDataSourceMatchListActionsTypeTaggingObject)

		diags.Append(tagging_object.CopyFromPango(ctx, obj.Tagging, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Integration = integration_object
	o.Tagging = tagging_object

	return diags
}

func (o *LogForwardingProfileDataSourceMatchListActionsTypeIntegrationObject) CopyFromPango(ctx context.Context, obj *logforwarding.MatchListActionsTypeIntegration, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var action_value types.String
	if obj.Action != nil {
		action_value = types.StringValue(*obj.Action)
	}
	o.Action = action_value

	return diags
}

func (o *LogForwardingProfileDataSourceMatchListActionsTypeTaggingObject) CopyFromPango(ctx context.Context, obj *logforwarding.MatchListActionsTypeTagging, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var tags_list types.List
	{
		var list_diags diag.Diagnostics
		tags_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tags)
		diags.Append(list_diags...)
	}
	var registration_object *LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationObject
	if obj.Registration != nil {
		registration_object = new(LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationObject)

		diags.Append(registration_object.CopyFromPango(ctx, obj.Registration, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var target_value types.String
	if obj.Target != nil {
		target_value = types.StringValue(*obj.Target)
	}
	var action_value types.String
	if obj.Action != nil {
		action_value = types.StringValue(*obj.Action)
	}
	var timeout_value types.Int64
	if obj.Timeout != nil {
		timeout_value = types.Int64Value(*obj.Timeout)
	}
	o.Target = target_value
	o.Action = action_value
	o.Timeout = timeout_value
	o.Registration = registration_object
	o.Tags = tags_list

	return diags
}

func (o *LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationObject) CopyFromPango(ctx context.Context, obj *logforwarding.MatchListActionsTypeTaggingRegistration, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var localhost_object *LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationLocalhostObject
	if obj.Localhost != nil {
		localhost_object = new(LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationLocalhostObject)

		diags.Append(localhost_object.CopyFromPango(ctx, obj.Localhost, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var panorama_object *LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationPanoramaObject
	if obj.Panorama != nil {
		panorama_object = new(LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationPanoramaObject)

		diags.Append(panorama_object.CopyFromPango(ctx, obj.Panorama, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var remote_object *LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationRemoteObject
	if obj.Remote != nil {
		remote_object = new(LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationRemoteObject)

		diags.Append(remote_object.CopyFromPango(ctx, obj.Remote, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Localhost = localhost_object
	o.Panorama = panorama_object
	o.Remote = remote_object

	return diags
}

func (o *LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationLocalhostObject) CopyFromPango(ctx context.Context, obj *logforwarding.MatchListActionsTypeTaggingRegistrationLocalhost, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationPanoramaObject) CopyFromPango(ctx context.Context, obj *logforwarding.MatchListActionsTypeTaggingRegistrationPanorama, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationRemoteObject) CopyFromPango(ctx context.Context, obj *logforwarding.MatchListActionsTypeTaggingRegistrationRemote, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var httpProfile_value types.String
	if obj.HttpProfile != nil {
		httpProfile_value = types.StringValue(*obj.HttpProfile)
	}
	o.HttpProfile = httpProfile_value

	return diags
}

func LogForwardingProfileDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": LogForwardingProfileDataSourceLocationSchema(),

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"description": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"disable_override": dsschema.StringAttribute{
				Description: "disable object override in child device groups",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"enhanced_application_logging": dsschema.BoolAttribute{
				Description: "Enabling enhanced-application-logging",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"match_list": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: LogForwardingProfileDataSourceMatchListSchema(),
			},
		},
	}
}

func (o *LogForwardingProfileDataSourceModel) getTypeFor(name string) attr.Type {
	schema := LogForwardingProfileDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func LogForwardingProfileDataSourceMatchListSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"action_desc": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_type": dsschema.StringAttribute{
				Description: "Pick log type",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"filter": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"send_to_panorama": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"quarantine": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"send_snmptrap": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"send_email": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"send_syslog": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"send_http": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"actions": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: LogForwardingProfileDataSourceMatchListActionsSchema(),
			},
		},
	}
}

func (o *LogForwardingProfileDataSourceMatchListObject) getTypeFor(name string) attr.Type {
	schema := LogForwardingProfileDataSourceMatchListSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func LogForwardingProfileDataSourceMatchListActionsSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"type": LogForwardingProfileDataSourceMatchListActionsTypeSchema(),
		},
	}
}

func (o *LogForwardingProfileDataSourceMatchListActionsObject) getTypeFor(name string) attr.Type {
	schema := LogForwardingProfileDataSourceMatchListActionsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func LogForwardingProfileDataSourceMatchListActionsTypeSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"integration": LogForwardingProfileDataSourceMatchListActionsTypeIntegrationSchema(),

			"tagging": LogForwardingProfileDataSourceMatchListActionsTypeTaggingSchema(),
		},
	}
}

func (o *LogForwardingProfileDataSourceMatchListActionsTypeObject) getTypeFor(name string) attr.Type {
	schema := LogForwardingProfileDataSourceMatchListActionsTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func LogForwardingProfileDataSourceMatchListActionsTypeIntegrationSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("integration"),
				path.MatchRelative().AtParent().AtName("tagging"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"action": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *LogForwardingProfileDataSourceMatchListActionsTypeIntegrationObject) getTypeFor(name string) attr.Type {
	schema := LogForwardingProfileDataSourceMatchListActionsTypeIntegrationSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func LogForwardingProfileDataSourceMatchListActionsTypeTaggingSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("integration"),
				path.MatchRelative().AtParent().AtName("tagging"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"target": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"action": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"timeout": dsschema.Int64Attribute{
				Description: "timeout in minutes",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"registration": LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationSchema(),

			"tags": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *LogForwardingProfileDataSourceMatchListActionsTypeTaggingObject) getTypeFor(name string) attr.Type {
	schema := LogForwardingProfileDataSourceMatchListActionsTypeTaggingSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"localhost": LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationLocalhostSchema(),

			"panorama": LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationPanoramaSchema(),

			"remote": LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationRemoteSchema(),
		},
	}
}

func (o *LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationObject) getTypeFor(name string) attr.Type {
	schema := LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationLocalhostSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("localhost"),
				path.MatchRelative().AtParent().AtName("panorama"),
				path.MatchRelative().AtParent().AtName("remote"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationLocalhostObject) getTypeFor(name string) attr.Type {
	schema := LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationLocalhostSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationPanoramaSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("localhost"),
				path.MatchRelative().AtParent().AtName("panorama"),
				path.MatchRelative().AtParent().AtName("remote"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationPanoramaObject) getTypeFor(name string) attr.Type {
	schema := LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationPanoramaSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationRemoteSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("localhost"),
				path.MatchRelative().AtParent().AtName("panorama"),
				path.MatchRelative().AtParent().AtName("remote"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"http_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationRemoteObject) getTypeFor(name string) attr.Type {
	schema := LogForwardingProfileDataSourceMatchListActionsTypeTaggingRegistrationRemoteSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func LogForwardingProfileDataSourceLocationSchema() rsschema.Attribute {
	return LogForwardingProfileLocationSchema()
}

// Metadata returns the data source type name.
func (d *LogForwardingProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_log_forwarding_profile"
}

// Schema defines the schema for this data source.
func (d *LogForwardingProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = LogForwardingProfileDataSourceSchema()
}

// Configure prepares the struct.
func (d *LogForwardingProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*pango.Client)
	specifier, _, err := logforwarding.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	d.manager = sdkmanager.NewEntryObjectManager(d.client, logforwarding.NewService(d.client), specifier, logforwarding.SpecMatches)
}
func (o *LogForwardingProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state LogForwardingProfileDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location logforwarding.Location

	if !savestate.Location.Shared.IsNull() && savestate.Location.Shared.ValueBool() {
		location.Shared = true
	}
	if savestate.Location.DeviceGroup != nil {
		location.DeviceGroup = &logforwarding.DeviceGroupLocation{

			PanoramaDevice: savestate.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    savestate.Location.DeviceGroup.Name.ValueString(),
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_log_forwarding_profile_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, location, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &LogForwardingProfileResource{}
	_ resource.ResourceWithConfigure   = &LogForwardingProfileResource{}
	_ resource.ResourceWithImportState = &LogForwardingProfileResource{}
)

func NewLogForwardingProfileResource() resource.Resource {
	if _, found := resourceFuncMap["panos_log_forwarding_profile"]; !found {
		resourceFuncMap["panos_log_forwarding_profile"] = resourceFuncs{
			CreateImportId: LogForwardingProfileImportStateCreator,
		}
	}
	return &LogForwardingProfileResource{}
}

type LogForwardingProfileResource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*logforwarding.Entry, logforwarding.Location, *logforwarding.Service]
}

func LogForwardingProfileResourceLocationSchema() rsschema.Attribute {
	return LogForwardingProfileLocationSchema()
}

type LogForwardingProfileResourceModel struct {
	Location                   LogForwardingProfileLocation `tfsdk:"location"`
	Name                       types.String                 `tfsdk:"name"`
	Description                types.String                 `tfsdk:"description"`
	DisableOverride            types.String                 `tfsdk:"disable_override"`
	EnhancedApplicationLogging types.Bool                   `tfsdk:"enhanced_application_logging"`
	MatchList                  types.List                   `tfsdk:"match_list"`
}
type LogForwardingProfileResourceMatchListObject struct {
	Name           types.String `tfsdk:"name"`
	ActionDesc     types.String `tfsdk:"action_desc"`
	LogType        types.String `tfsdk:"log_type"`
	Filter         types.String `tfsdk:"filter"`
	SendToPanorama types.Bool   `tfsdk:"send_to_panorama"`
	Quarantine     types.Bool   `tfsdk:"quarantine"`
	SendSnmptrap   types.List   `tfsdk:"send_snmptrap"`
	SendEmail      types.List   `tfsdk:"send_email"`
	SendSyslog     types.List   `tfsdk:"send_syslog"`
	SendHttp       types.List   `tfsdk:"send_http"`
	Actions        types.List   `tfsdk:"actions"`
}
type LogForwardingProfileResourceMatchListActionsObject struct {
	Name types.String                                            `tfsdk:"name"`
	Type *LogForwardingProfileResourceMatchListActionsTypeObject `tfsdk:"type"`
}
type LogForwardingProfileResourceMatchListActionsTypeObject struct {
	Integration *LogForwardingProfileResourceMatchListActionsTypeIntegrationObject `tfsdk:"integration"`
	Tagging     *LogForwardingProfileResourceMatchListActionsTypeTaggingObject     `tfsdk:"tagging"`
}
type LogForwardingProfileResourceMatchListActionsTypeIntegrationObject struct {
	Action types.String `tfsdk:"action"`
}
type LogForwardingProfileResourceMatchListActionsTypeTaggingObject struct {
	Target       types.String                                                               `tfsdk:"target"`
	Action       types.String                                                               `tfsdk:"action"`
	Timeout      types.Int64                                                                `tfsdk:"timeout"`
	Registration *LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationObject `tfsdk:"registration"`
	Tags         types.List                                                                 `tfsdk:"tags"`
}
type LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationObject struct {
	Localhost *LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationLocalhostObject `tfsdk:"localhost"`
	Panorama  *LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationPanoramaObject  `tfsdk:"panorama"`
	Remote    *LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationRemoteObject    `tfsdk:"remote"`
}
type LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationLocalhostObject struct {
}
type LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationPanoramaObject struct {
}
type LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationRemoteObject struct {
	HttpProfile types.String `tfsdk:"http_profile"`
}

func (r *LogForwardingProfileResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func LogForwardingProfileResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": LogForwardingProfileResourceLocationSchema(),

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"description": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"disable_override": rsschema.StringAttribute{
				Description: "disable object override in child device groups",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,

				Validators: []validator.String{
					stringvalidator.OneOf([]string{
						"yes",
						"no",
					}...),
				},
			},

			"enhanced_application_logging": rsschema.BoolAttribute{
				Description: "Enabling enhanced-application-logging",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"match_list": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: LogForwardingProfileResourceMatchListSchema(),
			},
		},
	}
}

func (o *LogForwardingProfileResourceModel) getTypeFor(name string) attr.Type {
	schema := LogForwardingProfileResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func LogForwardingProfileResourceMatchListSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"action_desc": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_type": rsschema.StringAttribute{
				Description: "Pick log type",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("traffic"),
			},

			"filter": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"send_to_panorama": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"quarantine": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"send_snmptrap": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"send_email": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"send_syslog": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"send_http": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"actions": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: LogForwardingProfileResourceMatchListActionsSchema(),
			},
		},
	}
}

func (o *LogForwardingProfileResourceMatchListObject) getTypeFor(name string) attr.Type {
	schema := LogForwardingProfileResourceMatchListSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func LogForwardingProfileResourceMatchListActionsSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"type": LogForwardingProfileResourceMatchListActionsTypeSchema(),
		},
	}
}

func (o *LogForwardingProfileResourceMatchListActionsObject) getTypeFor(name string) attr.Type {
	schema := LogForwardingProfileResourceMatchListActionsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func LogForwardingProfileResourceMatchListActionsTypeSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"integration": LogForwardingProfileResourceMatchListActionsTypeIntegrationSchema(),

			"tagging": LogForwardingProfileResourceMatchListActionsTypeTaggingSchema(),
		},
	}
}

func (o *LogForwardingProfileResourceMatchListActionsTypeObject) getTypeFor(name string) attr.Type {
	schema := LogForwardingProfileResourceMatchListActionsTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func LogForwardingProfileResourceMatchListActionsTypeIntegrationSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("integration"),
				path.MatchRelative().AtParent().AtName("tagging"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"action": rsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("Azure-Security-Center-Integration"),
			},
		},
	}
}

func (o *LogForwardingProfileResourceMatchListActionsTypeIntegrationObject) getTypeFor(name string) attr.Type {
	schema := LogForwardingProfileResourceMatchListActionsTypeIntegrationSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func LogForwardingProfileResourceMatchListActionsTypeTaggingSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("integration"),
				path.MatchRelative().AtParent().AtName("tagging"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"target": rsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("source-address"),
			},

			"action": rsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("add-tag"),
			},

			"timeout": rsschema.Int64Attribute{
				Description: "timeout in minutes",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(0),
			},

			"registration": LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationSchema(),

			"tags": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *LogForwardingProfileResourceMatchListActionsTypeTaggingObject) getTypeFor(name string) attr.Type {
	schema := LogForwardingProfileResourceMatchListActionsTypeTaggingSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"localhost": LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationLocalhostSchema(),

			"panorama": LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationPanoramaSchema(),

			"remote": LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationRemoteSchema(),
		},
	}
}

func (o *LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationObject) getTypeFor(name string) attr.Type {
	schema := LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationLocalhostSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("localhost"),
				path.MatchRelative().AtParent().AtName("panorama"),
				path.MatchRelative().AtParent().AtName("remote"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationLocalhostObject) getTypeFor(name string) attr.Type {
	schema := LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationLocalhostSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationPanoramaSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("localhost"),
				path.MatchRelative().AtParent().AtName("panorama"),
				path.MatchRelative().AtParent().AtName("remote"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationPanoramaObject) getTypeFor(name string) attr.Type {
	schema := LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationPanoramaSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationRemoteSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("localhost"),
				path.MatchRelative().AtParent().AtName("panorama"),
				path.MatchRelative().AtParent().AtName("remote"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"http_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationRemoteObject) getTypeFor(name string) attr.Type {
	schema := LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationRemoteSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *LogForwardingProfileResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_log_forwarding_profile"
}

func (r *LogForwardingProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = LogForwardingProfileResourceSchema()
}

// </ResourceSchema>

func (r *LogForwardingProfileResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*pango.Client)
	specifier, _, err := logforwarding.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	r.manager = sdkmanager.NewEntryObjectManager(r.client, logforwarding.NewService(r.client), specifier, logforwarding.SpecMatches)
}

func (o *LogForwardingProfileResourceModel) CopyToPango(ctx context.Context, obj **logforwarding.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	description_value := o.Description.ValueStringPointer()
	disableOverride_value := o.DisableOverride.ValueStringPointer()
	enhancedApplicationLogging_value := o.EnhancedApplicationLogging.ValueBoolPointer()
	var matchList_tf_entries []LogForwardingProfileResourceMatchListObject
	var matchList_pango_entries []logforwarding.MatchList
	{
		d := o.MatchList.ElementsAs(ctx, &matchList_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range matchList_tf_entries {
			var entry *logforwarding.MatchList
			diags.Append(elt.CopyToPango(ctx, &entry, encrypted)...)
			if diags.HasError() {
				return diags
			}
			matchList_pango_entries = append(matchList_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(logforwarding.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Description = description_value
	(*obj).DisableOverride = disableOverride_value
	(*obj).EnhancedApplicationLogging = enhancedApplicationLogging_value
	(*obj).MatchList = matchList_pango_entries

	return diags
}
func (o *LogForwardingProfileResourceMatchListObject) CopyToPango(ctx context.Context, obj **logforwarding.MatchList, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	actionDesc_value := o.ActionDesc.ValueStringPointer()
	logType_value := o.LogType.ValueStringPointer()
	filter_value := o.Filter.ValueStringPointer()
	sendToPanorama_value := o.SendToPanorama.ValueBoolPointer()
	quarantine_value := o.Quarantine.ValueBoolPointer()
	sendSnmptrap_pango_entries := make([]string, 0)
	diags.Append(o.SendSnmptrap.ElementsAs(ctx, &sendSnmptrap_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sendEmail_pango_entries := make([]string, 0)
	diags.Append(o.SendEmail.ElementsAs(ctx, &sendEmail_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sendSyslog_pango_entries := make([]string, 0)
	diags.Append(o.SendSyslog.ElementsAs(ctx, &sendSyslog_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sendHttp_pango_entries := make([]string, 0)
	diags.Append(o.SendHttp.ElementsAs(ctx, &sendHttp_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var actions_tf_entries []LogForwardingProfileResourceMatchListActionsObject
	var actions_pango_entries []logforwarding.MatchListActions
	{
		d := o.Actions.ElementsAs(ctx, &actions_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range actions_tf_entries {
			var entry *logforwarding.MatchListActions
			diags.Append(elt.CopyToPango(ctx, &entry, encrypted)...)
			if diags.HasError() {
				return diags
			}
			actions_pango_entries = append(actions_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(logforwarding.MatchList)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).ActionDesc = actionDesc_value
	(*obj).LogType = logType_value
	(*obj).Filter = filter_value
	(*obj).SendToPanorama = sendToPanorama_value
	(*obj).Quarantine = quarantine_value
	(*obj).SendSnmptrap = sendSnmptrap_pango_entries
	(*obj).SendEmail = sendEmail_pango_entries
	(*obj).SendSyslog = sendSyslog_pango_entries
	(*obj).SendHttp = sendHttp_pango_entries
	(*obj).Actions = actions_pango_entries

	return diags
}
func (o *LogForwardingProfileResourceMatchListActionsObject) CopyToPango(ctx context.Context, obj **logforwarding.MatchListActions, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var type_entry *logforwarding.MatchListActionsType
	if o.Type != nil {
		if *obj != nil && (*obj).Type != nil {
			type_entry = (*obj).Type
		} else {
			type_entry = new(logforwarding.MatchListActionsType)
		}

		diags.Append(o.Type.CopyToPango(ctx, &type_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(logforwarding.MatchListActions)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Type = type_entry

	return diags
}
func (o *LogForwardingProfileResourceMatchListActionsTypeObject) CopyToPango(ctx context.Context, obj **logforwarding.MatchListActionsType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var integration_entry *logforwarding.MatchListActionsTypeIntegration
	if o.Integration != nil {
		if *obj != nil && (*obj).Integration != nil {
			integration_entry = (*obj).Integration
		} else {
			integration_entry = new(logforwarding.MatchListActionsTypeIntegration)
		}

		diags.Append(o.Integration.CopyToPango(ctx, &integration_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var tagging_entry *logforwarding.MatchListActionsTypeTagging
	if o.Tagging != nil {
		if *obj != nil && (*obj).Tagging != nil {
			tagging_entry = (*obj).Tagging
		} else {
			tagging_entry = new(logforwarding.MatchListActionsTypeTagging)
		}

		diags.Append(o.Tagging.CopyToPango(ctx, &tagging_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(logforwarding.MatchListActionsType)
	}
	(*obj).Integration = integration_entry
	(*obj).Tagging = tagging_entry

	return diags
}
func (o *LogForwardingProfileResourceMatchListActionsTypeIntegrationObject) CopyToPango(ctx context.Context, obj **logforwarding.MatchListActionsTypeIntegration, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	action_value := o.Action.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(logforwarding.MatchListActionsTypeIntegration)
	}
	(*obj).Action = action_value

	return diags
}
func (o *LogForwardingProfileResourceMatchListActionsTypeTaggingObject) CopyToPango(ctx context.Context, obj **logforwarding.MatchListActionsTypeTagging, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	target_value := o.Target.ValueStringPointer()
	action_value := o.Action.ValueStringPointer()
	timeout_value := o.Timeout.ValueInt64Pointer()
	var registration_entry *logforwarding.MatchListActionsTypeTaggingRegistration
	if o.Registration != nil {
		if *obj != nil && (*obj).Registration != nil {
			registration_entry = (*obj).Registration
		} else {
			registration_entry = new(logforwarding.MatchListActionsTypeTaggingRegistration)
		}

		diags.Append(o.Registration.CopyToPango(ctx, &registration_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	tags_pango_entries := make([]string, 0)
	diags.Append(o.Tags.ElementsAs(ctx, &tags_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(logforwarding.MatchListActionsTypeTagging)
	}
	(*obj).Target = target_value
	(*obj).Action = action_value
	(*obj).Timeout = timeout_value
	(*obj).Registration = registration_entry
	(*obj).Tags = tags_pango_entries

	return diags
}
func (o *LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationObject) CopyToPango(ctx context.Context, obj **logforwarding.MatchListActionsTypeTaggingRegistration, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var localhost_entry *logforwarding.MatchListActionsTypeTaggingRegistrationLocalhost
	if o.Localhost != nil {
		if *obj != nil && (*obj).Localhost != nil {
			localhost_entry = (*obj).Localhost
		} else {
			localhost_entry = new(logforwarding.MatchListActionsTypeTaggingRegistrationLocalhost)
		}

		diags.Append(o.Localhost.CopyToPango(ctx, &localhost_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var panorama_entry *logforwarding.MatchListActionsTypeTaggingRegistrationPanorama
	if o.Panorama != nil {
		if *obj != nil && (*obj).Panorama != nil {
			panorama_entry = (*obj).Panorama
		} else {
			panorama_entry = new(logforwarding.MatchListActionsTypeTaggingRegistrationPanorama)
		}

		diags.Append(o.Panorama.CopyToPango(ctx, &panorama_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var remote_entry *logforwarding.MatchListActionsTypeTaggingRegistrationRemote
	if o.Remote != nil {
		if *obj != nil && (*obj).Remote != nil {
			remote_entry = (*obj).Remote
		} else {
			remote_entry = new(logforwarding.MatchListActionsTypeTaggingRegistrationRemote)
		}

		diags.Append(o.Remote.CopyToPango(ctx, &remote_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(logforwarding.MatchListActionsTypeTaggingRegistration)
	}
	(*obj).Localhost = localhost_entry
	(*obj).Panorama = panorama_entry
	(*obj).Remote = remote_entry

	return diags
}
func (o *LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationLocalhostObject) CopyToPango(ctx context.Context, obj **logforwarding.MatchListActionsTypeTaggingRegistrationLocalhost, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(logforwarding.MatchListActionsTypeTaggingRegistrationLocalhost)
	}

	return diags
}
func (o *LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationPanoramaObject) CopyToPango(ctx context.Context, obj **logforwarding.MatchListActionsTypeTaggingRegistrationPanorama, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(logforwarding.MatchListActionsTypeTaggingRegistrationPanorama)
	}

	return diags
}
func (o *LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationRemoteObject) CopyToPango(ctx context.Context, obj **logforwarding.MatchListActionsTypeTaggingRegistrationRemote, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	httpProfile_value := o.HttpProfile.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(logforwarding.MatchListActionsTypeTaggingRegistrationRemote)
	}
	(*obj).HttpProfile = httpProfile_value

	return diags
}

func (o *LogForwardingProfileResourceModel) CopyFromPango(ctx context.Context, obj *logforwarding.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var matchList_list types.List
	{
		var matchList_tf_entries []LogForwardingProfileResourceMatchListObject
		for _, elt := range obj.MatchList {
			var entry LogForwardingProfileResourceMatchListObject
			entry_diags := entry.CopyFromPango(ctx, &elt, encrypted)
			diags.Append(entry_diags...)
			matchList_tf_entries = append(matchList_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("match_list")
		matchList_list, list_diags = types.ListValueFrom(ctx, schemaType, matchList_tf_entries)
		diags.Append(list_diags...)
	}

	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var disableOverride_value types.String
	if obj.DisableOverride != nil {
		disableOverride_value = types.StringValue(*obj.DisableOverride)
	}
	var enhancedApplicationLogging_value types.Bool
	if obj.EnhancedApplicationLogging != nil {
		enhancedApplicationLogging_value = types.BoolValue(*obj.EnhancedApplicationLogging)
	}
	o.Name = types.StringValue(obj.Name)
	o.Description = description_value
	o.DisableOverride = disableOverride_value
	o.EnhancedApplicationLogging = enhancedApplicationLogging_value
	o.MatchList = matchList_list

	return diags
}

func (o *LogForwardingProfileResourceMatchListObject) CopyFromPango(ctx context.Context, obj *logforwarding.MatchList, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var sendSnmptrap_list types.List
	{
		var list_diags diag.Diagnostics
		sendSnmptrap_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SendSnmptrap)
		diags.Append(list_diags...)
	}
	var sendEmail_list types.List
	{
		var list_diags diag.Diagnostics
		sendEmail_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SendEmail)
		diags.Append(list_diags...)
	}
	var sendSyslog_list types.List
	{
		var list_diags diag.Diagnostics
		sendSyslog_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SendSyslog)
		diags.Append(list_diags...)
	}
	var sendHttp_list types.List
	{
		var list_diags diag.Diagnostics
		sendHttp_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SendHttp)
		diags.Append(list_diags...)
	}
	var actions_list types.List
	{
		var actions_tf_entries []LogForwardingProfileResourceMatchListActionsObject
		for _, elt := range obj.Actions {
			var entry LogForwardingProfileResourceMatchListActionsObject
			entry_diags := entry.CopyFromPango(ctx, &elt, encrypted)
			diags.Append(entry_diags...)
			actions_tf_entries = append(actions_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("actions")
		actions_list, list_diags = types.ListValueFrom(ctx, schemaType, actions_tf_entries)
		diags.Append(list_diags...)
	}

	var actionDesc_value types.String
	if obj.ActionDesc != nil {
		actionDesc_value = types.StringValue(*obj.ActionDesc)
	}
	var logType_value types.String
	if obj.LogType != nil {
		logType_value = types.StringValue(*obj.LogType)
	}
	var filter_value types.String
	if obj.Filter != nil {
		filter_value = types.StringValue(*obj.Filter)
	}
	var sendToPanorama_value types.Bool
	if obj.SendToPanorama != nil {
		sendToPanorama_value = types.BoolValue(*obj.SendToPanorama)
	}
	var quarantine_value types.Bool
	if obj.Quarantine != nil {
		quarantine_value = types.BoolValue(*obj.Quarantine)
	}
	o.Name = types.StringValue(obj.Name)
	o.ActionDesc = actionDesc_value
	o.LogType = logType_value
	o.Filter = filter_value
	o.SendToPanorama = sendToPanorama_value
	o.Quarantine = quarantine_value
	o.SendSnmptrap = sendSnmptrap_list
	o.SendEmail = sendEmail_list
	o.SendSyslog = sendSyslog_list
	o.SendHttp = sendHttp_list
	o.Actions = actions_list

	return diags
}

func (o *LogForwardingProfileResourceMatchListActionsObject) CopyFromPango(ctx context.Context, obj *logforwarding.MatchListActions, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var type_object *LogForwardingProfileResourceMatchListActionsTypeObject
	if obj.Type != nil {
		type_object = new(LogForwardingProfileResourceMatchListActionsTypeObject)

		diags.Append(type_object.CopyFromPango(ctx, obj.Type, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Name = types.StringValue(obj.Name)
	o.Type = type_object

	return diags
}

func (o *LogForwardingProfileResourceMatchListActionsTypeObject) CopyFromPango(ctx context.Context, obj *logforwarding.MatchListActionsType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var integration_object *LogForwardingProfileResourceMatchListActionsTypeIntegrationObject
	if obj.Integration != nil {
		integration_object = new(LogForwardingProfileResourceMatchListActionsTypeIntegrationObject)

		diags.Append(integration_object.CopyFromPango(ctx, obj.Integration, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var tagging_object *LogForwardingProfileResourceMatchListActionsTypeTaggingObject
	if obj.Tagging != nil {
		tagging_object = new(LogForwardingProfileResourceMatchListActionsTypeTaggingObject)

		diags.Append(tagging_object.CopyFromPango(ctx, obj.Tagging, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Integration = integration_object
	o.Tagging = tagging_object

	return diags
}

func (o *LogForwardingProfileResourceMatchListActionsTypeIntegrationObject) CopyFromPango(ctx context.Context, obj *logforwarding.MatchListActionsTypeIntegration, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var action_value types.String
	if obj.Action != nil {
		action_value = types.StringValue(*obj.Action)
	}
	o.Action = action_value

	return diags
}

func (o *LogForwardingProfileResourceMatchListActionsTypeTaggingObject) CopyFromPango(ctx context.Context, obj *logforwarding.MatchListActionsTypeTagging, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var tags_list types.List
	{
		var list_diags diag.Diagnostics
		tags_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tags)
		diags.Append(list_diags...)
	}
	var registration_object *LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationObject
	if obj.Registration != nil {
		registration_object = new(LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationObject)

		diags.Append(registration_object.CopyFromPango(ctx, obj.Registration, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var target_value types.String
	if obj.Target != nil {
		target_value = types.StringValue(*obj.Target)
	}
	var action_value types.String
	if obj.Action != nil {
		action_value = types.StringValue(*obj.Action)
	}
	var timeout_value types.Int64
	if obj.Timeout != nil {
		timeout_value = types.Int64Value(*obj.Timeout)
	}
	o.Target = target_value
	o.Action = action_value
	o.Timeout = timeout_value
	o.Registration = registration_object
	o.Tags = tags_list

	return diags
}

func (o *LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationObject) CopyFromPango(ctx context.Context, obj *logforwarding.MatchListActionsTypeTaggingRegistration, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var localhost_object *LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationLocalhostObject
	if obj.Localhost != nil {
		localhost_object = new(LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationLocalhostObject)

		diags.Append(localhost_object.CopyFromPango(ctx, obj.Localhost, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var panorama_object *LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationPanoramaObject
	if obj.Panorama != nil {
		panorama_object = new(LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationPanoramaObject)

		diags.Append(panorama_object.CopyFromPango(ctx, obj.Panorama, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var remote_object *LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationRemoteObject
	if obj.Remote != nil {
		remote_object = new(LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationRemoteObject)

		diags.Append(remote_object.CopyFromPango(ctx, obj.Remote, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Localhost = localhost_object
	o.Panorama = panorama_object
	o.Remote = remote_object

	return diags
}

func (o *LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationLocalhostObject) CopyFromPango(ctx context.Context, obj *logforwarding.MatchListActionsTypeTaggingRegistrationLocalhost, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationPanoramaObject) CopyFromPango(ctx context.Context, obj *logforwarding.MatchListActionsTypeTaggingRegistrationPanorama, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *LogForwardingProfileResourceMatchListActionsTypeTaggingRegistrationRemoteObject) CopyFromPango(ctx context.Context, obj *logforwarding.MatchListActionsTypeTaggingRegistrationRemote, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var httpProfile_value types.String
	if obj.HttpProfile != nil {
		httpProfile_value = types.StringValue(*obj.HttpProfile)
	}
	o.HttpProfile = httpProfile_value

	return diags
}

func (r *LogForwardingProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state LogForwardingProfileResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_log_forwarding_profile_resource",
		"function":      "Create",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	// Determine the location.

	var location logforwarding.Location

	if !state.Location.Shared.IsNull() && state.Location.Shared.ValueBool() {
		location.Shared = true
	}
	if state.Location.DeviceGroup != nil {
		location.DeviceGroup = &logforwarding.DeviceGroupLocation{

			PanoramaDevice: state.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    state.Location.DeviceGroup.Name.ValueString(),
		}
	}

	if err := location.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *logforwarding.Entry

	resp.Diagnostics.Append(state.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.
	created, err := r.manager.Create(ctx, location, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	resp.Diagnostics.Append(state.CopyFromPango(ctx, created, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}
	state.Name = types.StringValue(created.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
func (o *LogForwardingProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state LogForwardingProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location logforwarding.Location

	if !savestate.Location.Shared.IsNull() && savestate.Location.Shared.ValueBool() {
		location.Shared = true
	}
	if savestate.Location.DeviceGroup != nil {
		location.DeviceGroup = &logforwarding.DeviceGroupLocation{

			PanoramaDevice: savestate.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    savestate.Location.DeviceGroup.Name.ValueString(),
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_log_forwarding_profile_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, location, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *LogForwardingProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state LogForwardingProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location logforwarding.Location

	if !state.Location.Shared.IsNull() && state.Location.Shared.ValueBool() {
		location.Shared = true
	}
	if state.Location.DeviceGroup != nil {
		location.DeviceGroup = &logforwarding.DeviceGroupLocation{

			PanoramaDevice: state.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    state.Location.DeviceGroup.Name.ValueString(),
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_log_forwarding_profile_resource",
		"function":      "Update",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}
	obj, err := r.manager.Read(ctx, location, plan.Name.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Perform the operation.
	updated, err := r.manager.Update(ctx, location, obj, obj.Name)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	copy_diags := state.CopyFromPango(ctx, updated, nil)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *LogForwardingProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state LogForwardingProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_log_forwarding_profile_resource",
		"function":      "Delete",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var location logforwarding.Location

	if !state.Location.Shared.IsNull() && state.Location.Shared.ValueBool() {
		location.Shared = true
	}
	if state.Location.DeviceGroup != nil {
		location.DeviceGroup = &logforwarding.DeviceGroupLocation{

			PanoramaDevice: state.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    state.Location.DeviceGroup.Name.ValueString(),
		}
	}

	err := r.manager.Delete(ctx, location, []string{state.Name.ValueString()})
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}

}

type LogForwardingProfileImportState struct {
	Location LogForwardingProfileLocation `json:"location"`
	Name     string                       `json:"name"`
}

func LogForwardingProfileImportStateCreator(ctx context.Context, resource types.Object) ([]byte, error) {
	attrs := resource.Attributes()
	if attrs == nil {
		return nil, fmt.Errorf("Object has no attributes")
	}

	locationAttr, ok := attrs["location"]
	if !ok {
		return nil, fmt.Errorf("location attribute missing")
	}

	var location LogForwardingProfileLocation
	switch value := locationAttr.(type) {
	case types.Object:
		value.As(ctx, &location, basetypes.ObjectAsOptions{})
	default:
		return nil, fmt.Errorf("location attribute expected to be an object")
	}
	nameAttr, ok := attrs["name"]
	if !ok {
		return nil, fmt.Errorf("name attribute missing")
	}

	var name string
	switch value := nameAttr.(type) {
	case types.String:
		name = value.ValueString()
	default:
		return nil, fmt.Errorf("name attribute expected to be a string")
	}

	importStruct := LogForwardingProfileImportState{
		Location: location,
		Name:     name,
	}

	return json.Marshal(importStruct)
}

func (r *LogForwardingProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	var obj LogForwardingProfileImportState
	data, err := base64.StdEncoding.DecodeString(req.ID)
	if err != nil {
		resp.Diagnostics.AddError("Failed to decode Import ID", err.Error())
		return
	}

	err = json.Unmarshal(data, &obj)
	if err != nil {
		resp.Diagnostics.AddError("Failed to unmarshal Import ID", err.Error())
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("location"), obj.Location)...)
	if resp.Diagnostics.HasError() {
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("name"), obj.Name)...)
}

type LogForwardingProfileDeviceGroupLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
}
type LogForwardingProfileLocation struct {
	Shared      types.Bool                               `tfsdk:"shared"`
	DeviceGroup *LogForwardingProfileDeviceGroupLocation `tfsdk:"device_group"`
}

func LogForwardingProfileLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"shared": rsschema.BoolAttribute{
				Description: "Panorama shared object",
				Optional:    true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Bool{
					boolvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("shared"),
						path.MatchRelative().AtParent().AtName("device_group"),
					}...),
				},
			},
			"device_group": rsschema.SingleNestedAttribute{
				Description: "Located in a specific Device Group",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Panorama device name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Device Group name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o LogForwardingProfileDeviceGroupLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		PanoramaDevice *string `json:"panorama_device"`
		Name           *string `json:"name"`
	}{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *LogForwardingProfileDeviceGroupLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device"`
		Name           *string `json:"name"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o LogForwardingProfileLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		Shared      *bool                                    `json:"shared"`
		DeviceGroup *LogForwardingProfileDeviceGroupLocation `json:"device_group"`
	}{
		Shared:      o.Shared.ValueBoolPointer(),
		DeviceGroup: o.DeviceGroup,
	}

	return json.Marshal(obj)
}

func (o *LogForwardingProfileLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Shared      *bool                                    `json:"shared"`
		DeviceGroup *LogForwardingProfileDeviceGroupLocation `json:"device_group"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.Shared = types.BoolPointerValue(shadow.Shared)
	o.DeviceGroup = shadow.DeviceGroup

	return nil
}
