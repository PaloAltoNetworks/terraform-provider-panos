package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/device/adminrole"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &AdminRoleDataSource{}
	_ datasource.DataSourceWithConfigure = &AdminRoleDataSource{}
)

func NewAdminRoleDataSource() datasource.DataSource {
	return &AdminRoleDataSource{}
}

type AdminRoleDataSource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*adminrole.Entry, adminrole.Location, *adminrole.Service]
}

type AdminRoleDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type AdminRoleDataSourceModel struct {
	Location    AdminRoleLocation              `tfsdk:"location"`
	Name        types.String                   `tfsdk:"name"`
	Description types.String                   `tfsdk:"description"`
	Role        *AdminRoleDataSourceRoleObject `tfsdk:"role"`
}
type AdminRoleDataSourceRoleObject struct {
	Device *AdminRoleDataSourceRoleDeviceObject `tfsdk:"device"`
	Vsys   *AdminRoleDataSourceRoleVsysObject   `tfsdk:"vsys"`
}
type AdminRoleDataSourceRoleDeviceObject struct {
	Cli     types.String                                `tfsdk:"cli"`
	Restapi *AdminRoleDataSourceRoleDeviceRestapiObject `tfsdk:"restapi"`
	Webui   *AdminRoleDataSourceRoleDeviceWebuiObject   `tfsdk:"webui"`
	Xmlapi  *AdminRoleDataSourceRoleDeviceXmlapiObject  `tfsdk:"xmlapi"`
}
type AdminRoleDataSourceRoleDeviceRestapiObject struct {
	Device   *AdminRoleDataSourceRoleDeviceRestapiDeviceObject   `tfsdk:"device"`
	Network  *AdminRoleDataSourceRoleDeviceRestapiNetworkObject  `tfsdk:"network"`
	Objects  *AdminRoleDataSourceRoleDeviceRestapiObjectsObject  `tfsdk:"objects"`
	Policies *AdminRoleDataSourceRoleDeviceRestapiPoliciesObject `tfsdk:"policies"`
	System   *AdminRoleDataSourceRoleDeviceRestapiSystemObject   `tfsdk:"system"`
}
type AdminRoleDataSourceRoleDeviceRestapiDeviceObject struct {
	EmailServerProfiles    types.String `tfsdk:"email_server_profiles"`
	HttpServerProfiles     types.String `tfsdk:"http_server_profiles"`
	LdapServerProfiles     types.String `tfsdk:"ldap_server_profiles"`
	LogInterfaceSetting    types.String `tfsdk:"log_interface_setting"`
	SnmpTrapServerProfiles types.String `tfsdk:"snmp_trap_server_profiles"`
	SyslogServerProfiles   types.String `tfsdk:"syslog_server_profiles"`
	VirtualSystems         types.String `tfsdk:"virtual_systems"`
}
type AdminRoleDataSourceRoleDeviceRestapiNetworkObject struct {
	AggregateEthernetInterfaces             types.String `tfsdk:"aggregate_ethernet_interfaces"`
	BfdNetworkProfiles                      types.String `tfsdk:"bfd_network_profiles"`
	BgpRoutingProfiles                      types.String `tfsdk:"bgp_routing_profiles"`
	DhcpRelays                              types.String `tfsdk:"dhcp_relays"`
	DhcpServers                             types.String `tfsdk:"dhcp_servers"`
	DnsProxies                              types.String `tfsdk:"dns_proxies"`
	EthernetInterfaces                      types.String `tfsdk:"ethernet_interfaces"`
	GlobalprotectClientlessAppGroups        types.String `tfsdk:"globalprotect_clientless_app_groups"`
	GlobalprotectClientlessApps             types.String `tfsdk:"globalprotect_clientless_apps"`
	GlobalprotectGateways                   types.String `tfsdk:"globalprotect_gateways"`
	GlobalprotectIpsecCryptoNetworkProfiles types.String `tfsdk:"globalprotect_ipsec_crypto_network_profiles"`
	GlobalprotectMdmServers                 types.String `tfsdk:"globalprotect_mdm_servers"`
	GlobalprotectPortals                    types.String `tfsdk:"globalprotect_portals"`
	GreTunnels                              types.String `tfsdk:"gre_tunnels"`
	IkeCryptoNetworkProfiles                types.String `tfsdk:"ike_crypto_network_profiles"`
	IkeGatewayNetworkProfiles               types.String `tfsdk:"ike_gateway_network_profiles"`
	InterfaceManagementNetworkProfiles      types.String `tfsdk:"interface_management_network_profiles"`
	IpsecCryptoNetworkProfiles              types.String `tfsdk:"ipsec_crypto_network_profiles"`
	IpsecTunnels                            types.String `tfsdk:"ipsec_tunnels"`
	Lldp                                    types.String `tfsdk:"lldp"`
	LldpNetworkProfiles                     types.String `tfsdk:"lldp_network_profiles"`
	LogicalRouters                          types.String `tfsdk:"logical_routers"`
	LoopbackInterfaces                      types.String `tfsdk:"loopback_interfaces"`
	QosInterfaces                           types.String `tfsdk:"qos_interfaces"`
	QosNetworkProfiles                      types.String `tfsdk:"qos_network_profiles"`
	SdwanInterfaceProfiles                  types.String `tfsdk:"sdwan_interface_profiles"`
	SdwanInterfaces                         types.String `tfsdk:"sdwan_interfaces"`
	TunnelInterfaces                        types.String `tfsdk:"tunnel_interfaces"`
	TunnelMonitorNetworkProfiles            types.String `tfsdk:"tunnel_monitor_network_profiles"`
	VirtualRouters                          types.String `tfsdk:"virtual_routers"`
	VirtualWires                            types.String `tfsdk:"virtual_wires"`
	VlanInterfaces                          types.String `tfsdk:"vlan_interfaces"`
	Vlans                                   types.String `tfsdk:"vlans"`
	ZoneProtectionNetworkProfiles           types.String `tfsdk:"zone_protection_network_profiles"`
	Zones                                   types.String `tfsdk:"zones"`
}
type AdminRoleDataSourceRoleDeviceRestapiObjectsObject struct {
	AddressGroups                           types.String `tfsdk:"address_groups"`
	Addresses                               types.String `tfsdk:"addresses"`
	AntiSpywareSecurityProfiles             types.String `tfsdk:"anti_spyware_security_profiles"`
	AntivirusSecurityProfiles               types.String `tfsdk:"antivirus_security_profiles"`
	ApplicationFilters                      types.String `tfsdk:"application_filters"`
	ApplicationGroups                       types.String `tfsdk:"application_groups"`
	Applications                            types.String `tfsdk:"applications"`
	AuthenticationEnforcements              types.String `tfsdk:"authentication_enforcements"`
	CustomDataPatterns                      types.String `tfsdk:"custom_data_patterns"`
	CustomSpywareSignatures                 types.String `tfsdk:"custom_spyware_signatures"`
	CustomUrlCategories                     types.String `tfsdk:"custom_url_categories"`
	CustomVulnerabilitySignatures           types.String `tfsdk:"custom_vulnerability_signatures"`
	DataFilteringSecurityProfiles           types.String `tfsdk:"data_filtering_security_profiles"`
	DecryptionProfiles                      types.String `tfsdk:"decryption_profiles"`
	Devices                                 types.String `tfsdk:"devices"`
	DosProtectionSecurityProfiles           types.String `tfsdk:"dos_protection_security_profiles"`
	DynamicUserGroups                       types.String `tfsdk:"dynamic_user_groups"`
	ExternalDynamicLists                    types.String `tfsdk:"external_dynamic_lists"`
	FileBlockingSecurityProfiles            types.String `tfsdk:"file_blocking_security_profiles"`
	GlobalprotectHipObjects                 types.String `tfsdk:"globalprotect_hip_objects"`
	GlobalprotectHipProfiles                types.String `tfsdk:"globalprotect_hip_profiles"`
	GtpProtectionSecurityProfiles           types.String `tfsdk:"gtp_protection_security_profiles"`
	LogForwardingProfiles                   types.String `tfsdk:"log_forwarding_profiles"`
	PacketBrokerProfiles                    types.String `tfsdk:"packet_broker_profiles"`
	Regions                                 types.String `tfsdk:"regions"`
	Schedules                               types.String `tfsdk:"schedules"`
	SctpProtectionSecurityProfiles          types.String `tfsdk:"sctp_protection_security_profiles"`
	SdwanErrorCorrectionProfiles            types.String `tfsdk:"sdwan_error_correction_profiles"`
	SdwanPathQualityProfiles                types.String `tfsdk:"sdwan_path_quality_profiles"`
	SdwanSaasQualityProfiles                types.String `tfsdk:"sdwan_saas_quality_profiles"`
	SdwanTrafficDistributionProfiles        types.String `tfsdk:"sdwan_traffic_distribution_profiles"`
	SecurityProfileGroups                   types.String `tfsdk:"security_profile_groups"`
	ServiceGroups                           types.String `tfsdk:"service_groups"`
	Services                                types.String `tfsdk:"services"`
	Tags                                    types.String `tfsdk:"tags"`
	UrlFilteringSecurityProfiles            types.String `tfsdk:"url_filtering_security_profiles"`
	VulnerabilityProtectionSecurityProfiles types.String `tfsdk:"vulnerability_protection_security_profiles"`
	WildfireAnalysisSecurityProfiles        types.String `tfsdk:"wildfire_analysis_security_profiles"`
}
type AdminRoleDataSourceRoleDeviceRestapiPoliciesObject struct {
	ApplicationOverrideRules   types.String `tfsdk:"application_override_rules"`
	AuthenticationRules        types.String `tfsdk:"authentication_rules"`
	DecryptionRules            types.String `tfsdk:"decryption_rules"`
	DosRules                   types.String `tfsdk:"dos_rules"`
	NatRules                   types.String `tfsdk:"nat_rules"`
	NetworkPacketBrokerRules   types.String `tfsdk:"network_packet_broker_rules"`
	PolicyBasedForwardingRules types.String `tfsdk:"policy_based_forwarding_rules"`
	QosRules                   types.String `tfsdk:"qos_rules"`
	SdwanRules                 types.String `tfsdk:"sdwan_rules"`
	SecurityRules              types.String `tfsdk:"security_rules"`
	TunnelInspectionRules      types.String `tfsdk:"tunnel_inspection_rules"`
}
type AdminRoleDataSourceRoleDeviceRestapiSystemObject struct {
	Configuration types.String `tfsdk:"configuration"`
}
type AdminRoleDataSourceRoleDeviceWebuiObject struct {
	Acc        types.String                                        `tfsdk:"acc"`
	Commit     *AdminRoleDataSourceRoleDeviceWebuiCommitObject     `tfsdk:"commit"`
	Dashboard  types.String                                        `tfsdk:"dashboard"`
	Device     *AdminRoleDataSourceRoleDeviceWebuiDeviceObject     `tfsdk:"device"`
	Global     *AdminRoleDataSourceRoleDeviceWebuiGlobalObject     `tfsdk:"global"`
	Monitor    *AdminRoleDataSourceRoleDeviceWebuiMonitorObject    `tfsdk:"monitor"`
	Network    *AdminRoleDataSourceRoleDeviceWebuiNetworkObject    `tfsdk:"network"`
	Objects    *AdminRoleDataSourceRoleDeviceWebuiObjectsObject    `tfsdk:"objects"`
	Operations *AdminRoleDataSourceRoleDeviceWebuiOperationsObject `tfsdk:"operations"`
	Policies   *AdminRoleDataSourceRoleDeviceWebuiPoliciesObject   `tfsdk:"policies"`
	Privacy    *AdminRoleDataSourceRoleDeviceWebuiPrivacyObject    `tfsdk:"privacy"`
	Save       *AdminRoleDataSourceRoleDeviceWebuiSaveObject       `tfsdk:"save"`
	Tasks      types.String                                        `tfsdk:"tasks"`
	Validate   types.String                                        `tfsdk:"validate"`
}
type AdminRoleDataSourceRoleDeviceWebuiCommitObject struct {
	CommitForOtherAdmins types.String `tfsdk:"commit_for_other_admins"`
	Device               types.String `tfsdk:"device"`
	ObjectLevelChanges   types.String `tfsdk:"object_level_changes"`
}
type AdminRoleDataSourceRoleDeviceWebuiDeviceObject struct {
	AccessDomain           types.String                                                         `tfsdk:"access_domain"`
	AdminRoles             types.String                                                         `tfsdk:"admin_roles"`
	Administrators         types.String                                                         `tfsdk:"administrators"`
	AuthenticationProfile  types.String                                                         `tfsdk:"authentication_profile"`
	AuthenticationSequence types.String                                                         `tfsdk:"authentication_sequence"`
	BlockPages             types.String                                                         `tfsdk:"block_pages"`
	CertificateManagement  *AdminRoleDataSourceRoleDeviceWebuiDeviceCertificateManagementObject `tfsdk:"certificate_management"`
	ConfigAudit            types.String                                                         `tfsdk:"config_audit"`
	DataRedistribution     types.String                                                         `tfsdk:"data_redistribution"`
	DeviceQuarantine       types.String                                                         `tfsdk:"device_quarantine"`
	DynamicUpdates         types.String                                                         `tfsdk:"dynamic_updates"`
	GlobalProtectClient    types.String                                                         `tfsdk:"global_protect_client"`
	HighAvailability       types.String                                                         `tfsdk:"high_availability"`
	Licenses               types.String                                                         `tfsdk:"licenses"`
	LocalUserDatabase      *AdminRoleDataSourceRoleDeviceWebuiDeviceLocalUserDatabaseObject     `tfsdk:"local_user_database"`
	LogFwdCard             types.String                                                         `tfsdk:"log_fwd_card"`
	LogSettings            *AdminRoleDataSourceRoleDeviceWebuiDeviceLogSettingsObject           `tfsdk:"log_settings"`
	MasterKey              types.String                                                         `tfsdk:"master_key"`
	Plugins                types.String                                                         `tfsdk:"plugins"`
	PolicyRecommendations  *AdminRoleDataSourceRoleDeviceWebuiDevicePolicyRecommendationsObject `tfsdk:"policy_recommendations"`
	ScheduledLogExport     types.String                                                         `tfsdk:"scheduled_log_export"`
	ServerProfile          *AdminRoleDataSourceRoleDeviceWebuiDeviceServerProfileObject         `tfsdk:"server_profile"`
	Setup                  *AdminRoleDataSourceRoleDeviceWebuiDeviceSetupObject                 `tfsdk:"setup"`
	SharedGateways         types.String                                                         `tfsdk:"shared_gateways"`
	Software               types.String                                                         `tfsdk:"software"`
	Support                types.String                                                         `tfsdk:"support"`
	Troubleshooting        types.String                                                         `tfsdk:"troubleshooting"`
	UserIdentification     types.String                                                         `tfsdk:"user_identification"`
	VirtualSystems         types.String                                                         `tfsdk:"virtual_systems"`
	VmInfoSource           types.String                                                         `tfsdk:"vm_info_source"`
	DhcpSyslogServer       types.String                                                         `tfsdk:"dhcp_syslog_server"`
}
type AdminRoleDataSourceRoleDeviceWebuiDeviceCertificateManagementObject struct {
	CertificateProfile     types.String `tfsdk:"certificate_profile"`
	Certificates           types.String `tfsdk:"certificates"`
	OcspResponder          types.String `tfsdk:"ocsp_responder"`
	Scep                   types.String `tfsdk:"scep"`
	SshServiceProfile      types.String `tfsdk:"ssh_service_profile"`
	SslDecryptionExclusion types.String `tfsdk:"ssl_decryption_exclusion"`
	SslTlsServiceProfile   types.String `tfsdk:"ssl_tls_service_profile"`
}
type AdminRoleDataSourceRoleDeviceWebuiDeviceLocalUserDatabaseObject struct {
	UserGroups types.String `tfsdk:"user_groups"`
	Users      types.String `tfsdk:"users"`
}
type AdminRoleDataSourceRoleDeviceWebuiDeviceLogSettingsObject struct {
	CcAlarm       types.String `tfsdk:"cc_alarm"`
	Config        types.String `tfsdk:"config"`
	Correlation   types.String `tfsdk:"correlation"`
	Globalprotect types.String `tfsdk:"globalprotect"`
	Hipmatch      types.String `tfsdk:"hipmatch"`
	Iptag         types.String `tfsdk:"iptag"`
	ManageLog     types.String `tfsdk:"manage_log"`
	System        types.String `tfsdk:"system"`
	UserId        types.String `tfsdk:"user_id"`
}
type AdminRoleDataSourceRoleDeviceWebuiDevicePolicyRecommendationsObject struct {
	Iot  types.String `tfsdk:"iot"`
	Saas types.String `tfsdk:"saas"`
}
type AdminRoleDataSourceRoleDeviceWebuiDeviceServerProfileObject struct {
	Dns      types.String `tfsdk:"dns"`
	Email    types.String `tfsdk:"email"`
	Http     types.String `tfsdk:"http"`
	Kerberos types.String `tfsdk:"kerberos"`
	Ldap     types.String `tfsdk:"ldap"`
	Mfa      types.String `tfsdk:"mfa"`
	Netflow  types.String `tfsdk:"netflow"`
	Radius   types.String `tfsdk:"radius"`
	SamlIdp  types.String `tfsdk:"saml_idp"`
	Scp      types.String `tfsdk:"scp"`
	SnmpTrap types.String `tfsdk:"snmp_trap"`
	Syslog   types.String `tfsdk:"syslog"`
	Tacplus  types.String `tfsdk:"tacplus"`
}
type AdminRoleDataSourceRoleDeviceWebuiDeviceSetupObject struct {
	ContentId  types.String `tfsdk:"content_id"`
	Hsm        types.String `tfsdk:"hsm"`
	Interfaces types.String `tfsdk:"interfaces"`
	Management types.String `tfsdk:"management"`
	Operations types.String `tfsdk:"operations"`
	Services   types.String `tfsdk:"services"`
	Session    types.String `tfsdk:"session"`
	Telemetry  types.String `tfsdk:"telemetry"`
	Wildfire   types.String `tfsdk:"wildfire"`
}
type AdminRoleDataSourceRoleDeviceWebuiGlobalObject struct {
	SystemAlarms types.String `tfsdk:"system_alarms"`
}
type AdminRoleDataSourceRoleDeviceWebuiMonitorObject struct {
	AppScope                   types.String                                                               `tfsdk:"app_scope"`
	ApplicationReports         types.String                                                               `tfsdk:"application_reports"`
	AutomatedCorrelationEngine *AdminRoleDataSourceRoleDeviceWebuiMonitorAutomatedCorrelationEngineObject `tfsdk:"automated_correlation_engine"`
	BlockIpList                types.String                                                               `tfsdk:"block_ip_list"`
	Botnet                     types.String                                                               `tfsdk:"botnet"`
	CustomReports              *AdminRoleDataSourceRoleDeviceWebuiMonitorCustomReportsObject              `tfsdk:"custom_reports"`
	ExternalLogs               types.String                                                               `tfsdk:"external_logs"`
	GtpReports                 types.String                                                               `tfsdk:"gtp_reports"`
	Logs                       *AdminRoleDataSourceRoleDeviceWebuiMonitorLogsObject                       `tfsdk:"logs"`
	PacketCapture              types.String                                                               `tfsdk:"packet_capture"`
	PdfReports                 *AdminRoleDataSourceRoleDeviceWebuiMonitorPdfReportsObject                 `tfsdk:"pdf_reports"`
	SctpReports                types.String                                                               `tfsdk:"sctp_reports"`
	SessionBrowser             types.String                                                               `tfsdk:"session_browser"`
	ThreatReports              types.String                                                               `tfsdk:"threat_reports"`
	TrafficReports             types.String                                                               `tfsdk:"traffic_reports"`
	UrlFilteringReports        types.String                                                               `tfsdk:"url_filtering_reports"`
	ViewCustomReports          types.String                                                               `tfsdk:"view_custom_reports"`
}
type AdminRoleDataSourceRoleDeviceWebuiMonitorAutomatedCorrelationEngineObject struct {
	CorrelatedEvents   types.String `tfsdk:"correlated_events"`
	CorrelationObjects types.String `tfsdk:"correlation_objects"`
}
type AdminRoleDataSourceRoleDeviceWebuiMonitorCustomReportsObject struct {
	ApplicationStatistics types.String `tfsdk:"application_statistics"`
	Auth                  types.String `tfsdk:"auth"`
	DataFilteringLog      types.String `tfsdk:"data_filtering_log"`
	DecryptionLog         types.String `tfsdk:"decryption_log"`
	DecryptionSummary     types.String `tfsdk:"decryption_summary"`
	Globalprotect         types.String `tfsdk:"globalprotect"`
	GtpLog                types.String `tfsdk:"gtp_log"`
	GtpSummary            types.String `tfsdk:"gtp_summary"`
	Hipmatch              types.String `tfsdk:"hipmatch"`
	Iptag                 types.String `tfsdk:"iptag"`
	SctpLog               types.String `tfsdk:"sctp_log"`
	SctpSummary           types.String `tfsdk:"sctp_summary"`
	ThreatLog             types.String `tfsdk:"threat_log"`
	ThreatSummary         types.String `tfsdk:"threat_summary"`
	TrafficLog            types.String `tfsdk:"traffic_log"`
	TrafficSummary        types.String `tfsdk:"traffic_summary"`
	TunnelLog             types.String `tfsdk:"tunnel_log"`
	TunnelSummary         types.String `tfsdk:"tunnel_summary"`
	UrlLog                types.String `tfsdk:"url_log"`
	UrlSummary            types.String `tfsdk:"url_summary"`
	Userid                types.String `tfsdk:"userid"`
	WildfireLog           types.String `tfsdk:"wildfire_log"`
}
type AdminRoleDataSourceRoleDeviceWebuiMonitorLogsObject struct {
	Alarm          types.String `tfsdk:"alarm"`
	Authentication types.String `tfsdk:"authentication"`
	Configuration  types.String `tfsdk:"configuration"`
	DataFiltering  types.String `tfsdk:"data_filtering"`
	Decryption     types.String `tfsdk:"decryption"`
	Globalprotect  types.String `tfsdk:"globalprotect"`
	Gtp            types.String `tfsdk:"gtp"`
	Hipmatch       types.String `tfsdk:"hipmatch"`
	Iptag          types.String `tfsdk:"iptag"`
	Sctp           types.String `tfsdk:"sctp"`
	System         types.String `tfsdk:"system"`
	Threat         types.String `tfsdk:"threat"`
	Traffic        types.String `tfsdk:"traffic"`
	Tunnel         types.String `tfsdk:"tunnel"`
	Url            types.String `tfsdk:"url"`
	Userid         types.String `tfsdk:"userid"`
	Wildfire       types.String `tfsdk:"wildfire"`
}
type AdminRoleDataSourceRoleDeviceWebuiMonitorPdfReportsObject struct {
	EmailScheduler             types.String `tfsdk:"email_scheduler"`
	ManagePdfSummary           types.String `tfsdk:"manage_pdf_summary"`
	PdfSummaryReports          types.String `tfsdk:"pdf_summary_reports"`
	ReportGroups               types.String `tfsdk:"report_groups"`
	SaasApplicationUsageReport types.String `tfsdk:"saas_application_usage_report"`
	UserActivityReport         types.String `tfsdk:"user_activity_report"`
}
type AdminRoleDataSourceRoleDeviceWebuiNetworkObject struct {
	Dhcp                  types.String                                                    `tfsdk:"dhcp"`
	DnsProxy              types.String                                                    `tfsdk:"dns_proxy"`
	GlobalProtect         *AdminRoleDataSourceRoleDeviceWebuiNetworkGlobalProtectObject   `tfsdk:"global_protect"`
	GreTunnels            types.String                                                    `tfsdk:"gre_tunnels"`
	Interfaces            types.String                                                    `tfsdk:"interfaces"`
	IpsecTunnels          types.String                                                    `tfsdk:"ipsec_tunnels"`
	Lldp                  types.String                                                    `tfsdk:"lldp"`
	NetworkProfiles       *AdminRoleDataSourceRoleDeviceWebuiNetworkNetworkProfilesObject `tfsdk:"network_profiles"`
	Qos                   types.String                                                    `tfsdk:"qos"`
	Routing               *AdminRoleDataSourceRoleDeviceWebuiNetworkRoutingObject         `tfsdk:"routing"`
	SdwanInterfaceProfile types.String                                                    `tfsdk:"sdwan_interface_profile"`
	VirtualRouters        types.String                                                    `tfsdk:"virtual_routers"`
	VirtualWires          types.String                                                    `tfsdk:"virtual_wires"`
	Vlans                 types.String                                                    `tfsdk:"vlans"`
	Zones                 types.String                                                    `tfsdk:"zones"`
	SecureWebGateway      types.String                                                    `tfsdk:"secure_web_gateway"`
}
type AdminRoleDataSourceRoleDeviceWebuiNetworkGlobalProtectObject struct {
	ClientlessAppGroups types.String `tfsdk:"clientless_app_groups"`
	ClientlessApps      types.String `tfsdk:"clientless_apps"`
	Gateways            types.String `tfsdk:"gateways"`
	Mdm                 types.String `tfsdk:"mdm"`
	Portals             types.String `tfsdk:"portals"`
}
type AdminRoleDataSourceRoleDeviceWebuiNetworkNetworkProfilesObject struct {
	BfdProfile       types.String `tfsdk:"bfd_profile"`
	GpAppIpsecCrypto types.String `tfsdk:"gp_app_ipsec_crypto"`
	IkeCrypto        types.String `tfsdk:"ike_crypto"`
	IkeGateways      types.String `tfsdk:"ike_gateways"`
	InterfaceMgmt    types.String `tfsdk:"interface_mgmt"`
	IpsecCrypto      types.String `tfsdk:"ipsec_crypto"`
	LldpProfile      types.String `tfsdk:"lldp_profile"`
	QosProfile       types.String `tfsdk:"qos_profile"`
	TunnelMonitor    types.String `tfsdk:"tunnel_monitor"`
	ZoneProtection   types.String `tfsdk:"zone_protection"`
}
type AdminRoleDataSourceRoleDeviceWebuiNetworkRoutingObject struct {
	LogicalRouters  types.String                                                           `tfsdk:"logical_routers"`
	RoutingProfiles *AdminRoleDataSourceRoleDeviceWebuiNetworkRoutingRoutingProfilesObject `tfsdk:"routing_profiles"`
}
type AdminRoleDataSourceRoleDeviceWebuiNetworkRoutingRoutingProfilesObject struct {
	Bfd       types.String `tfsdk:"bfd"`
	Bgp       types.String `tfsdk:"bgp"`
	Filters   types.String `tfsdk:"filters"`
	Multicast types.String `tfsdk:"multicast"`
	Ospf      types.String `tfsdk:"ospf"`
	Ospfv3    types.String `tfsdk:"ospfv3"`
	Ripv2     types.String `tfsdk:"ripv2"`
}
type AdminRoleDataSourceRoleDeviceWebuiObjectsObject struct {
	AddressGroups         types.String                                                     `tfsdk:"address_groups"`
	Addresses             types.String                                                     `tfsdk:"addresses"`
	ApplicationFilters    types.String                                                     `tfsdk:"application_filters"`
	ApplicationGroups     types.String                                                     `tfsdk:"application_groups"`
	Applications          types.String                                                     `tfsdk:"applications"`
	Authentication        types.String                                                     `tfsdk:"authentication"`
	CustomObjects         *AdminRoleDataSourceRoleDeviceWebuiObjectsCustomObjectsObject    `tfsdk:"custom_objects"`
	Decryption            *AdminRoleDataSourceRoleDeviceWebuiObjectsDecryptionObject       `tfsdk:"decryption"`
	Devices               types.String                                                     `tfsdk:"devices"`
	DynamicBlockLists     types.String                                                     `tfsdk:"dynamic_block_lists"`
	DynamicUserGroups     types.String                                                     `tfsdk:"dynamic_user_groups"`
	GlobalProtect         *AdminRoleDataSourceRoleDeviceWebuiObjectsGlobalProtectObject    `tfsdk:"global_protect"`
	LogForwarding         types.String                                                     `tfsdk:"log_forwarding"`
	PacketBrokerProfile   types.String                                                     `tfsdk:"packet_broker_profile"`
	Regions               types.String                                                     `tfsdk:"regions"`
	Schedules             types.String                                                     `tfsdk:"schedules"`
	Sdwan                 *AdminRoleDataSourceRoleDeviceWebuiObjectsSdwanObject            `tfsdk:"sdwan"`
	SecurityProfileGroups types.String                                                     `tfsdk:"security_profile_groups"`
	SecurityProfiles      *AdminRoleDataSourceRoleDeviceWebuiObjectsSecurityProfilesObject `tfsdk:"security_profiles"`
	ServiceGroups         types.String                                                     `tfsdk:"service_groups"`
	Services              types.String                                                     `tfsdk:"services"`
	Tags                  types.String                                                     `tfsdk:"tags"`
}
type AdminRoleDataSourceRoleDeviceWebuiObjectsCustomObjectsObject struct {
	DataPatterns  types.String `tfsdk:"data_patterns"`
	Spyware       types.String `tfsdk:"spyware"`
	UrlCategory   types.String `tfsdk:"url_category"`
	Vulnerability types.String `tfsdk:"vulnerability"`
}
type AdminRoleDataSourceRoleDeviceWebuiObjectsDecryptionObject struct {
	DecryptionProfile types.String `tfsdk:"decryption_profile"`
}
type AdminRoleDataSourceRoleDeviceWebuiObjectsGlobalProtectObject struct {
	HipObjects  types.String `tfsdk:"hip_objects"`
	HipProfiles types.String `tfsdk:"hip_profiles"`
}
type AdminRoleDataSourceRoleDeviceWebuiObjectsSdwanObject struct {
	SdwanDistProfile            types.String `tfsdk:"sdwan_dist_profile"`
	SdwanErrorCorrectionProfile types.String `tfsdk:"sdwan_error_correction_profile"`
	SdwanProfile                types.String `tfsdk:"sdwan_profile"`
	SdwanSaasQualityProfile     types.String `tfsdk:"sdwan_saas_quality_profile"`
}
type AdminRoleDataSourceRoleDeviceWebuiObjectsSecurityProfilesObject struct {
	AntiSpyware             types.String `tfsdk:"anti_spyware"`
	Antivirus               types.String `tfsdk:"antivirus"`
	DataFiltering           types.String `tfsdk:"data_filtering"`
	DosProtection           types.String `tfsdk:"dos_protection"`
	FileBlocking            types.String `tfsdk:"file_blocking"`
	GtpProtection           types.String `tfsdk:"gtp_protection"`
	SctpProtection          types.String `tfsdk:"sctp_protection"`
	UrlFiltering            types.String `tfsdk:"url_filtering"`
	VulnerabilityProtection types.String `tfsdk:"vulnerability_protection"`
	WildfireAnalysis        types.String `tfsdk:"wildfire_analysis"`
}
type AdminRoleDataSourceRoleDeviceWebuiOperationsObject struct {
	DownloadCoreFiles       types.String `tfsdk:"download_core_files"`
	DownloadPcapFiles       types.String `tfsdk:"download_pcap_files"`
	GenerateStatsDumpFile   types.String `tfsdk:"generate_stats_dump_file"`
	GenerateTechSupportFile types.String `tfsdk:"generate_tech_support_file"`
	Reboot                  types.String `tfsdk:"reboot"`
}
type AdminRoleDataSourceRoleDeviceWebuiPoliciesObject struct {
	ApplicationOverrideRulebase types.String `tfsdk:"application_override_rulebase"`
	AuthenticationRulebase      types.String `tfsdk:"authentication_rulebase"`
	DosRulebase                 types.String `tfsdk:"dos_rulebase"`
	NatRulebase                 types.String `tfsdk:"nat_rulebase"`
	NetworkPacketBrokerRulebase types.String `tfsdk:"network_packet_broker_rulebase"`
	PbfRulebase                 types.String `tfsdk:"pbf_rulebase"`
	QosRulebase                 types.String `tfsdk:"qos_rulebase"`
	RuleHitCountReset           types.String `tfsdk:"rule_hit_count_reset"`
	SdwanRulebase               types.String `tfsdk:"sdwan_rulebase"`
	SecurityRulebase            types.String `tfsdk:"security_rulebase"`
	SslDecryptionRulebase       types.String `tfsdk:"ssl_decryption_rulebase"`
	TunnelInspectRulebase       types.String `tfsdk:"tunnel_inspect_rulebase"`
}
type AdminRoleDataSourceRoleDeviceWebuiPrivacyObject struct {
	ShowFullIpAddresses           types.String `tfsdk:"show_full_ip_addresses"`
	ShowUserNamesInLogsAndReports types.String `tfsdk:"show_user_names_in_logs_and_reports"`
	ViewPcapFiles                 types.String `tfsdk:"view_pcap_files"`
}
type AdminRoleDataSourceRoleDeviceWebuiSaveObject struct {
	PartialSave        types.String `tfsdk:"partial_save"`
	SaveForOtherAdmins types.String `tfsdk:"save_for_other_admins"`
	ObjectLevelChanges types.String `tfsdk:"object_level_changes"`
}
type AdminRoleDataSourceRoleDeviceXmlapiObject struct {
	Commit types.String `tfsdk:"commit"`
	Config types.String `tfsdk:"config"`
	Export types.String `tfsdk:"export"`
	Import types.String `tfsdk:"import"`
	Iot    types.String `tfsdk:"iot"`
	Log    types.String `tfsdk:"log"`
	Op     types.String `tfsdk:"op"`
	Report types.String `tfsdk:"report"`
	UserId types.String `tfsdk:"user_id"`
}
type AdminRoleDataSourceRoleVsysObject struct {
	Cli     types.String                              `tfsdk:"cli"`
	Restapi *AdminRoleDataSourceRoleVsysRestapiObject `tfsdk:"restapi"`
	Webui   *AdminRoleDataSourceRoleVsysWebuiObject   `tfsdk:"webui"`
	Xmlapi  *AdminRoleDataSourceRoleVsysXmlapiObject  `tfsdk:"xmlapi"`
}
type AdminRoleDataSourceRoleVsysRestapiObject struct {
	Device   *AdminRoleDataSourceRoleVsysRestapiDeviceObject   `tfsdk:"device"`
	Network  *AdminRoleDataSourceRoleVsysRestapiNetworkObject  `tfsdk:"network"`
	Objects  *AdminRoleDataSourceRoleVsysRestapiObjectsObject  `tfsdk:"objects"`
	Policies *AdminRoleDataSourceRoleVsysRestapiPoliciesObject `tfsdk:"policies"`
	System   *AdminRoleDataSourceRoleVsysRestapiSystemObject   `tfsdk:"system"`
}
type AdminRoleDataSourceRoleVsysRestapiDeviceObject struct {
	EmailServerProfiles    types.String `tfsdk:"email_server_profiles"`
	HttpServerProfiles     types.String `tfsdk:"http_server_profiles"`
	LdapServerProfiles     types.String `tfsdk:"ldap_server_profiles"`
	LogInterfaceSetting    types.String `tfsdk:"log_interface_setting"`
	SnmpTrapServerProfiles types.String `tfsdk:"snmp_trap_server_profiles"`
	SyslogServerProfiles   types.String `tfsdk:"syslog_server_profiles"`
	VirtualSystems         types.String `tfsdk:"virtual_systems"`
}
type AdminRoleDataSourceRoleVsysRestapiNetworkObject struct {
	GlobalprotectClientlessAppGroups types.String `tfsdk:"globalprotect_clientless_app_groups"`
	GlobalprotectClientlessApps      types.String `tfsdk:"globalprotect_clientless_apps"`
	GlobalprotectGateways            types.String `tfsdk:"globalprotect_gateways"`
	GlobalprotectMdmServers          types.String `tfsdk:"globalprotect_mdm_servers"`
	GlobalprotectPortals             types.String `tfsdk:"globalprotect_portals"`
	Zones                            types.String `tfsdk:"zones"`
	SdwanInterfaceProfiles           types.String `tfsdk:"sdwan_interface_profiles"`
}
type AdminRoleDataSourceRoleVsysRestapiObjectsObject struct {
	AddressGroups                           types.String `tfsdk:"address_groups"`
	Addresses                               types.String `tfsdk:"addresses"`
	AntiSpywareSecurityProfiles             types.String `tfsdk:"anti_spyware_security_profiles"`
	AntivirusSecurityProfiles               types.String `tfsdk:"antivirus_security_profiles"`
	ApplicationFilters                      types.String `tfsdk:"application_filters"`
	ApplicationGroups                       types.String `tfsdk:"application_groups"`
	Applications                            types.String `tfsdk:"applications"`
	AuthenticationEnforcements              types.String `tfsdk:"authentication_enforcements"`
	CustomDataPatterns                      types.String `tfsdk:"custom_data_patterns"`
	CustomSpywareSignatures                 types.String `tfsdk:"custom_spyware_signatures"`
	CustomUrlCategories                     types.String `tfsdk:"custom_url_categories"`
	CustomVulnerabilitySignatures           types.String `tfsdk:"custom_vulnerability_signatures"`
	DataFilteringSecurityProfiles           types.String `tfsdk:"data_filtering_security_profiles"`
	DecryptionProfiles                      types.String `tfsdk:"decryption_profiles"`
	Devices                                 types.String `tfsdk:"devices"`
	DosProtectionSecurityProfiles           types.String `tfsdk:"dos_protection_security_profiles"`
	DynamicUserGroups                       types.String `tfsdk:"dynamic_user_groups"`
	ExternalDynamicLists                    types.String `tfsdk:"external_dynamic_lists"`
	FileBlockingSecurityProfiles            types.String `tfsdk:"file_blocking_security_profiles"`
	GlobalprotectHipObjects                 types.String `tfsdk:"globalprotect_hip_objects"`
	GlobalprotectHipProfiles                types.String `tfsdk:"globalprotect_hip_profiles"`
	GtpProtectionSecurityProfiles           types.String `tfsdk:"gtp_protection_security_profiles"`
	LogForwardingProfiles                   types.String `tfsdk:"log_forwarding_profiles"`
	PacketBrokerProfiles                    types.String `tfsdk:"packet_broker_profiles"`
	Regions                                 types.String `tfsdk:"regions"`
	Schedules                               types.String `tfsdk:"schedules"`
	SctpProtectionSecurityProfiles          types.String `tfsdk:"sctp_protection_security_profiles"`
	SdwanErrorCorrectionProfiles            types.String `tfsdk:"sdwan_error_correction_profiles"`
	SdwanPathQualityProfiles                types.String `tfsdk:"sdwan_path_quality_profiles"`
	SdwanSaasQualityProfiles                types.String `tfsdk:"sdwan_saas_quality_profiles"`
	SdwanTrafficDistributionProfiles        types.String `tfsdk:"sdwan_traffic_distribution_profiles"`
	SecurityProfileGroups                   types.String `tfsdk:"security_profile_groups"`
	ServiceGroups                           types.String `tfsdk:"service_groups"`
	Services                                types.String `tfsdk:"services"`
	Tags                                    types.String `tfsdk:"tags"`
	UrlFilteringSecurityProfiles            types.String `tfsdk:"url_filtering_security_profiles"`
	VulnerabilityProtectionSecurityProfiles types.String `tfsdk:"vulnerability_protection_security_profiles"`
	WildfireAnalysisSecurityProfiles        types.String `tfsdk:"wildfire_analysis_security_profiles"`
}
type AdminRoleDataSourceRoleVsysRestapiPoliciesObject struct {
	ApplicationOverrideRules   types.String `tfsdk:"application_override_rules"`
	AuthenticationRules        types.String `tfsdk:"authentication_rules"`
	DecryptionRules            types.String `tfsdk:"decryption_rules"`
	DosRules                   types.String `tfsdk:"dos_rules"`
	NatRules                   types.String `tfsdk:"nat_rules"`
	NetworkPacketBrokerRules   types.String `tfsdk:"network_packet_broker_rules"`
	PolicyBasedForwardingRules types.String `tfsdk:"policy_based_forwarding_rules"`
	QosRules                   types.String `tfsdk:"qos_rules"`
	SdwanRules                 types.String `tfsdk:"sdwan_rules"`
	SecurityRules              types.String `tfsdk:"security_rules"`
	TunnelInspectionRules      types.String `tfsdk:"tunnel_inspection_rules"`
}
type AdminRoleDataSourceRoleVsysRestapiSystemObject struct {
	Configuration types.String `tfsdk:"configuration"`
}
type AdminRoleDataSourceRoleVsysWebuiObject struct {
	Acc        types.String                                      `tfsdk:"acc"`
	Commit     *AdminRoleDataSourceRoleVsysWebuiCommitObject     `tfsdk:"commit"`
	Dashboard  types.String                                      `tfsdk:"dashboard"`
	Device     *AdminRoleDataSourceRoleVsysWebuiDeviceObject     `tfsdk:"device"`
	Monitor    *AdminRoleDataSourceRoleVsysWebuiMonitorObject    `tfsdk:"monitor"`
	Network    *AdminRoleDataSourceRoleVsysWebuiNetworkObject    `tfsdk:"network"`
	Objects    *AdminRoleDataSourceRoleVsysWebuiObjectsObject    `tfsdk:"objects"`
	Operations *AdminRoleDataSourceRoleVsysWebuiOperationsObject `tfsdk:"operations"`
	Policies   *AdminRoleDataSourceRoleVsysWebuiPoliciesObject   `tfsdk:"policies"`
	Privacy    *AdminRoleDataSourceRoleVsysWebuiPrivacyObject    `tfsdk:"privacy"`
	Save       *AdminRoleDataSourceRoleVsysWebuiSaveObject       `tfsdk:"save"`
	Tasks      types.String                                      `tfsdk:"tasks"`
	Validate   types.String                                      `tfsdk:"validate"`
}
type AdminRoleDataSourceRoleVsysWebuiCommitObject struct {
	CommitForOtherAdmins types.String `tfsdk:"commit_for_other_admins"`
	VirtualSystems       types.String `tfsdk:"virtual_systems"`
}
type AdminRoleDataSourceRoleVsysWebuiDeviceObject struct {
	Administrators         types.String                                                       `tfsdk:"administrators"`
	AuthenticationProfile  types.String                                                       `tfsdk:"authentication_profile"`
	AuthenticationSequence types.String                                                       `tfsdk:"authentication_sequence"`
	BlockPages             types.String                                                       `tfsdk:"block_pages"`
	CertificateManagement  *AdminRoleDataSourceRoleVsysWebuiDeviceCertificateManagementObject `tfsdk:"certificate_management"`
	DataRedistribution     types.String                                                       `tfsdk:"data_redistribution"`
	DeviceQuarantine       types.String                                                       `tfsdk:"device_quarantine"`
	LocalUserDatabase      *AdminRoleDataSourceRoleVsysWebuiDeviceLocalUserDatabaseObject     `tfsdk:"local_user_database"`
	LogSettings            *AdminRoleDataSourceRoleVsysWebuiDeviceLogSettingsObject           `tfsdk:"log_settings"`
	PolicyRecommendations  *AdminRoleDataSourceRoleVsysWebuiDevicePolicyRecommendationsObject `tfsdk:"policy_recommendations"`
	ServerProfile          *AdminRoleDataSourceRoleVsysWebuiDeviceServerProfileObject         `tfsdk:"server_profile"`
	Setup                  *AdminRoleDataSourceRoleVsysWebuiDeviceSetupObject                 `tfsdk:"setup"`
	Troubleshooting        types.String                                                       `tfsdk:"troubleshooting"`
	UserIdentification     types.String                                                       `tfsdk:"user_identification"`
	VmInfoSource           types.String                                                       `tfsdk:"vm_info_source"`
	DhcpSyslogServer       types.String                                                       `tfsdk:"dhcp_syslog_server"`
}
type AdminRoleDataSourceRoleVsysWebuiDeviceCertificateManagementObject struct {
	CertificateProfile     types.String `tfsdk:"certificate_profile"`
	Certificates           types.String `tfsdk:"certificates"`
	OcspResponder          types.String `tfsdk:"ocsp_responder"`
	Scep                   types.String `tfsdk:"scep"`
	SshServiceProfile      types.String `tfsdk:"ssh_service_profile"`
	SslDecryptionExclusion types.String `tfsdk:"ssl_decryption_exclusion"`
	SslTlsServiceProfile   types.String `tfsdk:"ssl_tls_service_profile"`
}
type AdminRoleDataSourceRoleVsysWebuiDeviceLocalUserDatabaseObject struct {
	UserGroups types.String `tfsdk:"user_groups"`
	Users      types.String `tfsdk:"users"`
}
type AdminRoleDataSourceRoleVsysWebuiDeviceLogSettingsObject struct {
	Config        types.String `tfsdk:"config"`
	Correlation   types.String `tfsdk:"correlation"`
	Globalprotect types.String `tfsdk:"globalprotect"`
	Hipmatch      types.String `tfsdk:"hipmatch"`
	Iptag         types.String `tfsdk:"iptag"`
	System        types.String `tfsdk:"system"`
	UserId        types.String `tfsdk:"user_id"`
}
type AdminRoleDataSourceRoleVsysWebuiDevicePolicyRecommendationsObject struct {
	Iot  types.String `tfsdk:"iot"`
	Saas types.String `tfsdk:"saas"`
}
type AdminRoleDataSourceRoleVsysWebuiDeviceServerProfileObject struct {
	Dns      types.String `tfsdk:"dns"`
	Email    types.String `tfsdk:"email"`
	Http     types.String `tfsdk:"http"`
	Kerberos types.String `tfsdk:"kerberos"`
	Ldap     types.String `tfsdk:"ldap"`
	Mfa      types.String `tfsdk:"mfa"`
	Netflow  types.String `tfsdk:"netflow"`
	Radius   types.String `tfsdk:"radius"`
	SamlIdp  types.String `tfsdk:"saml_idp"`
	Scp      types.String `tfsdk:"scp"`
	SnmpTrap types.String `tfsdk:"snmp_trap"`
	Syslog   types.String `tfsdk:"syslog"`
	Tacplus  types.String `tfsdk:"tacplus"`
}
type AdminRoleDataSourceRoleVsysWebuiDeviceSetupObject struct {
	ContentId  types.String `tfsdk:"content_id"`
	Hsm        types.String `tfsdk:"hsm"`
	Interfaces types.String `tfsdk:"interfaces"`
	Management types.String `tfsdk:"management"`
	Operations types.String `tfsdk:"operations"`
	Services   types.String `tfsdk:"services"`
	Session    types.String `tfsdk:"session"`
	Telemetry  types.String `tfsdk:"telemetry"`
	Wildfire   types.String `tfsdk:"wildfire"`
}
type AdminRoleDataSourceRoleVsysWebuiMonitorObject struct {
	AppScope                   types.String                                                             `tfsdk:"app_scope"`
	AutomatedCorrelationEngine *AdminRoleDataSourceRoleVsysWebuiMonitorAutomatedCorrelationEngineObject `tfsdk:"automated_correlation_engine"`
	BlockIpList                types.String                                                             `tfsdk:"block_ip_list"`
	CustomReports              *AdminRoleDataSourceRoleVsysWebuiMonitorCustomReportsObject              `tfsdk:"custom_reports"`
	ExternalLogs               types.String                                                             `tfsdk:"external_logs"`
	Logs                       *AdminRoleDataSourceRoleVsysWebuiMonitorLogsObject                       `tfsdk:"logs"`
	PdfReports                 *AdminRoleDataSourceRoleVsysWebuiMonitorPdfReportsObject                 `tfsdk:"pdf_reports"`
	SessionBrowser             types.String                                                             `tfsdk:"session_browser"`
	ViewCustomReports          types.String                                                             `tfsdk:"view_custom_reports"`
}
type AdminRoleDataSourceRoleVsysWebuiMonitorAutomatedCorrelationEngineObject struct {
	CorrelatedEvents   types.String `tfsdk:"correlated_events"`
	CorrelationObjects types.String `tfsdk:"correlation_objects"`
}
type AdminRoleDataSourceRoleVsysWebuiMonitorCustomReportsObject struct {
	ApplicationStatistics types.String `tfsdk:"application_statistics"`
	Auth                  types.String `tfsdk:"auth"`
	DataFilteringLog      types.String `tfsdk:"data_filtering_log"`
	DecryptionLog         types.String `tfsdk:"decryption_log"`
	DecryptionSummary     types.String `tfsdk:"decryption_summary"`
	Globalprotect         types.String `tfsdk:"globalprotect"`
	GtpLog                types.String `tfsdk:"gtp_log"`
	GtpSummary            types.String `tfsdk:"gtp_summary"`
	Hipmatch              types.String `tfsdk:"hipmatch"`
	Iptag                 types.String `tfsdk:"iptag"`
	SctpLog               types.String `tfsdk:"sctp_log"`
	SctpSummary           types.String `tfsdk:"sctp_summary"`
	ThreatLog             types.String `tfsdk:"threat_log"`
	ThreatSummary         types.String `tfsdk:"threat_summary"`
	TrafficLog            types.String `tfsdk:"traffic_log"`
	TrafficSummary        types.String `tfsdk:"traffic_summary"`
	TunnelLog             types.String `tfsdk:"tunnel_log"`
	TunnelSummary         types.String `tfsdk:"tunnel_summary"`
	UrlLog                types.String `tfsdk:"url_log"`
	UrlSummary            types.String `tfsdk:"url_summary"`
	Userid                types.String `tfsdk:"userid"`
	WildfireLog           types.String `tfsdk:"wildfire_log"`
}
type AdminRoleDataSourceRoleVsysWebuiMonitorLogsObject struct {
	Authentication types.String `tfsdk:"authentication"`
	DataFiltering  types.String `tfsdk:"data_filtering"`
	Decryption     types.String `tfsdk:"decryption"`
	Globalprotect  types.String `tfsdk:"globalprotect"`
	Gtp            types.String `tfsdk:"gtp"`
	Hipmatch       types.String `tfsdk:"hipmatch"`
	Iptag          types.String `tfsdk:"iptag"`
	Sctp           types.String `tfsdk:"sctp"`
	Threat         types.String `tfsdk:"threat"`
	Traffic        types.String `tfsdk:"traffic"`
	Tunnel         types.String `tfsdk:"tunnel"`
	Url            types.String `tfsdk:"url"`
	Userid         types.String `tfsdk:"userid"`
	Wildfire       types.String `tfsdk:"wildfire"`
}
type AdminRoleDataSourceRoleVsysWebuiMonitorPdfReportsObject struct {
	EmailScheduler             types.String `tfsdk:"email_scheduler"`
	ManagePdfSummary           types.String `tfsdk:"manage_pdf_summary"`
	PdfSummaryReports          types.String `tfsdk:"pdf_summary_reports"`
	ReportGroups               types.String `tfsdk:"report_groups"`
	SaasApplicationUsageReport types.String `tfsdk:"saas_application_usage_report"`
	UserActivityReport         types.String `tfsdk:"user_activity_report"`
}
type AdminRoleDataSourceRoleVsysWebuiNetworkObject struct {
	GlobalProtect         *AdminRoleDataSourceRoleVsysWebuiNetworkGlobalProtectObject `tfsdk:"global_protect"`
	SdwanInterfaceProfile types.String                                                `tfsdk:"sdwan_interface_profile"`
	Zones                 types.String                                                `tfsdk:"zones"`
}
type AdminRoleDataSourceRoleVsysWebuiNetworkGlobalProtectObject struct {
	ClientlessAppGroups types.String `tfsdk:"clientless_app_groups"`
	ClientlessApps      types.String `tfsdk:"clientless_apps"`
	Gateways            types.String `tfsdk:"gateways"`
	Mdm                 types.String `tfsdk:"mdm"`
	Portals             types.String `tfsdk:"portals"`
}
type AdminRoleDataSourceRoleVsysWebuiObjectsObject struct {
	AddressGroups         types.String                                                   `tfsdk:"address_groups"`
	Addresses             types.String                                                   `tfsdk:"addresses"`
	ApplicationFilters    types.String                                                   `tfsdk:"application_filters"`
	ApplicationGroups     types.String                                                   `tfsdk:"application_groups"`
	Applications          types.String                                                   `tfsdk:"applications"`
	Authentication        types.String                                                   `tfsdk:"authentication"`
	CustomObjects         *AdminRoleDataSourceRoleVsysWebuiObjectsCustomObjectsObject    `tfsdk:"custom_objects"`
	Decryption            *AdminRoleDataSourceRoleVsysWebuiObjectsDecryptionObject       `tfsdk:"decryption"`
	Devices               types.String                                                   `tfsdk:"devices"`
	DynamicBlockLists     types.String                                                   `tfsdk:"dynamic_block_lists"`
	DynamicUserGroups     types.String                                                   `tfsdk:"dynamic_user_groups"`
	GlobalProtect         *AdminRoleDataSourceRoleVsysWebuiObjectsGlobalProtectObject    `tfsdk:"global_protect"`
	LogForwarding         types.String                                                   `tfsdk:"log_forwarding"`
	PacketBrokerProfile   types.String                                                   `tfsdk:"packet_broker_profile"`
	Regions               types.String                                                   `tfsdk:"regions"`
	Schedules             types.String                                                   `tfsdk:"schedules"`
	Sdwan                 *AdminRoleDataSourceRoleVsysWebuiObjectsSdwanObject            `tfsdk:"sdwan"`
	SecurityProfileGroups types.String                                                   `tfsdk:"security_profile_groups"`
	SecurityProfiles      *AdminRoleDataSourceRoleVsysWebuiObjectsSecurityProfilesObject `tfsdk:"security_profiles"`
	ServiceGroups         types.String                                                   `tfsdk:"service_groups"`
	Services              types.String                                                   `tfsdk:"services"`
	Tags                  types.String                                                   `tfsdk:"tags"`
}
type AdminRoleDataSourceRoleVsysWebuiObjectsCustomObjectsObject struct {
	DataPatterns  types.String `tfsdk:"data_patterns"`
	Spyware       types.String `tfsdk:"spyware"`
	UrlCategory   types.String `tfsdk:"url_category"`
	Vulnerability types.String `tfsdk:"vulnerability"`
}
type AdminRoleDataSourceRoleVsysWebuiObjectsDecryptionObject struct {
	DecryptionProfile types.String `tfsdk:"decryption_profile"`
}
type AdminRoleDataSourceRoleVsysWebuiObjectsGlobalProtectObject struct {
	HipObjects  types.String `tfsdk:"hip_objects"`
	HipProfiles types.String `tfsdk:"hip_profiles"`
}
type AdminRoleDataSourceRoleVsysWebuiObjectsSdwanObject struct {
	SdwanDistProfile            types.String `tfsdk:"sdwan_dist_profile"`
	SdwanErrorCorrectionProfile types.String `tfsdk:"sdwan_error_correction_profile"`
	SdwanProfile                types.String `tfsdk:"sdwan_profile"`
	SdwanSaasQualityProfile     types.String `tfsdk:"sdwan_saas_quality_profile"`
}
type AdminRoleDataSourceRoleVsysWebuiObjectsSecurityProfilesObject struct {
	AntiSpyware             types.String `tfsdk:"anti_spyware"`
	Antivirus               types.String `tfsdk:"antivirus"`
	DataFiltering           types.String `tfsdk:"data_filtering"`
	DosProtection           types.String `tfsdk:"dos_protection"`
	FileBlocking            types.String `tfsdk:"file_blocking"`
	GtpProtection           types.String `tfsdk:"gtp_protection"`
	SctpProtection          types.String `tfsdk:"sctp_protection"`
	UrlFiltering            types.String `tfsdk:"url_filtering"`
	VulnerabilityProtection types.String `tfsdk:"vulnerability_protection"`
	WildfireAnalysis        types.String `tfsdk:"wildfire_analysis"`
}
type AdminRoleDataSourceRoleVsysWebuiOperationsObject struct {
	DownloadCoreFiles       types.String `tfsdk:"download_core_files"`
	DownloadPcapFiles       types.String `tfsdk:"download_pcap_files"`
	GenerateStatsDumpFile   types.String `tfsdk:"generate_stats_dump_file"`
	GenerateTechSupportFile types.String `tfsdk:"generate_tech_support_file"`
	Reboot                  types.String `tfsdk:"reboot"`
}
type AdminRoleDataSourceRoleVsysWebuiPoliciesObject struct {
	ApplicationOverrideRulebase types.String `tfsdk:"application_override_rulebase"`
	AuthenticationRulebase      types.String `tfsdk:"authentication_rulebase"`
	DosRulebase                 types.String `tfsdk:"dos_rulebase"`
	NatRulebase                 types.String `tfsdk:"nat_rulebase"`
	NetworkPacketBrokerRulebase types.String `tfsdk:"network_packet_broker_rulebase"`
	PbfRulebase                 types.String `tfsdk:"pbf_rulebase"`
	QosRulebase                 types.String `tfsdk:"qos_rulebase"`
	RuleHitCountReset           types.String `tfsdk:"rule_hit_count_reset"`
	SdwanRulebase               types.String `tfsdk:"sdwan_rulebase"`
	SecurityRulebase            types.String `tfsdk:"security_rulebase"`
	SslDecryptionRulebase       types.String `tfsdk:"ssl_decryption_rulebase"`
	TunnelInspectRulebase       types.String `tfsdk:"tunnel_inspect_rulebase"`
}
type AdminRoleDataSourceRoleVsysWebuiPrivacyObject struct {
	ShowFullIpAddresses           types.String `tfsdk:"show_full_ip_addresses"`
	ShowUserNamesInLogsAndReports types.String `tfsdk:"show_user_names_in_logs_and_reports"`
	ViewPcapFiles                 types.String `tfsdk:"view_pcap_files"`
}
type AdminRoleDataSourceRoleVsysWebuiSaveObject struct {
	PartialSave        types.String `tfsdk:"partial_save"`
	SaveForOtherAdmins types.String `tfsdk:"save_for_other_admins"`
	ObjectLevelChanges types.String `tfsdk:"object_level_changes"`
}
type AdminRoleDataSourceRoleVsysXmlapiObject struct {
	Commit types.String `tfsdk:"commit"`
	Config types.String `tfsdk:"config"`
	Export types.String `tfsdk:"export"`
	Import types.String `tfsdk:"import"`
	Iot    types.String `tfsdk:"iot"`
	Log    types.String `tfsdk:"log"`
	Op     types.String `tfsdk:"op"`
	Report types.String `tfsdk:"report"`
	UserId types.String `tfsdk:"user_id"`
}

func (o *AdminRoleDataSourceModel) CopyToPango(ctx context.Context, obj **adminrole.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	description_value := o.Description.ValueStringPointer()
	var role_entry *adminrole.Role
	if o.Role != nil {
		if *obj != nil && (*obj).Role != nil {
			role_entry = (*obj).Role
		} else {
			role_entry = new(adminrole.Role)
		}

		diags.Append(o.Role.CopyToPango(ctx, &role_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(adminrole.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Description = description_value
	(*obj).Role = role_entry

	return diags
}
func (o *AdminRoleDataSourceRoleObject) CopyToPango(ctx context.Context, obj **adminrole.Role, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var device_entry *adminrole.RoleDevice
	if o.Device != nil {
		if *obj != nil && (*obj).Device != nil {
			device_entry = (*obj).Device
		} else {
			device_entry = new(adminrole.RoleDevice)
		}

		diags.Append(o.Device.CopyToPango(ctx, &device_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var vsys_entry *adminrole.RoleVsys
	if o.Vsys != nil {
		if *obj != nil && (*obj).Vsys != nil {
			vsys_entry = (*obj).Vsys
		} else {
			vsys_entry = new(adminrole.RoleVsys)
		}

		diags.Append(o.Vsys.CopyToPango(ctx, &vsys_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(adminrole.Role)
	}
	(*obj).Device = device_entry
	(*obj).Vsys = vsys_entry

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDevice, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	cli_value := o.Cli.ValueStringPointer()
	var restapi_entry *adminrole.RoleDeviceRestapi
	if o.Restapi != nil {
		if *obj != nil && (*obj).Restapi != nil {
			restapi_entry = (*obj).Restapi
		} else {
			restapi_entry = new(adminrole.RoleDeviceRestapi)
		}

		diags.Append(o.Restapi.CopyToPango(ctx, &restapi_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var webui_entry *adminrole.RoleDeviceWebui
	if o.Webui != nil {
		if *obj != nil && (*obj).Webui != nil {
			webui_entry = (*obj).Webui
		} else {
			webui_entry = new(adminrole.RoleDeviceWebui)
		}

		diags.Append(o.Webui.CopyToPango(ctx, &webui_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var xmlapi_entry *adminrole.RoleDeviceXmlapi
	if o.Xmlapi != nil {
		if *obj != nil && (*obj).Xmlapi != nil {
			xmlapi_entry = (*obj).Xmlapi
		} else {
			xmlapi_entry = new(adminrole.RoleDeviceXmlapi)
		}

		diags.Append(o.Xmlapi.CopyToPango(ctx, &xmlapi_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(adminrole.RoleDevice)
	}
	(*obj).Cli = cli_value
	(*obj).Restapi = restapi_entry
	(*obj).Webui = webui_entry
	(*obj).Xmlapi = xmlapi_entry

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceRestapiObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceRestapi, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var device_entry *adminrole.RoleDeviceRestapiDevice
	if o.Device != nil {
		if *obj != nil && (*obj).Device != nil {
			device_entry = (*obj).Device
		} else {
			device_entry = new(adminrole.RoleDeviceRestapiDevice)
		}

		diags.Append(o.Device.CopyToPango(ctx, &device_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var network_entry *adminrole.RoleDeviceRestapiNetwork
	if o.Network != nil {
		if *obj != nil && (*obj).Network != nil {
			network_entry = (*obj).Network
		} else {
			network_entry = new(adminrole.RoleDeviceRestapiNetwork)
		}

		diags.Append(o.Network.CopyToPango(ctx, &network_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var objects_entry *adminrole.RoleDeviceRestapiObjects
	if o.Objects != nil {
		if *obj != nil && (*obj).Objects != nil {
			objects_entry = (*obj).Objects
		} else {
			objects_entry = new(adminrole.RoleDeviceRestapiObjects)
		}

		diags.Append(o.Objects.CopyToPango(ctx, &objects_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var policies_entry *adminrole.RoleDeviceRestapiPolicies
	if o.Policies != nil {
		if *obj != nil && (*obj).Policies != nil {
			policies_entry = (*obj).Policies
		} else {
			policies_entry = new(adminrole.RoleDeviceRestapiPolicies)
		}

		diags.Append(o.Policies.CopyToPango(ctx, &policies_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var system_entry *adminrole.RoleDeviceRestapiSystem
	if o.System != nil {
		if *obj != nil && (*obj).System != nil {
			system_entry = (*obj).System
		} else {
			system_entry = new(adminrole.RoleDeviceRestapiSystem)
		}

		diags.Append(o.System.CopyToPango(ctx, &system_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceRestapi)
	}
	(*obj).Device = device_entry
	(*obj).Network = network_entry
	(*obj).Objects = objects_entry
	(*obj).Policies = policies_entry
	(*obj).System = system_entry

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceRestapiDeviceObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceRestapiDevice, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	emailServerProfiles_value := o.EmailServerProfiles.ValueStringPointer()
	httpServerProfiles_value := o.HttpServerProfiles.ValueStringPointer()
	ldapServerProfiles_value := o.LdapServerProfiles.ValueStringPointer()
	logInterfaceSetting_value := o.LogInterfaceSetting.ValueStringPointer()
	snmpTrapServerProfiles_value := o.SnmpTrapServerProfiles.ValueStringPointer()
	syslogServerProfiles_value := o.SyslogServerProfiles.ValueStringPointer()
	virtualSystems_value := o.VirtualSystems.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceRestapiDevice)
	}
	(*obj).EmailServerProfiles = emailServerProfiles_value
	(*obj).HttpServerProfiles = httpServerProfiles_value
	(*obj).LdapServerProfiles = ldapServerProfiles_value
	(*obj).LogInterfaceSetting = logInterfaceSetting_value
	(*obj).SnmpTrapServerProfiles = snmpTrapServerProfiles_value
	(*obj).SyslogServerProfiles = syslogServerProfiles_value
	(*obj).VirtualSystems = virtualSystems_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceRestapiNetworkObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceRestapiNetwork, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	aggregateEthernetInterfaces_value := o.AggregateEthernetInterfaces.ValueStringPointer()
	bfdNetworkProfiles_value := o.BfdNetworkProfiles.ValueStringPointer()
	bgpRoutingProfiles_value := o.BgpRoutingProfiles.ValueStringPointer()
	dhcpRelays_value := o.DhcpRelays.ValueStringPointer()
	dhcpServers_value := o.DhcpServers.ValueStringPointer()
	dnsProxies_value := o.DnsProxies.ValueStringPointer()
	ethernetInterfaces_value := o.EthernetInterfaces.ValueStringPointer()
	globalprotectClientlessAppGroups_value := o.GlobalprotectClientlessAppGroups.ValueStringPointer()
	globalprotectClientlessApps_value := o.GlobalprotectClientlessApps.ValueStringPointer()
	globalprotectGateways_value := o.GlobalprotectGateways.ValueStringPointer()
	globalprotectIpsecCryptoNetworkProfiles_value := o.GlobalprotectIpsecCryptoNetworkProfiles.ValueStringPointer()
	globalprotectMdmServers_value := o.GlobalprotectMdmServers.ValueStringPointer()
	globalprotectPortals_value := o.GlobalprotectPortals.ValueStringPointer()
	greTunnels_value := o.GreTunnels.ValueStringPointer()
	ikeCryptoNetworkProfiles_value := o.IkeCryptoNetworkProfiles.ValueStringPointer()
	ikeGatewayNetworkProfiles_value := o.IkeGatewayNetworkProfiles.ValueStringPointer()
	interfaceManagementNetworkProfiles_value := o.InterfaceManagementNetworkProfiles.ValueStringPointer()
	ipsecCryptoNetworkProfiles_value := o.IpsecCryptoNetworkProfiles.ValueStringPointer()
	ipsecTunnels_value := o.IpsecTunnels.ValueStringPointer()
	lldp_value := o.Lldp.ValueStringPointer()
	lldpNetworkProfiles_value := o.LldpNetworkProfiles.ValueStringPointer()
	logicalRouters_value := o.LogicalRouters.ValueStringPointer()
	loopbackInterfaces_value := o.LoopbackInterfaces.ValueStringPointer()
	qosInterfaces_value := o.QosInterfaces.ValueStringPointer()
	qosNetworkProfiles_value := o.QosNetworkProfiles.ValueStringPointer()
	sdwanInterfaceProfiles_value := o.SdwanInterfaceProfiles.ValueStringPointer()
	sdwanInterfaces_value := o.SdwanInterfaces.ValueStringPointer()
	tunnelInterfaces_value := o.TunnelInterfaces.ValueStringPointer()
	tunnelMonitorNetworkProfiles_value := o.TunnelMonitorNetworkProfiles.ValueStringPointer()
	virtualRouters_value := o.VirtualRouters.ValueStringPointer()
	virtualWires_value := o.VirtualWires.ValueStringPointer()
	vlanInterfaces_value := o.VlanInterfaces.ValueStringPointer()
	vlans_value := o.Vlans.ValueStringPointer()
	zoneProtectionNetworkProfiles_value := o.ZoneProtectionNetworkProfiles.ValueStringPointer()
	zones_value := o.Zones.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceRestapiNetwork)
	}
	(*obj).AggregateEthernetInterfaces = aggregateEthernetInterfaces_value
	(*obj).BfdNetworkProfiles = bfdNetworkProfiles_value
	(*obj).BgpRoutingProfiles = bgpRoutingProfiles_value
	(*obj).DhcpRelays = dhcpRelays_value
	(*obj).DhcpServers = dhcpServers_value
	(*obj).DnsProxies = dnsProxies_value
	(*obj).EthernetInterfaces = ethernetInterfaces_value
	(*obj).GlobalprotectClientlessAppGroups = globalprotectClientlessAppGroups_value
	(*obj).GlobalprotectClientlessApps = globalprotectClientlessApps_value
	(*obj).GlobalprotectGateways = globalprotectGateways_value
	(*obj).GlobalprotectIpsecCryptoNetworkProfiles = globalprotectIpsecCryptoNetworkProfiles_value
	(*obj).GlobalprotectMdmServers = globalprotectMdmServers_value
	(*obj).GlobalprotectPortals = globalprotectPortals_value
	(*obj).GreTunnels = greTunnels_value
	(*obj).IkeCryptoNetworkProfiles = ikeCryptoNetworkProfiles_value
	(*obj).IkeGatewayNetworkProfiles = ikeGatewayNetworkProfiles_value
	(*obj).InterfaceManagementNetworkProfiles = interfaceManagementNetworkProfiles_value
	(*obj).IpsecCryptoNetworkProfiles = ipsecCryptoNetworkProfiles_value
	(*obj).IpsecTunnels = ipsecTunnels_value
	(*obj).Lldp = lldp_value
	(*obj).LldpNetworkProfiles = lldpNetworkProfiles_value
	(*obj).LogicalRouters = logicalRouters_value
	(*obj).LoopbackInterfaces = loopbackInterfaces_value
	(*obj).QosInterfaces = qosInterfaces_value
	(*obj).QosNetworkProfiles = qosNetworkProfiles_value
	(*obj).SdwanInterfaceProfiles = sdwanInterfaceProfiles_value
	(*obj).SdwanInterfaces = sdwanInterfaces_value
	(*obj).TunnelInterfaces = tunnelInterfaces_value
	(*obj).TunnelMonitorNetworkProfiles = tunnelMonitorNetworkProfiles_value
	(*obj).VirtualRouters = virtualRouters_value
	(*obj).VirtualWires = virtualWires_value
	(*obj).VlanInterfaces = vlanInterfaces_value
	(*obj).Vlans = vlans_value
	(*obj).ZoneProtectionNetworkProfiles = zoneProtectionNetworkProfiles_value
	(*obj).Zones = zones_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceRestapiObjectsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceRestapiObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	addressGroups_value := o.AddressGroups.ValueStringPointer()
	addresses_value := o.Addresses.ValueStringPointer()
	antiSpywareSecurityProfiles_value := o.AntiSpywareSecurityProfiles.ValueStringPointer()
	antivirusSecurityProfiles_value := o.AntivirusSecurityProfiles.ValueStringPointer()
	applicationFilters_value := o.ApplicationFilters.ValueStringPointer()
	applicationGroups_value := o.ApplicationGroups.ValueStringPointer()
	applications_value := o.Applications.ValueStringPointer()
	authenticationEnforcements_value := o.AuthenticationEnforcements.ValueStringPointer()
	customDataPatterns_value := o.CustomDataPatterns.ValueStringPointer()
	customSpywareSignatures_value := o.CustomSpywareSignatures.ValueStringPointer()
	customUrlCategories_value := o.CustomUrlCategories.ValueStringPointer()
	customVulnerabilitySignatures_value := o.CustomVulnerabilitySignatures.ValueStringPointer()
	dataFilteringSecurityProfiles_value := o.DataFilteringSecurityProfiles.ValueStringPointer()
	decryptionProfiles_value := o.DecryptionProfiles.ValueStringPointer()
	devices_value := o.Devices.ValueStringPointer()
	dosProtectionSecurityProfiles_value := o.DosProtectionSecurityProfiles.ValueStringPointer()
	dynamicUserGroups_value := o.DynamicUserGroups.ValueStringPointer()
	externalDynamicLists_value := o.ExternalDynamicLists.ValueStringPointer()
	fileBlockingSecurityProfiles_value := o.FileBlockingSecurityProfiles.ValueStringPointer()
	globalprotectHipObjects_value := o.GlobalprotectHipObjects.ValueStringPointer()
	globalprotectHipProfiles_value := o.GlobalprotectHipProfiles.ValueStringPointer()
	gtpProtectionSecurityProfiles_value := o.GtpProtectionSecurityProfiles.ValueStringPointer()
	logForwardingProfiles_value := o.LogForwardingProfiles.ValueStringPointer()
	packetBrokerProfiles_value := o.PacketBrokerProfiles.ValueStringPointer()
	regions_value := o.Regions.ValueStringPointer()
	schedules_value := o.Schedules.ValueStringPointer()
	sctpProtectionSecurityProfiles_value := o.SctpProtectionSecurityProfiles.ValueStringPointer()
	sdwanErrorCorrectionProfiles_value := o.SdwanErrorCorrectionProfiles.ValueStringPointer()
	sdwanPathQualityProfiles_value := o.SdwanPathQualityProfiles.ValueStringPointer()
	sdwanSaasQualityProfiles_value := o.SdwanSaasQualityProfiles.ValueStringPointer()
	sdwanTrafficDistributionProfiles_value := o.SdwanTrafficDistributionProfiles.ValueStringPointer()
	securityProfileGroups_value := o.SecurityProfileGroups.ValueStringPointer()
	serviceGroups_value := o.ServiceGroups.ValueStringPointer()
	services_value := o.Services.ValueStringPointer()
	tags_value := o.Tags.ValueStringPointer()
	urlFilteringSecurityProfiles_value := o.UrlFilteringSecurityProfiles.ValueStringPointer()
	vulnerabilityProtectionSecurityProfiles_value := o.VulnerabilityProtectionSecurityProfiles.ValueStringPointer()
	wildfireAnalysisSecurityProfiles_value := o.WildfireAnalysisSecurityProfiles.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceRestapiObjects)
	}
	(*obj).AddressGroups = addressGroups_value
	(*obj).Addresses = addresses_value
	(*obj).AntiSpywareSecurityProfiles = antiSpywareSecurityProfiles_value
	(*obj).AntivirusSecurityProfiles = antivirusSecurityProfiles_value
	(*obj).ApplicationFilters = applicationFilters_value
	(*obj).ApplicationGroups = applicationGroups_value
	(*obj).Applications = applications_value
	(*obj).AuthenticationEnforcements = authenticationEnforcements_value
	(*obj).CustomDataPatterns = customDataPatterns_value
	(*obj).CustomSpywareSignatures = customSpywareSignatures_value
	(*obj).CustomUrlCategories = customUrlCategories_value
	(*obj).CustomVulnerabilitySignatures = customVulnerabilitySignatures_value
	(*obj).DataFilteringSecurityProfiles = dataFilteringSecurityProfiles_value
	(*obj).DecryptionProfiles = decryptionProfiles_value
	(*obj).Devices = devices_value
	(*obj).DosProtectionSecurityProfiles = dosProtectionSecurityProfiles_value
	(*obj).DynamicUserGroups = dynamicUserGroups_value
	(*obj).ExternalDynamicLists = externalDynamicLists_value
	(*obj).FileBlockingSecurityProfiles = fileBlockingSecurityProfiles_value
	(*obj).GlobalprotectHipObjects = globalprotectHipObjects_value
	(*obj).GlobalprotectHipProfiles = globalprotectHipProfiles_value
	(*obj).GtpProtectionSecurityProfiles = gtpProtectionSecurityProfiles_value
	(*obj).LogForwardingProfiles = logForwardingProfiles_value
	(*obj).PacketBrokerProfiles = packetBrokerProfiles_value
	(*obj).Regions = regions_value
	(*obj).Schedules = schedules_value
	(*obj).SctpProtectionSecurityProfiles = sctpProtectionSecurityProfiles_value
	(*obj).SdwanErrorCorrectionProfiles = sdwanErrorCorrectionProfiles_value
	(*obj).SdwanPathQualityProfiles = sdwanPathQualityProfiles_value
	(*obj).SdwanSaasQualityProfiles = sdwanSaasQualityProfiles_value
	(*obj).SdwanTrafficDistributionProfiles = sdwanTrafficDistributionProfiles_value
	(*obj).SecurityProfileGroups = securityProfileGroups_value
	(*obj).ServiceGroups = serviceGroups_value
	(*obj).Services = services_value
	(*obj).Tags = tags_value
	(*obj).UrlFilteringSecurityProfiles = urlFilteringSecurityProfiles_value
	(*obj).VulnerabilityProtectionSecurityProfiles = vulnerabilityProtectionSecurityProfiles_value
	(*obj).WildfireAnalysisSecurityProfiles = wildfireAnalysisSecurityProfiles_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceRestapiPoliciesObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceRestapiPolicies, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	applicationOverrideRules_value := o.ApplicationOverrideRules.ValueStringPointer()
	authenticationRules_value := o.AuthenticationRules.ValueStringPointer()
	decryptionRules_value := o.DecryptionRules.ValueStringPointer()
	dosRules_value := o.DosRules.ValueStringPointer()
	natRules_value := o.NatRules.ValueStringPointer()
	networkPacketBrokerRules_value := o.NetworkPacketBrokerRules.ValueStringPointer()
	policyBasedForwardingRules_value := o.PolicyBasedForwardingRules.ValueStringPointer()
	qosRules_value := o.QosRules.ValueStringPointer()
	sdwanRules_value := o.SdwanRules.ValueStringPointer()
	securityRules_value := o.SecurityRules.ValueStringPointer()
	tunnelInspectionRules_value := o.TunnelInspectionRules.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceRestapiPolicies)
	}
	(*obj).ApplicationOverrideRules = applicationOverrideRules_value
	(*obj).AuthenticationRules = authenticationRules_value
	(*obj).DecryptionRules = decryptionRules_value
	(*obj).DosRules = dosRules_value
	(*obj).NatRules = natRules_value
	(*obj).NetworkPacketBrokerRules = networkPacketBrokerRules_value
	(*obj).PolicyBasedForwardingRules = policyBasedForwardingRules_value
	(*obj).QosRules = qosRules_value
	(*obj).SdwanRules = sdwanRules_value
	(*obj).SecurityRules = securityRules_value
	(*obj).TunnelInspectionRules = tunnelInspectionRules_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceRestapiSystemObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceRestapiSystem, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	configuration_value := o.Configuration.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceRestapiSystem)
	}
	(*obj).Configuration = configuration_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebui, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	acc_value := o.Acc.ValueStringPointer()
	var commit_entry *adminrole.RoleDeviceWebuiCommit
	if o.Commit != nil {
		if *obj != nil && (*obj).Commit != nil {
			commit_entry = (*obj).Commit
		} else {
			commit_entry = new(adminrole.RoleDeviceWebuiCommit)
		}

		diags.Append(o.Commit.CopyToPango(ctx, &commit_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	dashboard_value := o.Dashboard.ValueStringPointer()
	var device_entry *adminrole.RoleDeviceWebuiDevice
	if o.Device != nil {
		if *obj != nil && (*obj).Device != nil {
			device_entry = (*obj).Device
		} else {
			device_entry = new(adminrole.RoleDeviceWebuiDevice)
		}

		diags.Append(o.Device.CopyToPango(ctx, &device_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var global_entry *adminrole.RoleDeviceWebuiGlobal
	if o.Global != nil {
		if *obj != nil && (*obj).Global != nil {
			global_entry = (*obj).Global
		} else {
			global_entry = new(adminrole.RoleDeviceWebuiGlobal)
		}

		diags.Append(o.Global.CopyToPango(ctx, &global_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var monitor_entry *adminrole.RoleDeviceWebuiMonitor
	if o.Monitor != nil {
		if *obj != nil && (*obj).Monitor != nil {
			monitor_entry = (*obj).Monitor
		} else {
			monitor_entry = new(adminrole.RoleDeviceWebuiMonitor)
		}

		diags.Append(o.Monitor.CopyToPango(ctx, &monitor_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var network_entry *adminrole.RoleDeviceWebuiNetwork
	if o.Network != nil {
		if *obj != nil && (*obj).Network != nil {
			network_entry = (*obj).Network
		} else {
			network_entry = new(adminrole.RoleDeviceWebuiNetwork)
		}

		diags.Append(o.Network.CopyToPango(ctx, &network_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var objects_entry *adminrole.RoleDeviceWebuiObjects
	if o.Objects != nil {
		if *obj != nil && (*obj).Objects != nil {
			objects_entry = (*obj).Objects
		} else {
			objects_entry = new(adminrole.RoleDeviceWebuiObjects)
		}

		diags.Append(o.Objects.CopyToPango(ctx, &objects_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var operations_entry *adminrole.RoleDeviceWebuiOperations
	if o.Operations != nil {
		if *obj != nil && (*obj).Operations != nil {
			operations_entry = (*obj).Operations
		} else {
			operations_entry = new(adminrole.RoleDeviceWebuiOperations)
		}

		diags.Append(o.Operations.CopyToPango(ctx, &operations_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var policies_entry *adminrole.RoleDeviceWebuiPolicies
	if o.Policies != nil {
		if *obj != nil && (*obj).Policies != nil {
			policies_entry = (*obj).Policies
		} else {
			policies_entry = new(adminrole.RoleDeviceWebuiPolicies)
		}

		diags.Append(o.Policies.CopyToPango(ctx, &policies_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var privacy_entry *adminrole.RoleDeviceWebuiPrivacy
	if o.Privacy != nil {
		if *obj != nil && (*obj).Privacy != nil {
			privacy_entry = (*obj).Privacy
		} else {
			privacy_entry = new(adminrole.RoleDeviceWebuiPrivacy)
		}

		diags.Append(o.Privacy.CopyToPango(ctx, &privacy_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var save_entry *adminrole.RoleDeviceWebuiSave
	if o.Save != nil {
		if *obj != nil && (*obj).Save != nil {
			save_entry = (*obj).Save
		} else {
			save_entry = new(adminrole.RoleDeviceWebuiSave)
		}

		diags.Append(o.Save.CopyToPango(ctx, &save_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	tasks_value := o.Tasks.ValueStringPointer()
	validate_value := o.Validate.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebui)
	}
	(*obj).Acc = acc_value
	(*obj).Commit = commit_entry
	(*obj).Dashboard = dashboard_value
	(*obj).Device = device_entry
	(*obj).Global = global_entry
	(*obj).Monitor = monitor_entry
	(*obj).Network = network_entry
	(*obj).Objects = objects_entry
	(*obj).Operations = operations_entry
	(*obj).Policies = policies_entry
	(*obj).Privacy = privacy_entry
	(*obj).Save = save_entry
	(*obj).Tasks = tasks_value
	(*obj).Validate = validate_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiCommitObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiCommit, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	commitForOtherAdmins_value := o.CommitForOtherAdmins.ValueStringPointer()
	device_value := o.Device.ValueStringPointer()
	objectLevelChanges_value := o.ObjectLevelChanges.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiCommit)
	}
	(*obj).CommitForOtherAdmins = commitForOtherAdmins_value
	(*obj).Device = device_value
	(*obj).ObjectLevelChanges = objectLevelChanges_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiDeviceObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiDevice, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	accessDomain_value := o.AccessDomain.ValueStringPointer()
	adminRoles_value := o.AdminRoles.ValueStringPointer()
	administrators_value := o.Administrators.ValueStringPointer()
	authenticationProfile_value := o.AuthenticationProfile.ValueStringPointer()
	authenticationSequence_value := o.AuthenticationSequence.ValueStringPointer()
	blockPages_value := o.BlockPages.ValueStringPointer()
	var certificateManagement_entry *adminrole.RoleDeviceWebuiDeviceCertificateManagement
	if o.CertificateManagement != nil {
		if *obj != nil && (*obj).CertificateManagement != nil {
			certificateManagement_entry = (*obj).CertificateManagement
		} else {
			certificateManagement_entry = new(adminrole.RoleDeviceWebuiDeviceCertificateManagement)
		}

		diags.Append(o.CertificateManagement.CopyToPango(ctx, &certificateManagement_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	configAudit_value := o.ConfigAudit.ValueStringPointer()
	dataRedistribution_value := o.DataRedistribution.ValueStringPointer()
	deviceQuarantine_value := o.DeviceQuarantine.ValueStringPointer()
	dynamicUpdates_value := o.DynamicUpdates.ValueStringPointer()
	globalProtectClient_value := o.GlobalProtectClient.ValueStringPointer()
	highAvailability_value := o.HighAvailability.ValueStringPointer()
	licenses_value := o.Licenses.ValueStringPointer()
	var localUserDatabase_entry *adminrole.RoleDeviceWebuiDeviceLocalUserDatabase
	if o.LocalUserDatabase != nil {
		if *obj != nil && (*obj).LocalUserDatabase != nil {
			localUserDatabase_entry = (*obj).LocalUserDatabase
		} else {
			localUserDatabase_entry = new(adminrole.RoleDeviceWebuiDeviceLocalUserDatabase)
		}

		diags.Append(o.LocalUserDatabase.CopyToPango(ctx, &localUserDatabase_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	logFwdCard_value := o.LogFwdCard.ValueStringPointer()
	var logSettings_entry *adminrole.RoleDeviceWebuiDeviceLogSettings
	if o.LogSettings != nil {
		if *obj != nil && (*obj).LogSettings != nil {
			logSettings_entry = (*obj).LogSettings
		} else {
			logSettings_entry = new(adminrole.RoleDeviceWebuiDeviceLogSettings)
		}

		diags.Append(o.LogSettings.CopyToPango(ctx, &logSettings_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	masterKey_value := o.MasterKey.ValueStringPointer()
	plugins_value := o.Plugins.ValueStringPointer()
	var policyRecommendations_entry *adminrole.RoleDeviceWebuiDevicePolicyRecommendations
	if o.PolicyRecommendations != nil {
		if *obj != nil && (*obj).PolicyRecommendations != nil {
			policyRecommendations_entry = (*obj).PolicyRecommendations
		} else {
			policyRecommendations_entry = new(adminrole.RoleDeviceWebuiDevicePolicyRecommendations)
		}

		diags.Append(o.PolicyRecommendations.CopyToPango(ctx, &policyRecommendations_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	scheduledLogExport_value := o.ScheduledLogExport.ValueStringPointer()
	var serverProfile_entry *adminrole.RoleDeviceWebuiDeviceServerProfile
	if o.ServerProfile != nil {
		if *obj != nil && (*obj).ServerProfile != nil {
			serverProfile_entry = (*obj).ServerProfile
		} else {
			serverProfile_entry = new(adminrole.RoleDeviceWebuiDeviceServerProfile)
		}

		diags.Append(o.ServerProfile.CopyToPango(ctx, &serverProfile_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var setup_entry *adminrole.RoleDeviceWebuiDeviceSetup
	if o.Setup != nil {
		if *obj != nil && (*obj).Setup != nil {
			setup_entry = (*obj).Setup
		} else {
			setup_entry = new(adminrole.RoleDeviceWebuiDeviceSetup)
		}

		diags.Append(o.Setup.CopyToPango(ctx, &setup_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	sharedGateways_value := o.SharedGateways.ValueStringPointer()
	software_value := o.Software.ValueStringPointer()
	support_value := o.Support.ValueStringPointer()
	troubleshooting_value := o.Troubleshooting.ValueStringPointer()
	userIdentification_value := o.UserIdentification.ValueStringPointer()
	virtualSystems_value := o.VirtualSystems.ValueStringPointer()
	vmInfoSource_value := o.VmInfoSource.ValueStringPointer()
	dhcpSyslogServer_value := o.DhcpSyslogServer.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiDevice)
	}
	(*obj).AccessDomain = accessDomain_value
	(*obj).AdminRoles = adminRoles_value
	(*obj).Administrators = administrators_value
	(*obj).AuthenticationProfile = authenticationProfile_value
	(*obj).AuthenticationSequence = authenticationSequence_value
	(*obj).BlockPages = blockPages_value
	(*obj).CertificateManagement = certificateManagement_entry
	(*obj).ConfigAudit = configAudit_value
	(*obj).DataRedistribution = dataRedistribution_value
	(*obj).DeviceQuarantine = deviceQuarantine_value
	(*obj).DynamicUpdates = dynamicUpdates_value
	(*obj).GlobalProtectClient = globalProtectClient_value
	(*obj).HighAvailability = highAvailability_value
	(*obj).Licenses = licenses_value
	(*obj).LocalUserDatabase = localUserDatabase_entry
	(*obj).LogFwdCard = logFwdCard_value
	(*obj).LogSettings = logSettings_entry
	(*obj).MasterKey = masterKey_value
	(*obj).Plugins = plugins_value
	(*obj).PolicyRecommendations = policyRecommendations_entry
	(*obj).ScheduledLogExport = scheduledLogExport_value
	(*obj).ServerProfile = serverProfile_entry
	(*obj).Setup = setup_entry
	(*obj).SharedGateways = sharedGateways_value
	(*obj).Software = software_value
	(*obj).Support = support_value
	(*obj).Troubleshooting = troubleshooting_value
	(*obj).UserIdentification = userIdentification_value
	(*obj).VirtualSystems = virtualSystems_value
	(*obj).VmInfoSource = vmInfoSource_value
	(*obj).DhcpSyslogServer = dhcpSyslogServer_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiDeviceCertificateManagementObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiDeviceCertificateManagement, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	certificateProfile_value := o.CertificateProfile.ValueStringPointer()
	certificates_value := o.Certificates.ValueStringPointer()
	ocspResponder_value := o.OcspResponder.ValueStringPointer()
	scep_value := o.Scep.ValueStringPointer()
	sshServiceProfile_value := o.SshServiceProfile.ValueStringPointer()
	sslDecryptionExclusion_value := o.SslDecryptionExclusion.ValueStringPointer()
	sslTlsServiceProfile_value := o.SslTlsServiceProfile.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiDeviceCertificateManagement)
	}
	(*obj).CertificateProfile = certificateProfile_value
	(*obj).Certificates = certificates_value
	(*obj).OcspResponder = ocspResponder_value
	(*obj).Scep = scep_value
	(*obj).SshServiceProfile = sshServiceProfile_value
	(*obj).SslDecryptionExclusion = sslDecryptionExclusion_value
	(*obj).SslTlsServiceProfile = sslTlsServiceProfile_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiDeviceLocalUserDatabaseObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiDeviceLocalUserDatabase, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	userGroups_value := o.UserGroups.ValueStringPointer()
	users_value := o.Users.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiDeviceLocalUserDatabase)
	}
	(*obj).UserGroups = userGroups_value
	(*obj).Users = users_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiDeviceLogSettingsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiDeviceLogSettings, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	ccAlarm_value := o.CcAlarm.ValueStringPointer()
	config_value := o.Config.ValueStringPointer()
	correlation_value := o.Correlation.ValueStringPointer()
	globalprotect_value := o.Globalprotect.ValueStringPointer()
	hipmatch_value := o.Hipmatch.ValueStringPointer()
	iptag_value := o.Iptag.ValueStringPointer()
	manageLog_value := o.ManageLog.ValueStringPointer()
	system_value := o.System.ValueStringPointer()
	userId_value := o.UserId.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiDeviceLogSettings)
	}
	(*obj).CcAlarm = ccAlarm_value
	(*obj).Config = config_value
	(*obj).Correlation = correlation_value
	(*obj).Globalprotect = globalprotect_value
	(*obj).Hipmatch = hipmatch_value
	(*obj).Iptag = iptag_value
	(*obj).ManageLog = manageLog_value
	(*obj).System = system_value
	(*obj).UserId = userId_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiDevicePolicyRecommendationsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiDevicePolicyRecommendations, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	iot_value := o.Iot.ValueStringPointer()
	saas_value := o.Saas.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiDevicePolicyRecommendations)
	}
	(*obj).Iot = iot_value
	(*obj).Saas = saas_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiDeviceServerProfileObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiDeviceServerProfile, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	dns_value := o.Dns.ValueStringPointer()
	email_value := o.Email.ValueStringPointer()
	http_value := o.Http.ValueStringPointer()
	kerberos_value := o.Kerberos.ValueStringPointer()
	ldap_value := o.Ldap.ValueStringPointer()
	mfa_value := o.Mfa.ValueStringPointer()
	netflow_value := o.Netflow.ValueStringPointer()
	radius_value := o.Radius.ValueStringPointer()
	samlIdp_value := o.SamlIdp.ValueStringPointer()
	scp_value := o.Scp.ValueStringPointer()
	snmpTrap_value := o.SnmpTrap.ValueStringPointer()
	syslog_value := o.Syslog.ValueStringPointer()
	tacplus_value := o.Tacplus.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiDeviceServerProfile)
	}
	(*obj).Dns = dns_value
	(*obj).Email = email_value
	(*obj).Http = http_value
	(*obj).Kerberos = kerberos_value
	(*obj).Ldap = ldap_value
	(*obj).Mfa = mfa_value
	(*obj).Netflow = netflow_value
	(*obj).Radius = radius_value
	(*obj).SamlIdp = samlIdp_value
	(*obj).Scp = scp_value
	(*obj).SnmpTrap = snmpTrap_value
	(*obj).Syslog = syslog_value
	(*obj).Tacplus = tacplus_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiDeviceSetupObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiDeviceSetup, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	contentId_value := o.ContentId.ValueStringPointer()
	hsm_value := o.Hsm.ValueStringPointer()
	interfaces_value := o.Interfaces.ValueStringPointer()
	management_value := o.Management.ValueStringPointer()
	operations_value := o.Operations.ValueStringPointer()
	services_value := o.Services.ValueStringPointer()
	session_value := o.Session.ValueStringPointer()
	telemetry_value := o.Telemetry.ValueStringPointer()
	wildfire_value := o.Wildfire.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiDeviceSetup)
	}
	(*obj).ContentId = contentId_value
	(*obj).Hsm = hsm_value
	(*obj).Interfaces = interfaces_value
	(*obj).Management = management_value
	(*obj).Operations = operations_value
	(*obj).Services = services_value
	(*obj).Session = session_value
	(*obj).Telemetry = telemetry_value
	(*obj).Wildfire = wildfire_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiGlobalObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiGlobal, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	systemAlarms_value := o.SystemAlarms.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiGlobal)
	}
	(*obj).SystemAlarms = systemAlarms_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiMonitorObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiMonitor, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	appScope_value := o.AppScope.ValueStringPointer()
	applicationReports_value := o.ApplicationReports.ValueStringPointer()
	var automatedCorrelationEngine_entry *adminrole.RoleDeviceWebuiMonitorAutomatedCorrelationEngine
	if o.AutomatedCorrelationEngine != nil {
		if *obj != nil && (*obj).AutomatedCorrelationEngine != nil {
			automatedCorrelationEngine_entry = (*obj).AutomatedCorrelationEngine
		} else {
			automatedCorrelationEngine_entry = new(adminrole.RoleDeviceWebuiMonitorAutomatedCorrelationEngine)
		}

		diags.Append(o.AutomatedCorrelationEngine.CopyToPango(ctx, &automatedCorrelationEngine_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	blockIpList_value := o.BlockIpList.ValueStringPointer()
	botnet_value := o.Botnet.ValueStringPointer()
	var customReports_entry *adminrole.RoleDeviceWebuiMonitorCustomReports
	if o.CustomReports != nil {
		if *obj != nil && (*obj).CustomReports != nil {
			customReports_entry = (*obj).CustomReports
		} else {
			customReports_entry = new(adminrole.RoleDeviceWebuiMonitorCustomReports)
		}

		diags.Append(o.CustomReports.CopyToPango(ctx, &customReports_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	externalLogs_value := o.ExternalLogs.ValueStringPointer()
	gtpReports_value := o.GtpReports.ValueStringPointer()
	var logs_entry *adminrole.RoleDeviceWebuiMonitorLogs
	if o.Logs != nil {
		if *obj != nil && (*obj).Logs != nil {
			logs_entry = (*obj).Logs
		} else {
			logs_entry = new(adminrole.RoleDeviceWebuiMonitorLogs)
		}

		diags.Append(o.Logs.CopyToPango(ctx, &logs_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	packetCapture_value := o.PacketCapture.ValueStringPointer()
	var pdfReports_entry *adminrole.RoleDeviceWebuiMonitorPdfReports
	if o.PdfReports != nil {
		if *obj != nil && (*obj).PdfReports != nil {
			pdfReports_entry = (*obj).PdfReports
		} else {
			pdfReports_entry = new(adminrole.RoleDeviceWebuiMonitorPdfReports)
		}

		diags.Append(o.PdfReports.CopyToPango(ctx, &pdfReports_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	sctpReports_value := o.SctpReports.ValueStringPointer()
	sessionBrowser_value := o.SessionBrowser.ValueStringPointer()
	threatReports_value := o.ThreatReports.ValueStringPointer()
	trafficReports_value := o.TrafficReports.ValueStringPointer()
	urlFilteringReports_value := o.UrlFilteringReports.ValueStringPointer()
	viewCustomReports_value := o.ViewCustomReports.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiMonitor)
	}
	(*obj).AppScope = appScope_value
	(*obj).ApplicationReports = applicationReports_value
	(*obj).AutomatedCorrelationEngine = automatedCorrelationEngine_entry
	(*obj).BlockIpList = blockIpList_value
	(*obj).Botnet = botnet_value
	(*obj).CustomReports = customReports_entry
	(*obj).ExternalLogs = externalLogs_value
	(*obj).GtpReports = gtpReports_value
	(*obj).Logs = logs_entry
	(*obj).PacketCapture = packetCapture_value
	(*obj).PdfReports = pdfReports_entry
	(*obj).SctpReports = sctpReports_value
	(*obj).SessionBrowser = sessionBrowser_value
	(*obj).ThreatReports = threatReports_value
	(*obj).TrafficReports = trafficReports_value
	(*obj).UrlFilteringReports = urlFilteringReports_value
	(*obj).ViewCustomReports = viewCustomReports_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiMonitorAutomatedCorrelationEngineObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiMonitorAutomatedCorrelationEngine, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	correlatedEvents_value := o.CorrelatedEvents.ValueStringPointer()
	correlationObjects_value := o.CorrelationObjects.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiMonitorAutomatedCorrelationEngine)
	}
	(*obj).CorrelatedEvents = correlatedEvents_value
	(*obj).CorrelationObjects = correlationObjects_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiMonitorCustomReportsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiMonitorCustomReports, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	applicationStatistics_value := o.ApplicationStatistics.ValueStringPointer()
	auth_value := o.Auth.ValueStringPointer()
	dataFilteringLog_value := o.DataFilteringLog.ValueStringPointer()
	decryptionLog_value := o.DecryptionLog.ValueStringPointer()
	decryptionSummary_value := o.DecryptionSummary.ValueStringPointer()
	globalprotect_value := o.Globalprotect.ValueStringPointer()
	gtpLog_value := o.GtpLog.ValueStringPointer()
	gtpSummary_value := o.GtpSummary.ValueStringPointer()
	hipmatch_value := o.Hipmatch.ValueStringPointer()
	iptag_value := o.Iptag.ValueStringPointer()
	sctpLog_value := o.SctpLog.ValueStringPointer()
	sctpSummary_value := o.SctpSummary.ValueStringPointer()
	threatLog_value := o.ThreatLog.ValueStringPointer()
	threatSummary_value := o.ThreatSummary.ValueStringPointer()
	trafficLog_value := o.TrafficLog.ValueStringPointer()
	trafficSummary_value := o.TrafficSummary.ValueStringPointer()
	tunnelLog_value := o.TunnelLog.ValueStringPointer()
	tunnelSummary_value := o.TunnelSummary.ValueStringPointer()
	urlLog_value := o.UrlLog.ValueStringPointer()
	urlSummary_value := o.UrlSummary.ValueStringPointer()
	userid_value := o.Userid.ValueStringPointer()
	wildfireLog_value := o.WildfireLog.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiMonitorCustomReports)
	}
	(*obj).ApplicationStatistics = applicationStatistics_value
	(*obj).Auth = auth_value
	(*obj).DataFilteringLog = dataFilteringLog_value
	(*obj).DecryptionLog = decryptionLog_value
	(*obj).DecryptionSummary = decryptionSummary_value
	(*obj).Globalprotect = globalprotect_value
	(*obj).GtpLog = gtpLog_value
	(*obj).GtpSummary = gtpSummary_value
	(*obj).Hipmatch = hipmatch_value
	(*obj).Iptag = iptag_value
	(*obj).SctpLog = sctpLog_value
	(*obj).SctpSummary = sctpSummary_value
	(*obj).ThreatLog = threatLog_value
	(*obj).ThreatSummary = threatSummary_value
	(*obj).TrafficLog = trafficLog_value
	(*obj).TrafficSummary = trafficSummary_value
	(*obj).TunnelLog = tunnelLog_value
	(*obj).TunnelSummary = tunnelSummary_value
	(*obj).UrlLog = urlLog_value
	(*obj).UrlSummary = urlSummary_value
	(*obj).Userid = userid_value
	(*obj).WildfireLog = wildfireLog_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiMonitorLogsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiMonitorLogs, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	alarm_value := o.Alarm.ValueStringPointer()
	authentication_value := o.Authentication.ValueStringPointer()
	configuration_value := o.Configuration.ValueStringPointer()
	dataFiltering_value := o.DataFiltering.ValueStringPointer()
	decryption_value := o.Decryption.ValueStringPointer()
	globalprotect_value := o.Globalprotect.ValueStringPointer()
	gtp_value := o.Gtp.ValueStringPointer()
	hipmatch_value := o.Hipmatch.ValueStringPointer()
	iptag_value := o.Iptag.ValueStringPointer()
	sctp_value := o.Sctp.ValueStringPointer()
	system_value := o.System.ValueStringPointer()
	threat_value := o.Threat.ValueStringPointer()
	traffic_value := o.Traffic.ValueStringPointer()
	tunnel_value := o.Tunnel.ValueStringPointer()
	url_value := o.Url.ValueStringPointer()
	userid_value := o.Userid.ValueStringPointer()
	wildfire_value := o.Wildfire.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiMonitorLogs)
	}
	(*obj).Alarm = alarm_value
	(*obj).Authentication = authentication_value
	(*obj).Configuration = configuration_value
	(*obj).DataFiltering = dataFiltering_value
	(*obj).Decryption = decryption_value
	(*obj).Globalprotect = globalprotect_value
	(*obj).Gtp = gtp_value
	(*obj).Hipmatch = hipmatch_value
	(*obj).Iptag = iptag_value
	(*obj).Sctp = sctp_value
	(*obj).System = system_value
	(*obj).Threat = threat_value
	(*obj).Traffic = traffic_value
	(*obj).Tunnel = tunnel_value
	(*obj).Url = url_value
	(*obj).Userid = userid_value
	(*obj).Wildfire = wildfire_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiMonitorPdfReportsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiMonitorPdfReports, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	emailScheduler_value := o.EmailScheduler.ValueStringPointer()
	managePdfSummary_value := o.ManagePdfSummary.ValueStringPointer()
	pdfSummaryReports_value := o.PdfSummaryReports.ValueStringPointer()
	reportGroups_value := o.ReportGroups.ValueStringPointer()
	saasApplicationUsageReport_value := o.SaasApplicationUsageReport.ValueStringPointer()
	userActivityReport_value := o.UserActivityReport.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiMonitorPdfReports)
	}
	(*obj).EmailScheduler = emailScheduler_value
	(*obj).ManagePdfSummary = managePdfSummary_value
	(*obj).PdfSummaryReports = pdfSummaryReports_value
	(*obj).ReportGroups = reportGroups_value
	(*obj).SaasApplicationUsageReport = saasApplicationUsageReport_value
	(*obj).UserActivityReport = userActivityReport_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiNetworkObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiNetwork, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	dhcp_value := o.Dhcp.ValueStringPointer()
	dnsProxy_value := o.DnsProxy.ValueStringPointer()
	var globalProtect_entry *adminrole.RoleDeviceWebuiNetworkGlobalProtect
	if o.GlobalProtect != nil {
		if *obj != nil && (*obj).GlobalProtect != nil {
			globalProtect_entry = (*obj).GlobalProtect
		} else {
			globalProtect_entry = new(adminrole.RoleDeviceWebuiNetworkGlobalProtect)
		}

		diags.Append(o.GlobalProtect.CopyToPango(ctx, &globalProtect_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	greTunnels_value := o.GreTunnels.ValueStringPointer()
	interfaces_value := o.Interfaces.ValueStringPointer()
	ipsecTunnels_value := o.IpsecTunnels.ValueStringPointer()
	lldp_value := o.Lldp.ValueStringPointer()
	var networkProfiles_entry *adminrole.RoleDeviceWebuiNetworkNetworkProfiles
	if o.NetworkProfiles != nil {
		if *obj != nil && (*obj).NetworkProfiles != nil {
			networkProfiles_entry = (*obj).NetworkProfiles
		} else {
			networkProfiles_entry = new(adminrole.RoleDeviceWebuiNetworkNetworkProfiles)
		}

		diags.Append(o.NetworkProfiles.CopyToPango(ctx, &networkProfiles_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	qos_value := o.Qos.ValueStringPointer()
	var routing_entry *adminrole.RoleDeviceWebuiNetworkRouting
	if o.Routing != nil {
		if *obj != nil && (*obj).Routing != nil {
			routing_entry = (*obj).Routing
		} else {
			routing_entry = new(adminrole.RoleDeviceWebuiNetworkRouting)
		}

		diags.Append(o.Routing.CopyToPango(ctx, &routing_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	sdwanInterfaceProfile_value := o.SdwanInterfaceProfile.ValueStringPointer()
	virtualRouters_value := o.VirtualRouters.ValueStringPointer()
	virtualWires_value := o.VirtualWires.ValueStringPointer()
	vlans_value := o.Vlans.ValueStringPointer()
	zones_value := o.Zones.ValueStringPointer()
	secureWebGateway_value := o.SecureWebGateway.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiNetwork)
	}
	(*obj).Dhcp = dhcp_value
	(*obj).DnsProxy = dnsProxy_value
	(*obj).GlobalProtect = globalProtect_entry
	(*obj).GreTunnels = greTunnels_value
	(*obj).Interfaces = interfaces_value
	(*obj).IpsecTunnels = ipsecTunnels_value
	(*obj).Lldp = lldp_value
	(*obj).NetworkProfiles = networkProfiles_entry
	(*obj).Qos = qos_value
	(*obj).Routing = routing_entry
	(*obj).SdwanInterfaceProfile = sdwanInterfaceProfile_value
	(*obj).VirtualRouters = virtualRouters_value
	(*obj).VirtualWires = virtualWires_value
	(*obj).Vlans = vlans_value
	(*obj).Zones = zones_value
	(*obj).SecureWebGateway = secureWebGateway_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiNetworkGlobalProtectObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiNetworkGlobalProtect, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	clientlessAppGroups_value := o.ClientlessAppGroups.ValueStringPointer()
	clientlessApps_value := o.ClientlessApps.ValueStringPointer()
	gateways_value := o.Gateways.ValueStringPointer()
	mdm_value := o.Mdm.ValueStringPointer()
	portals_value := o.Portals.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiNetworkGlobalProtect)
	}
	(*obj).ClientlessAppGroups = clientlessAppGroups_value
	(*obj).ClientlessApps = clientlessApps_value
	(*obj).Gateways = gateways_value
	(*obj).Mdm = mdm_value
	(*obj).Portals = portals_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiNetworkNetworkProfilesObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiNetworkNetworkProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	bfdProfile_value := o.BfdProfile.ValueStringPointer()
	gpAppIpsecCrypto_value := o.GpAppIpsecCrypto.ValueStringPointer()
	ikeCrypto_value := o.IkeCrypto.ValueStringPointer()
	ikeGateways_value := o.IkeGateways.ValueStringPointer()
	interfaceMgmt_value := o.InterfaceMgmt.ValueStringPointer()
	ipsecCrypto_value := o.IpsecCrypto.ValueStringPointer()
	lldpProfile_value := o.LldpProfile.ValueStringPointer()
	qosProfile_value := o.QosProfile.ValueStringPointer()
	tunnelMonitor_value := o.TunnelMonitor.ValueStringPointer()
	zoneProtection_value := o.ZoneProtection.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiNetworkNetworkProfiles)
	}
	(*obj).BfdProfile = bfdProfile_value
	(*obj).GpAppIpsecCrypto = gpAppIpsecCrypto_value
	(*obj).IkeCrypto = ikeCrypto_value
	(*obj).IkeGateways = ikeGateways_value
	(*obj).InterfaceMgmt = interfaceMgmt_value
	(*obj).IpsecCrypto = ipsecCrypto_value
	(*obj).LldpProfile = lldpProfile_value
	(*obj).QosProfile = qosProfile_value
	(*obj).TunnelMonitor = tunnelMonitor_value
	(*obj).ZoneProtection = zoneProtection_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiNetworkRoutingObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiNetworkRouting, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	logicalRouters_value := o.LogicalRouters.ValueStringPointer()
	var routingProfiles_entry *adminrole.RoleDeviceWebuiNetworkRoutingRoutingProfiles
	if o.RoutingProfiles != nil {
		if *obj != nil && (*obj).RoutingProfiles != nil {
			routingProfiles_entry = (*obj).RoutingProfiles
		} else {
			routingProfiles_entry = new(adminrole.RoleDeviceWebuiNetworkRoutingRoutingProfiles)
		}

		diags.Append(o.RoutingProfiles.CopyToPango(ctx, &routingProfiles_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiNetworkRouting)
	}
	(*obj).LogicalRouters = logicalRouters_value
	(*obj).RoutingProfiles = routingProfiles_entry

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiNetworkRoutingRoutingProfilesObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiNetworkRoutingRoutingProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	bfd_value := o.Bfd.ValueStringPointer()
	bgp_value := o.Bgp.ValueStringPointer()
	filters_value := o.Filters.ValueStringPointer()
	multicast_value := o.Multicast.ValueStringPointer()
	ospf_value := o.Ospf.ValueStringPointer()
	ospfv3_value := o.Ospfv3.ValueStringPointer()
	ripv2_value := o.Ripv2.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiNetworkRoutingRoutingProfiles)
	}
	(*obj).Bfd = bfd_value
	(*obj).Bgp = bgp_value
	(*obj).Filters = filters_value
	(*obj).Multicast = multicast_value
	(*obj).Ospf = ospf_value
	(*obj).Ospfv3 = ospfv3_value
	(*obj).Ripv2 = ripv2_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiObjectsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	addressGroups_value := o.AddressGroups.ValueStringPointer()
	addresses_value := o.Addresses.ValueStringPointer()
	applicationFilters_value := o.ApplicationFilters.ValueStringPointer()
	applicationGroups_value := o.ApplicationGroups.ValueStringPointer()
	applications_value := o.Applications.ValueStringPointer()
	authentication_value := o.Authentication.ValueStringPointer()
	var customObjects_entry *adminrole.RoleDeviceWebuiObjectsCustomObjects
	if o.CustomObjects != nil {
		if *obj != nil && (*obj).CustomObjects != nil {
			customObjects_entry = (*obj).CustomObjects
		} else {
			customObjects_entry = new(adminrole.RoleDeviceWebuiObjectsCustomObjects)
		}

		diags.Append(o.CustomObjects.CopyToPango(ctx, &customObjects_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var decryption_entry *adminrole.RoleDeviceWebuiObjectsDecryption
	if o.Decryption != nil {
		if *obj != nil && (*obj).Decryption != nil {
			decryption_entry = (*obj).Decryption
		} else {
			decryption_entry = new(adminrole.RoleDeviceWebuiObjectsDecryption)
		}

		diags.Append(o.Decryption.CopyToPango(ctx, &decryption_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	devices_value := o.Devices.ValueStringPointer()
	dynamicBlockLists_value := o.DynamicBlockLists.ValueStringPointer()
	dynamicUserGroups_value := o.DynamicUserGroups.ValueStringPointer()
	var globalProtect_entry *adminrole.RoleDeviceWebuiObjectsGlobalProtect
	if o.GlobalProtect != nil {
		if *obj != nil && (*obj).GlobalProtect != nil {
			globalProtect_entry = (*obj).GlobalProtect
		} else {
			globalProtect_entry = new(adminrole.RoleDeviceWebuiObjectsGlobalProtect)
		}

		diags.Append(o.GlobalProtect.CopyToPango(ctx, &globalProtect_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	logForwarding_value := o.LogForwarding.ValueStringPointer()
	packetBrokerProfile_value := o.PacketBrokerProfile.ValueStringPointer()
	regions_value := o.Regions.ValueStringPointer()
	schedules_value := o.Schedules.ValueStringPointer()
	var sdwan_entry *adminrole.RoleDeviceWebuiObjectsSdwan
	if o.Sdwan != nil {
		if *obj != nil && (*obj).Sdwan != nil {
			sdwan_entry = (*obj).Sdwan
		} else {
			sdwan_entry = new(adminrole.RoleDeviceWebuiObjectsSdwan)
		}

		diags.Append(o.Sdwan.CopyToPango(ctx, &sdwan_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	securityProfileGroups_value := o.SecurityProfileGroups.ValueStringPointer()
	var securityProfiles_entry *adminrole.RoleDeviceWebuiObjectsSecurityProfiles
	if o.SecurityProfiles != nil {
		if *obj != nil && (*obj).SecurityProfiles != nil {
			securityProfiles_entry = (*obj).SecurityProfiles
		} else {
			securityProfiles_entry = new(adminrole.RoleDeviceWebuiObjectsSecurityProfiles)
		}

		diags.Append(o.SecurityProfiles.CopyToPango(ctx, &securityProfiles_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	serviceGroups_value := o.ServiceGroups.ValueStringPointer()
	services_value := o.Services.ValueStringPointer()
	tags_value := o.Tags.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiObjects)
	}
	(*obj).AddressGroups = addressGroups_value
	(*obj).Addresses = addresses_value
	(*obj).ApplicationFilters = applicationFilters_value
	(*obj).ApplicationGroups = applicationGroups_value
	(*obj).Applications = applications_value
	(*obj).Authentication = authentication_value
	(*obj).CustomObjects = customObjects_entry
	(*obj).Decryption = decryption_entry
	(*obj).Devices = devices_value
	(*obj).DynamicBlockLists = dynamicBlockLists_value
	(*obj).DynamicUserGroups = dynamicUserGroups_value
	(*obj).GlobalProtect = globalProtect_entry
	(*obj).LogForwarding = logForwarding_value
	(*obj).PacketBrokerProfile = packetBrokerProfile_value
	(*obj).Regions = regions_value
	(*obj).Schedules = schedules_value
	(*obj).Sdwan = sdwan_entry
	(*obj).SecurityProfileGroups = securityProfileGroups_value
	(*obj).SecurityProfiles = securityProfiles_entry
	(*obj).ServiceGroups = serviceGroups_value
	(*obj).Services = services_value
	(*obj).Tags = tags_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiObjectsCustomObjectsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiObjectsCustomObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	dataPatterns_value := o.DataPatterns.ValueStringPointer()
	spyware_value := o.Spyware.ValueStringPointer()
	urlCategory_value := o.UrlCategory.ValueStringPointer()
	vulnerability_value := o.Vulnerability.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiObjectsCustomObjects)
	}
	(*obj).DataPatterns = dataPatterns_value
	(*obj).Spyware = spyware_value
	(*obj).UrlCategory = urlCategory_value
	(*obj).Vulnerability = vulnerability_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiObjectsDecryptionObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiObjectsDecryption, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	decryptionProfile_value := o.DecryptionProfile.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiObjectsDecryption)
	}
	(*obj).DecryptionProfile = decryptionProfile_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiObjectsGlobalProtectObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiObjectsGlobalProtect, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	hipObjects_value := o.HipObjects.ValueStringPointer()
	hipProfiles_value := o.HipProfiles.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiObjectsGlobalProtect)
	}
	(*obj).HipObjects = hipObjects_value
	(*obj).HipProfiles = hipProfiles_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiObjectsSdwanObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiObjectsSdwan, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	sdwanDistProfile_value := o.SdwanDistProfile.ValueStringPointer()
	sdwanErrorCorrectionProfile_value := o.SdwanErrorCorrectionProfile.ValueStringPointer()
	sdwanProfile_value := o.SdwanProfile.ValueStringPointer()
	sdwanSaasQualityProfile_value := o.SdwanSaasQualityProfile.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiObjectsSdwan)
	}
	(*obj).SdwanDistProfile = sdwanDistProfile_value
	(*obj).SdwanErrorCorrectionProfile = sdwanErrorCorrectionProfile_value
	(*obj).SdwanProfile = sdwanProfile_value
	(*obj).SdwanSaasQualityProfile = sdwanSaasQualityProfile_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiObjectsSecurityProfilesObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiObjectsSecurityProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	antiSpyware_value := o.AntiSpyware.ValueStringPointer()
	antivirus_value := o.Antivirus.ValueStringPointer()
	dataFiltering_value := o.DataFiltering.ValueStringPointer()
	dosProtection_value := o.DosProtection.ValueStringPointer()
	fileBlocking_value := o.FileBlocking.ValueStringPointer()
	gtpProtection_value := o.GtpProtection.ValueStringPointer()
	sctpProtection_value := o.SctpProtection.ValueStringPointer()
	urlFiltering_value := o.UrlFiltering.ValueStringPointer()
	vulnerabilityProtection_value := o.VulnerabilityProtection.ValueStringPointer()
	wildfireAnalysis_value := o.WildfireAnalysis.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiObjectsSecurityProfiles)
	}
	(*obj).AntiSpyware = antiSpyware_value
	(*obj).Antivirus = antivirus_value
	(*obj).DataFiltering = dataFiltering_value
	(*obj).DosProtection = dosProtection_value
	(*obj).FileBlocking = fileBlocking_value
	(*obj).GtpProtection = gtpProtection_value
	(*obj).SctpProtection = sctpProtection_value
	(*obj).UrlFiltering = urlFiltering_value
	(*obj).VulnerabilityProtection = vulnerabilityProtection_value
	(*obj).WildfireAnalysis = wildfireAnalysis_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiOperationsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiOperations, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	downloadCoreFiles_value := o.DownloadCoreFiles.ValueStringPointer()
	downloadPcapFiles_value := o.DownloadPcapFiles.ValueStringPointer()
	generateStatsDumpFile_value := o.GenerateStatsDumpFile.ValueStringPointer()
	generateTechSupportFile_value := o.GenerateTechSupportFile.ValueStringPointer()
	reboot_value := o.Reboot.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiOperations)
	}
	(*obj).DownloadCoreFiles = downloadCoreFiles_value
	(*obj).DownloadPcapFiles = downloadPcapFiles_value
	(*obj).GenerateStatsDumpFile = generateStatsDumpFile_value
	(*obj).GenerateTechSupportFile = generateTechSupportFile_value
	(*obj).Reboot = reboot_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiPoliciesObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiPolicies, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	applicationOverrideRulebase_value := o.ApplicationOverrideRulebase.ValueStringPointer()
	authenticationRulebase_value := o.AuthenticationRulebase.ValueStringPointer()
	dosRulebase_value := o.DosRulebase.ValueStringPointer()
	natRulebase_value := o.NatRulebase.ValueStringPointer()
	networkPacketBrokerRulebase_value := o.NetworkPacketBrokerRulebase.ValueStringPointer()
	pbfRulebase_value := o.PbfRulebase.ValueStringPointer()
	qosRulebase_value := o.QosRulebase.ValueStringPointer()
	ruleHitCountReset_value := o.RuleHitCountReset.ValueStringPointer()
	sdwanRulebase_value := o.SdwanRulebase.ValueStringPointer()
	securityRulebase_value := o.SecurityRulebase.ValueStringPointer()
	sslDecryptionRulebase_value := o.SslDecryptionRulebase.ValueStringPointer()
	tunnelInspectRulebase_value := o.TunnelInspectRulebase.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiPolicies)
	}
	(*obj).ApplicationOverrideRulebase = applicationOverrideRulebase_value
	(*obj).AuthenticationRulebase = authenticationRulebase_value
	(*obj).DosRulebase = dosRulebase_value
	(*obj).NatRulebase = natRulebase_value
	(*obj).NetworkPacketBrokerRulebase = networkPacketBrokerRulebase_value
	(*obj).PbfRulebase = pbfRulebase_value
	(*obj).QosRulebase = qosRulebase_value
	(*obj).RuleHitCountReset = ruleHitCountReset_value
	(*obj).SdwanRulebase = sdwanRulebase_value
	(*obj).SecurityRulebase = securityRulebase_value
	(*obj).SslDecryptionRulebase = sslDecryptionRulebase_value
	(*obj).TunnelInspectRulebase = tunnelInspectRulebase_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiPrivacyObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiPrivacy, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	showFullIpAddresses_value := o.ShowFullIpAddresses.ValueStringPointer()
	showUserNamesInLogsAndReports_value := o.ShowUserNamesInLogsAndReports.ValueStringPointer()
	viewPcapFiles_value := o.ViewPcapFiles.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiPrivacy)
	}
	(*obj).ShowFullIpAddresses = showFullIpAddresses_value
	(*obj).ShowUserNamesInLogsAndReports = showUserNamesInLogsAndReports_value
	(*obj).ViewPcapFiles = viewPcapFiles_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceWebuiSaveObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiSave, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	partialSave_value := o.PartialSave.ValueStringPointer()
	saveForOtherAdmins_value := o.SaveForOtherAdmins.ValueStringPointer()
	objectLevelChanges_value := o.ObjectLevelChanges.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiSave)
	}
	(*obj).PartialSave = partialSave_value
	(*obj).SaveForOtherAdmins = saveForOtherAdmins_value
	(*obj).ObjectLevelChanges = objectLevelChanges_value

	return diags
}
func (o *AdminRoleDataSourceRoleDeviceXmlapiObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceXmlapi, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	commit_value := o.Commit.ValueStringPointer()
	config_value := o.Config.ValueStringPointer()
	export_value := o.Export.ValueStringPointer()
	import_value := o.Import.ValueStringPointer()
	iot_value := o.Iot.ValueStringPointer()
	log_value := o.Log.ValueStringPointer()
	op_value := o.Op.ValueStringPointer()
	report_value := o.Report.ValueStringPointer()
	userId_value := o.UserId.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceXmlapi)
	}
	(*obj).Commit = commit_value
	(*obj).Config = config_value
	(*obj).Export = export_value
	(*obj).Import = import_value
	(*obj).Iot = iot_value
	(*obj).Log = log_value
	(*obj).Op = op_value
	(*obj).Report = report_value
	(*obj).UserId = userId_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsys, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	cli_value := o.Cli.ValueStringPointer()
	var restapi_entry *adminrole.RoleVsysRestapi
	if o.Restapi != nil {
		if *obj != nil && (*obj).Restapi != nil {
			restapi_entry = (*obj).Restapi
		} else {
			restapi_entry = new(adminrole.RoleVsysRestapi)
		}

		diags.Append(o.Restapi.CopyToPango(ctx, &restapi_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var webui_entry *adminrole.RoleVsysWebui
	if o.Webui != nil {
		if *obj != nil && (*obj).Webui != nil {
			webui_entry = (*obj).Webui
		} else {
			webui_entry = new(adminrole.RoleVsysWebui)
		}

		diags.Append(o.Webui.CopyToPango(ctx, &webui_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var xmlapi_entry *adminrole.RoleVsysXmlapi
	if o.Xmlapi != nil {
		if *obj != nil && (*obj).Xmlapi != nil {
			xmlapi_entry = (*obj).Xmlapi
		} else {
			xmlapi_entry = new(adminrole.RoleVsysXmlapi)
		}

		diags.Append(o.Xmlapi.CopyToPango(ctx, &xmlapi_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsys)
	}
	(*obj).Cli = cli_value
	(*obj).Restapi = restapi_entry
	(*obj).Webui = webui_entry
	(*obj).Xmlapi = xmlapi_entry

	return diags
}
func (o *AdminRoleDataSourceRoleVsysRestapiObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysRestapi, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var device_entry *adminrole.RoleVsysRestapiDevice
	if o.Device != nil {
		if *obj != nil && (*obj).Device != nil {
			device_entry = (*obj).Device
		} else {
			device_entry = new(adminrole.RoleVsysRestapiDevice)
		}

		diags.Append(o.Device.CopyToPango(ctx, &device_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var network_entry *adminrole.RoleVsysRestapiNetwork
	if o.Network != nil {
		if *obj != nil && (*obj).Network != nil {
			network_entry = (*obj).Network
		} else {
			network_entry = new(adminrole.RoleVsysRestapiNetwork)
		}

		diags.Append(o.Network.CopyToPango(ctx, &network_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var objects_entry *adminrole.RoleVsysRestapiObjects
	if o.Objects != nil {
		if *obj != nil && (*obj).Objects != nil {
			objects_entry = (*obj).Objects
		} else {
			objects_entry = new(adminrole.RoleVsysRestapiObjects)
		}

		diags.Append(o.Objects.CopyToPango(ctx, &objects_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var policies_entry *adminrole.RoleVsysRestapiPolicies
	if o.Policies != nil {
		if *obj != nil && (*obj).Policies != nil {
			policies_entry = (*obj).Policies
		} else {
			policies_entry = new(adminrole.RoleVsysRestapiPolicies)
		}

		diags.Append(o.Policies.CopyToPango(ctx, &policies_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var system_entry *adminrole.RoleVsysRestapiSystem
	if o.System != nil {
		if *obj != nil && (*obj).System != nil {
			system_entry = (*obj).System
		} else {
			system_entry = new(adminrole.RoleVsysRestapiSystem)
		}

		diags.Append(o.System.CopyToPango(ctx, &system_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysRestapi)
	}
	(*obj).Device = device_entry
	(*obj).Network = network_entry
	(*obj).Objects = objects_entry
	(*obj).Policies = policies_entry
	(*obj).System = system_entry

	return diags
}
func (o *AdminRoleDataSourceRoleVsysRestapiDeviceObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysRestapiDevice, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	emailServerProfiles_value := o.EmailServerProfiles.ValueStringPointer()
	httpServerProfiles_value := o.HttpServerProfiles.ValueStringPointer()
	ldapServerProfiles_value := o.LdapServerProfiles.ValueStringPointer()
	logInterfaceSetting_value := o.LogInterfaceSetting.ValueStringPointer()
	snmpTrapServerProfiles_value := o.SnmpTrapServerProfiles.ValueStringPointer()
	syslogServerProfiles_value := o.SyslogServerProfiles.ValueStringPointer()
	virtualSystems_value := o.VirtualSystems.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysRestapiDevice)
	}
	(*obj).EmailServerProfiles = emailServerProfiles_value
	(*obj).HttpServerProfiles = httpServerProfiles_value
	(*obj).LdapServerProfiles = ldapServerProfiles_value
	(*obj).LogInterfaceSetting = logInterfaceSetting_value
	(*obj).SnmpTrapServerProfiles = snmpTrapServerProfiles_value
	(*obj).SyslogServerProfiles = syslogServerProfiles_value
	(*obj).VirtualSystems = virtualSystems_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysRestapiNetworkObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysRestapiNetwork, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	globalprotectClientlessAppGroups_value := o.GlobalprotectClientlessAppGroups.ValueStringPointer()
	globalprotectClientlessApps_value := o.GlobalprotectClientlessApps.ValueStringPointer()
	globalprotectGateways_value := o.GlobalprotectGateways.ValueStringPointer()
	globalprotectMdmServers_value := o.GlobalprotectMdmServers.ValueStringPointer()
	globalprotectPortals_value := o.GlobalprotectPortals.ValueStringPointer()
	zones_value := o.Zones.ValueStringPointer()
	sdwanInterfaceProfiles_value := o.SdwanInterfaceProfiles.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysRestapiNetwork)
	}
	(*obj).GlobalprotectClientlessAppGroups = globalprotectClientlessAppGroups_value
	(*obj).GlobalprotectClientlessApps = globalprotectClientlessApps_value
	(*obj).GlobalprotectGateways = globalprotectGateways_value
	(*obj).GlobalprotectMdmServers = globalprotectMdmServers_value
	(*obj).GlobalprotectPortals = globalprotectPortals_value
	(*obj).Zones = zones_value
	(*obj).SdwanInterfaceProfiles = sdwanInterfaceProfiles_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysRestapiObjectsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysRestapiObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	addressGroups_value := o.AddressGroups.ValueStringPointer()
	addresses_value := o.Addresses.ValueStringPointer()
	antiSpywareSecurityProfiles_value := o.AntiSpywareSecurityProfiles.ValueStringPointer()
	antivirusSecurityProfiles_value := o.AntivirusSecurityProfiles.ValueStringPointer()
	applicationFilters_value := o.ApplicationFilters.ValueStringPointer()
	applicationGroups_value := o.ApplicationGroups.ValueStringPointer()
	applications_value := o.Applications.ValueStringPointer()
	authenticationEnforcements_value := o.AuthenticationEnforcements.ValueStringPointer()
	customDataPatterns_value := o.CustomDataPatterns.ValueStringPointer()
	customSpywareSignatures_value := o.CustomSpywareSignatures.ValueStringPointer()
	customUrlCategories_value := o.CustomUrlCategories.ValueStringPointer()
	customVulnerabilitySignatures_value := o.CustomVulnerabilitySignatures.ValueStringPointer()
	dataFilteringSecurityProfiles_value := o.DataFilteringSecurityProfiles.ValueStringPointer()
	decryptionProfiles_value := o.DecryptionProfiles.ValueStringPointer()
	devices_value := o.Devices.ValueStringPointer()
	dosProtectionSecurityProfiles_value := o.DosProtectionSecurityProfiles.ValueStringPointer()
	dynamicUserGroups_value := o.DynamicUserGroups.ValueStringPointer()
	externalDynamicLists_value := o.ExternalDynamicLists.ValueStringPointer()
	fileBlockingSecurityProfiles_value := o.FileBlockingSecurityProfiles.ValueStringPointer()
	globalprotectHipObjects_value := o.GlobalprotectHipObjects.ValueStringPointer()
	globalprotectHipProfiles_value := o.GlobalprotectHipProfiles.ValueStringPointer()
	gtpProtectionSecurityProfiles_value := o.GtpProtectionSecurityProfiles.ValueStringPointer()
	logForwardingProfiles_value := o.LogForwardingProfiles.ValueStringPointer()
	packetBrokerProfiles_value := o.PacketBrokerProfiles.ValueStringPointer()
	regions_value := o.Regions.ValueStringPointer()
	schedules_value := o.Schedules.ValueStringPointer()
	sctpProtectionSecurityProfiles_value := o.SctpProtectionSecurityProfiles.ValueStringPointer()
	sdwanErrorCorrectionProfiles_value := o.SdwanErrorCorrectionProfiles.ValueStringPointer()
	sdwanPathQualityProfiles_value := o.SdwanPathQualityProfiles.ValueStringPointer()
	sdwanSaasQualityProfiles_value := o.SdwanSaasQualityProfiles.ValueStringPointer()
	sdwanTrafficDistributionProfiles_value := o.SdwanTrafficDistributionProfiles.ValueStringPointer()
	securityProfileGroups_value := o.SecurityProfileGroups.ValueStringPointer()
	serviceGroups_value := o.ServiceGroups.ValueStringPointer()
	services_value := o.Services.ValueStringPointer()
	tags_value := o.Tags.ValueStringPointer()
	urlFilteringSecurityProfiles_value := o.UrlFilteringSecurityProfiles.ValueStringPointer()
	vulnerabilityProtectionSecurityProfiles_value := o.VulnerabilityProtectionSecurityProfiles.ValueStringPointer()
	wildfireAnalysisSecurityProfiles_value := o.WildfireAnalysisSecurityProfiles.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysRestapiObjects)
	}
	(*obj).AddressGroups = addressGroups_value
	(*obj).Addresses = addresses_value
	(*obj).AntiSpywareSecurityProfiles = antiSpywareSecurityProfiles_value
	(*obj).AntivirusSecurityProfiles = antivirusSecurityProfiles_value
	(*obj).ApplicationFilters = applicationFilters_value
	(*obj).ApplicationGroups = applicationGroups_value
	(*obj).Applications = applications_value
	(*obj).AuthenticationEnforcements = authenticationEnforcements_value
	(*obj).CustomDataPatterns = customDataPatterns_value
	(*obj).CustomSpywareSignatures = customSpywareSignatures_value
	(*obj).CustomUrlCategories = customUrlCategories_value
	(*obj).CustomVulnerabilitySignatures = customVulnerabilitySignatures_value
	(*obj).DataFilteringSecurityProfiles = dataFilteringSecurityProfiles_value
	(*obj).DecryptionProfiles = decryptionProfiles_value
	(*obj).Devices = devices_value
	(*obj).DosProtectionSecurityProfiles = dosProtectionSecurityProfiles_value
	(*obj).DynamicUserGroups = dynamicUserGroups_value
	(*obj).ExternalDynamicLists = externalDynamicLists_value
	(*obj).FileBlockingSecurityProfiles = fileBlockingSecurityProfiles_value
	(*obj).GlobalprotectHipObjects = globalprotectHipObjects_value
	(*obj).GlobalprotectHipProfiles = globalprotectHipProfiles_value
	(*obj).GtpProtectionSecurityProfiles = gtpProtectionSecurityProfiles_value
	(*obj).LogForwardingProfiles = logForwardingProfiles_value
	(*obj).PacketBrokerProfiles = packetBrokerProfiles_value
	(*obj).Regions = regions_value
	(*obj).Schedules = schedules_value
	(*obj).SctpProtectionSecurityProfiles = sctpProtectionSecurityProfiles_value
	(*obj).SdwanErrorCorrectionProfiles = sdwanErrorCorrectionProfiles_value
	(*obj).SdwanPathQualityProfiles = sdwanPathQualityProfiles_value
	(*obj).SdwanSaasQualityProfiles = sdwanSaasQualityProfiles_value
	(*obj).SdwanTrafficDistributionProfiles = sdwanTrafficDistributionProfiles_value
	(*obj).SecurityProfileGroups = securityProfileGroups_value
	(*obj).ServiceGroups = serviceGroups_value
	(*obj).Services = services_value
	(*obj).Tags = tags_value
	(*obj).UrlFilteringSecurityProfiles = urlFilteringSecurityProfiles_value
	(*obj).VulnerabilityProtectionSecurityProfiles = vulnerabilityProtectionSecurityProfiles_value
	(*obj).WildfireAnalysisSecurityProfiles = wildfireAnalysisSecurityProfiles_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysRestapiPoliciesObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysRestapiPolicies, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	applicationOverrideRules_value := o.ApplicationOverrideRules.ValueStringPointer()
	authenticationRules_value := o.AuthenticationRules.ValueStringPointer()
	decryptionRules_value := o.DecryptionRules.ValueStringPointer()
	dosRules_value := o.DosRules.ValueStringPointer()
	natRules_value := o.NatRules.ValueStringPointer()
	networkPacketBrokerRules_value := o.NetworkPacketBrokerRules.ValueStringPointer()
	policyBasedForwardingRules_value := o.PolicyBasedForwardingRules.ValueStringPointer()
	qosRules_value := o.QosRules.ValueStringPointer()
	sdwanRules_value := o.SdwanRules.ValueStringPointer()
	securityRules_value := o.SecurityRules.ValueStringPointer()
	tunnelInspectionRules_value := o.TunnelInspectionRules.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysRestapiPolicies)
	}
	(*obj).ApplicationOverrideRules = applicationOverrideRules_value
	(*obj).AuthenticationRules = authenticationRules_value
	(*obj).DecryptionRules = decryptionRules_value
	(*obj).DosRules = dosRules_value
	(*obj).NatRules = natRules_value
	(*obj).NetworkPacketBrokerRules = networkPacketBrokerRules_value
	(*obj).PolicyBasedForwardingRules = policyBasedForwardingRules_value
	(*obj).QosRules = qosRules_value
	(*obj).SdwanRules = sdwanRules_value
	(*obj).SecurityRules = securityRules_value
	(*obj).TunnelInspectionRules = tunnelInspectionRules_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysRestapiSystemObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysRestapiSystem, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	configuration_value := o.Configuration.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysRestapiSystem)
	}
	(*obj).Configuration = configuration_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebui, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	acc_value := o.Acc.ValueStringPointer()
	var commit_entry *adminrole.RoleVsysWebuiCommit
	if o.Commit != nil {
		if *obj != nil && (*obj).Commit != nil {
			commit_entry = (*obj).Commit
		} else {
			commit_entry = new(adminrole.RoleVsysWebuiCommit)
		}

		diags.Append(o.Commit.CopyToPango(ctx, &commit_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	dashboard_value := o.Dashboard.ValueStringPointer()
	var device_entry *adminrole.RoleVsysWebuiDevice
	if o.Device != nil {
		if *obj != nil && (*obj).Device != nil {
			device_entry = (*obj).Device
		} else {
			device_entry = new(adminrole.RoleVsysWebuiDevice)
		}

		diags.Append(o.Device.CopyToPango(ctx, &device_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var monitor_entry *adminrole.RoleVsysWebuiMonitor
	if o.Monitor != nil {
		if *obj != nil && (*obj).Monitor != nil {
			monitor_entry = (*obj).Monitor
		} else {
			monitor_entry = new(adminrole.RoleVsysWebuiMonitor)
		}

		diags.Append(o.Monitor.CopyToPango(ctx, &monitor_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var network_entry *adminrole.RoleVsysWebuiNetwork
	if o.Network != nil {
		if *obj != nil && (*obj).Network != nil {
			network_entry = (*obj).Network
		} else {
			network_entry = new(adminrole.RoleVsysWebuiNetwork)
		}

		diags.Append(o.Network.CopyToPango(ctx, &network_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var objects_entry *adminrole.RoleVsysWebuiObjects
	if o.Objects != nil {
		if *obj != nil && (*obj).Objects != nil {
			objects_entry = (*obj).Objects
		} else {
			objects_entry = new(adminrole.RoleVsysWebuiObjects)
		}

		diags.Append(o.Objects.CopyToPango(ctx, &objects_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var operations_entry *adminrole.RoleVsysWebuiOperations
	if o.Operations != nil {
		if *obj != nil && (*obj).Operations != nil {
			operations_entry = (*obj).Operations
		} else {
			operations_entry = new(adminrole.RoleVsysWebuiOperations)
		}

		diags.Append(o.Operations.CopyToPango(ctx, &operations_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var policies_entry *adminrole.RoleVsysWebuiPolicies
	if o.Policies != nil {
		if *obj != nil && (*obj).Policies != nil {
			policies_entry = (*obj).Policies
		} else {
			policies_entry = new(adminrole.RoleVsysWebuiPolicies)
		}

		diags.Append(o.Policies.CopyToPango(ctx, &policies_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var privacy_entry *adminrole.RoleVsysWebuiPrivacy
	if o.Privacy != nil {
		if *obj != nil && (*obj).Privacy != nil {
			privacy_entry = (*obj).Privacy
		} else {
			privacy_entry = new(adminrole.RoleVsysWebuiPrivacy)
		}

		diags.Append(o.Privacy.CopyToPango(ctx, &privacy_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var save_entry *adminrole.RoleVsysWebuiSave
	if o.Save != nil {
		if *obj != nil && (*obj).Save != nil {
			save_entry = (*obj).Save
		} else {
			save_entry = new(adminrole.RoleVsysWebuiSave)
		}

		diags.Append(o.Save.CopyToPango(ctx, &save_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	tasks_value := o.Tasks.ValueStringPointer()
	validate_value := o.Validate.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebui)
	}
	(*obj).Acc = acc_value
	(*obj).Commit = commit_entry
	(*obj).Dashboard = dashboard_value
	(*obj).Device = device_entry
	(*obj).Monitor = monitor_entry
	(*obj).Network = network_entry
	(*obj).Objects = objects_entry
	(*obj).Operations = operations_entry
	(*obj).Policies = policies_entry
	(*obj).Privacy = privacy_entry
	(*obj).Save = save_entry
	(*obj).Tasks = tasks_value
	(*obj).Validate = validate_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiCommitObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiCommit, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	commitForOtherAdmins_value := o.CommitForOtherAdmins.ValueStringPointer()
	virtualSystems_value := o.VirtualSystems.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiCommit)
	}
	(*obj).CommitForOtherAdmins = commitForOtherAdmins_value
	(*obj).VirtualSystems = virtualSystems_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiDeviceObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiDevice, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	administrators_value := o.Administrators.ValueStringPointer()
	authenticationProfile_value := o.AuthenticationProfile.ValueStringPointer()
	authenticationSequence_value := o.AuthenticationSequence.ValueStringPointer()
	blockPages_value := o.BlockPages.ValueStringPointer()
	var certificateManagement_entry *adminrole.RoleVsysWebuiDeviceCertificateManagement
	if o.CertificateManagement != nil {
		if *obj != nil && (*obj).CertificateManagement != nil {
			certificateManagement_entry = (*obj).CertificateManagement
		} else {
			certificateManagement_entry = new(adminrole.RoleVsysWebuiDeviceCertificateManagement)
		}

		diags.Append(o.CertificateManagement.CopyToPango(ctx, &certificateManagement_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	dataRedistribution_value := o.DataRedistribution.ValueStringPointer()
	deviceQuarantine_value := o.DeviceQuarantine.ValueStringPointer()
	var localUserDatabase_entry *adminrole.RoleVsysWebuiDeviceLocalUserDatabase
	if o.LocalUserDatabase != nil {
		if *obj != nil && (*obj).LocalUserDatabase != nil {
			localUserDatabase_entry = (*obj).LocalUserDatabase
		} else {
			localUserDatabase_entry = new(adminrole.RoleVsysWebuiDeviceLocalUserDatabase)
		}

		diags.Append(o.LocalUserDatabase.CopyToPango(ctx, &localUserDatabase_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var logSettings_entry *adminrole.RoleVsysWebuiDeviceLogSettings
	if o.LogSettings != nil {
		if *obj != nil && (*obj).LogSettings != nil {
			logSettings_entry = (*obj).LogSettings
		} else {
			logSettings_entry = new(adminrole.RoleVsysWebuiDeviceLogSettings)
		}

		diags.Append(o.LogSettings.CopyToPango(ctx, &logSettings_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var policyRecommendations_entry *adminrole.RoleVsysWebuiDevicePolicyRecommendations
	if o.PolicyRecommendations != nil {
		if *obj != nil && (*obj).PolicyRecommendations != nil {
			policyRecommendations_entry = (*obj).PolicyRecommendations
		} else {
			policyRecommendations_entry = new(adminrole.RoleVsysWebuiDevicePolicyRecommendations)
		}

		diags.Append(o.PolicyRecommendations.CopyToPango(ctx, &policyRecommendations_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var serverProfile_entry *adminrole.RoleVsysWebuiDeviceServerProfile
	if o.ServerProfile != nil {
		if *obj != nil && (*obj).ServerProfile != nil {
			serverProfile_entry = (*obj).ServerProfile
		} else {
			serverProfile_entry = new(adminrole.RoleVsysWebuiDeviceServerProfile)
		}

		diags.Append(o.ServerProfile.CopyToPango(ctx, &serverProfile_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var setup_entry *adminrole.RoleVsysWebuiDeviceSetup
	if o.Setup != nil {
		if *obj != nil && (*obj).Setup != nil {
			setup_entry = (*obj).Setup
		} else {
			setup_entry = new(adminrole.RoleVsysWebuiDeviceSetup)
		}

		diags.Append(o.Setup.CopyToPango(ctx, &setup_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	troubleshooting_value := o.Troubleshooting.ValueStringPointer()
	userIdentification_value := o.UserIdentification.ValueStringPointer()
	vmInfoSource_value := o.VmInfoSource.ValueStringPointer()
	dhcpSyslogServer_value := o.DhcpSyslogServer.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiDevice)
	}
	(*obj).Administrators = administrators_value
	(*obj).AuthenticationProfile = authenticationProfile_value
	(*obj).AuthenticationSequence = authenticationSequence_value
	(*obj).BlockPages = blockPages_value
	(*obj).CertificateManagement = certificateManagement_entry
	(*obj).DataRedistribution = dataRedistribution_value
	(*obj).DeviceQuarantine = deviceQuarantine_value
	(*obj).LocalUserDatabase = localUserDatabase_entry
	(*obj).LogSettings = logSettings_entry
	(*obj).PolicyRecommendations = policyRecommendations_entry
	(*obj).ServerProfile = serverProfile_entry
	(*obj).Setup = setup_entry
	(*obj).Troubleshooting = troubleshooting_value
	(*obj).UserIdentification = userIdentification_value
	(*obj).VmInfoSource = vmInfoSource_value
	(*obj).DhcpSyslogServer = dhcpSyslogServer_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiDeviceCertificateManagementObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiDeviceCertificateManagement, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	certificateProfile_value := o.CertificateProfile.ValueStringPointer()
	certificates_value := o.Certificates.ValueStringPointer()
	ocspResponder_value := o.OcspResponder.ValueStringPointer()
	scep_value := o.Scep.ValueStringPointer()
	sshServiceProfile_value := o.SshServiceProfile.ValueStringPointer()
	sslDecryptionExclusion_value := o.SslDecryptionExclusion.ValueStringPointer()
	sslTlsServiceProfile_value := o.SslTlsServiceProfile.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiDeviceCertificateManagement)
	}
	(*obj).CertificateProfile = certificateProfile_value
	(*obj).Certificates = certificates_value
	(*obj).OcspResponder = ocspResponder_value
	(*obj).Scep = scep_value
	(*obj).SshServiceProfile = sshServiceProfile_value
	(*obj).SslDecryptionExclusion = sslDecryptionExclusion_value
	(*obj).SslTlsServiceProfile = sslTlsServiceProfile_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiDeviceLocalUserDatabaseObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiDeviceLocalUserDatabase, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	userGroups_value := o.UserGroups.ValueStringPointer()
	users_value := o.Users.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiDeviceLocalUserDatabase)
	}
	(*obj).UserGroups = userGroups_value
	(*obj).Users = users_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiDeviceLogSettingsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiDeviceLogSettings, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	config_value := o.Config.ValueStringPointer()
	correlation_value := o.Correlation.ValueStringPointer()
	globalprotect_value := o.Globalprotect.ValueStringPointer()
	hipmatch_value := o.Hipmatch.ValueStringPointer()
	iptag_value := o.Iptag.ValueStringPointer()
	system_value := o.System.ValueStringPointer()
	userId_value := o.UserId.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiDeviceLogSettings)
	}
	(*obj).Config = config_value
	(*obj).Correlation = correlation_value
	(*obj).Globalprotect = globalprotect_value
	(*obj).Hipmatch = hipmatch_value
	(*obj).Iptag = iptag_value
	(*obj).System = system_value
	(*obj).UserId = userId_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiDevicePolicyRecommendationsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiDevicePolicyRecommendations, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	iot_value := o.Iot.ValueStringPointer()
	saas_value := o.Saas.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiDevicePolicyRecommendations)
	}
	(*obj).Iot = iot_value
	(*obj).Saas = saas_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiDeviceServerProfileObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiDeviceServerProfile, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	dns_value := o.Dns.ValueStringPointer()
	email_value := o.Email.ValueStringPointer()
	http_value := o.Http.ValueStringPointer()
	kerberos_value := o.Kerberos.ValueStringPointer()
	ldap_value := o.Ldap.ValueStringPointer()
	mfa_value := o.Mfa.ValueStringPointer()
	netflow_value := o.Netflow.ValueStringPointer()
	radius_value := o.Radius.ValueStringPointer()
	samlIdp_value := o.SamlIdp.ValueStringPointer()
	scp_value := o.Scp.ValueStringPointer()
	snmpTrap_value := o.SnmpTrap.ValueStringPointer()
	syslog_value := o.Syslog.ValueStringPointer()
	tacplus_value := o.Tacplus.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiDeviceServerProfile)
	}
	(*obj).Dns = dns_value
	(*obj).Email = email_value
	(*obj).Http = http_value
	(*obj).Kerberos = kerberos_value
	(*obj).Ldap = ldap_value
	(*obj).Mfa = mfa_value
	(*obj).Netflow = netflow_value
	(*obj).Radius = radius_value
	(*obj).SamlIdp = samlIdp_value
	(*obj).Scp = scp_value
	(*obj).SnmpTrap = snmpTrap_value
	(*obj).Syslog = syslog_value
	(*obj).Tacplus = tacplus_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiDeviceSetupObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiDeviceSetup, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	contentId_value := o.ContentId.ValueStringPointer()
	hsm_value := o.Hsm.ValueStringPointer()
	interfaces_value := o.Interfaces.ValueStringPointer()
	management_value := o.Management.ValueStringPointer()
	operations_value := o.Operations.ValueStringPointer()
	services_value := o.Services.ValueStringPointer()
	session_value := o.Session.ValueStringPointer()
	telemetry_value := o.Telemetry.ValueStringPointer()
	wildfire_value := o.Wildfire.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiDeviceSetup)
	}
	(*obj).ContentId = contentId_value
	(*obj).Hsm = hsm_value
	(*obj).Interfaces = interfaces_value
	(*obj).Management = management_value
	(*obj).Operations = operations_value
	(*obj).Services = services_value
	(*obj).Session = session_value
	(*obj).Telemetry = telemetry_value
	(*obj).Wildfire = wildfire_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiMonitorObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiMonitor, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	appScope_value := o.AppScope.ValueStringPointer()
	var automatedCorrelationEngine_entry *adminrole.RoleVsysWebuiMonitorAutomatedCorrelationEngine
	if o.AutomatedCorrelationEngine != nil {
		if *obj != nil && (*obj).AutomatedCorrelationEngine != nil {
			automatedCorrelationEngine_entry = (*obj).AutomatedCorrelationEngine
		} else {
			automatedCorrelationEngine_entry = new(adminrole.RoleVsysWebuiMonitorAutomatedCorrelationEngine)
		}

		diags.Append(o.AutomatedCorrelationEngine.CopyToPango(ctx, &automatedCorrelationEngine_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	blockIpList_value := o.BlockIpList.ValueStringPointer()
	var customReports_entry *adminrole.RoleVsysWebuiMonitorCustomReports
	if o.CustomReports != nil {
		if *obj != nil && (*obj).CustomReports != nil {
			customReports_entry = (*obj).CustomReports
		} else {
			customReports_entry = new(adminrole.RoleVsysWebuiMonitorCustomReports)
		}

		diags.Append(o.CustomReports.CopyToPango(ctx, &customReports_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	externalLogs_value := o.ExternalLogs.ValueStringPointer()
	var logs_entry *adminrole.RoleVsysWebuiMonitorLogs
	if o.Logs != nil {
		if *obj != nil && (*obj).Logs != nil {
			logs_entry = (*obj).Logs
		} else {
			logs_entry = new(adminrole.RoleVsysWebuiMonitorLogs)
		}

		diags.Append(o.Logs.CopyToPango(ctx, &logs_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var pdfReports_entry *adminrole.RoleVsysWebuiMonitorPdfReports
	if o.PdfReports != nil {
		if *obj != nil && (*obj).PdfReports != nil {
			pdfReports_entry = (*obj).PdfReports
		} else {
			pdfReports_entry = new(adminrole.RoleVsysWebuiMonitorPdfReports)
		}

		diags.Append(o.PdfReports.CopyToPango(ctx, &pdfReports_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	sessionBrowser_value := o.SessionBrowser.ValueStringPointer()
	viewCustomReports_value := o.ViewCustomReports.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiMonitor)
	}
	(*obj).AppScope = appScope_value
	(*obj).AutomatedCorrelationEngine = automatedCorrelationEngine_entry
	(*obj).BlockIpList = blockIpList_value
	(*obj).CustomReports = customReports_entry
	(*obj).ExternalLogs = externalLogs_value
	(*obj).Logs = logs_entry
	(*obj).PdfReports = pdfReports_entry
	(*obj).SessionBrowser = sessionBrowser_value
	(*obj).ViewCustomReports = viewCustomReports_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiMonitorAutomatedCorrelationEngineObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiMonitorAutomatedCorrelationEngine, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	correlatedEvents_value := o.CorrelatedEvents.ValueStringPointer()
	correlationObjects_value := o.CorrelationObjects.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiMonitorAutomatedCorrelationEngine)
	}
	(*obj).CorrelatedEvents = correlatedEvents_value
	(*obj).CorrelationObjects = correlationObjects_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiMonitorCustomReportsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiMonitorCustomReports, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	applicationStatistics_value := o.ApplicationStatistics.ValueStringPointer()
	auth_value := o.Auth.ValueStringPointer()
	dataFilteringLog_value := o.DataFilteringLog.ValueStringPointer()
	decryptionLog_value := o.DecryptionLog.ValueStringPointer()
	decryptionSummary_value := o.DecryptionSummary.ValueStringPointer()
	globalprotect_value := o.Globalprotect.ValueStringPointer()
	gtpLog_value := o.GtpLog.ValueStringPointer()
	gtpSummary_value := o.GtpSummary.ValueStringPointer()
	hipmatch_value := o.Hipmatch.ValueStringPointer()
	iptag_value := o.Iptag.ValueStringPointer()
	sctpLog_value := o.SctpLog.ValueStringPointer()
	sctpSummary_value := o.SctpSummary.ValueStringPointer()
	threatLog_value := o.ThreatLog.ValueStringPointer()
	threatSummary_value := o.ThreatSummary.ValueStringPointer()
	trafficLog_value := o.TrafficLog.ValueStringPointer()
	trafficSummary_value := o.TrafficSummary.ValueStringPointer()
	tunnelLog_value := o.TunnelLog.ValueStringPointer()
	tunnelSummary_value := o.TunnelSummary.ValueStringPointer()
	urlLog_value := o.UrlLog.ValueStringPointer()
	urlSummary_value := o.UrlSummary.ValueStringPointer()
	userid_value := o.Userid.ValueStringPointer()
	wildfireLog_value := o.WildfireLog.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiMonitorCustomReports)
	}
	(*obj).ApplicationStatistics = applicationStatistics_value
	(*obj).Auth = auth_value
	(*obj).DataFilteringLog = dataFilteringLog_value
	(*obj).DecryptionLog = decryptionLog_value
	(*obj).DecryptionSummary = decryptionSummary_value
	(*obj).Globalprotect = globalprotect_value
	(*obj).GtpLog = gtpLog_value
	(*obj).GtpSummary = gtpSummary_value
	(*obj).Hipmatch = hipmatch_value
	(*obj).Iptag = iptag_value
	(*obj).SctpLog = sctpLog_value
	(*obj).SctpSummary = sctpSummary_value
	(*obj).ThreatLog = threatLog_value
	(*obj).ThreatSummary = threatSummary_value
	(*obj).TrafficLog = trafficLog_value
	(*obj).TrafficSummary = trafficSummary_value
	(*obj).TunnelLog = tunnelLog_value
	(*obj).TunnelSummary = tunnelSummary_value
	(*obj).UrlLog = urlLog_value
	(*obj).UrlSummary = urlSummary_value
	(*obj).Userid = userid_value
	(*obj).WildfireLog = wildfireLog_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiMonitorLogsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiMonitorLogs, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	authentication_value := o.Authentication.ValueStringPointer()
	dataFiltering_value := o.DataFiltering.ValueStringPointer()
	decryption_value := o.Decryption.ValueStringPointer()
	globalprotect_value := o.Globalprotect.ValueStringPointer()
	gtp_value := o.Gtp.ValueStringPointer()
	hipmatch_value := o.Hipmatch.ValueStringPointer()
	iptag_value := o.Iptag.ValueStringPointer()
	sctp_value := o.Sctp.ValueStringPointer()
	threat_value := o.Threat.ValueStringPointer()
	traffic_value := o.Traffic.ValueStringPointer()
	tunnel_value := o.Tunnel.ValueStringPointer()
	url_value := o.Url.ValueStringPointer()
	userid_value := o.Userid.ValueStringPointer()
	wildfire_value := o.Wildfire.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiMonitorLogs)
	}
	(*obj).Authentication = authentication_value
	(*obj).DataFiltering = dataFiltering_value
	(*obj).Decryption = decryption_value
	(*obj).Globalprotect = globalprotect_value
	(*obj).Gtp = gtp_value
	(*obj).Hipmatch = hipmatch_value
	(*obj).Iptag = iptag_value
	(*obj).Sctp = sctp_value
	(*obj).Threat = threat_value
	(*obj).Traffic = traffic_value
	(*obj).Tunnel = tunnel_value
	(*obj).Url = url_value
	(*obj).Userid = userid_value
	(*obj).Wildfire = wildfire_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiMonitorPdfReportsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiMonitorPdfReports, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	emailScheduler_value := o.EmailScheduler.ValueStringPointer()
	managePdfSummary_value := o.ManagePdfSummary.ValueStringPointer()
	pdfSummaryReports_value := o.PdfSummaryReports.ValueStringPointer()
	reportGroups_value := o.ReportGroups.ValueStringPointer()
	saasApplicationUsageReport_value := o.SaasApplicationUsageReport.ValueStringPointer()
	userActivityReport_value := o.UserActivityReport.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiMonitorPdfReports)
	}
	(*obj).EmailScheduler = emailScheduler_value
	(*obj).ManagePdfSummary = managePdfSummary_value
	(*obj).PdfSummaryReports = pdfSummaryReports_value
	(*obj).ReportGroups = reportGroups_value
	(*obj).SaasApplicationUsageReport = saasApplicationUsageReport_value
	(*obj).UserActivityReport = userActivityReport_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiNetworkObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiNetwork, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var globalProtect_entry *adminrole.RoleVsysWebuiNetworkGlobalProtect
	if o.GlobalProtect != nil {
		if *obj != nil && (*obj).GlobalProtect != nil {
			globalProtect_entry = (*obj).GlobalProtect
		} else {
			globalProtect_entry = new(adminrole.RoleVsysWebuiNetworkGlobalProtect)
		}

		diags.Append(o.GlobalProtect.CopyToPango(ctx, &globalProtect_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	sdwanInterfaceProfile_value := o.SdwanInterfaceProfile.ValueStringPointer()
	zones_value := o.Zones.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiNetwork)
	}
	(*obj).GlobalProtect = globalProtect_entry
	(*obj).SdwanInterfaceProfile = sdwanInterfaceProfile_value
	(*obj).Zones = zones_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiNetworkGlobalProtectObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiNetworkGlobalProtect, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	clientlessAppGroups_value := o.ClientlessAppGroups.ValueStringPointer()
	clientlessApps_value := o.ClientlessApps.ValueStringPointer()
	gateways_value := o.Gateways.ValueStringPointer()
	mdm_value := o.Mdm.ValueStringPointer()
	portals_value := o.Portals.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiNetworkGlobalProtect)
	}
	(*obj).ClientlessAppGroups = clientlessAppGroups_value
	(*obj).ClientlessApps = clientlessApps_value
	(*obj).Gateways = gateways_value
	(*obj).Mdm = mdm_value
	(*obj).Portals = portals_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiObjectsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	addressGroups_value := o.AddressGroups.ValueStringPointer()
	addresses_value := o.Addresses.ValueStringPointer()
	applicationFilters_value := o.ApplicationFilters.ValueStringPointer()
	applicationGroups_value := o.ApplicationGroups.ValueStringPointer()
	applications_value := o.Applications.ValueStringPointer()
	authentication_value := o.Authentication.ValueStringPointer()
	var customObjects_entry *adminrole.RoleVsysWebuiObjectsCustomObjects
	if o.CustomObjects != nil {
		if *obj != nil && (*obj).CustomObjects != nil {
			customObjects_entry = (*obj).CustomObjects
		} else {
			customObjects_entry = new(adminrole.RoleVsysWebuiObjectsCustomObjects)
		}

		diags.Append(o.CustomObjects.CopyToPango(ctx, &customObjects_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var decryption_entry *adminrole.RoleVsysWebuiObjectsDecryption
	if o.Decryption != nil {
		if *obj != nil && (*obj).Decryption != nil {
			decryption_entry = (*obj).Decryption
		} else {
			decryption_entry = new(adminrole.RoleVsysWebuiObjectsDecryption)
		}

		diags.Append(o.Decryption.CopyToPango(ctx, &decryption_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	devices_value := o.Devices.ValueStringPointer()
	dynamicBlockLists_value := o.DynamicBlockLists.ValueStringPointer()
	dynamicUserGroups_value := o.DynamicUserGroups.ValueStringPointer()
	var globalProtect_entry *adminrole.RoleVsysWebuiObjectsGlobalProtect
	if o.GlobalProtect != nil {
		if *obj != nil && (*obj).GlobalProtect != nil {
			globalProtect_entry = (*obj).GlobalProtect
		} else {
			globalProtect_entry = new(adminrole.RoleVsysWebuiObjectsGlobalProtect)
		}

		diags.Append(o.GlobalProtect.CopyToPango(ctx, &globalProtect_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	logForwarding_value := o.LogForwarding.ValueStringPointer()
	packetBrokerProfile_value := o.PacketBrokerProfile.ValueStringPointer()
	regions_value := o.Regions.ValueStringPointer()
	schedules_value := o.Schedules.ValueStringPointer()
	var sdwan_entry *adminrole.RoleVsysWebuiObjectsSdwan
	if o.Sdwan != nil {
		if *obj != nil && (*obj).Sdwan != nil {
			sdwan_entry = (*obj).Sdwan
		} else {
			sdwan_entry = new(adminrole.RoleVsysWebuiObjectsSdwan)
		}

		diags.Append(o.Sdwan.CopyToPango(ctx, &sdwan_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	securityProfileGroups_value := o.SecurityProfileGroups.ValueStringPointer()
	var securityProfiles_entry *adminrole.RoleVsysWebuiObjectsSecurityProfiles
	if o.SecurityProfiles != nil {
		if *obj != nil && (*obj).SecurityProfiles != nil {
			securityProfiles_entry = (*obj).SecurityProfiles
		} else {
			securityProfiles_entry = new(adminrole.RoleVsysWebuiObjectsSecurityProfiles)
		}

		diags.Append(o.SecurityProfiles.CopyToPango(ctx, &securityProfiles_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	serviceGroups_value := o.ServiceGroups.ValueStringPointer()
	services_value := o.Services.ValueStringPointer()
	tags_value := o.Tags.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiObjects)
	}
	(*obj).AddressGroups = addressGroups_value
	(*obj).Addresses = addresses_value
	(*obj).ApplicationFilters = applicationFilters_value
	(*obj).ApplicationGroups = applicationGroups_value
	(*obj).Applications = applications_value
	(*obj).Authentication = authentication_value
	(*obj).CustomObjects = customObjects_entry
	(*obj).Decryption = decryption_entry
	(*obj).Devices = devices_value
	(*obj).DynamicBlockLists = dynamicBlockLists_value
	(*obj).DynamicUserGroups = dynamicUserGroups_value
	(*obj).GlobalProtect = globalProtect_entry
	(*obj).LogForwarding = logForwarding_value
	(*obj).PacketBrokerProfile = packetBrokerProfile_value
	(*obj).Regions = regions_value
	(*obj).Schedules = schedules_value
	(*obj).Sdwan = sdwan_entry
	(*obj).SecurityProfileGroups = securityProfileGroups_value
	(*obj).SecurityProfiles = securityProfiles_entry
	(*obj).ServiceGroups = serviceGroups_value
	(*obj).Services = services_value
	(*obj).Tags = tags_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiObjectsCustomObjectsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiObjectsCustomObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	dataPatterns_value := o.DataPatterns.ValueStringPointer()
	spyware_value := o.Spyware.ValueStringPointer()
	urlCategory_value := o.UrlCategory.ValueStringPointer()
	vulnerability_value := o.Vulnerability.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiObjectsCustomObjects)
	}
	(*obj).DataPatterns = dataPatterns_value
	(*obj).Spyware = spyware_value
	(*obj).UrlCategory = urlCategory_value
	(*obj).Vulnerability = vulnerability_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiObjectsDecryptionObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiObjectsDecryption, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	decryptionProfile_value := o.DecryptionProfile.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiObjectsDecryption)
	}
	(*obj).DecryptionProfile = decryptionProfile_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiObjectsGlobalProtectObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiObjectsGlobalProtect, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	hipObjects_value := o.HipObjects.ValueStringPointer()
	hipProfiles_value := o.HipProfiles.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiObjectsGlobalProtect)
	}
	(*obj).HipObjects = hipObjects_value
	(*obj).HipProfiles = hipProfiles_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiObjectsSdwanObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiObjectsSdwan, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	sdwanDistProfile_value := o.SdwanDistProfile.ValueStringPointer()
	sdwanErrorCorrectionProfile_value := o.SdwanErrorCorrectionProfile.ValueStringPointer()
	sdwanProfile_value := o.SdwanProfile.ValueStringPointer()
	sdwanSaasQualityProfile_value := o.SdwanSaasQualityProfile.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiObjectsSdwan)
	}
	(*obj).SdwanDistProfile = sdwanDistProfile_value
	(*obj).SdwanErrorCorrectionProfile = sdwanErrorCorrectionProfile_value
	(*obj).SdwanProfile = sdwanProfile_value
	(*obj).SdwanSaasQualityProfile = sdwanSaasQualityProfile_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiObjectsSecurityProfilesObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiObjectsSecurityProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	antiSpyware_value := o.AntiSpyware.ValueStringPointer()
	antivirus_value := o.Antivirus.ValueStringPointer()
	dataFiltering_value := o.DataFiltering.ValueStringPointer()
	dosProtection_value := o.DosProtection.ValueStringPointer()
	fileBlocking_value := o.FileBlocking.ValueStringPointer()
	gtpProtection_value := o.GtpProtection.ValueStringPointer()
	sctpProtection_value := o.SctpProtection.ValueStringPointer()
	urlFiltering_value := o.UrlFiltering.ValueStringPointer()
	vulnerabilityProtection_value := o.VulnerabilityProtection.ValueStringPointer()
	wildfireAnalysis_value := o.WildfireAnalysis.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiObjectsSecurityProfiles)
	}
	(*obj).AntiSpyware = antiSpyware_value
	(*obj).Antivirus = antivirus_value
	(*obj).DataFiltering = dataFiltering_value
	(*obj).DosProtection = dosProtection_value
	(*obj).FileBlocking = fileBlocking_value
	(*obj).GtpProtection = gtpProtection_value
	(*obj).SctpProtection = sctpProtection_value
	(*obj).UrlFiltering = urlFiltering_value
	(*obj).VulnerabilityProtection = vulnerabilityProtection_value
	(*obj).WildfireAnalysis = wildfireAnalysis_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiOperationsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiOperations, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	downloadCoreFiles_value := o.DownloadCoreFiles.ValueStringPointer()
	downloadPcapFiles_value := o.DownloadPcapFiles.ValueStringPointer()
	generateStatsDumpFile_value := o.GenerateStatsDumpFile.ValueStringPointer()
	generateTechSupportFile_value := o.GenerateTechSupportFile.ValueStringPointer()
	reboot_value := o.Reboot.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiOperations)
	}
	(*obj).DownloadCoreFiles = downloadCoreFiles_value
	(*obj).DownloadPcapFiles = downloadPcapFiles_value
	(*obj).GenerateStatsDumpFile = generateStatsDumpFile_value
	(*obj).GenerateTechSupportFile = generateTechSupportFile_value
	(*obj).Reboot = reboot_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiPoliciesObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiPolicies, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	applicationOverrideRulebase_value := o.ApplicationOverrideRulebase.ValueStringPointer()
	authenticationRulebase_value := o.AuthenticationRulebase.ValueStringPointer()
	dosRulebase_value := o.DosRulebase.ValueStringPointer()
	natRulebase_value := o.NatRulebase.ValueStringPointer()
	networkPacketBrokerRulebase_value := o.NetworkPacketBrokerRulebase.ValueStringPointer()
	pbfRulebase_value := o.PbfRulebase.ValueStringPointer()
	qosRulebase_value := o.QosRulebase.ValueStringPointer()
	ruleHitCountReset_value := o.RuleHitCountReset.ValueStringPointer()
	sdwanRulebase_value := o.SdwanRulebase.ValueStringPointer()
	securityRulebase_value := o.SecurityRulebase.ValueStringPointer()
	sslDecryptionRulebase_value := o.SslDecryptionRulebase.ValueStringPointer()
	tunnelInspectRulebase_value := o.TunnelInspectRulebase.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiPolicies)
	}
	(*obj).ApplicationOverrideRulebase = applicationOverrideRulebase_value
	(*obj).AuthenticationRulebase = authenticationRulebase_value
	(*obj).DosRulebase = dosRulebase_value
	(*obj).NatRulebase = natRulebase_value
	(*obj).NetworkPacketBrokerRulebase = networkPacketBrokerRulebase_value
	(*obj).PbfRulebase = pbfRulebase_value
	(*obj).QosRulebase = qosRulebase_value
	(*obj).RuleHitCountReset = ruleHitCountReset_value
	(*obj).SdwanRulebase = sdwanRulebase_value
	(*obj).SecurityRulebase = securityRulebase_value
	(*obj).SslDecryptionRulebase = sslDecryptionRulebase_value
	(*obj).TunnelInspectRulebase = tunnelInspectRulebase_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiPrivacyObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiPrivacy, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	showFullIpAddresses_value := o.ShowFullIpAddresses.ValueStringPointer()
	showUserNamesInLogsAndReports_value := o.ShowUserNamesInLogsAndReports.ValueStringPointer()
	viewPcapFiles_value := o.ViewPcapFiles.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiPrivacy)
	}
	(*obj).ShowFullIpAddresses = showFullIpAddresses_value
	(*obj).ShowUserNamesInLogsAndReports = showUserNamesInLogsAndReports_value
	(*obj).ViewPcapFiles = viewPcapFiles_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysWebuiSaveObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiSave, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	partialSave_value := o.PartialSave.ValueStringPointer()
	saveForOtherAdmins_value := o.SaveForOtherAdmins.ValueStringPointer()
	objectLevelChanges_value := o.ObjectLevelChanges.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiSave)
	}
	(*obj).PartialSave = partialSave_value
	(*obj).SaveForOtherAdmins = saveForOtherAdmins_value
	(*obj).ObjectLevelChanges = objectLevelChanges_value

	return diags
}
func (o *AdminRoleDataSourceRoleVsysXmlapiObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysXmlapi, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	commit_value := o.Commit.ValueStringPointer()
	config_value := o.Config.ValueStringPointer()
	export_value := o.Export.ValueStringPointer()
	import_value := o.Import.ValueStringPointer()
	iot_value := o.Iot.ValueStringPointer()
	log_value := o.Log.ValueStringPointer()
	op_value := o.Op.ValueStringPointer()
	report_value := o.Report.ValueStringPointer()
	userId_value := o.UserId.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysXmlapi)
	}
	(*obj).Commit = commit_value
	(*obj).Config = config_value
	(*obj).Export = export_value
	(*obj).Import = import_value
	(*obj).Iot = iot_value
	(*obj).Log = log_value
	(*obj).Op = op_value
	(*obj).Report = report_value
	(*obj).UserId = userId_value

	return diags
}

func (o *AdminRoleDataSourceModel) CopyFromPango(ctx context.Context, obj *adminrole.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var role_object *AdminRoleDataSourceRoleObject
	if obj.Role != nil {
		role_object = new(AdminRoleDataSourceRoleObject)

		diags.Append(role_object.CopyFromPango(ctx, obj.Role, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	o.Name = types.StringValue(obj.Name)
	o.Description = description_value
	o.Role = role_object

	return diags
}

func (o *AdminRoleDataSourceRoleObject) CopyFromPango(ctx context.Context, obj *adminrole.Role, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var device_object *AdminRoleDataSourceRoleDeviceObject
	if obj.Device != nil {
		device_object = new(AdminRoleDataSourceRoleDeviceObject)

		diags.Append(device_object.CopyFromPango(ctx, obj.Device, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var vsys_object *AdminRoleDataSourceRoleVsysObject
	if obj.Vsys != nil {
		vsys_object = new(AdminRoleDataSourceRoleVsysObject)

		diags.Append(vsys_object.CopyFromPango(ctx, obj.Vsys, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Device = device_object
	o.Vsys = vsys_object

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDevice, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var restapi_object *AdminRoleDataSourceRoleDeviceRestapiObject
	if obj.Restapi != nil {
		restapi_object = new(AdminRoleDataSourceRoleDeviceRestapiObject)

		diags.Append(restapi_object.CopyFromPango(ctx, obj.Restapi, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var webui_object *AdminRoleDataSourceRoleDeviceWebuiObject
	if obj.Webui != nil {
		webui_object = new(AdminRoleDataSourceRoleDeviceWebuiObject)

		diags.Append(webui_object.CopyFromPango(ctx, obj.Webui, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var xmlapi_object *AdminRoleDataSourceRoleDeviceXmlapiObject
	if obj.Xmlapi != nil {
		xmlapi_object = new(AdminRoleDataSourceRoleDeviceXmlapiObject)

		diags.Append(xmlapi_object.CopyFromPango(ctx, obj.Xmlapi, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var cli_value types.String
	if obj.Cli != nil {
		cli_value = types.StringValue(*obj.Cli)
	}
	o.Cli = cli_value
	o.Restapi = restapi_object
	o.Webui = webui_object
	o.Xmlapi = xmlapi_object

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceRestapiObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceRestapi, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var device_object *AdminRoleDataSourceRoleDeviceRestapiDeviceObject
	if obj.Device != nil {
		device_object = new(AdminRoleDataSourceRoleDeviceRestapiDeviceObject)

		diags.Append(device_object.CopyFromPango(ctx, obj.Device, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var network_object *AdminRoleDataSourceRoleDeviceRestapiNetworkObject
	if obj.Network != nil {
		network_object = new(AdminRoleDataSourceRoleDeviceRestapiNetworkObject)

		diags.Append(network_object.CopyFromPango(ctx, obj.Network, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var objects_object *AdminRoleDataSourceRoleDeviceRestapiObjectsObject
	if obj.Objects != nil {
		objects_object = new(AdminRoleDataSourceRoleDeviceRestapiObjectsObject)

		diags.Append(objects_object.CopyFromPango(ctx, obj.Objects, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var policies_object *AdminRoleDataSourceRoleDeviceRestapiPoliciesObject
	if obj.Policies != nil {
		policies_object = new(AdminRoleDataSourceRoleDeviceRestapiPoliciesObject)

		diags.Append(policies_object.CopyFromPango(ctx, obj.Policies, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var system_object *AdminRoleDataSourceRoleDeviceRestapiSystemObject
	if obj.System != nil {
		system_object = new(AdminRoleDataSourceRoleDeviceRestapiSystemObject)

		diags.Append(system_object.CopyFromPango(ctx, obj.System, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Device = device_object
	o.Network = network_object
	o.Objects = objects_object
	o.Policies = policies_object
	o.System = system_object

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceRestapiDeviceObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceRestapiDevice, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var emailServerProfiles_value types.String
	if obj.EmailServerProfiles != nil {
		emailServerProfiles_value = types.StringValue(*obj.EmailServerProfiles)
	}
	var httpServerProfiles_value types.String
	if obj.HttpServerProfiles != nil {
		httpServerProfiles_value = types.StringValue(*obj.HttpServerProfiles)
	}
	var ldapServerProfiles_value types.String
	if obj.LdapServerProfiles != nil {
		ldapServerProfiles_value = types.StringValue(*obj.LdapServerProfiles)
	}
	var logInterfaceSetting_value types.String
	if obj.LogInterfaceSetting != nil {
		logInterfaceSetting_value = types.StringValue(*obj.LogInterfaceSetting)
	}
	var snmpTrapServerProfiles_value types.String
	if obj.SnmpTrapServerProfiles != nil {
		snmpTrapServerProfiles_value = types.StringValue(*obj.SnmpTrapServerProfiles)
	}
	var syslogServerProfiles_value types.String
	if obj.SyslogServerProfiles != nil {
		syslogServerProfiles_value = types.StringValue(*obj.SyslogServerProfiles)
	}
	var virtualSystems_value types.String
	if obj.VirtualSystems != nil {
		virtualSystems_value = types.StringValue(*obj.VirtualSystems)
	}
	o.EmailServerProfiles = emailServerProfiles_value
	o.HttpServerProfiles = httpServerProfiles_value
	o.LdapServerProfiles = ldapServerProfiles_value
	o.LogInterfaceSetting = logInterfaceSetting_value
	o.SnmpTrapServerProfiles = snmpTrapServerProfiles_value
	o.SyslogServerProfiles = syslogServerProfiles_value
	o.VirtualSystems = virtualSystems_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceRestapiNetworkObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceRestapiNetwork, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var aggregateEthernetInterfaces_value types.String
	if obj.AggregateEthernetInterfaces != nil {
		aggregateEthernetInterfaces_value = types.StringValue(*obj.AggregateEthernetInterfaces)
	}
	var bfdNetworkProfiles_value types.String
	if obj.BfdNetworkProfiles != nil {
		bfdNetworkProfiles_value = types.StringValue(*obj.BfdNetworkProfiles)
	}
	var bgpRoutingProfiles_value types.String
	if obj.BgpRoutingProfiles != nil {
		bgpRoutingProfiles_value = types.StringValue(*obj.BgpRoutingProfiles)
	}
	var dhcpRelays_value types.String
	if obj.DhcpRelays != nil {
		dhcpRelays_value = types.StringValue(*obj.DhcpRelays)
	}
	var dhcpServers_value types.String
	if obj.DhcpServers != nil {
		dhcpServers_value = types.StringValue(*obj.DhcpServers)
	}
	var dnsProxies_value types.String
	if obj.DnsProxies != nil {
		dnsProxies_value = types.StringValue(*obj.DnsProxies)
	}
	var ethernetInterfaces_value types.String
	if obj.EthernetInterfaces != nil {
		ethernetInterfaces_value = types.StringValue(*obj.EthernetInterfaces)
	}
	var globalprotectClientlessAppGroups_value types.String
	if obj.GlobalprotectClientlessAppGroups != nil {
		globalprotectClientlessAppGroups_value = types.StringValue(*obj.GlobalprotectClientlessAppGroups)
	}
	var globalprotectClientlessApps_value types.String
	if obj.GlobalprotectClientlessApps != nil {
		globalprotectClientlessApps_value = types.StringValue(*obj.GlobalprotectClientlessApps)
	}
	var globalprotectGateways_value types.String
	if obj.GlobalprotectGateways != nil {
		globalprotectGateways_value = types.StringValue(*obj.GlobalprotectGateways)
	}
	var globalprotectIpsecCryptoNetworkProfiles_value types.String
	if obj.GlobalprotectIpsecCryptoNetworkProfiles != nil {
		globalprotectIpsecCryptoNetworkProfiles_value = types.StringValue(*obj.GlobalprotectIpsecCryptoNetworkProfiles)
	}
	var globalprotectMdmServers_value types.String
	if obj.GlobalprotectMdmServers != nil {
		globalprotectMdmServers_value = types.StringValue(*obj.GlobalprotectMdmServers)
	}
	var globalprotectPortals_value types.String
	if obj.GlobalprotectPortals != nil {
		globalprotectPortals_value = types.StringValue(*obj.GlobalprotectPortals)
	}
	var greTunnels_value types.String
	if obj.GreTunnels != nil {
		greTunnels_value = types.StringValue(*obj.GreTunnels)
	}
	var ikeCryptoNetworkProfiles_value types.String
	if obj.IkeCryptoNetworkProfiles != nil {
		ikeCryptoNetworkProfiles_value = types.StringValue(*obj.IkeCryptoNetworkProfiles)
	}
	var ikeGatewayNetworkProfiles_value types.String
	if obj.IkeGatewayNetworkProfiles != nil {
		ikeGatewayNetworkProfiles_value = types.StringValue(*obj.IkeGatewayNetworkProfiles)
	}
	var interfaceManagementNetworkProfiles_value types.String
	if obj.InterfaceManagementNetworkProfiles != nil {
		interfaceManagementNetworkProfiles_value = types.StringValue(*obj.InterfaceManagementNetworkProfiles)
	}
	var ipsecCryptoNetworkProfiles_value types.String
	if obj.IpsecCryptoNetworkProfiles != nil {
		ipsecCryptoNetworkProfiles_value = types.StringValue(*obj.IpsecCryptoNetworkProfiles)
	}
	var ipsecTunnels_value types.String
	if obj.IpsecTunnels != nil {
		ipsecTunnels_value = types.StringValue(*obj.IpsecTunnels)
	}
	var lldp_value types.String
	if obj.Lldp != nil {
		lldp_value = types.StringValue(*obj.Lldp)
	}
	var lldpNetworkProfiles_value types.String
	if obj.LldpNetworkProfiles != nil {
		lldpNetworkProfiles_value = types.StringValue(*obj.LldpNetworkProfiles)
	}
	var logicalRouters_value types.String
	if obj.LogicalRouters != nil {
		logicalRouters_value = types.StringValue(*obj.LogicalRouters)
	}
	var loopbackInterfaces_value types.String
	if obj.LoopbackInterfaces != nil {
		loopbackInterfaces_value = types.StringValue(*obj.LoopbackInterfaces)
	}
	var qosInterfaces_value types.String
	if obj.QosInterfaces != nil {
		qosInterfaces_value = types.StringValue(*obj.QosInterfaces)
	}
	var qosNetworkProfiles_value types.String
	if obj.QosNetworkProfiles != nil {
		qosNetworkProfiles_value = types.StringValue(*obj.QosNetworkProfiles)
	}
	var sdwanInterfaceProfiles_value types.String
	if obj.SdwanInterfaceProfiles != nil {
		sdwanInterfaceProfiles_value = types.StringValue(*obj.SdwanInterfaceProfiles)
	}
	var sdwanInterfaces_value types.String
	if obj.SdwanInterfaces != nil {
		sdwanInterfaces_value = types.StringValue(*obj.SdwanInterfaces)
	}
	var tunnelInterfaces_value types.String
	if obj.TunnelInterfaces != nil {
		tunnelInterfaces_value = types.StringValue(*obj.TunnelInterfaces)
	}
	var tunnelMonitorNetworkProfiles_value types.String
	if obj.TunnelMonitorNetworkProfiles != nil {
		tunnelMonitorNetworkProfiles_value = types.StringValue(*obj.TunnelMonitorNetworkProfiles)
	}
	var virtualRouters_value types.String
	if obj.VirtualRouters != nil {
		virtualRouters_value = types.StringValue(*obj.VirtualRouters)
	}
	var virtualWires_value types.String
	if obj.VirtualWires != nil {
		virtualWires_value = types.StringValue(*obj.VirtualWires)
	}
	var vlanInterfaces_value types.String
	if obj.VlanInterfaces != nil {
		vlanInterfaces_value = types.StringValue(*obj.VlanInterfaces)
	}
	var vlans_value types.String
	if obj.Vlans != nil {
		vlans_value = types.StringValue(*obj.Vlans)
	}
	var zoneProtectionNetworkProfiles_value types.String
	if obj.ZoneProtectionNetworkProfiles != nil {
		zoneProtectionNetworkProfiles_value = types.StringValue(*obj.ZoneProtectionNetworkProfiles)
	}
	var zones_value types.String
	if obj.Zones != nil {
		zones_value = types.StringValue(*obj.Zones)
	}
	o.AggregateEthernetInterfaces = aggregateEthernetInterfaces_value
	o.BfdNetworkProfiles = bfdNetworkProfiles_value
	o.BgpRoutingProfiles = bgpRoutingProfiles_value
	o.DhcpRelays = dhcpRelays_value
	o.DhcpServers = dhcpServers_value
	o.DnsProxies = dnsProxies_value
	o.EthernetInterfaces = ethernetInterfaces_value
	o.GlobalprotectClientlessAppGroups = globalprotectClientlessAppGroups_value
	o.GlobalprotectClientlessApps = globalprotectClientlessApps_value
	o.GlobalprotectGateways = globalprotectGateways_value
	o.GlobalprotectIpsecCryptoNetworkProfiles = globalprotectIpsecCryptoNetworkProfiles_value
	o.GlobalprotectMdmServers = globalprotectMdmServers_value
	o.GlobalprotectPortals = globalprotectPortals_value
	o.GreTunnels = greTunnels_value
	o.IkeCryptoNetworkProfiles = ikeCryptoNetworkProfiles_value
	o.IkeGatewayNetworkProfiles = ikeGatewayNetworkProfiles_value
	o.InterfaceManagementNetworkProfiles = interfaceManagementNetworkProfiles_value
	o.IpsecCryptoNetworkProfiles = ipsecCryptoNetworkProfiles_value
	o.IpsecTunnels = ipsecTunnels_value
	o.Lldp = lldp_value
	o.LldpNetworkProfiles = lldpNetworkProfiles_value
	o.LogicalRouters = logicalRouters_value
	o.LoopbackInterfaces = loopbackInterfaces_value
	o.QosInterfaces = qosInterfaces_value
	o.QosNetworkProfiles = qosNetworkProfiles_value
	o.SdwanInterfaceProfiles = sdwanInterfaceProfiles_value
	o.SdwanInterfaces = sdwanInterfaces_value
	o.TunnelInterfaces = tunnelInterfaces_value
	o.TunnelMonitorNetworkProfiles = tunnelMonitorNetworkProfiles_value
	o.VirtualRouters = virtualRouters_value
	o.VirtualWires = virtualWires_value
	o.VlanInterfaces = vlanInterfaces_value
	o.Vlans = vlans_value
	o.ZoneProtectionNetworkProfiles = zoneProtectionNetworkProfiles_value
	o.Zones = zones_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceRestapiObjectsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceRestapiObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var addressGroups_value types.String
	if obj.AddressGroups != nil {
		addressGroups_value = types.StringValue(*obj.AddressGroups)
	}
	var addresses_value types.String
	if obj.Addresses != nil {
		addresses_value = types.StringValue(*obj.Addresses)
	}
	var antiSpywareSecurityProfiles_value types.String
	if obj.AntiSpywareSecurityProfiles != nil {
		antiSpywareSecurityProfiles_value = types.StringValue(*obj.AntiSpywareSecurityProfiles)
	}
	var antivirusSecurityProfiles_value types.String
	if obj.AntivirusSecurityProfiles != nil {
		antivirusSecurityProfiles_value = types.StringValue(*obj.AntivirusSecurityProfiles)
	}
	var applicationFilters_value types.String
	if obj.ApplicationFilters != nil {
		applicationFilters_value = types.StringValue(*obj.ApplicationFilters)
	}
	var applicationGroups_value types.String
	if obj.ApplicationGroups != nil {
		applicationGroups_value = types.StringValue(*obj.ApplicationGroups)
	}
	var applications_value types.String
	if obj.Applications != nil {
		applications_value = types.StringValue(*obj.Applications)
	}
	var authenticationEnforcements_value types.String
	if obj.AuthenticationEnforcements != nil {
		authenticationEnforcements_value = types.StringValue(*obj.AuthenticationEnforcements)
	}
	var customDataPatterns_value types.String
	if obj.CustomDataPatterns != nil {
		customDataPatterns_value = types.StringValue(*obj.CustomDataPatterns)
	}
	var customSpywareSignatures_value types.String
	if obj.CustomSpywareSignatures != nil {
		customSpywareSignatures_value = types.StringValue(*obj.CustomSpywareSignatures)
	}
	var customUrlCategories_value types.String
	if obj.CustomUrlCategories != nil {
		customUrlCategories_value = types.StringValue(*obj.CustomUrlCategories)
	}
	var customVulnerabilitySignatures_value types.String
	if obj.CustomVulnerabilitySignatures != nil {
		customVulnerabilitySignatures_value = types.StringValue(*obj.CustomVulnerabilitySignatures)
	}
	var dataFilteringSecurityProfiles_value types.String
	if obj.DataFilteringSecurityProfiles != nil {
		dataFilteringSecurityProfiles_value = types.StringValue(*obj.DataFilteringSecurityProfiles)
	}
	var decryptionProfiles_value types.String
	if obj.DecryptionProfiles != nil {
		decryptionProfiles_value = types.StringValue(*obj.DecryptionProfiles)
	}
	var devices_value types.String
	if obj.Devices != nil {
		devices_value = types.StringValue(*obj.Devices)
	}
	var dosProtectionSecurityProfiles_value types.String
	if obj.DosProtectionSecurityProfiles != nil {
		dosProtectionSecurityProfiles_value = types.StringValue(*obj.DosProtectionSecurityProfiles)
	}
	var dynamicUserGroups_value types.String
	if obj.DynamicUserGroups != nil {
		dynamicUserGroups_value = types.StringValue(*obj.DynamicUserGroups)
	}
	var externalDynamicLists_value types.String
	if obj.ExternalDynamicLists != nil {
		externalDynamicLists_value = types.StringValue(*obj.ExternalDynamicLists)
	}
	var fileBlockingSecurityProfiles_value types.String
	if obj.FileBlockingSecurityProfiles != nil {
		fileBlockingSecurityProfiles_value = types.StringValue(*obj.FileBlockingSecurityProfiles)
	}
	var globalprotectHipObjects_value types.String
	if obj.GlobalprotectHipObjects != nil {
		globalprotectHipObjects_value = types.StringValue(*obj.GlobalprotectHipObjects)
	}
	var globalprotectHipProfiles_value types.String
	if obj.GlobalprotectHipProfiles != nil {
		globalprotectHipProfiles_value = types.StringValue(*obj.GlobalprotectHipProfiles)
	}
	var gtpProtectionSecurityProfiles_value types.String
	if obj.GtpProtectionSecurityProfiles != nil {
		gtpProtectionSecurityProfiles_value = types.StringValue(*obj.GtpProtectionSecurityProfiles)
	}
	var logForwardingProfiles_value types.String
	if obj.LogForwardingProfiles != nil {
		logForwardingProfiles_value = types.StringValue(*obj.LogForwardingProfiles)
	}
	var packetBrokerProfiles_value types.String
	if obj.PacketBrokerProfiles != nil {
		packetBrokerProfiles_value = types.StringValue(*obj.PacketBrokerProfiles)
	}
	var regions_value types.String
	if obj.Regions != nil {
		regions_value = types.StringValue(*obj.Regions)
	}
	var schedules_value types.String
	if obj.Schedules != nil {
		schedules_value = types.StringValue(*obj.Schedules)
	}
	var sctpProtectionSecurityProfiles_value types.String
	if obj.SctpProtectionSecurityProfiles != nil {
		sctpProtectionSecurityProfiles_value = types.StringValue(*obj.SctpProtectionSecurityProfiles)
	}
	var sdwanErrorCorrectionProfiles_value types.String
	if obj.SdwanErrorCorrectionProfiles != nil {
		sdwanErrorCorrectionProfiles_value = types.StringValue(*obj.SdwanErrorCorrectionProfiles)
	}
	var sdwanPathQualityProfiles_value types.String
	if obj.SdwanPathQualityProfiles != nil {
		sdwanPathQualityProfiles_value = types.StringValue(*obj.SdwanPathQualityProfiles)
	}
	var sdwanSaasQualityProfiles_value types.String
	if obj.SdwanSaasQualityProfiles != nil {
		sdwanSaasQualityProfiles_value = types.StringValue(*obj.SdwanSaasQualityProfiles)
	}
	var sdwanTrafficDistributionProfiles_value types.String
	if obj.SdwanTrafficDistributionProfiles != nil {
		sdwanTrafficDistributionProfiles_value = types.StringValue(*obj.SdwanTrafficDistributionProfiles)
	}
	var securityProfileGroups_value types.String
	if obj.SecurityProfileGroups != nil {
		securityProfileGroups_value = types.StringValue(*obj.SecurityProfileGroups)
	}
	var serviceGroups_value types.String
	if obj.ServiceGroups != nil {
		serviceGroups_value = types.StringValue(*obj.ServiceGroups)
	}
	var services_value types.String
	if obj.Services != nil {
		services_value = types.StringValue(*obj.Services)
	}
	var tags_value types.String
	if obj.Tags != nil {
		tags_value = types.StringValue(*obj.Tags)
	}
	var urlFilteringSecurityProfiles_value types.String
	if obj.UrlFilteringSecurityProfiles != nil {
		urlFilteringSecurityProfiles_value = types.StringValue(*obj.UrlFilteringSecurityProfiles)
	}
	var vulnerabilityProtectionSecurityProfiles_value types.String
	if obj.VulnerabilityProtectionSecurityProfiles != nil {
		vulnerabilityProtectionSecurityProfiles_value = types.StringValue(*obj.VulnerabilityProtectionSecurityProfiles)
	}
	var wildfireAnalysisSecurityProfiles_value types.String
	if obj.WildfireAnalysisSecurityProfiles != nil {
		wildfireAnalysisSecurityProfiles_value = types.StringValue(*obj.WildfireAnalysisSecurityProfiles)
	}
	o.AddressGroups = addressGroups_value
	o.Addresses = addresses_value
	o.AntiSpywareSecurityProfiles = antiSpywareSecurityProfiles_value
	o.AntivirusSecurityProfiles = antivirusSecurityProfiles_value
	o.ApplicationFilters = applicationFilters_value
	o.ApplicationGroups = applicationGroups_value
	o.Applications = applications_value
	o.AuthenticationEnforcements = authenticationEnforcements_value
	o.CustomDataPatterns = customDataPatterns_value
	o.CustomSpywareSignatures = customSpywareSignatures_value
	o.CustomUrlCategories = customUrlCategories_value
	o.CustomVulnerabilitySignatures = customVulnerabilitySignatures_value
	o.DataFilteringSecurityProfiles = dataFilteringSecurityProfiles_value
	o.DecryptionProfiles = decryptionProfiles_value
	o.Devices = devices_value
	o.DosProtectionSecurityProfiles = dosProtectionSecurityProfiles_value
	o.DynamicUserGroups = dynamicUserGroups_value
	o.ExternalDynamicLists = externalDynamicLists_value
	o.FileBlockingSecurityProfiles = fileBlockingSecurityProfiles_value
	o.GlobalprotectHipObjects = globalprotectHipObjects_value
	o.GlobalprotectHipProfiles = globalprotectHipProfiles_value
	o.GtpProtectionSecurityProfiles = gtpProtectionSecurityProfiles_value
	o.LogForwardingProfiles = logForwardingProfiles_value
	o.PacketBrokerProfiles = packetBrokerProfiles_value
	o.Regions = regions_value
	o.Schedules = schedules_value
	o.SctpProtectionSecurityProfiles = sctpProtectionSecurityProfiles_value
	o.SdwanErrorCorrectionProfiles = sdwanErrorCorrectionProfiles_value
	o.SdwanPathQualityProfiles = sdwanPathQualityProfiles_value
	o.SdwanSaasQualityProfiles = sdwanSaasQualityProfiles_value
	o.SdwanTrafficDistributionProfiles = sdwanTrafficDistributionProfiles_value
	o.SecurityProfileGroups = securityProfileGroups_value
	o.ServiceGroups = serviceGroups_value
	o.Services = services_value
	o.Tags = tags_value
	o.UrlFilteringSecurityProfiles = urlFilteringSecurityProfiles_value
	o.VulnerabilityProtectionSecurityProfiles = vulnerabilityProtectionSecurityProfiles_value
	o.WildfireAnalysisSecurityProfiles = wildfireAnalysisSecurityProfiles_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceRestapiPoliciesObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceRestapiPolicies, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var applicationOverrideRules_value types.String
	if obj.ApplicationOverrideRules != nil {
		applicationOverrideRules_value = types.StringValue(*obj.ApplicationOverrideRules)
	}
	var authenticationRules_value types.String
	if obj.AuthenticationRules != nil {
		authenticationRules_value = types.StringValue(*obj.AuthenticationRules)
	}
	var decryptionRules_value types.String
	if obj.DecryptionRules != nil {
		decryptionRules_value = types.StringValue(*obj.DecryptionRules)
	}
	var dosRules_value types.String
	if obj.DosRules != nil {
		dosRules_value = types.StringValue(*obj.DosRules)
	}
	var natRules_value types.String
	if obj.NatRules != nil {
		natRules_value = types.StringValue(*obj.NatRules)
	}
	var networkPacketBrokerRules_value types.String
	if obj.NetworkPacketBrokerRules != nil {
		networkPacketBrokerRules_value = types.StringValue(*obj.NetworkPacketBrokerRules)
	}
	var policyBasedForwardingRules_value types.String
	if obj.PolicyBasedForwardingRules != nil {
		policyBasedForwardingRules_value = types.StringValue(*obj.PolicyBasedForwardingRules)
	}
	var qosRules_value types.String
	if obj.QosRules != nil {
		qosRules_value = types.StringValue(*obj.QosRules)
	}
	var sdwanRules_value types.String
	if obj.SdwanRules != nil {
		sdwanRules_value = types.StringValue(*obj.SdwanRules)
	}
	var securityRules_value types.String
	if obj.SecurityRules != nil {
		securityRules_value = types.StringValue(*obj.SecurityRules)
	}
	var tunnelInspectionRules_value types.String
	if obj.TunnelInspectionRules != nil {
		tunnelInspectionRules_value = types.StringValue(*obj.TunnelInspectionRules)
	}
	o.ApplicationOverrideRules = applicationOverrideRules_value
	o.AuthenticationRules = authenticationRules_value
	o.DecryptionRules = decryptionRules_value
	o.DosRules = dosRules_value
	o.NatRules = natRules_value
	o.NetworkPacketBrokerRules = networkPacketBrokerRules_value
	o.PolicyBasedForwardingRules = policyBasedForwardingRules_value
	o.QosRules = qosRules_value
	o.SdwanRules = sdwanRules_value
	o.SecurityRules = securityRules_value
	o.TunnelInspectionRules = tunnelInspectionRules_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceRestapiSystemObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceRestapiSystem, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var configuration_value types.String
	if obj.Configuration != nil {
		configuration_value = types.StringValue(*obj.Configuration)
	}
	o.Configuration = configuration_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebui, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var commit_object *AdminRoleDataSourceRoleDeviceWebuiCommitObject
	if obj.Commit != nil {
		commit_object = new(AdminRoleDataSourceRoleDeviceWebuiCommitObject)

		diags.Append(commit_object.CopyFromPango(ctx, obj.Commit, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var device_object *AdminRoleDataSourceRoleDeviceWebuiDeviceObject
	if obj.Device != nil {
		device_object = new(AdminRoleDataSourceRoleDeviceWebuiDeviceObject)

		diags.Append(device_object.CopyFromPango(ctx, obj.Device, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var global_object *AdminRoleDataSourceRoleDeviceWebuiGlobalObject
	if obj.Global != nil {
		global_object = new(AdminRoleDataSourceRoleDeviceWebuiGlobalObject)

		diags.Append(global_object.CopyFromPango(ctx, obj.Global, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var monitor_object *AdminRoleDataSourceRoleDeviceWebuiMonitorObject
	if obj.Monitor != nil {
		monitor_object = new(AdminRoleDataSourceRoleDeviceWebuiMonitorObject)

		diags.Append(monitor_object.CopyFromPango(ctx, obj.Monitor, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var network_object *AdminRoleDataSourceRoleDeviceWebuiNetworkObject
	if obj.Network != nil {
		network_object = new(AdminRoleDataSourceRoleDeviceWebuiNetworkObject)

		diags.Append(network_object.CopyFromPango(ctx, obj.Network, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var objects_object *AdminRoleDataSourceRoleDeviceWebuiObjectsObject
	if obj.Objects != nil {
		objects_object = new(AdminRoleDataSourceRoleDeviceWebuiObjectsObject)

		diags.Append(objects_object.CopyFromPango(ctx, obj.Objects, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var operations_object *AdminRoleDataSourceRoleDeviceWebuiOperationsObject
	if obj.Operations != nil {
		operations_object = new(AdminRoleDataSourceRoleDeviceWebuiOperationsObject)

		diags.Append(operations_object.CopyFromPango(ctx, obj.Operations, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var policies_object *AdminRoleDataSourceRoleDeviceWebuiPoliciesObject
	if obj.Policies != nil {
		policies_object = new(AdminRoleDataSourceRoleDeviceWebuiPoliciesObject)

		diags.Append(policies_object.CopyFromPango(ctx, obj.Policies, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var privacy_object *AdminRoleDataSourceRoleDeviceWebuiPrivacyObject
	if obj.Privacy != nil {
		privacy_object = new(AdminRoleDataSourceRoleDeviceWebuiPrivacyObject)

		diags.Append(privacy_object.CopyFromPango(ctx, obj.Privacy, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var save_object *AdminRoleDataSourceRoleDeviceWebuiSaveObject
	if obj.Save != nil {
		save_object = new(AdminRoleDataSourceRoleDeviceWebuiSaveObject)

		diags.Append(save_object.CopyFromPango(ctx, obj.Save, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var acc_value types.String
	if obj.Acc != nil {
		acc_value = types.StringValue(*obj.Acc)
	}
	var dashboard_value types.String
	if obj.Dashboard != nil {
		dashboard_value = types.StringValue(*obj.Dashboard)
	}
	var tasks_value types.String
	if obj.Tasks != nil {
		tasks_value = types.StringValue(*obj.Tasks)
	}
	var validate_value types.String
	if obj.Validate != nil {
		validate_value = types.StringValue(*obj.Validate)
	}
	o.Acc = acc_value
	o.Commit = commit_object
	o.Dashboard = dashboard_value
	o.Device = device_object
	o.Global = global_object
	o.Monitor = monitor_object
	o.Network = network_object
	o.Objects = objects_object
	o.Operations = operations_object
	o.Policies = policies_object
	o.Privacy = privacy_object
	o.Save = save_object
	o.Tasks = tasks_value
	o.Validate = validate_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiCommitObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiCommit, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var commitForOtherAdmins_value types.String
	if obj.CommitForOtherAdmins != nil {
		commitForOtherAdmins_value = types.StringValue(*obj.CommitForOtherAdmins)
	}
	var device_value types.String
	if obj.Device != nil {
		device_value = types.StringValue(*obj.Device)
	}
	var objectLevelChanges_value types.String
	if obj.ObjectLevelChanges != nil {
		objectLevelChanges_value = types.StringValue(*obj.ObjectLevelChanges)
	}
	o.CommitForOtherAdmins = commitForOtherAdmins_value
	o.Device = device_value
	o.ObjectLevelChanges = objectLevelChanges_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiDeviceObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiDevice, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var certificateManagement_object *AdminRoleDataSourceRoleDeviceWebuiDeviceCertificateManagementObject
	if obj.CertificateManagement != nil {
		certificateManagement_object = new(AdminRoleDataSourceRoleDeviceWebuiDeviceCertificateManagementObject)

		diags.Append(certificateManagement_object.CopyFromPango(ctx, obj.CertificateManagement, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var localUserDatabase_object *AdminRoleDataSourceRoleDeviceWebuiDeviceLocalUserDatabaseObject
	if obj.LocalUserDatabase != nil {
		localUserDatabase_object = new(AdminRoleDataSourceRoleDeviceWebuiDeviceLocalUserDatabaseObject)

		diags.Append(localUserDatabase_object.CopyFromPango(ctx, obj.LocalUserDatabase, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var logSettings_object *AdminRoleDataSourceRoleDeviceWebuiDeviceLogSettingsObject
	if obj.LogSettings != nil {
		logSettings_object = new(AdminRoleDataSourceRoleDeviceWebuiDeviceLogSettingsObject)

		diags.Append(logSettings_object.CopyFromPango(ctx, obj.LogSettings, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var policyRecommendations_object *AdminRoleDataSourceRoleDeviceWebuiDevicePolicyRecommendationsObject
	if obj.PolicyRecommendations != nil {
		policyRecommendations_object = new(AdminRoleDataSourceRoleDeviceWebuiDevicePolicyRecommendationsObject)

		diags.Append(policyRecommendations_object.CopyFromPango(ctx, obj.PolicyRecommendations, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var serverProfile_object *AdminRoleDataSourceRoleDeviceWebuiDeviceServerProfileObject
	if obj.ServerProfile != nil {
		serverProfile_object = new(AdminRoleDataSourceRoleDeviceWebuiDeviceServerProfileObject)

		diags.Append(serverProfile_object.CopyFromPango(ctx, obj.ServerProfile, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var setup_object *AdminRoleDataSourceRoleDeviceWebuiDeviceSetupObject
	if obj.Setup != nil {
		setup_object = new(AdminRoleDataSourceRoleDeviceWebuiDeviceSetupObject)

		diags.Append(setup_object.CopyFromPango(ctx, obj.Setup, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var accessDomain_value types.String
	if obj.AccessDomain != nil {
		accessDomain_value = types.StringValue(*obj.AccessDomain)
	}
	var adminRoles_value types.String
	if obj.AdminRoles != nil {
		adminRoles_value = types.StringValue(*obj.AdminRoles)
	}
	var administrators_value types.String
	if obj.Administrators != nil {
		administrators_value = types.StringValue(*obj.Administrators)
	}
	var authenticationProfile_value types.String
	if obj.AuthenticationProfile != nil {
		authenticationProfile_value = types.StringValue(*obj.AuthenticationProfile)
	}
	var authenticationSequence_value types.String
	if obj.AuthenticationSequence != nil {
		authenticationSequence_value = types.StringValue(*obj.AuthenticationSequence)
	}
	var blockPages_value types.String
	if obj.BlockPages != nil {
		blockPages_value = types.StringValue(*obj.BlockPages)
	}
	var configAudit_value types.String
	if obj.ConfigAudit != nil {
		configAudit_value = types.StringValue(*obj.ConfigAudit)
	}
	var dataRedistribution_value types.String
	if obj.DataRedistribution != nil {
		dataRedistribution_value = types.StringValue(*obj.DataRedistribution)
	}
	var deviceQuarantine_value types.String
	if obj.DeviceQuarantine != nil {
		deviceQuarantine_value = types.StringValue(*obj.DeviceQuarantine)
	}
	var dynamicUpdates_value types.String
	if obj.DynamicUpdates != nil {
		dynamicUpdates_value = types.StringValue(*obj.DynamicUpdates)
	}
	var globalProtectClient_value types.String
	if obj.GlobalProtectClient != nil {
		globalProtectClient_value = types.StringValue(*obj.GlobalProtectClient)
	}
	var highAvailability_value types.String
	if obj.HighAvailability != nil {
		highAvailability_value = types.StringValue(*obj.HighAvailability)
	}
	var licenses_value types.String
	if obj.Licenses != nil {
		licenses_value = types.StringValue(*obj.Licenses)
	}
	var logFwdCard_value types.String
	if obj.LogFwdCard != nil {
		logFwdCard_value = types.StringValue(*obj.LogFwdCard)
	}
	var masterKey_value types.String
	if obj.MasterKey != nil {
		masterKey_value = types.StringValue(*obj.MasterKey)
	}
	var plugins_value types.String
	if obj.Plugins != nil {
		plugins_value = types.StringValue(*obj.Plugins)
	}
	var scheduledLogExport_value types.String
	if obj.ScheduledLogExport != nil {
		scheduledLogExport_value = types.StringValue(*obj.ScheduledLogExport)
	}
	var sharedGateways_value types.String
	if obj.SharedGateways != nil {
		sharedGateways_value = types.StringValue(*obj.SharedGateways)
	}
	var software_value types.String
	if obj.Software != nil {
		software_value = types.StringValue(*obj.Software)
	}
	var support_value types.String
	if obj.Support != nil {
		support_value = types.StringValue(*obj.Support)
	}
	var troubleshooting_value types.String
	if obj.Troubleshooting != nil {
		troubleshooting_value = types.StringValue(*obj.Troubleshooting)
	}
	var userIdentification_value types.String
	if obj.UserIdentification != nil {
		userIdentification_value = types.StringValue(*obj.UserIdentification)
	}
	var virtualSystems_value types.String
	if obj.VirtualSystems != nil {
		virtualSystems_value = types.StringValue(*obj.VirtualSystems)
	}
	var vmInfoSource_value types.String
	if obj.VmInfoSource != nil {
		vmInfoSource_value = types.StringValue(*obj.VmInfoSource)
	}
	var dhcpSyslogServer_value types.String
	if obj.DhcpSyslogServer != nil {
		dhcpSyslogServer_value = types.StringValue(*obj.DhcpSyslogServer)
	}
	o.AccessDomain = accessDomain_value
	o.AdminRoles = adminRoles_value
	o.Administrators = administrators_value
	o.AuthenticationProfile = authenticationProfile_value
	o.AuthenticationSequence = authenticationSequence_value
	o.BlockPages = blockPages_value
	o.CertificateManagement = certificateManagement_object
	o.ConfigAudit = configAudit_value
	o.DataRedistribution = dataRedistribution_value
	o.DeviceQuarantine = deviceQuarantine_value
	o.DynamicUpdates = dynamicUpdates_value
	o.GlobalProtectClient = globalProtectClient_value
	o.HighAvailability = highAvailability_value
	o.Licenses = licenses_value
	o.LocalUserDatabase = localUserDatabase_object
	o.LogFwdCard = logFwdCard_value
	o.LogSettings = logSettings_object
	o.MasterKey = masterKey_value
	o.Plugins = plugins_value
	o.PolicyRecommendations = policyRecommendations_object
	o.ScheduledLogExport = scheduledLogExport_value
	o.ServerProfile = serverProfile_object
	o.Setup = setup_object
	o.SharedGateways = sharedGateways_value
	o.Software = software_value
	o.Support = support_value
	o.Troubleshooting = troubleshooting_value
	o.UserIdentification = userIdentification_value
	o.VirtualSystems = virtualSystems_value
	o.VmInfoSource = vmInfoSource_value
	o.DhcpSyslogServer = dhcpSyslogServer_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiDeviceCertificateManagementObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiDeviceCertificateManagement, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var certificateProfile_value types.String
	if obj.CertificateProfile != nil {
		certificateProfile_value = types.StringValue(*obj.CertificateProfile)
	}
	var certificates_value types.String
	if obj.Certificates != nil {
		certificates_value = types.StringValue(*obj.Certificates)
	}
	var ocspResponder_value types.String
	if obj.OcspResponder != nil {
		ocspResponder_value = types.StringValue(*obj.OcspResponder)
	}
	var scep_value types.String
	if obj.Scep != nil {
		scep_value = types.StringValue(*obj.Scep)
	}
	var sshServiceProfile_value types.String
	if obj.SshServiceProfile != nil {
		sshServiceProfile_value = types.StringValue(*obj.SshServiceProfile)
	}
	var sslDecryptionExclusion_value types.String
	if obj.SslDecryptionExclusion != nil {
		sslDecryptionExclusion_value = types.StringValue(*obj.SslDecryptionExclusion)
	}
	var sslTlsServiceProfile_value types.String
	if obj.SslTlsServiceProfile != nil {
		sslTlsServiceProfile_value = types.StringValue(*obj.SslTlsServiceProfile)
	}
	o.CertificateProfile = certificateProfile_value
	o.Certificates = certificates_value
	o.OcspResponder = ocspResponder_value
	o.Scep = scep_value
	o.SshServiceProfile = sshServiceProfile_value
	o.SslDecryptionExclusion = sslDecryptionExclusion_value
	o.SslTlsServiceProfile = sslTlsServiceProfile_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiDeviceLocalUserDatabaseObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiDeviceLocalUserDatabase, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var userGroups_value types.String
	if obj.UserGroups != nil {
		userGroups_value = types.StringValue(*obj.UserGroups)
	}
	var users_value types.String
	if obj.Users != nil {
		users_value = types.StringValue(*obj.Users)
	}
	o.UserGroups = userGroups_value
	o.Users = users_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiDeviceLogSettingsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiDeviceLogSettings, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var ccAlarm_value types.String
	if obj.CcAlarm != nil {
		ccAlarm_value = types.StringValue(*obj.CcAlarm)
	}
	var config_value types.String
	if obj.Config != nil {
		config_value = types.StringValue(*obj.Config)
	}
	var correlation_value types.String
	if obj.Correlation != nil {
		correlation_value = types.StringValue(*obj.Correlation)
	}
	var globalprotect_value types.String
	if obj.Globalprotect != nil {
		globalprotect_value = types.StringValue(*obj.Globalprotect)
	}
	var hipmatch_value types.String
	if obj.Hipmatch != nil {
		hipmatch_value = types.StringValue(*obj.Hipmatch)
	}
	var iptag_value types.String
	if obj.Iptag != nil {
		iptag_value = types.StringValue(*obj.Iptag)
	}
	var manageLog_value types.String
	if obj.ManageLog != nil {
		manageLog_value = types.StringValue(*obj.ManageLog)
	}
	var system_value types.String
	if obj.System != nil {
		system_value = types.StringValue(*obj.System)
	}
	var userId_value types.String
	if obj.UserId != nil {
		userId_value = types.StringValue(*obj.UserId)
	}
	o.CcAlarm = ccAlarm_value
	o.Config = config_value
	o.Correlation = correlation_value
	o.Globalprotect = globalprotect_value
	o.Hipmatch = hipmatch_value
	o.Iptag = iptag_value
	o.ManageLog = manageLog_value
	o.System = system_value
	o.UserId = userId_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiDevicePolicyRecommendationsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiDevicePolicyRecommendations, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var iot_value types.String
	if obj.Iot != nil {
		iot_value = types.StringValue(*obj.Iot)
	}
	var saas_value types.String
	if obj.Saas != nil {
		saas_value = types.StringValue(*obj.Saas)
	}
	o.Iot = iot_value
	o.Saas = saas_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiDeviceServerProfileObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiDeviceServerProfile, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var dns_value types.String
	if obj.Dns != nil {
		dns_value = types.StringValue(*obj.Dns)
	}
	var email_value types.String
	if obj.Email != nil {
		email_value = types.StringValue(*obj.Email)
	}
	var http_value types.String
	if obj.Http != nil {
		http_value = types.StringValue(*obj.Http)
	}
	var kerberos_value types.String
	if obj.Kerberos != nil {
		kerberos_value = types.StringValue(*obj.Kerberos)
	}
	var ldap_value types.String
	if obj.Ldap != nil {
		ldap_value = types.StringValue(*obj.Ldap)
	}
	var mfa_value types.String
	if obj.Mfa != nil {
		mfa_value = types.StringValue(*obj.Mfa)
	}
	var netflow_value types.String
	if obj.Netflow != nil {
		netflow_value = types.StringValue(*obj.Netflow)
	}
	var radius_value types.String
	if obj.Radius != nil {
		radius_value = types.StringValue(*obj.Radius)
	}
	var samlIdp_value types.String
	if obj.SamlIdp != nil {
		samlIdp_value = types.StringValue(*obj.SamlIdp)
	}
	var scp_value types.String
	if obj.Scp != nil {
		scp_value = types.StringValue(*obj.Scp)
	}
	var snmpTrap_value types.String
	if obj.SnmpTrap != nil {
		snmpTrap_value = types.StringValue(*obj.SnmpTrap)
	}
	var syslog_value types.String
	if obj.Syslog != nil {
		syslog_value = types.StringValue(*obj.Syslog)
	}
	var tacplus_value types.String
	if obj.Tacplus != nil {
		tacplus_value = types.StringValue(*obj.Tacplus)
	}
	o.Dns = dns_value
	o.Email = email_value
	o.Http = http_value
	o.Kerberos = kerberos_value
	o.Ldap = ldap_value
	o.Mfa = mfa_value
	o.Netflow = netflow_value
	o.Radius = radius_value
	o.SamlIdp = samlIdp_value
	o.Scp = scp_value
	o.SnmpTrap = snmpTrap_value
	o.Syslog = syslog_value
	o.Tacplus = tacplus_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiDeviceSetupObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiDeviceSetup, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var contentId_value types.String
	if obj.ContentId != nil {
		contentId_value = types.StringValue(*obj.ContentId)
	}
	var hsm_value types.String
	if obj.Hsm != nil {
		hsm_value = types.StringValue(*obj.Hsm)
	}
	var interfaces_value types.String
	if obj.Interfaces != nil {
		interfaces_value = types.StringValue(*obj.Interfaces)
	}
	var management_value types.String
	if obj.Management != nil {
		management_value = types.StringValue(*obj.Management)
	}
	var operations_value types.String
	if obj.Operations != nil {
		operations_value = types.StringValue(*obj.Operations)
	}
	var services_value types.String
	if obj.Services != nil {
		services_value = types.StringValue(*obj.Services)
	}
	var session_value types.String
	if obj.Session != nil {
		session_value = types.StringValue(*obj.Session)
	}
	var telemetry_value types.String
	if obj.Telemetry != nil {
		telemetry_value = types.StringValue(*obj.Telemetry)
	}
	var wildfire_value types.String
	if obj.Wildfire != nil {
		wildfire_value = types.StringValue(*obj.Wildfire)
	}
	o.ContentId = contentId_value
	o.Hsm = hsm_value
	o.Interfaces = interfaces_value
	o.Management = management_value
	o.Operations = operations_value
	o.Services = services_value
	o.Session = session_value
	o.Telemetry = telemetry_value
	o.Wildfire = wildfire_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiGlobalObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiGlobal, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var systemAlarms_value types.String
	if obj.SystemAlarms != nil {
		systemAlarms_value = types.StringValue(*obj.SystemAlarms)
	}
	o.SystemAlarms = systemAlarms_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiMonitorObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiMonitor, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var automatedCorrelationEngine_object *AdminRoleDataSourceRoleDeviceWebuiMonitorAutomatedCorrelationEngineObject
	if obj.AutomatedCorrelationEngine != nil {
		automatedCorrelationEngine_object = new(AdminRoleDataSourceRoleDeviceWebuiMonitorAutomatedCorrelationEngineObject)

		diags.Append(automatedCorrelationEngine_object.CopyFromPango(ctx, obj.AutomatedCorrelationEngine, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var customReports_object *AdminRoleDataSourceRoleDeviceWebuiMonitorCustomReportsObject
	if obj.CustomReports != nil {
		customReports_object = new(AdminRoleDataSourceRoleDeviceWebuiMonitorCustomReportsObject)

		diags.Append(customReports_object.CopyFromPango(ctx, obj.CustomReports, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var logs_object *AdminRoleDataSourceRoleDeviceWebuiMonitorLogsObject
	if obj.Logs != nil {
		logs_object = new(AdminRoleDataSourceRoleDeviceWebuiMonitorLogsObject)

		diags.Append(logs_object.CopyFromPango(ctx, obj.Logs, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var pdfReports_object *AdminRoleDataSourceRoleDeviceWebuiMonitorPdfReportsObject
	if obj.PdfReports != nil {
		pdfReports_object = new(AdminRoleDataSourceRoleDeviceWebuiMonitorPdfReportsObject)

		diags.Append(pdfReports_object.CopyFromPango(ctx, obj.PdfReports, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var appScope_value types.String
	if obj.AppScope != nil {
		appScope_value = types.StringValue(*obj.AppScope)
	}
	var applicationReports_value types.String
	if obj.ApplicationReports != nil {
		applicationReports_value = types.StringValue(*obj.ApplicationReports)
	}
	var blockIpList_value types.String
	if obj.BlockIpList != nil {
		blockIpList_value = types.StringValue(*obj.BlockIpList)
	}
	var botnet_value types.String
	if obj.Botnet != nil {
		botnet_value = types.StringValue(*obj.Botnet)
	}
	var externalLogs_value types.String
	if obj.ExternalLogs != nil {
		externalLogs_value = types.StringValue(*obj.ExternalLogs)
	}
	var gtpReports_value types.String
	if obj.GtpReports != nil {
		gtpReports_value = types.StringValue(*obj.GtpReports)
	}
	var packetCapture_value types.String
	if obj.PacketCapture != nil {
		packetCapture_value = types.StringValue(*obj.PacketCapture)
	}
	var sctpReports_value types.String
	if obj.SctpReports != nil {
		sctpReports_value = types.StringValue(*obj.SctpReports)
	}
	var sessionBrowser_value types.String
	if obj.SessionBrowser != nil {
		sessionBrowser_value = types.StringValue(*obj.SessionBrowser)
	}
	var threatReports_value types.String
	if obj.ThreatReports != nil {
		threatReports_value = types.StringValue(*obj.ThreatReports)
	}
	var trafficReports_value types.String
	if obj.TrafficReports != nil {
		trafficReports_value = types.StringValue(*obj.TrafficReports)
	}
	var urlFilteringReports_value types.String
	if obj.UrlFilteringReports != nil {
		urlFilteringReports_value = types.StringValue(*obj.UrlFilteringReports)
	}
	var viewCustomReports_value types.String
	if obj.ViewCustomReports != nil {
		viewCustomReports_value = types.StringValue(*obj.ViewCustomReports)
	}
	o.AppScope = appScope_value
	o.ApplicationReports = applicationReports_value
	o.AutomatedCorrelationEngine = automatedCorrelationEngine_object
	o.BlockIpList = blockIpList_value
	o.Botnet = botnet_value
	o.CustomReports = customReports_object
	o.ExternalLogs = externalLogs_value
	o.GtpReports = gtpReports_value
	o.Logs = logs_object
	o.PacketCapture = packetCapture_value
	o.PdfReports = pdfReports_object
	o.SctpReports = sctpReports_value
	o.SessionBrowser = sessionBrowser_value
	o.ThreatReports = threatReports_value
	o.TrafficReports = trafficReports_value
	o.UrlFilteringReports = urlFilteringReports_value
	o.ViewCustomReports = viewCustomReports_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiMonitorAutomatedCorrelationEngineObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiMonitorAutomatedCorrelationEngine, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var correlatedEvents_value types.String
	if obj.CorrelatedEvents != nil {
		correlatedEvents_value = types.StringValue(*obj.CorrelatedEvents)
	}
	var correlationObjects_value types.String
	if obj.CorrelationObjects != nil {
		correlationObjects_value = types.StringValue(*obj.CorrelationObjects)
	}
	o.CorrelatedEvents = correlatedEvents_value
	o.CorrelationObjects = correlationObjects_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiMonitorCustomReportsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiMonitorCustomReports, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var applicationStatistics_value types.String
	if obj.ApplicationStatistics != nil {
		applicationStatistics_value = types.StringValue(*obj.ApplicationStatistics)
	}
	var auth_value types.String
	if obj.Auth != nil {
		auth_value = types.StringValue(*obj.Auth)
	}
	var dataFilteringLog_value types.String
	if obj.DataFilteringLog != nil {
		dataFilteringLog_value = types.StringValue(*obj.DataFilteringLog)
	}
	var decryptionLog_value types.String
	if obj.DecryptionLog != nil {
		decryptionLog_value = types.StringValue(*obj.DecryptionLog)
	}
	var decryptionSummary_value types.String
	if obj.DecryptionSummary != nil {
		decryptionSummary_value = types.StringValue(*obj.DecryptionSummary)
	}
	var globalprotect_value types.String
	if obj.Globalprotect != nil {
		globalprotect_value = types.StringValue(*obj.Globalprotect)
	}
	var gtpLog_value types.String
	if obj.GtpLog != nil {
		gtpLog_value = types.StringValue(*obj.GtpLog)
	}
	var gtpSummary_value types.String
	if obj.GtpSummary != nil {
		gtpSummary_value = types.StringValue(*obj.GtpSummary)
	}
	var hipmatch_value types.String
	if obj.Hipmatch != nil {
		hipmatch_value = types.StringValue(*obj.Hipmatch)
	}
	var iptag_value types.String
	if obj.Iptag != nil {
		iptag_value = types.StringValue(*obj.Iptag)
	}
	var sctpLog_value types.String
	if obj.SctpLog != nil {
		sctpLog_value = types.StringValue(*obj.SctpLog)
	}
	var sctpSummary_value types.String
	if obj.SctpSummary != nil {
		sctpSummary_value = types.StringValue(*obj.SctpSummary)
	}
	var threatLog_value types.String
	if obj.ThreatLog != nil {
		threatLog_value = types.StringValue(*obj.ThreatLog)
	}
	var threatSummary_value types.String
	if obj.ThreatSummary != nil {
		threatSummary_value = types.StringValue(*obj.ThreatSummary)
	}
	var trafficLog_value types.String
	if obj.TrafficLog != nil {
		trafficLog_value = types.StringValue(*obj.TrafficLog)
	}
	var trafficSummary_value types.String
	if obj.TrafficSummary != nil {
		trafficSummary_value = types.StringValue(*obj.TrafficSummary)
	}
	var tunnelLog_value types.String
	if obj.TunnelLog != nil {
		tunnelLog_value = types.StringValue(*obj.TunnelLog)
	}
	var tunnelSummary_value types.String
	if obj.TunnelSummary != nil {
		tunnelSummary_value = types.StringValue(*obj.TunnelSummary)
	}
	var urlLog_value types.String
	if obj.UrlLog != nil {
		urlLog_value = types.StringValue(*obj.UrlLog)
	}
	var urlSummary_value types.String
	if obj.UrlSummary != nil {
		urlSummary_value = types.StringValue(*obj.UrlSummary)
	}
	var userid_value types.String
	if obj.Userid != nil {
		userid_value = types.StringValue(*obj.Userid)
	}
	var wildfireLog_value types.String
	if obj.WildfireLog != nil {
		wildfireLog_value = types.StringValue(*obj.WildfireLog)
	}
	o.ApplicationStatistics = applicationStatistics_value
	o.Auth = auth_value
	o.DataFilteringLog = dataFilteringLog_value
	o.DecryptionLog = decryptionLog_value
	o.DecryptionSummary = decryptionSummary_value
	o.Globalprotect = globalprotect_value
	o.GtpLog = gtpLog_value
	o.GtpSummary = gtpSummary_value
	o.Hipmatch = hipmatch_value
	o.Iptag = iptag_value
	o.SctpLog = sctpLog_value
	o.SctpSummary = sctpSummary_value
	o.ThreatLog = threatLog_value
	o.ThreatSummary = threatSummary_value
	o.TrafficLog = trafficLog_value
	o.TrafficSummary = trafficSummary_value
	o.TunnelLog = tunnelLog_value
	o.TunnelSummary = tunnelSummary_value
	o.UrlLog = urlLog_value
	o.UrlSummary = urlSummary_value
	o.Userid = userid_value
	o.WildfireLog = wildfireLog_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiMonitorLogsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiMonitorLogs, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var alarm_value types.String
	if obj.Alarm != nil {
		alarm_value = types.StringValue(*obj.Alarm)
	}
	var authentication_value types.String
	if obj.Authentication != nil {
		authentication_value = types.StringValue(*obj.Authentication)
	}
	var configuration_value types.String
	if obj.Configuration != nil {
		configuration_value = types.StringValue(*obj.Configuration)
	}
	var dataFiltering_value types.String
	if obj.DataFiltering != nil {
		dataFiltering_value = types.StringValue(*obj.DataFiltering)
	}
	var decryption_value types.String
	if obj.Decryption != nil {
		decryption_value = types.StringValue(*obj.Decryption)
	}
	var globalprotect_value types.String
	if obj.Globalprotect != nil {
		globalprotect_value = types.StringValue(*obj.Globalprotect)
	}
	var gtp_value types.String
	if obj.Gtp != nil {
		gtp_value = types.StringValue(*obj.Gtp)
	}
	var hipmatch_value types.String
	if obj.Hipmatch != nil {
		hipmatch_value = types.StringValue(*obj.Hipmatch)
	}
	var iptag_value types.String
	if obj.Iptag != nil {
		iptag_value = types.StringValue(*obj.Iptag)
	}
	var sctp_value types.String
	if obj.Sctp != nil {
		sctp_value = types.StringValue(*obj.Sctp)
	}
	var system_value types.String
	if obj.System != nil {
		system_value = types.StringValue(*obj.System)
	}
	var threat_value types.String
	if obj.Threat != nil {
		threat_value = types.StringValue(*obj.Threat)
	}
	var traffic_value types.String
	if obj.Traffic != nil {
		traffic_value = types.StringValue(*obj.Traffic)
	}
	var tunnel_value types.String
	if obj.Tunnel != nil {
		tunnel_value = types.StringValue(*obj.Tunnel)
	}
	var url_value types.String
	if obj.Url != nil {
		url_value = types.StringValue(*obj.Url)
	}
	var userid_value types.String
	if obj.Userid != nil {
		userid_value = types.StringValue(*obj.Userid)
	}
	var wildfire_value types.String
	if obj.Wildfire != nil {
		wildfire_value = types.StringValue(*obj.Wildfire)
	}
	o.Alarm = alarm_value
	o.Authentication = authentication_value
	o.Configuration = configuration_value
	o.DataFiltering = dataFiltering_value
	o.Decryption = decryption_value
	o.Globalprotect = globalprotect_value
	o.Gtp = gtp_value
	o.Hipmatch = hipmatch_value
	o.Iptag = iptag_value
	o.Sctp = sctp_value
	o.System = system_value
	o.Threat = threat_value
	o.Traffic = traffic_value
	o.Tunnel = tunnel_value
	o.Url = url_value
	o.Userid = userid_value
	o.Wildfire = wildfire_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiMonitorPdfReportsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiMonitorPdfReports, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var emailScheduler_value types.String
	if obj.EmailScheduler != nil {
		emailScheduler_value = types.StringValue(*obj.EmailScheduler)
	}
	var managePdfSummary_value types.String
	if obj.ManagePdfSummary != nil {
		managePdfSummary_value = types.StringValue(*obj.ManagePdfSummary)
	}
	var pdfSummaryReports_value types.String
	if obj.PdfSummaryReports != nil {
		pdfSummaryReports_value = types.StringValue(*obj.PdfSummaryReports)
	}
	var reportGroups_value types.String
	if obj.ReportGroups != nil {
		reportGroups_value = types.StringValue(*obj.ReportGroups)
	}
	var saasApplicationUsageReport_value types.String
	if obj.SaasApplicationUsageReport != nil {
		saasApplicationUsageReport_value = types.StringValue(*obj.SaasApplicationUsageReport)
	}
	var userActivityReport_value types.String
	if obj.UserActivityReport != nil {
		userActivityReport_value = types.StringValue(*obj.UserActivityReport)
	}
	o.EmailScheduler = emailScheduler_value
	o.ManagePdfSummary = managePdfSummary_value
	o.PdfSummaryReports = pdfSummaryReports_value
	o.ReportGroups = reportGroups_value
	o.SaasApplicationUsageReport = saasApplicationUsageReport_value
	o.UserActivityReport = userActivityReport_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiNetworkObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiNetwork, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var globalProtect_object *AdminRoleDataSourceRoleDeviceWebuiNetworkGlobalProtectObject
	if obj.GlobalProtect != nil {
		globalProtect_object = new(AdminRoleDataSourceRoleDeviceWebuiNetworkGlobalProtectObject)

		diags.Append(globalProtect_object.CopyFromPango(ctx, obj.GlobalProtect, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var networkProfiles_object *AdminRoleDataSourceRoleDeviceWebuiNetworkNetworkProfilesObject
	if obj.NetworkProfiles != nil {
		networkProfiles_object = new(AdminRoleDataSourceRoleDeviceWebuiNetworkNetworkProfilesObject)

		diags.Append(networkProfiles_object.CopyFromPango(ctx, obj.NetworkProfiles, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var routing_object *AdminRoleDataSourceRoleDeviceWebuiNetworkRoutingObject
	if obj.Routing != nil {
		routing_object = new(AdminRoleDataSourceRoleDeviceWebuiNetworkRoutingObject)

		diags.Append(routing_object.CopyFromPango(ctx, obj.Routing, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var dhcp_value types.String
	if obj.Dhcp != nil {
		dhcp_value = types.StringValue(*obj.Dhcp)
	}
	var dnsProxy_value types.String
	if obj.DnsProxy != nil {
		dnsProxy_value = types.StringValue(*obj.DnsProxy)
	}
	var greTunnels_value types.String
	if obj.GreTunnels != nil {
		greTunnels_value = types.StringValue(*obj.GreTunnels)
	}
	var interfaces_value types.String
	if obj.Interfaces != nil {
		interfaces_value = types.StringValue(*obj.Interfaces)
	}
	var ipsecTunnels_value types.String
	if obj.IpsecTunnels != nil {
		ipsecTunnels_value = types.StringValue(*obj.IpsecTunnels)
	}
	var lldp_value types.String
	if obj.Lldp != nil {
		lldp_value = types.StringValue(*obj.Lldp)
	}
	var qos_value types.String
	if obj.Qos != nil {
		qos_value = types.StringValue(*obj.Qos)
	}
	var sdwanInterfaceProfile_value types.String
	if obj.SdwanInterfaceProfile != nil {
		sdwanInterfaceProfile_value = types.StringValue(*obj.SdwanInterfaceProfile)
	}
	var virtualRouters_value types.String
	if obj.VirtualRouters != nil {
		virtualRouters_value = types.StringValue(*obj.VirtualRouters)
	}
	var virtualWires_value types.String
	if obj.VirtualWires != nil {
		virtualWires_value = types.StringValue(*obj.VirtualWires)
	}
	var vlans_value types.String
	if obj.Vlans != nil {
		vlans_value = types.StringValue(*obj.Vlans)
	}
	var zones_value types.String
	if obj.Zones != nil {
		zones_value = types.StringValue(*obj.Zones)
	}
	var secureWebGateway_value types.String
	if obj.SecureWebGateway != nil {
		secureWebGateway_value = types.StringValue(*obj.SecureWebGateway)
	}
	o.Dhcp = dhcp_value
	o.DnsProxy = dnsProxy_value
	o.GlobalProtect = globalProtect_object
	o.GreTunnels = greTunnels_value
	o.Interfaces = interfaces_value
	o.IpsecTunnels = ipsecTunnels_value
	o.Lldp = lldp_value
	o.NetworkProfiles = networkProfiles_object
	o.Qos = qos_value
	o.Routing = routing_object
	o.SdwanInterfaceProfile = sdwanInterfaceProfile_value
	o.VirtualRouters = virtualRouters_value
	o.VirtualWires = virtualWires_value
	o.Vlans = vlans_value
	o.Zones = zones_value
	o.SecureWebGateway = secureWebGateway_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiNetworkGlobalProtectObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiNetworkGlobalProtect, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var clientlessAppGroups_value types.String
	if obj.ClientlessAppGroups != nil {
		clientlessAppGroups_value = types.StringValue(*obj.ClientlessAppGroups)
	}
	var clientlessApps_value types.String
	if obj.ClientlessApps != nil {
		clientlessApps_value = types.StringValue(*obj.ClientlessApps)
	}
	var gateways_value types.String
	if obj.Gateways != nil {
		gateways_value = types.StringValue(*obj.Gateways)
	}
	var mdm_value types.String
	if obj.Mdm != nil {
		mdm_value = types.StringValue(*obj.Mdm)
	}
	var portals_value types.String
	if obj.Portals != nil {
		portals_value = types.StringValue(*obj.Portals)
	}
	o.ClientlessAppGroups = clientlessAppGroups_value
	o.ClientlessApps = clientlessApps_value
	o.Gateways = gateways_value
	o.Mdm = mdm_value
	o.Portals = portals_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiNetworkNetworkProfilesObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiNetworkNetworkProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var bfdProfile_value types.String
	if obj.BfdProfile != nil {
		bfdProfile_value = types.StringValue(*obj.BfdProfile)
	}
	var gpAppIpsecCrypto_value types.String
	if obj.GpAppIpsecCrypto != nil {
		gpAppIpsecCrypto_value = types.StringValue(*obj.GpAppIpsecCrypto)
	}
	var ikeCrypto_value types.String
	if obj.IkeCrypto != nil {
		ikeCrypto_value = types.StringValue(*obj.IkeCrypto)
	}
	var ikeGateways_value types.String
	if obj.IkeGateways != nil {
		ikeGateways_value = types.StringValue(*obj.IkeGateways)
	}
	var interfaceMgmt_value types.String
	if obj.InterfaceMgmt != nil {
		interfaceMgmt_value = types.StringValue(*obj.InterfaceMgmt)
	}
	var ipsecCrypto_value types.String
	if obj.IpsecCrypto != nil {
		ipsecCrypto_value = types.StringValue(*obj.IpsecCrypto)
	}
	var lldpProfile_value types.String
	if obj.LldpProfile != nil {
		lldpProfile_value = types.StringValue(*obj.LldpProfile)
	}
	var qosProfile_value types.String
	if obj.QosProfile != nil {
		qosProfile_value = types.StringValue(*obj.QosProfile)
	}
	var tunnelMonitor_value types.String
	if obj.TunnelMonitor != nil {
		tunnelMonitor_value = types.StringValue(*obj.TunnelMonitor)
	}
	var zoneProtection_value types.String
	if obj.ZoneProtection != nil {
		zoneProtection_value = types.StringValue(*obj.ZoneProtection)
	}
	o.BfdProfile = bfdProfile_value
	o.GpAppIpsecCrypto = gpAppIpsecCrypto_value
	o.IkeCrypto = ikeCrypto_value
	o.IkeGateways = ikeGateways_value
	o.InterfaceMgmt = interfaceMgmt_value
	o.IpsecCrypto = ipsecCrypto_value
	o.LldpProfile = lldpProfile_value
	o.QosProfile = qosProfile_value
	o.TunnelMonitor = tunnelMonitor_value
	o.ZoneProtection = zoneProtection_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiNetworkRoutingObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiNetworkRouting, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var routingProfiles_object *AdminRoleDataSourceRoleDeviceWebuiNetworkRoutingRoutingProfilesObject
	if obj.RoutingProfiles != nil {
		routingProfiles_object = new(AdminRoleDataSourceRoleDeviceWebuiNetworkRoutingRoutingProfilesObject)

		diags.Append(routingProfiles_object.CopyFromPango(ctx, obj.RoutingProfiles, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var logicalRouters_value types.String
	if obj.LogicalRouters != nil {
		logicalRouters_value = types.StringValue(*obj.LogicalRouters)
	}
	o.LogicalRouters = logicalRouters_value
	o.RoutingProfiles = routingProfiles_object

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiNetworkRoutingRoutingProfilesObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiNetworkRoutingRoutingProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var bfd_value types.String
	if obj.Bfd != nil {
		bfd_value = types.StringValue(*obj.Bfd)
	}
	var bgp_value types.String
	if obj.Bgp != nil {
		bgp_value = types.StringValue(*obj.Bgp)
	}
	var filters_value types.String
	if obj.Filters != nil {
		filters_value = types.StringValue(*obj.Filters)
	}
	var multicast_value types.String
	if obj.Multicast != nil {
		multicast_value = types.StringValue(*obj.Multicast)
	}
	var ospf_value types.String
	if obj.Ospf != nil {
		ospf_value = types.StringValue(*obj.Ospf)
	}
	var ospfv3_value types.String
	if obj.Ospfv3 != nil {
		ospfv3_value = types.StringValue(*obj.Ospfv3)
	}
	var ripv2_value types.String
	if obj.Ripv2 != nil {
		ripv2_value = types.StringValue(*obj.Ripv2)
	}
	o.Bfd = bfd_value
	o.Bgp = bgp_value
	o.Filters = filters_value
	o.Multicast = multicast_value
	o.Ospf = ospf_value
	o.Ospfv3 = ospfv3_value
	o.Ripv2 = ripv2_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiObjectsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var customObjects_object *AdminRoleDataSourceRoleDeviceWebuiObjectsCustomObjectsObject
	if obj.CustomObjects != nil {
		customObjects_object = new(AdminRoleDataSourceRoleDeviceWebuiObjectsCustomObjectsObject)

		diags.Append(customObjects_object.CopyFromPango(ctx, obj.CustomObjects, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var decryption_object *AdminRoleDataSourceRoleDeviceWebuiObjectsDecryptionObject
	if obj.Decryption != nil {
		decryption_object = new(AdminRoleDataSourceRoleDeviceWebuiObjectsDecryptionObject)

		diags.Append(decryption_object.CopyFromPango(ctx, obj.Decryption, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var globalProtect_object *AdminRoleDataSourceRoleDeviceWebuiObjectsGlobalProtectObject
	if obj.GlobalProtect != nil {
		globalProtect_object = new(AdminRoleDataSourceRoleDeviceWebuiObjectsGlobalProtectObject)

		diags.Append(globalProtect_object.CopyFromPango(ctx, obj.GlobalProtect, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sdwan_object *AdminRoleDataSourceRoleDeviceWebuiObjectsSdwanObject
	if obj.Sdwan != nil {
		sdwan_object = new(AdminRoleDataSourceRoleDeviceWebuiObjectsSdwanObject)

		diags.Append(sdwan_object.CopyFromPango(ctx, obj.Sdwan, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var securityProfiles_object *AdminRoleDataSourceRoleDeviceWebuiObjectsSecurityProfilesObject
	if obj.SecurityProfiles != nil {
		securityProfiles_object = new(AdminRoleDataSourceRoleDeviceWebuiObjectsSecurityProfilesObject)

		diags.Append(securityProfiles_object.CopyFromPango(ctx, obj.SecurityProfiles, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var addressGroups_value types.String
	if obj.AddressGroups != nil {
		addressGroups_value = types.StringValue(*obj.AddressGroups)
	}
	var addresses_value types.String
	if obj.Addresses != nil {
		addresses_value = types.StringValue(*obj.Addresses)
	}
	var applicationFilters_value types.String
	if obj.ApplicationFilters != nil {
		applicationFilters_value = types.StringValue(*obj.ApplicationFilters)
	}
	var applicationGroups_value types.String
	if obj.ApplicationGroups != nil {
		applicationGroups_value = types.StringValue(*obj.ApplicationGroups)
	}
	var applications_value types.String
	if obj.Applications != nil {
		applications_value = types.StringValue(*obj.Applications)
	}
	var authentication_value types.String
	if obj.Authentication != nil {
		authentication_value = types.StringValue(*obj.Authentication)
	}
	var devices_value types.String
	if obj.Devices != nil {
		devices_value = types.StringValue(*obj.Devices)
	}
	var dynamicBlockLists_value types.String
	if obj.DynamicBlockLists != nil {
		dynamicBlockLists_value = types.StringValue(*obj.DynamicBlockLists)
	}
	var dynamicUserGroups_value types.String
	if obj.DynamicUserGroups != nil {
		dynamicUserGroups_value = types.StringValue(*obj.DynamicUserGroups)
	}
	var logForwarding_value types.String
	if obj.LogForwarding != nil {
		logForwarding_value = types.StringValue(*obj.LogForwarding)
	}
	var packetBrokerProfile_value types.String
	if obj.PacketBrokerProfile != nil {
		packetBrokerProfile_value = types.StringValue(*obj.PacketBrokerProfile)
	}
	var regions_value types.String
	if obj.Regions != nil {
		regions_value = types.StringValue(*obj.Regions)
	}
	var schedules_value types.String
	if obj.Schedules != nil {
		schedules_value = types.StringValue(*obj.Schedules)
	}
	var securityProfileGroups_value types.String
	if obj.SecurityProfileGroups != nil {
		securityProfileGroups_value = types.StringValue(*obj.SecurityProfileGroups)
	}
	var serviceGroups_value types.String
	if obj.ServiceGroups != nil {
		serviceGroups_value = types.StringValue(*obj.ServiceGroups)
	}
	var services_value types.String
	if obj.Services != nil {
		services_value = types.StringValue(*obj.Services)
	}
	var tags_value types.String
	if obj.Tags != nil {
		tags_value = types.StringValue(*obj.Tags)
	}
	o.AddressGroups = addressGroups_value
	o.Addresses = addresses_value
	o.ApplicationFilters = applicationFilters_value
	o.ApplicationGroups = applicationGroups_value
	o.Applications = applications_value
	o.Authentication = authentication_value
	o.CustomObjects = customObjects_object
	o.Decryption = decryption_object
	o.Devices = devices_value
	o.DynamicBlockLists = dynamicBlockLists_value
	o.DynamicUserGroups = dynamicUserGroups_value
	o.GlobalProtect = globalProtect_object
	o.LogForwarding = logForwarding_value
	o.PacketBrokerProfile = packetBrokerProfile_value
	o.Regions = regions_value
	o.Schedules = schedules_value
	o.Sdwan = sdwan_object
	o.SecurityProfileGroups = securityProfileGroups_value
	o.SecurityProfiles = securityProfiles_object
	o.ServiceGroups = serviceGroups_value
	o.Services = services_value
	o.Tags = tags_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiObjectsCustomObjectsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiObjectsCustomObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var dataPatterns_value types.String
	if obj.DataPatterns != nil {
		dataPatterns_value = types.StringValue(*obj.DataPatterns)
	}
	var spyware_value types.String
	if obj.Spyware != nil {
		spyware_value = types.StringValue(*obj.Spyware)
	}
	var urlCategory_value types.String
	if obj.UrlCategory != nil {
		urlCategory_value = types.StringValue(*obj.UrlCategory)
	}
	var vulnerability_value types.String
	if obj.Vulnerability != nil {
		vulnerability_value = types.StringValue(*obj.Vulnerability)
	}
	o.DataPatterns = dataPatterns_value
	o.Spyware = spyware_value
	o.UrlCategory = urlCategory_value
	o.Vulnerability = vulnerability_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiObjectsDecryptionObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiObjectsDecryption, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var decryptionProfile_value types.String
	if obj.DecryptionProfile != nil {
		decryptionProfile_value = types.StringValue(*obj.DecryptionProfile)
	}
	o.DecryptionProfile = decryptionProfile_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiObjectsGlobalProtectObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiObjectsGlobalProtect, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var hipObjects_value types.String
	if obj.HipObjects != nil {
		hipObjects_value = types.StringValue(*obj.HipObjects)
	}
	var hipProfiles_value types.String
	if obj.HipProfiles != nil {
		hipProfiles_value = types.StringValue(*obj.HipProfiles)
	}
	o.HipObjects = hipObjects_value
	o.HipProfiles = hipProfiles_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiObjectsSdwanObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiObjectsSdwan, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var sdwanDistProfile_value types.String
	if obj.SdwanDistProfile != nil {
		sdwanDistProfile_value = types.StringValue(*obj.SdwanDistProfile)
	}
	var sdwanErrorCorrectionProfile_value types.String
	if obj.SdwanErrorCorrectionProfile != nil {
		sdwanErrorCorrectionProfile_value = types.StringValue(*obj.SdwanErrorCorrectionProfile)
	}
	var sdwanProfile_value types.String
	if obj.SdwanProfile != nil {
		sdwanProfile_value = types.StringValue(*obj.SdwanProfile)
	}
	var sdwanSaasQualityProfile_value types.String
	if obj.SdwanSaasQualityProfile != nil {
		sdwanSaasQualityProfile_value = types.StringValue(*obj.SdwanSaasQualityProfile)
	}
	o.SdwanDistProfile = sdwanDistProfile_value
	o.SdwanErrorCorrectionProfile = sdwanErrorCorrectionProfile_value
	o.SdwanProfile = sdwanProfile_value
	o.SdwanSaasQualityProfile = sdwanSaasQualityProfile_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiObjectsSecurityProfilesObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiObjectsSecurityProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var antiSpyware_value types.String
	if obj.AntiSpyware != nil {
		antiSpyware_value = types.StringValue(*obj.AntiSpyware)
	}
	var antivirus_value types.String
	if obj.Antivirus != nil {
		antivirus_value = types.StringValue(*obj.Antivirus)
	}
	var dataFiltering_value types.String
	if obj.DataFiltering != nil {
		dataFiltering_value = types.StringValue(*obj.DataFiltering)
	}
	var dosProtection_value types.String
	if obj.DosProtection != nil {
		dosProtection_value = types.StringValue(*obj.DosProtection)
	}
	var fileBlocking_value types.String
	if obj.FileBlocking != nil {
		fileBlocking_value = types.StringValue(*obj.FileBlocking)
	}
	var gtpProtection_value types.String
	if obj.GtpProtection != nil {
		gtpProtection_value = types.StringValue(*obj.GtpProtection)
	}
	var sctpProtection_value types.String
	if obj.SctpProtection != nil {
		sctpProtection_value = types.StringValue(*obj.SctpProtection)
	}
	var urlFiltering_value types.String
	if obj.UrlFiltering != nil {
		urlFiltering_value = types.StringValue(*obj.UrlFiltering)
	}
	var vulnerabilityProtection_value types.String
	if obj.VulnerabilityProtection != nil {
		vulnerabilityProtection_value = types.StringValue(*obj.VulnerabilityProtection)
	}
	var wildfireAnalysis_value types.String
	if obj.WildfireAnalysis != nil {
		wildfireAnalysis_value = types.StringValue(*obj.WildfireAnalysis)
	}
	o.AntiSpyware = antiSpyware_value
	o.Antivirus = antivirus_value
	o.DataFiltering = dataFiltering_value
	o.DosProtection = dosProtection_value
	o.FileBlocking = fileBlocking_value
	o.GtpProtection = gtpProtection_value
	o.SctpProtection = sctpProtection_value
	o.UrlFiltering = urlFiltering_value
	o.VulnerabilityProtection = vulnerabilityProtection_value
	o.WildfireAnalysis = wildfireAnalysis_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiOperationsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiOperations, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var downloadCoreFiles_value types.String
	if obj.DownloadCoreFiles != nil {
		downloadCoreFiles_value = types.StringValue(*obj.DownloadCoreFiles)
	}
	var downloadPcapFiles_value types.String
	if obj.DownloadPcapFiles != nil {
		downloadPcapFiles_value = types.StringValue(*obj.DownloadPcapFiles)
	}
	var generateStatsDumpFile_value types.String
	if obj.GenerateStatsDumpFile != nil {
		generateStatsDumpFile_value = types.StringValue(*obj.GenerateStatsDumpFile)
	}
	var generateTechSupportFile_value types.String
	if obj.GenerateTechSupportFile != nil {
		generateTechSupportFile_value = types.StringValue(*obj.GenerateTechSupportFile)
	}
	var reboot_value types.String
	if obj.Reboot != nil {
		reboot_value = types.StringValue(*obj.Reboot)
	}
	o.DownloadCoreFiles = downloadCoreFiles_value
	o.DownloadPcapFiles = downloadPcapFiles_value
	o.GenerateStatsDumpFile = generateStatsDumpFile_value
	o.GenerateTechSupportFile = generateTechSupportFile_value
	o.Reboot = reboot_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiPoliciesObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiPolicies, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var applicationOverrideRulebase_value types.String
	if obj.ApplicationOverrideRulebase != nil {
		applicationOverrideRulebase_value = types.StringValue(*obj.ApplicationOverrideRulebase)
	}
	var authenticationRulebase_value types.String
	if obj.AuthenticationRulebase != nil {
		authenticationRulebase_value = types.StringValue(*obj.AuthenticationRulebase)
	}
	var dosRulebase_value types.String
	if obj.DosRulebase != nil {
		dosRulebase_value = types.StringValue(*obj.DosRulebase)
	}
	var natRulebase_value types.String
	if obj.NatRulebase != nil {
		natRulebase_value = types.StringValue(*obj.NatRulebase)
	}
	var networkPacketBrokerRulebase_value types.String
	if obj.NetworkPacketBrokerRulebase != nil {
		networkPacketBrokerRulebase_value = types.StringValue(*obj.NetworkPacketBrokerRulebase)
	}
	var pbfRulebase_value types.String
	if obj.PbfRulebase != nil {
		pbfRulebase_value = types.StringValue(*obj.PbfRulebase)
	}
	var qosRulebase_value types.String
	if obj.QosRulebase != nil {
		qosRulebase_value = types.StringValue(*obj.QosRulebase)
	}
	var ruleHitCountReset_value types.String
	if obj.RuleHitCountReset != nil {
		ruleHitCountReset_value = types.StringValue(*obj.RuleHitCountReset)
	}
	var sdwanRulebase_value types.String
	if obj.SdwanRulebase != nil {
		sdwanRulebase_value = types.StringValue(*obj.SdwanRulebase)
	}
	var securityRulebase_value types.String
	if obj.SecurityRulebase != nil {
		securityRulebase_value = types.StringValue(*obj.SecurityRulebase)
	}
	var sslDecryptionRulebase_value types.String
	if obj.SslDecryptionRulebase != nil {
		sslDecryptionRulebase_value = types.StringValue(*obj.SslDecryptionRulebase)
	}
	var tunnelInspectRulebase_value types.String
	if obj.TunnelInspectRulebase != nil {
		tunnelInspectRulebase_value = types.StringValue(*obj.TunnelInspectRulebase)
	}
	o.ApplicationOverrideRulebase = applicationOverrideRulebase_value
	o.AuthenticationRulebase = authenticationRulebase_value
	o.DosRulebase = dosRulebase_value
	o.NatRulebase = natRulebase_value
	o.NetworkPacketBrokerRulebase = networkPacketBrokerRulebase_value
	o.PbfRulebase = pbfRulebase_value
	o.QosRulebase = qosRulebase_value
	o.RuleHitCountReset = ruleHitCountReset_value
	o.SdwanRulebase = sdwanRulebase_value
	o.SecurityRulebase = securityRulebase_value
	o.SslDecryptionRulebase = sslDecryptionRulebase_value
	o.TunnelInspectRulebase = tunnelInspectRulebase_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiPrivacyObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiPrivacy, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var showFullIpAddresses_value types.String
	if obj.ShowFullIpAddresses != nil {
		showFullIpAddresses_value = types.StringValue(*obj.ShowFullIpAddresses)
	}
	var showUserNamesInLogsAndReports_value types.String
	if obj.ShowUserNamesInLogsAndReports != nil {
		showUserNamesInLogsAndReports_value = types.StringValue(*obj.ShowUserNamesInLogsAndReports)
	}
	var viewPcapFiles_value types.String
	if obj.ViewPcapFiles != nil {
		viewPcapFiles_value = types.StringValue(*obj.ViewPcapFiles)
	}
	o.ShowFullIpAddresses = showFullIpAddresses_value
	o.ShowUserNamesInLogsAndReports = showUserNamesInLogsAndReports_value
	o.ViewPcapFiles = viewPcapFiles_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceWebuiSaveObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiSave, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var partialSave_value types.String
	if obj.PartialSave != nil {
		partialSave_value = types.StringValue(*obj.PartialSave)
	}
	var saveForOtherAdmins_value types.String
	if obj.SaveForOtherAdmins != nil {
		saveForOtherAdmins_value = types.StringValue(*obj.SaveForOtherAdmins)
	}
	var objectLevelChanges_value types.String
	if obj.ObjectLevelChanges != nil {
		objectLevelChanges_value = types.StringValue(*obj.ObjectLevelChanges)
	}
	o.PartialSave = partialSave_value
	o.SaveForOtherAdmins = saveForOtherAdmins_value
	o.ObjectLevelChanges = objectLevelChanges_value

	return diags
}

func (o *AdminRoleDataSourceRoleDeviceXmlapiObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceXmlapi, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var commit_value types.String
	if obj.Commit != nil {
		commit_value = types.StringValue(*obj.Commit)
	}
	var config_value types.String
	if obj.Config != nil {
		config_value = types.StringValue(*obj.Config)
	}
	var export_value types.String
	if obj.Export != nil {
		export_value = types.StringValue(*obj.Export)
	}
	var import_value types.String
	if obj.Import != nil {
		import_value = types.StringValue(*obj.Import)
	}
	var iot_value types.String
	if obj.Iot != nil {
		iot_value = types.StringValue(*obj.Iot)
	}
	var log_value types.String
	if obj.Log != nil {
		log_value = types.StringValue(*obj.Log)
	}
	var op_value types.String
	if obj.Op != nil {
		op_value = types.StringValue(*obj.Op)
	}
	var report_value types.String
	if obj.Report != nil {
		report_value = types.StringValue(*obj.Report)
	}
	var userId_value types.String
	if obj.UserId != nil {
		userId_value = types.StringValue(*obj.UserId)
	}
	o.Commit = commit_value
	o.Config = config_value
	o.Export = export_value
	o.Import = import_value
	o.Iot = iot_value
	o.Log = log_value
	o.Op = op_value
	o.Report = report_value
	o.UserId = userId_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsys, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var restapi_object *AdminRoleDataSourceRoleVsysRestapiObject
	if obj.Restapi != nil {
		restapi_object = new(AdminRoleDataSourceRoleVsysRestapiObject)

		diags.Append(restapi_object.CopyFromPango(ctx, obj.Restapi, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var webui_object *AdminRoleDataSourceRoleVsysWebuiObject
	if obj.Webui != nil {
		webui_object = new(AdminRoleDataSourceRoleVsysWebuiObject)

		diags.Append(webui_object.CopyFromPango(ctx, obj.Webui, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var xmlapi_object *AdminRoleDataSourceRoleVsysXmlapiObject
	if obj.Xmlapi != nil {
		xmlapi_object = new(AdminRoleDataSourceRoleVsysXmlapiObject)

		diags.Append(xmlapi_object.CopyFromPango(ctx, obj.Xmlapi, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var cli_value types.String
	if obj.Cli != nil {
		cli_value = types.StringValue(*obj.Cli)
	}
	o.Cli = cli_value
	o.Restapi = restapi_object
	o.Webui = webui_object
	o.Xmlapi = xmlapi_object

	return diags
}

func (o *AdminRoleDataSourceRoleVsysRestapiObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysRestapi, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var device_object *AdminRoleDataSourceRoleVsysRestapiDeviceObject
	if obj.Device != nil {
		device_object = new(AdminRoleDataSourceRoleVsysRestapiDeviceObject)

		diags.Append(device_object.CopyFromPango(ctx, obj.Device, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var network_object *AdminRoleDataSourceRoleVsysRestapiNetworkObject
	if obj.Network != nil {
		network_object = new(AdminRoleDataSourceRoleVsysRestapiNetworkObject)

		diags.Append(network_object.CopyFromPango(ctx, obj.Network, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var objects_object *AdminRoleDataSourceRoleVsysRestapiObjectsObject
	if obj.Objects != nil {
		objects_object = new(AdminRoleDataSourceRoleVsysRestapiObjectsObject)

		diags.Append(objects_object.CopyFromPango(ctx, obj.Objects, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var policies_object *AdminRoleDataSourceRoleVsysRestapiPoliciesObject
	if obj.Policies != nil {
		policies_object = new(AdminRoleDataSourceRoleVsysRestapiPoliciesObject)

		diags.Append(policies_object.CopyFromPango(ctx, obj.Policies, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var system_object *AdminRoleDataSourceRoleVsysRestapiSystemObject
	if obj.System != nil {
		system_object = new(AdminRoleDataSourceRoleVsysRestapiSystemObject)

		diags.Append(system_object.CopyFromPango(ctx, obj.System, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Device = device_object
	o.Network = network_object
	o.Objects = objects_object
	o.Policies = policies_object
	o.System = system_object

	return diags
}

func (o *AdminRoleDataSourceRoleVsysRestapiDeviceObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysRestapiDevice, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var emailServerProfiles_value types.String
	if obj.EmailServerProfiles != nil {
		emailServerProfiles_value = types.StringValue(*obj.EmailServerProfiles)
	}
	var httpServerProfiles_value types.String
	if obj.HttpServerProfiles != nil {
		httpServerProfiles_value = types.StringValue(*obj.HttpServerProfiles)
	}
	var ldapServerProfiles_value types.String
	if obj.LdapServerProfiles != nil {
		ldapServerProfiles_value = types.StringValue(*obj.LdapServerProfiles)
	}
	var logInterfaceSetting_value types.String
	if obj.LogInterfaceSetting != nil {
		logInterfaceSetting_value = types.StringValue(*obj.LogInterfaceSetting)
	}
	var snmpTrapServerProfiles_value types.String
	if obj.SnmpTrapServerProfiles != nil {
		snmpTrapServerProfiles_value = types.StringValue(*obj.SnmpTrapServerProfiles)
	}
	var syslogServerProfiles_value types.String
	if obj.SyslogServerProfiles != nil {
		syslogServerProfiles_value = types.StringValue(*obj.SyslogServerProfiles)
	}
	var virtualSystems_value types.String
	if obj.VirtualSystems != nil {
		virtualSystems_value = types.StringValue(*obj.VirtualSystems)
	}
	o.EmailServerProfiles = emailServerProfiles_value
	o.HttpServerProfiles = httpServerProfiles_value
	o.LdapServerProfiles = ldapServerProfiles_value
	o.LogInterfaceSetting = logInterfaceSetting_value
	o.SnmpTrapServerProfiles = snmpTrapServerProfiles_value
	o.SyslogServerProfiles = syslogServerProfiles_value
	o.VirtualSystems = virtualSystems_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysRestapiNetworkObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysRestapiNetwork, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var globalprotectClientlessAppGroups_value types.String
	if obj.GlobalprotectClientlessAppGroups != nil {
		globalprotectClientlessAppGroups_value = types.StringValue(*obj.GlobalprotectClientlessAppGroups)
	}
	var globalprotectClientlessApps_value types.String
	if obj.GlobalprotectClientlessApps != nil {
		globalprotectClientlessApps_value = types.StringValue(*obj.GlobalprotectClientlessApps)
	}
	var globalprotectGateways_value types.String
	if obj.GlobalprotectGateways != nil {
		globalprotectGateways_value = types.StringValue(*obj.GlobalprotectGateways)
	}
	var globalprotectMdmServers_value types.String
	if obj.GlobalprotectMdmServers != nil {
		globalprotectMdmServers_value = types.StringValue(*obj.GlobalprotectMdmServers)
	}
	var globalprotectPortals_value types.String
	if obj.GlobalprotectPortals != nil {
		globalprotectPortals_value = types.StringValue(*obj.GlobalprotectPortals)
	}
	var zones_value types.String
	if obj.Zones != nil {
		zones_value = types.StringValue(*obj.Zones)
	}
	var sdwanInterfaceProfiles_value types.String
	if obj.SdwanInterfaceProfiles != nil {
		sdwanInterfaceProfiles_value = types.StringValue(*obj.SdwanInterfaceProfiles)
	}
	o.GlobalprotectClientlessAppGroups = globalprotectClientlessAppGroups_value
	o.GlobalprotectClientlessApps = globalprotectClientlessApps_value
	o.GlobalprotectGateways = globalprotectGateways_value
	o.GlobalprotectMdmServers = globalprotectMdmServers_value
	o.GlobalprotectPortals = globalprotectPortals_value
	o.Zones = zones_value
	o.SdwanInterfaceProfiles = sdwanInterfaceProfiles_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysRestapiObjectsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysRestapiObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var addressGroups_value types.String
	if obj.AddressGroups != nil {
		addressGroups_value = types.StringValue(*obj.AddressGroups)
	}
	var addresses_value types.String
	if obj.Addresses != nil {
		addresses_value = types.StringValue(*obj.Addresses)
	}
	var antiSpywareSecurityProfiles_value types.String
	if obj.AntiSpywareSecurityProfiles != nil {
		antiSpywareSecurityProfiles_value = types.StringValue(*obj.AntiSpywareSecurityProfiles)
	}
	var antivirusSecurityProfiles_value types.String
	if obj.AntivirusSecurityProfiles != nil {
		antivirusSecurityProfiles_value = types.StringValue(*obj.AntivirusSecurityProfiles)
	}
	var applicationFilters_value types.String
	if obj.ApplicationFilters != nil {
		applicationFilters_value = types.StringValue(*obj.ApplicationFilters)
	}
	var applicationGroups_value types.String
	if obj.ApplicationGroups != nil {
		applicationGroups_value = types.StringValue(*obj.ApplicationGroups)
	}
	var applications_value types.String
	if obj.Applications != nil {
		applications_value = types.StringValue(*obj.Applications)
	}
	var authenticationEnforcements_value types.String
	if obj.AuthenticationEnforcements != nil {
		authenticationEnforcements_value = types.StringValue(*obj.AuthenticationEnforcements)
	}
	var customDataPatterns_value types.String
	if obj.CustomDataPatterns != nil {
		customDataPatterns_value = types.StringValue(*obj.CustomDataPatterns)
	}
	var customSpywareSignatures_value types.String
	if obj.CustomSpywareSignatures != nil {
		customSpywareSignatures_value = types.StringValue(*obj.CustomSpywareSignatures)
	}
	var customUrlCategories_value types.String
	if obj.CustomUrlCategories != nil {
		customUrlCategories_value = types.StringValue(*obj.CustomUrlCategories)
	}
	var customVulnerabilitySignatures_value types.String
	if obj.CustomVulnerabilitySignatures != nil {
		customVulnerabilitySignatures_value = types.StringValue(*obj.CustomVulnerabilitySignatures)
	}
	var dataFilteringSecurityProfiles_value types.String
	if obj.DataFilteringSecurityProfiles != nil {
		dataFilteringSecurityProfiles_value = types.StringValue(*obj.DataFilteringSecurityProfiles)
	}
	var decryptionProfiles_value types.String
	if obj.DecryptionProfiles != nil {
		decryptionProfiles_value = types.StringValue(*obj.DecryptionProfiles)
	}
	var devices_value types.String
	if obj.Devices != nil {
		devices_value = types.StringValue(*obj.Devices)
	}
	var dosProtectionSecurityProfiles_value types.String
	if obj.DosProtectionSecurityProfiles != nil {
		dosProtectionSecurityProfiles_value = types.StringValue(*obj.DosProtectionSecurityProfiles)
	}
	var dynamicUserGroups_value types.String
	if obj.DynamicUserGroups != nil {
		dynamicUserGroups_value = types.StringValue(*obj.DynamicUserGroups)
	}
	var externalDynamicLists_value types.String
	if obj.ExternalDynamicLists != nil {
		externalDynamicLists_value = types.StringValue(*obj.ExternalDynamicLists)
	}
	var fileBlockingSecurityProfiles_value types.String
	if obj.FileBlockingSecurityProfiles != nil {
		fileBlockingSecurityProfiles_value = types.StringValue(*obj.FileBlockingSecurityProfiles)
	}
	var globalprotectHipObjects_value types.String
	if obj.GlobalprotectHipObjects != nil {
		globalprotectHipObjects_value = types.StringValue(*obj.GlobalprotectHipObjects)
	}
	var globalprotectHipProfiles_value types.String
	if obj.GlobalprotectHipProfiles != nil {
		globalprotectHipProfiles_value = types.StringValue(*obj.GlobalprotectHipProfiles)
	}
	var gtpProtectionSecurityProfiles_value types.String
	if obj.GtpProtectionSecurityProfiles != nil {
		gtpProtectionSecurityProfiles_value = types.StringValue(*obj.GtpProtectionSecurityProfiles)
	}
	var logForwardingProfiles_value types.String
	if obj.LogForwardingProfiles != nil {
		logForwardingProfiles_value = types.StringValue(*obj.LogForwardingProfiles)
	}
	var packetBrokerProfiles_value types.String
	if obj.PacketBrokerProfiles != nil {
		packetBrokerProfiles_value = types.StringValue(*obj.PacketBrokerProfiles)
	}
	var regions_value types.String
	if obj.Regions != nil {
		regions_value = types.StringValue(*obj.Regions)
	}
	var schedules_value types.String
	if obj.Schedules != nil {
		schedules_value = types.StringValue(*obj.Schedules)
	}
	var sctpProtectionSecurityProfiles_value types.String
	if obj.SctpProtectionSecurityProfiles != nil {
		sctpProtectionSecurityProfiles_value = types.StringValue(*obj.SctpProtectionSecurityProfiles)
	}
	var sdwanErrorCorrectionProfiles_value types.String
	if obj.SdwanErrorCorrectionProfiles != nil {
		sdwanErrorCorrectionProfiles_value = types.StringValue(*obj.SdwanErrorCorrectionProfiles)
	}
	var sdwanPathQualityProfiles_value types.String
	if obj.SdwanPathQualityProfiles != nil {
		sdwanPathQualityProfiles_value = types.StringValue(*obj.SdwanPathQualityProfiles)
	}
	var sdwanSaasQualityProfiles_value types.String
	if obj.SdwanSaasQualityProfiles != nil {
		sdwanSaasQualityProfiles_value = types.StringValue(*obj.SdwanSaasQualityProfiles)
	}
	var sdwanTrafficDistributionProfiles_value types.String
	if obj.SdwanTrafficDistributionProfiles != nil {
		sdwanTrafficDistributionProfiles_value = types.StringValue(*obj.SdwanTrafficDistributionProfiles)
	}
	var securityProfileGroups_value types.String
	if obj.SecurityProfileGroups != nil {
		securityProfileGroups_value = types.StringValue(*obj.SecurityProfileGroups)
	}
	var serviceGroups_value types.String
	if obj.ServiceGroups != nil {
		serviceGroups_value = types.StringValue(*obj.ServiceGroups)
	}
	var services_value types.String
	if obj.Services != nil {
		services_value = types.StringValue(*obj.Services)
	}
	var tags_value types.String
	if obj.Tags != nil {
		tags_value = types.StringValue(*obj.Tags)
	}
	var urlFilteringSecurityProfiles_value types.String
	if obj.UrlFilteringSecurityProfiles != nil {
		urlFilteringSecurityProfiles_value = types.StringValue(*obj.UrlFilteringSecurityProfiles)
	}
	var vulnerabilityProtectionSecurityProfiles_value types.String
	if obj.VulnerabilityProtectionSecurityProfiles != nil {
		vulnerabilityProtectionSecurityProfiles_value = types.StringValue(*obj.VulnerabilityProtectionSecurityProfiles)
	}
	var wildfireAnalysisSecurityProfiles_value types.String
	if obj.WildfireAnalysisSecurityProfiles != nil {
		wildfireAnalysisSecurityProfiles_value = types.StringValue(*obj.WildfireAnalysisSecurityProfiles)
	}
	o.AddressGroups = addressGroups_value
	o.Addresses = addresses_value
	o.AntiSpywareSecurityProfiles = antiSpywareSecurityProfiles_value
	o.AntivirusSecurityProfiles = antivirusSecurityProfiles_value
	o.ApplicationFilters = applicationFilters_value
	o.ApplicationGroups = applicationGroups_value
	o.Applications = applications_value
	o.AuthenticationEnforcements = authenticationEnforcements_value
	o.CustomDataPatterns = customDataPatterns_value
	o.CustomSpywareSignatures = customSpywareSignatures_value
	o.CustomUrlCategories = customUrlCategories_value
	o.CustomVulnerabilitySignatures = customVulnerabilitySignatures_value
	o.DataFilteringSecurityProfiles = dataFilteringSecurityProfiles_value
	o.DecryptionProfiles = decryptionProfiles_value
	o.Devices = devices_value
	o.DosProtectionSecurityProfiles = dosProtectionSecurityProfiles_value
	o.DynamicUserGroups = dynamicUserGroups_value
	o.ExternalDynamicLists = externalDynamicLists_value
	o.FileBlockingSecurityProfiles = fileBlockingSecurityProfiles_value
	o.GlobalprotectHipObjects = globalprotectHipObjects_value
	o.GlobalprotectHipProfiles = globalprotectHipProfiles_value
	o.GtpProtectionSecurityProfiles = gtpProtectionSecurityProfiles_value
	o.LogForwardingProfiles = logForwardingProfiles_value
	o.PacketBrokerProfiles = packetBrokerProfiles_value
	o.Regions = regions_value
	o.Schedules = schedules_value
	o.SctpProtectionSecurityProfiles = sctpProtectionSecurityProfiles_value
	o.SdwanErrorCorrectionProfiles = sdwanErrorCorrectionProfiles_value
	o.SdwanPathQualityProfiles = sdwanPathQualityProfiles_value
	o.SdwanSaasQualityProfiles = sdwanSaasQualityProfiles_value
	o.SdwanTrafficDistributionProfiles = sdwanTrafficDistributionProfiles_value
	o.SecurityProfileGroups = securityProfileGroups_value
	o.ServiceGroups = serviceGroups_value
	o.Services = services_value
	o.Tags = tags_value
	o.UrlFilteringSecurityProfiles = urlFilteringSecurityProfiles_value
	o.VulnerabilityProtectionSecurityProfiles = vulnerabilityProtectionSecurityProfiles_value
	o.WildfireAnalysisSecurityProfiles = wildfireAnalysisSecurityProfiles_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysRestapiPoliciesObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysRestapiPolicies, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var applicationOverrideRules_value types.String
	if obj.ApplicationOverrideRules != nil {
		applicationOverrideRules_value = types.StringValue(*obj.ApplicationOverrideRules)
	}
	var authenticationRules_value types.String
	if obj.AuthenticationRules != nil {
		authenticationRules_value = types.StringValue(*obj.AuthenticationRules)
	}
	var decryptionRules_value types.String
	if obj.DecryptionRules != nil {
		decryptionRules_value = types.StringValue(*obj.DecryptionRules)
	}
	var dosRules_value types.String
	if obj.DosRules != nil {
		dosRules_value = types.StringValue(*obj.DosRules)
	}
	var natRules_value types.String
	if obj.NatRules != nil {
		natRules_value = types.StringValue(*obj.NatRules)
	}
	var networkPacketBrokerRules_value types.String
	if obj.NetworkPacketBrokerRules != nil {
		networkPacketBrokerRules_value = types.StringValue(*obj.NetworkPacketBrokerRules)
	}
	var policyBasedForwardingRules_value types.String
	if obj.PolicyBasedForwardingRules != nil {
		policyBasedForwardingRules_value = types.StringValue(*obj.PolicyBasedForwardingRules)
	}
	var qosRules_value types.String
	if obj.QosRules != nil {
		qosRules_value = types.StringValue(*obj.QosRules)
	}
	var sdwanRules_value types.String
	if obj.SdwanRules != nil {
		sdwanRules_value = types.StringValue(*obj.SdwanRules)
	}
	var securityRules_value types.String
	if obj.SecurityRules != nil {
		securityRules_value = types.StringValue(*obj.SecurityRules)
	}
	var tunnelInspectionRules_value types.String
	if obj.TunnelInspectionRules != nil {
		tunnelInspectionRules_value = types.StringValue(*obj.TunnelInspectionRules)
	}
	o.ApplicationOverrideRules = applicationOverrideRules_value
	o.AuthenticationRules = authenticationRules_value
	o.DecryptionRules = decryptionRules_value
	o.DosRules = dosRules_value
	o.NatRules = natRules_value
	o.NetworkPacketBrokerRules = networkPacketBrokerRules_value
	o.PolicyBasedForwardingRules = policyBasedForwardingRules_value
	o.QosRules = qosRules_value
	o.SdwanRules = sdwanRules_value
	o.SecurityRules = securityRules_value
	o.TunnelInspectionRules = tunnelInspectionRules_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysRestapiSystemObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysRestapiSystem, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var configuration_value types.String
	if obj.Configuration != nil {
		configuration_value = types.StringValue(*obj.Configuration)
	}
	o.Configuration = configuration_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebui, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var commit_object *AdminRoleDataSourceRoleVsysWebuiCommitObject
	if obj.Commit != nil {
		commit_object = new(AdminRoleDataSourceRoleVsysWebuiCommitObject)

		diags.Append(commit_object.CopyFromPango(ctx, obj.Commit, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var device_object *AdminRoleDataSourceRoleVsysWebuiDeviceObject
	if obj.Device != nil {
		device_object = new(AdminRoleDataSourceRoleVsysWebuiDeviceObject)

		diags.Append(device_object.CopyFromPango(ctx, obj.Device, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var monitor_object *AdminRoleDataSourceRoleVsysWebuiMonitorObject
	if obj.Monitor != nil {
		monitor_object = new(AdminRoleDataSourceRoleVsysWebuiMonitorObject)

		diags.Append(monitor_object.CopyFromPango(ctx, obj.Monitor, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var network_object *AdminRoleDataSourceRoleVsysWebuiNetworkObject
	if obj.Network != nil {
		network_object = new(AdminRoleDataSourceRoleVsysWebuiNetworkObject)

		diags.Append(network_object.CopyFromPango(ctx, obj.Network, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var objects_object *AdminRoleDataSourceRoleVsysWebuiObjectsObject
	if obj.Objects != nil {
		objects_object = new(AdminRoleDataSourceRoleVsysWebuiObjectsObject)

		diags.Append(objects_object.CopyFromPango(ctx, obj.Objects, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var operations_object *AdminRoleDataSourceRoleVsysWebuiOperationsObject
	if obj.Operations != nil {
		operations_object = new(AdminRoleDataSourceRoleVsysWebuiOperationsObject)

		diags.Append(operations_object.CopyFromPango(ctx, obj.Operations, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var policies_object *AdminRoleDataSourceRoleVsysWebuiPoliciesObject
	if obj.Policies != nil {
		policies_object = new(AdminRoleDataSourceRoleVsysWebuiPoliciesObject)

		diags.Append(policies_object.CopyFromPango(ctx, obj.Policies, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var privacy_object *AdminRoleDataSourceRoleVsysWebuiPrivacyObject
	if obj.Privacy != nil {
		privacy_object = new(AdminRoleDataSourceRoleVsysWebuiPrivacyObject)

		diags.Append(privacy_object.CopyFromPango(ctx, obj.Privacy, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var save_object *AdminRoleDataSourceRoleVsysWebuiSaveObject
	if obj.Save != nil {
		save_object = new(AdminRoleDataSourceRoleVsysWebuiSaveObject)

		diags.Append(save_object.CopyFromPango(ctx, obj.Save, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var acc_value types.String
	if obj.Acc != nil {
		acc_value = types.StringValue(*obj.Acc)
	}
	var dashboard_value types.String
	if obj.Dashboard != nil {
		dashboard_value = types.StringValue(*obj.Dashboard)
	}
	var tasks_value types.String
	if obj.Tasks != nil {
		tasks_value = types.StringValue(*obj.Tasks)
	}
	var validate_value types.String
	if obj.Validate != nil {
		validate_value = types.StringValue(*obj.Validate)
	}
	o.Acc = acc_value
	o.Commit = commit_object
	o.Dashboard = dashboard_value
	o.Device = device_object
	o.Monitor = monitor_object
	o.Network = network_object
	o.Objects = objects_object
	o.Operations = operations_object
	o.Policies = policies_object
	o.Privacy = privacy_object
	o.Save = save_object
	o.Tasks = tasks_value
	o.Validate = validate_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiCommitObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiCommit, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var commitForOtherAdmins_value types.String
	if obj.CommitForOtherAdmins != nil {
		commitForOtherAdmins_value = types.StringValue(*obj.CommitForOtherAdmins)
	}
	var virtualSystems_value types.String
	if obj.VirtualSystems != nil {
		virtualSystems_value = types.StringValue(*obj.VirtualSystems)
	}
	o.CommitForOtherAdmins = commitForOtherAdmins_value
	o.VirtualSystems = virtualSystems_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiDeviceObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiDevice, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var certificateManagement_object *AdminRoleDataSourceRoleVsysWebuiDeviceCertificateManagementObject
	if obj.CertificateManagement != nil {
		certificateManagement_object = new(AdminRoleDataSourceRoleVsysWebuiDeviceCertificateManagementObject)

		diags.Append(certificateManagement_object.CopyFromPango(ctx, obj.CertificateManagement, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var localUserDatabase_object *AdminRoleDataSourceRoleVsysWebuiDeviceLocalUserDatabaseObject
	if obj.LocalUserDatabase != nil {
		localUserDatabase_object = new(AdminRoleDataSourceRoleVsysWebuiDeviceLocalUserDatabaseObject)

		diags.Append(localUserDatabase_object.CopyFromPango(ctx, obj.LocalUserDatabase, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var logSettings_object *AdminRoleDataSourceRoleVsysWebuiDeviceLogSettingsObject
	if obj.LogSettings != nil {
		logSettings_object = new(AdminRoleDataSourceRoleVsysWebuiDeviceLogSettingsObject)

		diags.Append(logSettings_object.CopyFromPango(ctx, obj.LogSettings, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var policyRecommendations_object *AdminRoleDataSourceRoleVsysWebuiDevicePolicyRecommendationsObject
	if obj.PolicyRecommendations != nil {
		policyRecommendations_object = new(AdminRoleDataSourceRoleVsysWebuiDevicePolicyRecommendationsObject)

		diags.Append(policyRecommendations_object.CopyFromPango(ctx, obj.PolicyRecommendations, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var serverProfile_object *AdminRoleDataSourceRoleVsysWebuiDeviceServerProfileObject
	if obj.ServerProfile != nil {
		serverProfile_object = new(AdminRoleDataSourceRoleVsysWebuiDeviceServerProfileObject)

		diags.Append(serverProfile_object.CopyFromPango(ctx, obj.ServerProfile, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var setup_object *AdminRoleDataSourceRoleVsysWebuiDeviceSetupObject
	if obj.Setup != nil {
		setup_object = new(AdminRoleDataSourceRoleVsysWebuiDeviceSetupObject)

		diags.Append(setup_object.CopyFromPango(ctx, obj.Setup, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var administrators_value types.String
	if obj.Administrators != nil {
		administrators_value = types.StringValue(*obj.Administrators)
	}
	var authenticationProfile_value types.String
	if obj.AuthenticationProfile != nil {
		authenticationProfile_value = types.StringValue(*obj.AuthenticationProfile)
	}
	var authenticationSequence_value types.String
	if obj.AuthenticationSequence != nil {
		authenticationSequence_value = types.StringValue(*obj.AuthenticationSequence)
	}
	var blockPages_value types.String
	if obj.BlockPages != nil {
		blockPages_value = types.StringValue(*obj.BlockPages)
	}
	var dataRedistribution_value types.String
	if obj.DataRedistribution != nil {
		dataRedistribution_value = types.StringValue(*obj.DataRedistribution)
	}
	var deviceQuarantine_value types.String
	if obj.DeviceQuarantine != nil {
		deviceQuarantine_value = types.StringValue(*obj.DeviceQuarantine)
	}
	var troubleshooting_value types.String
	if obj.Troubleshooting != nil {
		troubleshooting_value = types.StringValue(*obj.Troubleshooting)
	}
	var userIdentification_value types.String
	if obj.UserIdentification != nil {
		userIdentification_value = types.StringValue(*obj.UserIdentification)
	}
	var vmInfoSource_value types.String
	if obj.VmInfoSource != nil {
		vmInfoSource_value = types.StringValue(*obj.VmInfoSource)
	}
	var dhcpSyslogServer_value types.String
	if obj.DhcpSyslogServer != nil {
		dhcpSyslogServer_value = types.StringValue(*obj.DhcpSyslogServer)
	}
	o.Administrators = administrators_value
	o.AuthenticationProfile = authenticationProfile_value
	o.AuthenticationSequence = authenticationSequence_value
	o.BlockPages = blockPages_value
	o.CertificateManagement = certificateManagement_object
	o.DataRedistribution = dataRedistribution_value
	o.DeviceQuarantine = deviceQuarantine_value
	o.LocalUserDatabase = localUserDatabase_object
	o.LogSettings = logSettings_object
	o.PolicyRecommendations = policyRecommendations_object
	o.ServerProfile = serverProfile_object
	o.Setup = setup_object
	o.Troubleshooting = troubleshooting_value
	o.UserIdentification = userIdentification_value
	o.VmInfoSource = vmInfoSource_value
	o.DhcpSyslogServer = dhcpSyslogServer_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiDeviceCertificateManagementObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiDeviceCertificateManagement, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var certificateProfile_value types.String
	if obj.CertificateProfile != nil {
		certificateProfile_value = types.StringValue(*obj.CertificateProfile)
	}
	var certificates_value types.String
	if obj.Certificates != nil {
		certificates_value = types.StringValue(*obj.Certificates)
	}
	var ocspResponder_value types.String
	if obj.OcspResponder != nil {
		ocspResponder_value = types.StringValue(*obj.OcspResponder)
	}
	var scep_value types.String
	if obj.Scep != nil {
		scep_value = types.StringValue(*obj.Scep)
	}
	var sshServiceProfile_value types.String
	if obj.SshServiceProfile != nil {
		sshServiceProfile_value = types.StringValue(*obj.SshServiceProfile)
	}
	var sslDecryptionExclusion_value types.String
	if obj.SslDecryptionExclusion != nil {
		sslDecryptionExclusion_value = types.StringValue(*obj.SslDecryptionExclusion)
	}
	var sslTlsServiceProfile_value types.String
	if obj.SslTlsServiceProfile != nil {
		sslTlsServiceProfile_value = types.StringValue(*obj.SslTlsServiceProfile)
	}
	o.CertificateProfile = certificateProfile_value
	o.Certificates = certificates_value
	o.OcspResponder = ocspResponder_value
	o.Scep = scep_value
	o.SshServiceProfile = sshServiceProfile_value
	o.SslDecryptionExclusion = sslDecryptionExclusion_value
	o.SslTlsServiceProfile = sslTlsServiceProfile_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiDeviceLocalUserDatabaseObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiDeviceLocalUserDatabase, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var userGroups_value types.String
	if obj.UserGroups != nil {
		userGroups_value = types.StringValue(*obj.UserGroups)
	}
	var users_value types.String
	if obj.Users != nil {
		users_value = types.StringValue(*obj.Users)
	}
	o.UserGroups = userGroups_value
	o.Users = users_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiDeviceLogSettingsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiDeviceLogSettings, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var config_value types.String
	if obj.Config != nil {
		config_value = types.StringValue(*obj.Config)
	}
	var correlation_value types.String
	if obj.Correlation != nil {
		correlation_value = types.StringValue(*obj.Correlation)
	}
	var globalprotect_value types.String
	if obj.Globalprotect != nil {
		globalprotect_value = types.StringValue(*obj.Globalprotect)
	}
	var hipmatch_value types.String
	if obj.Hipmatch != nil {
		hipmatch_value = types.StringValue(*obj.Hipmatch)
	}
	var iptag_value types.String
	if obj.Iptag != nil {
		iptag_value = types.StringValue(*obj.Iptag)
	}
	var system_value types.String
	if obj.System != nil {
		system_value = types.StringValue(*obj.System)
	}
	var userId_value types.String
	if obj.UserId != nil {
		userId_value = types.StringValue(*obj.UserId)
	}
	o.Config = config_value
	o.Correlation = correlation_value
	o.Globalprotect = globalprotect_value
	o.Hipmatch = hipmatch_value
	o.Iptag = iptag_value
	o.System = system_value
	o.UserId = userId_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiDevicePolicyRecommendationsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiDevicePolicyRecommendations, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var iot_value types.String
	if obj.Iot != nil {
		iot_value = types.StringValue(*obj.Iot)
	}
	var saas_value types.String
	if obj.Saas != nil {
		saas_value = types.StringValue(*obj.Saas)
	}
	o.Iot = iot_value
	o.Saas = saas_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiDeviceServerProfileObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiDeviceServerProfile, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var dns_value types.String
	if obj.Dns != nil {
		dns_value = types.StringValue(*obj.Dns)
	}
	var email_value types.String
	if obj.Email != nil {
		email_value = types.StringValue(*obj.Email)
	}
	var http_value types.String
	if obj.Http != nil {
		http_value = types.StringValue(*obj.Http)
	}
	var kerberos_value types.String
	if obj.Kerberos != nil {
		kerberos_value = types.StringValue(*obj.Kerberos)
	}
	var ldap_value types.String
	if obj.Ldap != nil {
		ldap_value = types.StringValue(*obj.Ldap)
	}
	var mfa_value types.String
	if obj.Mfa != nil {
		mfa_value = types.StringValue(*obj.Mfa)
	}
	var netflow_value types.String
	if obj.Netflow != nil {
		netflow_value = types.StringValue(*obj.Netflow)
	}
	var radius_value types.String
	if obj.Radius != nil {
		radius_value = types.StringValue(*obj.Radius)
	}
	var samlIdp_value types.String
	if obj.SamlIdp != nil {
		samlIdp_value = types.StringValue(*obj.SamlIdp)
	}
	var scp_value types.String
	if obj.Scp != nil {
		scp_value = types.StringValue(*obj.Scp)
	}
	var snmpTrap_value types.String
	if obj.SnmpTrap != nil {
		snmpTrap_value = types.StringValue(*obj.SnmpTrap)
	}
	var syslog_value types.String
	if obj.Syslog != nil {
		syslog_value = types.StringValue(*obj.Syslog)
	}
	var tacplus_value types.String
	if obj.Tacplus != nil {
		tacplus_value = types.StringValue(*obj.Tacplus)
	}
	o.Dns = dns_value
	o.Email = email_value
	o.Http = http_value
	o.Kerberos = kerberos_value
	o.Ldap = ldap_value
	o.Mfa = mfa_value
	o.Netflow = netflow_value
	o.Radius = radius_value
	o.SamlIdp = samlIdp_value
	o.Scp = scp_value
	o.SnmpTrap = snmpTrap_value
	o.Syslog = syslog_value
	o.Tacplus = tacplus_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiDeviceSetupObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiDeviceSetup, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var contentId_value types.String
	if obj.ContentId != nil {
		contentId_value = types.StringValue(*obj.ContentId)
	}
	var hsm_value types.String
	if obj.Hsm != nil {
		hsm_value = types.StringValue(*obj.Hsm)
	}
	var interfaces_value types.String
	if obj.Interfaces != nil {
		interfaces_value = types.StringValue(*obj.Interfaces)
	}
	var management_value types.String
	if obj.Management != nil {
		management_value = types.StringValue(*obj.Management)
	}
	var operations_value types.String
	if obj.Operations != nil {
		operations_value = types.StringValue(*obj.Operations)
	}
	var services_value types.String
	if obj.Services != nil {
		services_value = types.StringValue(*obj.Services)
	}
	var session_value types.String
	if obj.Session != nil {
		session_value = types.StringValue(*obj.Session)
	}
	var telemetry_value types.String
	if obj.Telemetry != nil {
		telemetry_value = types.StringValue(*obj.Telemetry)
	}
	var wildfire_value types.String
	if obj.Wildfire != nil {
		wildfire_value = types.StringValue(*obj.Wildfire)
	}
	o.ContentId = contentId_value
	o.Hsm = hsm_value
	o.Interfaces = interfaces_value
	o.Management = management_value
	o.Operations = operations_value
	o.Services = services_value
	o.Session = session_value
	o.Telemetry = telemetry_value
	o.Wildfire = wildfire_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiMonitorObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiMonitor, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var automatedCorrelationEngine_object *AdminRoleDataSourceRoleVsysWebuiMonitorAutomatedCorrelationEngineObject
	if obj.AutomatedCorrelationEngine != nil {
		automatedCorrelationEngine_object = new(AdminRoleDataSourceRoleVsysWebuiMonitorAutomatedCorrelationEngineObject)

		diags.Append(automatedCorrelationEngine_object.CopyFromPango(ctx, obj.AutomatedCorrelationEngine, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var customReports_object *AdminRoleDataSourceRoleVsysWebuiMonitorCustomReportsObject
	if obj.CustomReports != nil {
		customReports_object = new(AdminRoleDataSourceRoleVsysWebuiMonitorCustomReportsObject)

		diags.Append(customReports_object.CopyFromPango(ctx, obj.CustomReports, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var logs_object *AdminRoleDataSourceRoleVsysWebuiMonitorLogsObject
	if obj.Logs != nil {
		logs_object = new(AdminRoleDataSourceRoleVsysWebuiMonitorLogsObject)

		diags.Append(logs_object.CopyFromPango(ctx, obj.Logs, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var pdfReports_object *AdminRoleDataSourceRoleVsysWebuiMonitorPdfReportsObject
	if obj.PdfReports != nil {
		pdfReports_object = new(AdminRoleDataSourceRoleVsysWebuiMonitorPdfReportsObject)

		diags.Append(pdfReports_object.CopyFromPango(ctx, obj.PdfReports, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var appScope_value types.String
	if obj.AppScope != nil {
		appScope_value = types.StringValue(*obj.AppScope)
	}
	var blockIpList_value types.String
	if obj.BlockIpList != nil {
		blockIpList_value = types.StringValue(*obj.BlockIpList)
	}
	var externalLogs_value types.String
	if obj.ExternalLogs != nil {
		externalLogs_value = types.StringValue(*obj.ExternalLogs)
	}
	var sessionBrowser_value types.String
	if obj.SessionBrowser != nil {
		sessionBrowser_value = types.StringValue(*obj.SessionBrowser)
	}
	var viewCustomReports_value types.String
	if obj.ViewCustomReports != nil {
		viewCustomReports_value = types.StringValue(*obj.ViewCustomReports)
	}
	o.AppScope = appScope_value
	o.AutomatedCorrelationEngine = automatedCorrelationEngine_object
	o.BlockIpList = blockIpList_value
	o.CustomReports = customReports_object
	o.ExternalLogs = externalLogs_value
	o.Logs = logs_object
	o.PdfReports = pdfReports_object
	o.SessionBrowser = sessionBrowser_value
	o.ViewCustomReports = viewCustomReports_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiMonitorAutomatedCorrelationEngineObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiMonitorAutomatedCorrelationEngine, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var correlatedEvents_value types.String
	if obj.CorrelatedEvents != nil {
		correlatedEvents_value = types.StringValue(*obj.CorrelatedEvents)
	}
	var correlationObjects_value types.String
	if obj.CorrelationObjects != nil {
		correlationObjects_value = types.StringValue(*obj.CorrelationObjects)
	}
	o.CorrelatedEvents = correlatedEvents_value
	o.CorrelationObjects = correlationObjects_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiMonitorCustomReportsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiMonitorCustomReports, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var applicationStatistics_value types.String
	if obj.ApplicationStatistics != nil {
		applicationStatistics_value = types.StringValue(*obj.ApplicationStatistics)
	}
	var auth_value types.String
	if obj.Auth != nil {
		auth_value = types.StringValue(*obj.Auth)
	}
	var dataFilteringLog_value types.String
	if obj.DataFilteringLog != nil {
		dataFilteringLog_value = types.StringValue(*obj.DataFilteringLog)
	}
	var decryptionLog_value types.String
	if obj.DecryptionLog != nil {
		decryptionLog_value = types.StringValue(*obj.DecryptionLog)
	}
	var decryptionSummary_value types.String
	if obj.DecryptionSummary != nil {
		decryptionSummary_value = types.StringValue(*obj.DecryptionSummary)
	}
	var globalprotect_value types.String
	if obj.Globalprotect != nil {
		globalprotect_value = types.StringValue(*obj.Globalprotect)
	}
	var gtpLog_value types.String
	if obj.GtpLog != nil {
		gtpLog_value = types.StringValue(*obj.GtpLog)
	}
	var gtpSummary_value types.String
	if obj.GtpSummary != nil {
		gtpSummary_value = types.StringValue(*obj.GtpSummary)
	}
	var hipmatch_value types.String
	if obj.Hipmatch != nil {
		hipmatch_value = types.StringValue(*obj.Hipmatch)
	}
	var iptag_value types.String
	if obj.Iptag != nil {
		iptag_value = types.StringValue(*obj.Iptag)
	}
	var sctpLog_value types.String
	if obj.SctpLog != nil {
		sctpLog_value = types.StringValue(*obj.SctpLog)
	}
	var sctpSummary_value types.String
	if obj.SctpSummary != nil {
		sctpSummary_value = types.StringValue(*obj.SctpSummary)
	}
	var threatLog_value types.String
	if obj.ThreatLog != nil {
		threatLog_value = types.StringValue(*obj.ThreatLog)
	}
	var threatSummary_value types.String
	if obj.ThreatSummary != nil {
		threatSummary_value = types.StringValue(*obj.ThreatSummary)
	}
	var trafficLog_value types.String
	if obj.TrafficLog != nil {
		trafficLog_value = types.StringValue(*obj.TrafficLog)
	}
	var trafficSummary_value types.String
	if obj.TrafficSummary != nil {
		trafficSummary_value = types.StringValue(*obj.TrafficSummary)
	}
	var tunnelLog_value types.String
	if obj.TunnelLog != nil {
		tunnelLog_value = types.StringValue(*obj.TunnelLog)
	}
	var tunnelSummary_value types.String
	if obj.TunnelSummary != nil {
		tunnelSummary_value = types.StringValue(*obj.TunnelSummary)
	}
	var urlLog_value types.String
	if obj.UrlLog != nil {
		urlLog_value = types.StringValue(*obj.UrlLog)
	}
	var urlSummary_value types.String
	if obj.UrlSummary != nil {
		urlSummary_value = types.StringValue(*obj.UrlSummary)
	}
	var userid_value types.String
	if obj.Userid != nil {
		userid_value = types.StringValue(*obj.Userid)
	}
	var wildfireLog_value types.String
	if obj.WildfireLog != nil {
		wildfireLog_value = types.StringValue(*obj.WildfireLog)
	}
	o.ApplicationStatistics = applicationStatistics_value
	o.Auth = auth_value
	o.DataFilteringLog = dataFilteringLog_value
	o.DecryptionLog = decryptionLog_value
	o.DecryptionSummary = decryptionSummary_value
	o.Globalprotect = globalprotect_value
	o.GtpLog = gtpLog_value
	o.GtpSummary = gtpSummary_value
	o.Hipmatch = hipmatch_value
	o.Iptag = iptag_value
	o.SctpLog = sctpLog_value
	o.SctpSummary = sctpSummary_value
	o.ThreatLog = threatLog_value
	o.ThreatSummary = threatSummary_value
	o.TrafficLog = trafficLog_value
	o.TrafficSummary = trafficSummary_value
	o.TunnelLog = tunnelLog_value
	o.TunnelSummary = tunnelSummary_value
	o.UrlLog = urlLog_value
	o.UrlSummary = urlSummary_value
	o.Userid = userid_value
	o.WildfireLog = wildfireLog_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiMonitorLogsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiMonitorLogs, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var authentication_value types.String
	if obj.Authentication != nil {
		authentication_value = types.StringValue(*obj.Authentication)
	}
	var dataFiltering_value types.String
	if obj.DataFiltering != nil {
		dataFiltering_value = types.StringValue(*obj.DataFiltering)
	}
	var decryption_value types.String
	if obj.Decryption != nil {
		decryption_value = types.StringValue(*obj.Decryption)
	}
	var globalprotect_value types.String
	if obj.Globalprotect != nil {
		globalprotect_value = types.StringValue(*obj.Globalprotect)
	}
	var gtp_value types.String
	if obj.Gtp != nil {
		gtp_value = types.StringValue(*obj.Gtp)
	}
	var hipmatch_value types.String
	if obj.Hipmatch != nil {
		hipmatch_value = types.StringValue(*obj.Hipmatch)
	}
	var iptag_value types.String
	if obj.Iptag != nil {
		iptag_value = types.StringValue(*obj.Iptag)
	}
	var sctp_value types.String
	if obj.Sctp != nil {
		sctp_value = types.StringValue(*obj.Sctp)
	}
	var threat_value types.String
	if obj.Threat != nil {
		threat_value = types.StringValue(*obj.Threat)
	}
	var traffic_value types.String
	if obj.Traffic != nil {
		traffic_value = types.StringValue(*obj.Traffic)
	}
	var tunnel_value types.String
	if obj.Tunnel != nil {
		tunnel_value = types.StringValue(*obj.Tunnel)
	}
	var url_value types.String
	if obj.Url != nil {
		url_value = types.StringValue(*obj.Url)
	}
	var userid_value types.String
	if obj.Userid != nil {
		userid_value = types.StringValue(*obj.Userid)
	}
	var wildfire_value types.String
	if obj.Wildfire != nil {
		wildfire_value = types.StringValue(*obj.Wildfire)
	}
	o.Authentication = authentication_value
	o.DataFiltering = dataFiltering_value
	o.Decryption = decryption_value
	o.Globalprotect = globalprotect_value
	o.Gtp = gtp_value
	o.Hipmatch = hipmatch_value
	o.Iptag = iptag_value
	o.Sctp = sctp_value
	o.Threat = threat_value
	o.Traffic = traffic_value
	o.Tunnel = tunnel_value
	o.Url = url_value
	o.Userid = userid_value
	o.Wildfire = wildfire_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiMonitorPdfReportsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiMonitorPdfReports, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var emailScheduler_value types.String
	if obj.EmailScheduler != nil {
		emailScheduler_value = types.StringValue(*obj.EmailScheduler)
	}
	var managePdfSummary_value types.String
	if obj.ManagePdfSummary != nil {
		managePdfSummary_value = types.StringValue(*obj.ManagePdfSummary)
	}
	var pdfSummaryReports_value types.String
	if obj.PdfSummaryReports != nil {
		pdfSummaryReports_value = types.StringValue(*obj.PdfSummaryReports)
	}
	var reportGroups_value types.String
	if obj.ReportGroups != nil {
		reportGroups_value = types.StringValue(*obj.ReportGroups)
	}
	var saasApplicationUsageReport_value types.String
	if obj.SaasApplicationUsageReport != nil {
		saasApplicationUsageReport_value = types.StringValue(*obj.SaasApplicationUsageReport)
	}
	var userActivityReport_value types.String
	if obj.UserActivityReport != nil {
		userActivityReport_value = types.StringValue(*obj.UserActivityReport)
	}
	o.EmailScheduler = emailScheduler_value
	o.ManagePdfSummary = managePdfSummary_value
	o.PdfSummaryReports = pdfSummaryReports_value
	o.ReportGroups = reportGroups_value
	o.SaasApplicationUsageReport = saasApplicationUsageReport_value
	o.UserActivityReport = userActivityReport_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiNetworkObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiNetwork, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var globalProtect_object *AdminRoleDataSourceRoleVsysWebuiNetworkGlobalProtectObject
	if obj.GlobalProtect != nil {
		globalProtect_object = new(AdminRoleDataSourceRoleVsysWebuiNetworkGlobalProtectObject)

		diags.Append(globalProtect_object.CopyFromPango(ctx, obj.GlobalProtect, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var sdwanInterfaceProfile_value types.String
	if obj.SdwanInterfaceProfile != nil {
		sdwanInterfaceProfile_value = types.StringValue(*obj.SdwanInterfaceProfile)
	}
	var zones_value types.String
	if obj.Zones != nil {
		zones_value = types.StringValue(*obj.Zones)
	}
	o.GlobalProtect = globalProtect_object
	o.SdwanInterfaceProfile = sdwanInterfaceProfile_value
	o.Zones = zones_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiNetworkGlobalProtectObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiNetworkGlobalProtect, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var clientlessAppGroups_value types.String
	if obj.ClientlessAppGroups != nil {
		clientlessAppGroups_value = types.StringValue(*obj.ClientlessAppGroups)
	}
	var clientlessApps_value types.String
	if obj.ClientlessApps != nil {
		clientlessApps_value = types.StringValue(*obj.ClientlessApps)
	}
	var gateways_value types.String
	if obj.Gateways != nil {
		gateways_value = types.StringValue(*obj.Gateways)
	}
	var mdm_value types.String
	if obj.Mdm != nil {
		mdm_value = types.StringValue(*obj.Mdm)
	}
	var portals_value types.String
	if obj.Portals != nil {
		portals_value = types.StringValue(*obj.Portals)
	}
	o.ClientlessAppGroups = clientlessAppGroups_value
	o.ClientlessApps = clientlessApps_value
	o.Gateways = gateways_value
	o.Mdm = mdm_value
	o.Portals = portals_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiObjectsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var customObjects_object *AdminRoleDataSourceRoleVsysWebuiObjectsCustomObjectsObject
	if obj.CustomObjects != nil {
		customObjects_object = new(AdminRoleDataSourceRoleVsysWebuiObjectsCustomObjectsObject)

		diags.Append(customObjects_object.CopyFromPango(ctx, obj.CustomObjects, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var decryption_object *AdminRoleDataSourceRoleVsysWebuiObjectsDecryptionObject
	if obj.Decryption != nil {
		decryption_object = new(AdminRoleDataSourceRoleVsysWebuiObjectsDecryptionObject)

		diags.Append(decryption_object.CopyFromPango(ctx, obj.Decryption, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var globalProtect_object *AdminRoleDataSourceRoleVsysWebuiObjectsGlobalProtectObject
	if obj.GlobalProtect != nil {
		globalProtect_object = new(AdminRoleDataSourceRoleVsysWebuiObjectsGlobalProtectObject)

		diags.Append(globalProtect_object.CopyFromPango(ctx, obj.GlobalProtect, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sdwan_object *AdminRoleDataSourceRoleVsysWebuiObjectsSdwanObject
	if obj.Sdwan != nil {
		sdwan_object = new(AdminRoleDataSourceRoleVsysWebuiObjectsSdwanObject)

		diags.Append(sdwan_object.CopyFromPango(ctx, obj.Sdwan, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var securityProfiles_object *AdminRoleDataSourceRoleVsysWebuiObjectsSecurityProfilesObject
	if obj.SecurityProfiles != nil {
		securityProfiles_object = new(AdminRoleDataSourceRoleVsysWebuiObjectsSecurityProfilesObject)

		diags.Append(securityProfiles_object.CopyFromPango(ctx, obj.SecurityProfiles, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var addressGroups_value types.String
	if obj.AddressGroups != nil {
		addressGroups_value = types.StringValue(*obj.AddressGroups)
	}
	var addresses_value types.String
	if obj.Addresses != nil {
		addresses_value = types.StringValue(*obj.Addresses)
	}
	var applicationFilters_value types.String
	if obj.ApplicationFilters != nil {
		applicationFilters_value = types.StringValue(*obj.ApplicationFilters)
	}
	var applicationGroups_value types.String
	if obj.ApplicationGroups != nil {
		applicationGroups_value = types.StringValue(*obj.ApplicationGroups)
	}
	var applications_value types.String
	if obj.Applications != nil {
		applications_value = types.StringValue(*obj.Applications)
	}
	var authentication_value types.String
	if obj.Authentication != nil {
		authentication_value = types.StringValue(*obj.Authentication)
	}
	var devices_value types.String
	if obj.Devices != nil {
		devices_value = types.StringValue(*obj.Devices)
	}
	var dynamicBlockLists_value types.String
	if obj.DynamicBlockLists != nil {
		dynamicBlockLists_value = types.StringValue(*obj.DynamicBlockLists)
	}
	var dynamicUserGroups_value types.String
	if obj.DynamicUserGroups != nil {
		dynamicUserGroups_value = types.StringValue(*obj.DynamicUserGroups)
	}
	var logForwarding_value types.String
	if obj.LogForwarding != nil {
		logForwarding_value = types.StringValue(*obj.LogForwarding)
	}
	var packetBrokerProfile_value types.String
	if obj.PacketBrokerProfile != nil {
		packetBrokerProfile_value = types.StringValue(*obj.PacketBrokerProfile)
	}
	var regions_value types.String
	if obj.Regions != nil {
		regions_value = types.StringValue(*obj.Regions)
	}
	var schedules_value types.String
	if obj.Schedules != nil {
		schedules_value = types.StringValue(*obj.Schedules)
	}
	var securityProfileGroups_value types.String
	if obj.SecurityProfileGroups != nil {
		securityProfileGroups_value = types.StringValue(*obj.SecurityProfileGroups)
	}
	var serviceGroups_value types.String
	if obj.ServiceGroups != nil {
		serviceGroups_value = types.StringValue(*obj.ServiceGroups)
	}
	var services_value types.String
	if obj.Services != nil {
		services_value = types.StringValue(*obj.Services)
	}
	var tags_value types.String
	if obj.Tags != nil {
		tags_value = types.StringValue(*obj.Tags)
	}
	o.AddressGroups = addressGroups_value
	o.Addresses = addresses_value
	o.ApplicationFilters = applicationFilters_value
	o.ApplicationGroups = applicationGroups_value
	o.Applications = applications_value
	o.Authentication = authentication_value
	o.CustomObjects = customObjects_object
	o.Decryption = decryption_object
	o.Devices = devices_value
	o.DynamicBlockLists = dynamicBlockLists_value
	o.DynamicUserGroups = dynamicUserGroups_value
	o.GlobalProtect = globalProtect_object
	o.LogForwarding = logForwarding_value
	o.PacketBrokerProfile = packetBrokerProfile_value
	o.Regions = regions_value
	o.Schedules = schedules_value
	o.Sdwan = sdwan_object
	o.SecurityProfileGroups = securityProfileGroups_value
	o.SecurityProfiles = securityProfiles_object
	o.ServiceGroups = serviceGroups_value
	o.Services = services_value
	o.Tags = tags_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiObjectsCustomObjectsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiObjectsCustomObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var dataPatterns_value types.String
	if obj.DataPatterns != nil {
		dataPatterns_value = types.StringValue(*obj.DataPatterns)
	}
	var spyware_value types.String
	if obj.Spyware != nil {
		spyware_value = types.StringValue(*obj.Spyware)
	}
	var urlCategory_value types.String
	if obj.UrlCategory != nil {
		urlCategory_value = types.StringValue(*obj.UrlCategory)
	}
	var vulnerability_value types.String
	if obj.Vulnerability != nil {
		vulnerability_value = types.StringValue(*obj.Vulnerability)
	}
	o.DataPatterns = dataPatterns_value
	o.Spyware = spyware_value
	o.UrlCategory = urlCategory_value
	o.Vulnerability = vulnerability_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiObjectsDecryptionObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiObjectsDecryption, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var decryptionProfile_value types.String
	if obj.DecryptionProfile != nil {
		decryptionProfile_value = types.StringValue(*obj.DecryptionProfile)
	}
	o.DecryptionProfile = decryptionProfile_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiObjectsGlobalProtectObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiObjectsGlobalProtect, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var hipObjects_value types.String
	if obj.HipObjects != nil {
		hipObjects_value = types.StringValue(*obj.HipObjects)
	}
	var hipProfiles_value types.String
	if obj.HipProfiles != nil {
		hipProfiles_value = types.StringValue(*obj.HipProfiles)
	}
	o.HipObjects = hipObjects_value
	o.HipProfiles = hipProfiles_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiObjectsSdwanObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiObjectsSdwan, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var sdwanDistProfile_value types.String
	if obj.SdwanDistProfile != nil {
		sdwanDistProfile_value = types.StringValue(*obj.SdwanDistProfile)
	}
	var sdwanErrorCorrectionProfile_value types.String
	if obj.SdwanErrorCorrectionProfile != nil {
		sdwanErrorCorrectionProfile_value = types.StringValue(*obj.SdwanErrorCorrectionProfile)
	}
	var sdwanProfile_value types.String
	if obj.SdwanProfile != nil {
		sdwanProfile_value = types.StringValue(*obj.SdwanProfile)
	}
	var sdwanSaasQualityProfile_value types.String
	if obj.SdwanSaasQualityProfile != nil {
		sdwanSaasQualityProfile_value = types.StringValue(*obj.SdwanSaasQualityProfile)
	}
	o.SdwanDistProfile = sdwanDistProfile_value
	o.SdwanErrorCorrectionProfile = sdwanErrorCorrectionProfile_value
	o.SdwanProfile = sdwanProfile_value
	o.SdwanSaasQualityProfile = sdwanSaasQualityProfile_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiObjectsSecurityProfilesObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiObjectsSecurityProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var antiSpyware_value types.String
	if obj.AntiSpyware != nil {
		antiSpyware_value = types.StringValue(*obj.AntiSpyware)
	}
	var antivirus_value types.String
	if obj.Antivirus != nil {
		antivirus_value = types.StringValue(*obj.Antivirus)
	}
	var dataFiltering_value types.String
	if obj.DataFiltering != nil {
		dataFiltering_value = types.StringValue(*obj.DataFiltering)
	}
	var dosProtection_value types.String
	if obj.DosProtection != nil {
		dosProtection_value = types.StringValue(*obj.DosProtection)
	}
	var fileBlocking_value types.String
	if obj.FileBlocking != nil {
		fileBlocking_value = types.StringValue(*obj.FileBlocking)
	}
	var gtpProtection_value types.String
	if obj.GtpProtection != nil {
		gtpProtection_value = types.StringValue(*obj.GtpProtection)
	}
	var sctpProtection_value types.String
	if obj.SctpProtection != nil {
		sctpProtection_value = types.StringValue(*obj.SctpProtection)
	}
	var urlFiltering_value types.String
	if obj.UrlFiltering != nil {
		urlFiltering_value = types.StringValue(*obj.UrlFiltering)
	}
	var vulnerabilityProtection_value types.String
	if obj.VulnerabilityProtection != nil {
		vulnerabilityProtection_value = types.StringValue(*obj.VulnerabilityProtection)
	}
	var wildfireAnalysis_value types.String
	if obj.WildfireAnalysis != nil {
		wildfireAnalysis_value = types.StringValue(*obj.WildfireAnalysis)
	}
	o.AntiSpyware = antiSpyware_value
	o.Antivirus = antivirus_value
	o.DataFiltering = dataFiltering_value
	o.DosProtection = dosProtection_value
	o.FileBlocking = fileBlocking_value
	o.GtpProtection = gtpProtection_value
	o.SctpProtection = sctpProtection_value
	o.UrlFiltering = urlFiltering_value
	o.VulnerabilityProtection = vulnerabilityProtection_value
	o.WildfireAnalysis = wildfireAnalysis_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiOperationsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiOperations, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var downloadCoreFiles_value types.String
	if obj.DownloadCoreFiles != nil {
		downloadCoreFiles_value = types.StringValue(*obj.DownloadCoreFiles)
	}
	var downloadPcapFiles_value types.String
	if obj.DownloadPcapFiles != nil {
		downloadPcapFiles_value = types.StringValue(*obj.DownloadPcapFiles)
	}
	var generateStatsDumpFile_value types.String
	if obj.GenerateStatsDumpFile != nil {
		generateStatsDumpFile_value = types.StringValue(*obj.GenerateStatsDumpFile)
	}
	var generateTechSupportFile_value types.String
	if obj.GenerateTechSupportFile != nil {
		generateTechSupportFile_value = types.StringValue(*obj.GenerateTechSupportFile)
	}
	var reboot_value types.String
	if obj.Reboot != nil {
		reboot_value = types.StringValue(*obj.Reboot)
	}
	o.DownloadCoreFiles = downloadCoreFiles_value
	o.DownloadPcapFiles = downloadPcapFiles_value
	o.GenerateStatsDumpFile = generateStatsDumpFile_value
	o.GenerateTechSupportFile = generateTechSupportFile_value
	o.Reboot = reboot_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiPoliciesObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiPolicies, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var applicationOverrideRulebase_value types.String
	if obj.ApplicationOverrideRulebase != nil {
		applicationOverrideRulebase_value = types.StringValue(*obj.ApplicationOverrideRulebase)
	}
	var authenticationRulebase_value types.String
	if obj.AuthenticationRulebase != nil {
		authenticationRulebase_value = types.StringValue(*obj.AuthenticationRulebase)
	}
	var dosRulebase_value types.String
	if obj.DosRulebase != nil {
		dosRulebase_value = types.StringValue(*obj.DosRulebase)
	}
	var natRulebase_value types.String
	if obj.NatRulebase != nil {
		natRulebase_value = types.StringValue(*obj.NatRulebase)
	}
	var networkPacketBrokerRulebase_value types.String
	if obj.NetworkPacketBrokerRulebase != nil {
		networkPacketBrokerRulebase_value = types.StringValue(*obj.NetworkPacketBrokerRulebase)
	}
	var pbfRulebase_value types.String
	if obj.PbfRulebase != nil {
		pbfRulebase_value = types.StringValue(*obj.PbfRulebase)
	}
	var qosRulebase_value types.String
	if obj.QosRulebase != nil {
		qosRulebase_value = types.StringValue(*obj.QosRulebase)
	}
	var ruleHitCountReset_value types.String
	if obj.RuleHitCountReset != nil {
		ruleHitCountReset_value = types.StringValue(*obj.RuleHitCountReset)
	}
	var sdwanRulebase_value types.String
	if obj.SdwanRulebase != nil {
		sdwanRulebase_value = types.StringValue(*obj.SdwanRulebase)
	}
	var securityRulebase_value types.String
	if obj.SecurityRulebase != nil {
		securityRulebase_value = types.StringValue(*obj.SecurityRulebase)
	}
	var sslDecryptionRulebase_value types.String
	if obj.SslDecryptionRulebase != nil {
		sslDecryptionRulebase_value = types.StringValue(*obj.SslDecryptionRulebase)
	}
	var tunnelInspectRulebase_value types.String
	if obj.TunnelInspectRulebase != nil {
		tunnelInspectRulebase_value = types.StringValue(*obj.TunnelInspectRulebase)
	}
	o.ApplicationOverrideRulebase = applicationOverrideRulebase_value
	o.AuthenticationRulebase = authenticationRulebase_value
	o.DosRulebase = dosRulebase_value
	o.NatRulebase = natRulebase_value
	o.NetworkPacketBrokerRulebase = networkPacketBrokerRulebase_value
	o.PbfRulebase = pbfRulebase_value
	o.QosRulebase = qosRulebase_value
	o.RuleHitCountReset = ruleHitCountReset_value
	o.SdwanRulebase = sdwanRulebase_value
	o.SecurityRulebase = securityRulebase_value
	o.SslDecryptionRulebase = sslDecryptionRulebase_value
	o.TunnelInspectRulebase = tunnelInspectRulebase_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiPrivacyObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiPrivacy, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var showFullIpAddresses_value types.String
	if obj.ShowFullIpAddresses != nil {
		showFullIpAddresses_value = types.StringValue(*obj.ShowFullIpAddresses)
	}
	var showUserNamesInLogsAndReports_value types.String
	if obj.ShowUserNamesInLogsAndReports != nil {
		showUserNamesInLogsAndReports_value = types.StringValue(*obj.ShowUserNamesInLogsAndReports)
	}
	var viewPcapFiles_value types.String
	if obj.ViewPcapFiles != nil {
		viewPcapFiles_value = types.StringValue(*obj.ViewPcapFiles)
	}
	o.ShowFullIpAddresses = showFullIpAddresses_value
	o.ShowUserNamesInLogsAndReports = showUserNamesInLogsAndReports_value
	o.ViewPcapFiles = viewPcapFiles_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysWebuiSaveObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiSave, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var partialSave_value types.String
	if obj.PartialSave != nil {
		partialSave_value = types.StringValue(*obj.PartialSave)
	}
	var saveForOtherAdmins_value types.String
	if obj.SaveForOtherAdmins != nil {
		saveForOtherAdmins_value = types.StringValue(*obj.SaveForOtherAdmins)
	}
	var objectLevelChanges_value types.String
	if obj.ObjectLevelChanges != nil {
		objectLevelChanges_value = types.StringValue(*obj.ObjectLevelChanges)
	}
	o.PartialSave = partialSave_value
	o.SaveForOtherAdmins = saveForOtherAdmins_value
	o.ObjectLevelChanges = objectLevelChanges_value

	return diags
}

func (o *AdminRoleDataSourceRoleVsysXmlapiObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysXmlapi, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var commit_value types.String
	if obj.Commit != nil {
		commit_value = types.StringValue(*obj.Commit)
	}
	var config_value types.String
	if obj.Config != nil {
		config_value = types.StringValue(*obj.Config)
	}
	var export_value types.String
	if obj.Export != nil {
		export_value = types.StringValue(*obj.Export)
	}
	var import_value types.String
	if obj.Import != nil {
		import_value = types.StringValue(*obj.Import)
	}
	var iot_value types.String
	if obj.Iot != nil {
		iot_value = types.StringValue(*obj.Iot)
	}
	var log_value types.String
	if obj.Log != nil {
		log_value = types.StringValue(*obj.Log)
	}
	var op_value types.String
	if obj.Op != nil {
		op_value = types.StringValue(*obj.Op)
	}
	var report_value types.String
	if obj.Report != nil {
		report_value = types.StringValue(*obj.Report)
	}
	var userId_value types.String
	if obj.UserId != nil {
		userId_value = types.StringValue(*obj.UserId)
	}
	o.Commit = commit_value
	o.Config = config_value
	o.Export = export_value
	o.Import = import_value
	o.Iot = iot_value
	o.Log = log_value
	o.Op = op_value
	o.Report = report_value
	o.UserId = userId_value

	return diags
}

func AdminRoleDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": AdminRoleDataSourceLocationSchema(),

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"description": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"role": AdminRoleDataSourceRoleSchema(),
		},
	}
}

func (o *AdminRoleDataSourceModel) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"device": AdminRoleDataSourceRoleDeviceSchema(),

			"vsys": AdminRoleDataSourceRoleVsysSchema(),
		},
	}
}

func (o *AdminRoleDataSourceRoleObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("device"),
				path.MatchRelative().AtParent().AtName("vsys"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"cli": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"restapi": AdminRoleDataSourceRoleDeviceRestapiSchema(),

			"webui": AdminRoleDataSourceRoleDeviceWebuiSchema(),

			"xmlapi": AdminRoleDataSourceRoleDeviceXmlapiSchema(),
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceRestapiSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"device": AdminRoleDataSourceRoleDeviceRestapiDeviceSchema(),

			"network": AdminRoleDataSourceRoleDeviceRestapiNetworkSchema(),

			"objects": AdminRoleDataSourceRoleDeviceRestapiObjectsSchema(),

			"policies": AdminRoleDataSourceRoleDeviceRestapiPoliciesSchema(),

			"system": AdminRoleDataSourceRoleDeviceRestapiSystemSchema(),
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceRestapiObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceRestapiSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceRestapiDeviceSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"email_server_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"http_server_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ldap_server_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_interface_setting": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"snmp_trap_server_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"syslog_server_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"virtual_systems": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceRestapiDeviceObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceRestapiDeviceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceRestapiNetworkSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"aggregate_ethernet_interfaces": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"bfd_network_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"bgp_routing_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dhcp_relays": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dhcp_servers": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dns_proxies": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ethernet_interfaces": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_clientless_app_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_clientless_apps": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_gateways": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_ipsec_crypto_network_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_mdm_servers": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_portals": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gre_tunnels": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ike_crypto_network_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ike_gateway_network_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"interface_management_network_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ipsec_crypto_network_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ipsec_tunnels": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"lldp": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"lldp_network_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"logical_routers": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"loopback_interfaces": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"qos_interfaces": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"qos_network_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_interface_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_interfaces": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel_interfaces": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel_monitor_network_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"virtual_routers": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"virtual_wires": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"vlan_interfaces": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"vlans": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"zone_protection_network_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"zones": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceRestapiNetworkObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceRestapiNetworkSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceRestapiObjectsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"address_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"addresses": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"anti_spyware_security_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"antivirus_security_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"application_filters": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"application_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"applications": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_enforcements": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_data_patterns": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_spyware_signatures": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_url_categories": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_vulnerability_signatures": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"data_filtering_security_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"decryption_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"devices": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dos_protection_security_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dynamic_user_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"external_dynamic_lists": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"file_blocking_security_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_hip_objects": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_hip_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gtp_protection_security_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_forwarding_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"packet_broker_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"regions": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"schedules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sctp_protection_security_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_error_correction_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_path_quality_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_saas_quality_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_traffic_distribution_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"security_profile_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"service_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"services": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tags": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url_filtering_security_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"vulnerability_protection_security_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"wildfire_analysis_security_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceRestapiObjectsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceRestapiObjectsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceRestapiPoliciesSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"application_override_rules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_rules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"decryption_rules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dos_rules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"nat_rules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"network_packet_broker_rules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"policy_based_forwarding_rules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"qos_rules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_rules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"security_rules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel_inspection_rules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceRestapiPoliciesObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceRestapiPoliciesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceRestapiSystemSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"configuration": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceRestapiSystemObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceRestapiSystemSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"acc": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"commit": AdminRoleDataSourceRoleDeviceWebuiCommitSchema(),

			"dashboard": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"device": AdminRoleDataSourceRoleDeviceWebuiDeviceSchema(),

			"global": AdminRoleDataSourceRoleDeviceWebuiGlobalSchema(),

			"monitor": AdminRoleDataSourceRoleDeviceWebuiMonitorSchema(),

			"network": AdminRoleDataSourceRoleDeviceWebuiNetworkSchema(),

			"objects": AdminRoleDataSourceRoleDeviceWebuiObjectsSchema(),

			"operations": AdminRoleDataSourceRoleDeviceWebuiOperationsSchema(),

			"policies": AdminRoleDataSourceRoleDeviceWebuiPoliciesSchema(),

			"privacy": AdminRoleDataSourceRoleDeviceWebuiPrivacySchema(),

			"save": AdminRoleDataSourceRoleDeviceWebuiSaveSchema(),

			"tasks": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"validate": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiCommitSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"commit_for_other_admins": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"device": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"object_level_changes": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiCommitObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiCommitSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiDeviceSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"access_domain": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"admin_roles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"administrators": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_sequence": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"block_pages": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"certificate_management": AdminRoleDataSourceRoleDeviceWebuiDeviceCertificateManagementSchema(),

			"config_audit": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"data_redistribution": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"device_quarantine": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dynamic_updates": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"global_protect_client": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"high_availability": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"licenses": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"local_user_database": AdminRoleDataSourceRoleDeviceWebuiDeviceLocalUserDatabaseSchema(),

			"log_fwd_card": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_settings": AdminRoleDataSourceRoleDeviceWebuiDeviceLogSettingsSchema(),

			"master_key": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"plugins": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"policy_recommendations": AdminRoleDataSourceRoleDeviceWebuiDevicePolicyRecommendationsSchema(),

			"scheduled_log_export": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"server_profile": AdminRoleDataSourceRoleDeviceWebuiDeviceServerProfileSchema(),

			"setup": AdminRoleDataSourceRoleDeviceWebuiDeviceSetupSchema(),

			"shared_gateways": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"software": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"support": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"troubleshooting": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"user_identification": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"virtual_systems": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"vm_info_source": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dhcp_syslog_server": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiDeviceObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiDeviceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiDeviceCertificateManagementSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"certificate_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"certificates": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ocsp_responder": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"scep": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ssh_service_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ssl_decryption_exclusion": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ssl_tls_service_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiDeviceCertificateManagementObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiDeviceCertificateManagementSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiDeviceLocalUserDatabaseSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"user_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"users": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiDeviceLocalUserDatabaseObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiDeviceLocalUserDatabaseSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiDeviceLogSettingsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"cc_alarm": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"config": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"correlation": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hipmatch": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"iptag": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"manage_log": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"system": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"user_id": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiDeviceLogSettingsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiDeviceLogSettingsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiDevicePolicyRecommendationsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"iot": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"saas": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiDevicePolicyRecommendationsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiDevicePolicyRecommendationsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiDeviceServerProfileSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"dns": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"email": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"http": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"kerberos": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ldap": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"mfa": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"netflow": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"radius": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"saml_idp": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"scp": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"snmp_trap": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"syslog": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tacplus": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiDeviceServerProfileObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiDeviceServerProfileSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiDeviceSetupSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"content_id": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hsm": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"interfaces": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"management": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"operations": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"services": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"session": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"telemetry": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"wildfire": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiDeviceSetupObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiDeviceSetupSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiGlobalSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"system_alarms": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiGlobalObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiGlobalSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiMonitorSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"app_scope": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"application_reports": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"automated_correlation_engine": AdminRoleDataSourceRoleDeviceWebuiMonitorAutomatedCorrelationEngineSchema(),

			"block_ip_list": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"botnet": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_reports": AdminRoleDataSourceRoleDeviceWebuiMonitorCustomReportsSchema(),

			"external_logs": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gtp_reports": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"logs": AdminRoleDataSourceRoleDeviceWebuiMonitorLogsSchema(),

			"packet_capture": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"pdf_reports": AdminRoleDataSourceRoleDeviceWebuiMonitorPdfReportsSchema(),

			"sctp_reports": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"session_browser": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"threat_reports": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"traffic_reports": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url_filtering_reports": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"view_custom_reports": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiMonitorObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiMonitorSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiMonitorAutomatedCorrelationEngineSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"correlated_events": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"correlation_objects": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiMonitorAutomatedCorrelationEngineObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiMonitorAutomatedCorrelationEngineSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiMonitorCustomReportsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"application_statistics": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"auth": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"data_filtering_log": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"decryption_log": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"decryption_summary": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gtp_log": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gtp_summary": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hipmatch": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"iptag": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sctp_log": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sctp_summary": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"threat_log": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"threat_summary": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"traffic_log": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"traffic_summary": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel_log": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel_summary": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url_log": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url_summary": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"userid": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"wildfire_log": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiMonitorCustomReportsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiMonitorCustomReportsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiMonitorLogsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"alarm": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"configuration": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"data_filtering": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"decryption": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gtp": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hipmatch": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"iptag": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sctp": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"system": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"threat": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"traffic": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"userid": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"wildfire": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiMonitorLogsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiMonitorLogsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiMonitorPdfReportsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"email_scheduler": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"manage_pdf_summary": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"pdf_summary_reports": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"report_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"saas_application_usage_report": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"user_activity_report": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiMonitorPdfReportsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiMonitorPdfReportsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiNetworkSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"dhcp": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dns_proxy": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"global_protect": AdminRoleDataSourceRoleDeviceWebuiNetworkGlobalProtectSchema(),

			"gre_tunnels": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"interfaces": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ipsec_tunnels": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"lldp": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"network_profiles": AdminRoleDataSourceRoleDeviceWebuiNetworkNetworkProfilesSchema(),

			"qos": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"routing": AdminRoleDataSourceRoleDeviceWebuiNetworkRoutingSchema(),

			"sdwan_interface_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"virtual_routers": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"virtual_wires": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"vlans": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"zones": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"secure_web_gateway": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiNetworkObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiNetworkSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiNetworkGlobalProtectSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"clientless_app_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"clientless_apps": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gateways": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"mdm": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"portals": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiNetworkGlobalProtectObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiNetworkGlobalProtectSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiNetworkNetworkProfilesSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"bfd_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gp_app_ipsec_crypto": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ike_crypto": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ike_gateways": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"interface_mgmt": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ipsec_crypto": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"lldp_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"qos_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel_monitor": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"zone_protection": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiNetworkNetworkProfilesObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiNetworkNetworkProfilesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiNetworkRoutingSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"logical_routers": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"routing_profiles": AdminRoleDataSourceRoleDeviceWebuiNetworkRoutingRoutingProfilesSchema(),
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiNetworkRoutingObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiNetworkRoutingSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiNetworkRoutingRoutingProfilesSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"bfd": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"bgp": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"filters": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"multicast": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ospf": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ospfv3": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ripv2": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiNetworkRoutingRoutingProfilesObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiNetworkRoutingRoutingProfilesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiObjectsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"address_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"addresses": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"application_filters": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"application_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"applications": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_objects": AdminRoleDataSourceRoleDeviceWebuiObjectsCustomObjectsSchema(),

			"decryption": AdminRoleDataSourceRoleDeviceWebuiObjectsDecryptionSchema(),

			"devices": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dynamic_block_lists": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dynamic_user_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"global_protect": AdminRoleDataSourceRoleDeviceWebuiObjectsGlobalProtectSchema(),

			"log_forwarding": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"packet_broker_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"regions": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"schedules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan": AdminRoleDataSourceRoleDeviceWebuiObjectsSdwanSchema(),

			"security_profile_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"security_profiles": AdminRoleDataSourceRoleDeviceWebuiObjectsSecurityProfilesSchema(),

			"service_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"services": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tags": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiObjectsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiObjectsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiObjectsCustomObjectsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"data_patterns": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"spyware": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url_category": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"vulnerability": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiObjectsCustomObjectsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiObjectsCustomObjectsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiObjectsDecryptionSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"decryption_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiObjectsDecryptionObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiObjectsDecryptionSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiObjectsGlobalProtectSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"hip_objects": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hip_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiObjectsGlobalProtectObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiObjectsGlobalProtectSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiObjectsSdwanSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"sdwan_dist_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_error_correction_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_saas_quality_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiObjectsSdwanObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiObjectsSdwanSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiObjectsSecurityProfilesSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"anti_spyware": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"antivirus": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"data_filtering": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dos_protection": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"file_blocking": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gtp_protection": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sctp_protection": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url_filtering": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"vulnerability_protection": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"wildfire_analysis": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiObjectsSecurityProfilesObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiObjectsSecurityProfilesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiOperationsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"download_core_files": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"download_pcap_files": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"generate_stats_dump_file": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"generate_tech_support_file": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"reboot": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiOperationsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiOperationsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiPoliciesSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"application_override_rulebase": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_rulebase": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dos_rulebase": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"nat_rulebase": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"network_packet_broker_rulebase": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"pbf_rulebase": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"qos_rulebase": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"rule_hit_count_reset": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_rulebase": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"security_rulebase": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ssl_decryption_rulebase": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel_inspect_rulebase": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiPoliciesObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiPoliciesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiPrivacySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"show_full_ip_addresses": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"show_user_names_in_logs_and_reports": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"view_pcap_files": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiPrivacyObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiPrivacySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceWebuiSaveSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"partial_save": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"save_for_other_admins": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"object_level_changes": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceWebuiSaveObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceWebuiSaveSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleDeviceXmlapiSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"commit": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"config": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"export": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"import": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"iot": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"op": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"report": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"user_id": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleDeviceXmlapiObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleDeviceXmlapiSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("device"),
				path.MatchRelative().AtParent().AtName("vsys"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"cli": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"restapi": AdminRoleDataSourceRoleVsysRestapiSchema(),

			"webui": AdminRoleDataSourceRoleVsysWebuiSchema(),

			"xmlapi": AdminRoleDataSourceRoleVsysXmlapiSchema(),
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysRestapiSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"device": AdminRoleDataSourceRoleVsysRestapiDeviceSchema(),

			"network": AdminRoleDataSourceRoleVsysRestapiNetworkSchema(),

			"objects": AdminRoleDataSourceRoleVsysRestapiObjectsSchema(),

			"policies": AdminRoleDataSourceRoleVsysRestapiPoliciesSchema(),

			"system": AdminRoleDataSourceRoleVsysRestapiSystemSchema(),
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysRestapiObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysRestapiSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysRestapiDeviceSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"email_server_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"http_server_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ldap_server_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_interface_setting": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"snmp_trap_server_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"syslog_server_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"virtual_systems": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysRestapiDeviceObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysRestapiDeviceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysRestapiNetworkSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"globalprotect_clientless_app_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_clientless_apps": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_gateways": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_mdm_servers": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_portals": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"zones": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_interface_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysRestapiNetworkObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysRestapiNetworkSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysRestapiObjectsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"address_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"addresses": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"anti_spyware_security_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"antivirus_security_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"application_filters": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"application_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"applications": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_enforcements": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_data_patterns": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_spyware_signatures": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_url_categories": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_vulnerability_signatures": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"data_filtering_security_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"decryption_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"devices": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dos_protection_security_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dynamic_user_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"external_dynamic_lists": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"file_blocking_security_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_hip_objects": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_hip_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gtp_protection_security_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_forwarding_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"packet_broker_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"regions": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"schedules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sctp_protection_security_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_error_correction_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_path_quality_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_saas_quality_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_traffic_distribution_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"security_profile_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"service_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"services": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tags": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url_filtering_security_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"vulnerability_protection_security_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"wildfire_analysis_security_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysRestapiObjectsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysRestapiObjectsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysRestapiPoliciesSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"application_override_rules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_rules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"decryption_rules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dos_rules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"nat_rules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"network_packet_broker_rules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"policy_based_forwarding_rules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"qos_rules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_rules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"security_rules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel_inspection_rules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysRestapiPoliciesObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysRestapiPoliciesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysRestapiSystemSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"configuration": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysRestapiSystemObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysRestapiSystemSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"acc": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"commit": AdminRoleDataSourceRoleVsysWebuiCommitSchema(),

			"dashboard": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"device": AdminRoleDataSourceRoleVsysWebuiDeviceSchema(),

			"monitor": AdminRoleDataSourceRoleVsysWebuiMonitorSchema(),

			"network": AdminRoleDataSourceRoleVsysWebuiNetworkSchema(),

			"objects": AdminRoleDataSourceRoleVsysWebuiObjectsSchema(),

			"operations": AdminRoleDataSourceRoleVsysWebuiOperationsSchema(),

			"policies": AdminRoleDataSourceRoleVsysWebuiPoliciesSchema(),

			"privacy": AdminRoleDataSourceRoleVsysWebuiPrivacySchema(),

			"save": AdminRoleDataSourceRoleVsysWebuiSaveSchema(),

			"tasks": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"validate": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiCommitSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"commit_for_other_admins": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"virtual_systems": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiCommitObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiCommitSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiDeviceSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"administrators": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_sequence": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"block_pages": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"certificate_management": AdminRoleDataSourceRoleVsysWebuiDeviceCertificateManagementSchema(),

			"data_redistribution": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"device_quarantine": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"local_user_database": AdminRoleDataSourceRoleVsysWebuiDeviceLocalUserDatabaseSchema(),

			"log_settings": AdminRoleDataSourceRoleVsysWebuiDeviceLogSettingsSchema(),

			"policy_recommendations": AdminRoleDataSourceRoleVsysWebuiDevicePolicyRecommendationsSchema(),

			"server_profile": AdminRoleDataSourceRoleVsysWebuiDeviceServerProfileSchema(),

			"setup": AdminRoleDataSourceRoleVsysWebuiDeviceSetupSchema(),

			"troubleshooting": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"user_identification": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"vm_info_source": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dhcp_syslog_server": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiDeviceObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiDeviceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiDeviceCertificateManagementSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"certificate_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"certificates": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ocsp_responder": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"scep": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ssh_service_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ssl_decryption_exclusion": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ssl_tls_service_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiDeviceCertificateManagementObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiDeviceCertificateManagementSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiDeviceLocalUserDatabaseSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"user_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"users": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiDeviceLocalUserDatabaseObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiDeviceLocalUserDatabaseSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiDeviceLogSettingsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"config": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"correlation": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hipmatch": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"iptag": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"system": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"user_id": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiDeviceLogSettingsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiDeviceLogSettingsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiDevicePolicyRecommendationsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"iot": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"saas": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiDevicePolicyRecommendationsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiDevicePolicyRecommendationsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiDeviceServerProfileSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"dns": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"email": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"http": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"kerberos": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ldap": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"mfa": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"netflow": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"radius": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"saml_idp": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"scp": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"snmp_trap": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"syslog": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tacplus": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiDeviceServerProfileObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiDeviceServerProfileSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiDeviceSetupSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"content_id": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hsm": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"interfaces": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"management": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"operations": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"services": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"session": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"telemetry": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"wildfire": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiDeviceSetupObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiDeviceSetupSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiMonitorSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"app_scope": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"automated_correlation_engine": AdminRoleDataSourceRoleVsysWebuiMonitorAutomatedCorrelationEngineSchema(),

			"block_ip_list": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_reports": AdminRoleDataSourceRoleVsysWebuiMonitorCustomReportsSchema(),

			"external_logs": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"logs": AdminRoleDataSourceRoleVsysWebuiMonitorLogsSchema(),

			"pdf_reports": AdminRoleDataSourceRoleVsysWebuiMonitorPdfReportsSchema(),

			"session_browser": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"view_custom_reports": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiMonitorObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiMonitorSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiMonitorAutomatedCorrelationEngineSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"correlated_events": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"correlation_objects": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiMonitorAutomatedCorrelationEngineObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiMonitorAutomatedCorrelationEngineSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiMonitorCustomReportsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"application_statistics": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"auth": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"data_filtering_log": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"decryption_log": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"decryption_summary": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gtp_log": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gtp_summary": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hipmatch": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"iptag": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sctp_log": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sctp_summary": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"threat_log": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"threat_summary": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"traffic_log": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"traffic_summary": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel_log": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel_summary": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url_log": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url_summary": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"userid": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"wildfire_log": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiMonitorCustomReportsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiMonitorCustomReportsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiMonitorLogsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"authentication": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"data_filtering": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"decryption": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gtp": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hipmatch": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"iptag": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sctp": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"threat": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"traffic": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"userid": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"wildfire": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiMonitorLogsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiMonitorLogsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiMonitorPdfReportsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"email_scheduler": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"manage_pdf_summary": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"pdf_summary_reports": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"report_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"saas_application_usage_report": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"user_activity_report": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiMonitorPdfReportsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiMonitorPdfReportsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiNetworkSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"global_protect": AdminRoleDataSourceRoleVsysWebuiNetworkGlobalProtectSchema(),

			"sdwan_interface_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"zones": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiNetworkObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiNetworkSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiNetworkGlobalProtectSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"clientless_app_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"clientless_apps": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gateways": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"mdm": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"portals": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiNetworkGlobalProtectObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiNetworkGlobalProtectSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiObjectsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"address_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"addresses": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"application_filters": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"application_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"applications": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_objects": AdminRoleDataSourceRoleVsysWebuiObjectsCustomObjectsSchema(),

			"decryption": AdminRoleDataSourceRoleVsysWebuiObjectsDecryptionSchema(),

			"devices": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dynamic_block_lists": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dynamic_user_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"global_protect": AdminRoleDataSourceRoleVsysWebuiObjectsGlobalProtectSchema(),

			"log_forwarding": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"packet_broker_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"regions": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"schedules": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan": AdminRoleDataSourceRoleVsysWebuiObjectsSdwanSchema(),

			"security_profile_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"security_profiles": AdminRoleDataSourceRoleVsysWebuiObjectsSecurityProfilesSchema(),

			"service_groups": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"services": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tags": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiObjectsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiObjectsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiObjectsCustomObjectsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"data_patterns": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"spyware": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url_category": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"vulnerability": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiObjectsCustomObjectsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiObjectsCustomObjectsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiObjectsDecryptionSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"decryption_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiObjectsDecryptionObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiObjectsDecryptionSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiObjectsGlobalProtectSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"hip_objects": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hip_profiles": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiObjectsGlobalProtectObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiObjectsGlobalProtectSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiObjectsSdwanSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"sdwan_dist_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_error_correction_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_saas_quality_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiObjectsSdwanObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiObjectsSdwanSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiObjectsSecurityProfilesSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"anti_spyware": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"antivirus": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"data_filtering": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dos_protection": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"file_blocking": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gtp_protection": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sctp_protection": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url_filtering": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"vulnerability_protection": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"wildfire_analysis": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiObjectsSecurityProfilesObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiObjectsSecurityProfilesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiOperationsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"download_core_files": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"download_pcap_files": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"generate_stats_dump_file": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"generate_tech_support_file": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"reboot": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiOperationsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiOperationsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiPoliciesSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"application_override_rulebase": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_rulebase": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dos_rulebase": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"nat_rulebase": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"network_packet_broker_rulebase": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"pbf_rulebase": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"qos_rulebase": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"rule_hit_count_reset": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_rulebase": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"security_rulebase": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ssl_decryption_rulebase": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel_inspect_rulebase": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiPoliciesObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiPoliciesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiPrivacySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"show_full_ip_addresses": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"show_user_names_in_logs_and_reports": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"view_pcap_files": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiPrivacyObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiPrivacySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysWebuiSaveSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"partial_save": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"save_for_other_admins": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"object_level_changes": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysWebuiSaveObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysWebuiSaveSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceRoleVsysXmlapiSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"commit": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"config": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"export": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"import": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"iot": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"op": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"report": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"user_id": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleDataSourceRoleVsysXmlapiObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleDataSourceRoleVsysXmlapiSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleDataSourceLocationSchema() rsschema.Attribute {
	return AdminRoleLocationSchema()
}

// Metadata returns the data source type name.
func (d *AdminRoleDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_admin_role"
}

// Schema defines the schema for this data source.
func (d *AdminRoleDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = AdminRoleDataSourceSchema()
}

// Configure prepares the struct.
func (d *AdminRoleDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	d.client = providerData.Client
	specifier, _, err := adminrole.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	d.manager = sdkmanager.NewEntryObjectManager(d.client, adminrole.NewService(d.client), batchSize, specifier, adminrole.SpecMatches)
}
func (o *AdminRoleDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state AdminRoleDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location adminrole.Location

	if savestate.Location.Template != nil {
		location.Template = &adminrole.TemplateLocation{

			PanoramaDevice: savestate.Location.Template.PanoramaDevice.ValueString(),
			Template:       savestate.Location.Template.Name.ValueString(),
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_admin_role_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, location, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &AdminRoleResource{}
	_ resource.ResourceWithConfigure   = &AdminRoleResource{}
	_ resource.ResourceWithImportState = &AdminRoleResource{}
)

func NewAdminRoleResource() resource.Resource {
	if _, found := resourceFuncMap["panos_admin_role"]; !found {
		resourceFuncMap["panos_admin_role"] = resourceFuncs{
			CreateImportId: AdminRoleImportStateCreator,
		}
	}
	return &AdminRoleResource{}
}

type AdminRoleResource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*adminrole.Entry, adminrole.Location, *adminrole.Service]
}

func AdminRoleResourceLocationSchema() rsschema.Attribute {
	return AdminRoleLocationSchema()
}

type AdminRoleResourceModel struct {
	Location    AdminRoleLocation            `tfsdk:"location"`
	Name        types.String                 `tfsdk:"name"`
	Description types.String                 `tfsdk:"description"`
	Role        *AdminRoleResourceRoleObject `tfsdk:"role"`
}
type AdminRoleResourceRoleObject struct {
	Device *AdminRoleResourceRoleDeviceObject `tfsdk:"device"`
	Vsys   *AdminRoleResourceRoleVsysObject   `tfsdk:"vsys"`
}
type AdminRoleResourceRoleDeviceObject struct {
	Cli     types.String                              `tfsdk:"cli"`
	Restapi *AdminRoleResourceRoleDeviceRestapiObject `tfsdk:"restapi"`
	Webui   *AdminRoleResourceRoleDeviceWebuiObject   `tfsdk:"webui"`
	Xmlapi  *AdminRoleResourceRoleDeviceXmlapiObject  `tfsdk:"xmlapi"`
}
type AdminRoleResourceRoleDeviceRestapiObject struct {
	Device   *AdminRoleResourceRoleDeviceRestapiDeviceObject   `tfsdk:"device"`
	Network  *AdminRoleResourceRoleDeviceRestapiNetworkObject  `tfsdk:"network"`
	Objects  *AdminRoleResourceRoleDeviceRestapiObjectsObject  `tfsdk:"objects"`
	Policies *AdminRoleResourceRoleDeviceRestapiPoliciesObject `tfsdk:"policies"`
	System   *AdminRoleResourceRoleDeviceRestapiSystemObject   `tfsdk:"system"`
}
type AdminRoleResourceRoleDeviceRestapiDeviceObject struct {
	EmailServerProfiles    types.String `tfsdk:"email_server_profiles"`
	HttpServerProfiles     types.String `tfsdk:"http_server_profiles"`
	LdapServerProfiles     types.String `tfsdk:"ldap_server_profiles"`
	LogInterfaceSetting    types.String `tfsdk:"log_interface_setting"`
	SnmpTrapServerProfiles types.String `tfsdk:"snmp_trap_server_profiles"`
	SyslogServerProfiles   types.String `tfsdk:"syslog_server_profiles"`
	VirtualSystems         types.String `tfsdk:"virtual_systems"`
}
type AdminRoleResourceRoleDeviceRestapiNetworkObject struct {
	AggregateEthernetInterfaces             types.String `tfsdk:"aggregate_ethernet_interfaces"`
	BfdNetworkProfiles                      types.String `tfsdk:"bfd_network_profiles"`
	BgpRoutingProfiles                      types.String `tfsdk:"bgp_routing_profiles"`
	DhcpRelays                              types.String `tfsdk:"dhcp_relays"`
	DhcpServers                             types.String `tfsdk:"dhcp_servers"`
	DnsProxies                              types.String `tfsdk:"dns_proxies"`
	EthernetInterfaces                      types.String `tfsdk:"ethernet_interfaces"`
	GlobalprotectClientlessAppGroups        types.String `tfsdk:"globalprotect_clientless_app_groups"`
	GlobalprotectClientlessApps             types.String `tfsdk:"globalprotect_clientless_apps"`
	GlobalprotectGateways                   types.String `tfsdk:"globalprotect_gateways"`
	GlobalprotectIpsecCryptoNetworkProfiles types.String `tfsdk:"globalprotect_ipsec_crypto_network_profiles"`
	GlobalprotectMdmServers                 types.String `tfsdk:"globalprotect_mdm_servers"`
	GlobalprotectPortals                    types.String `tfsdk:"globalprotect_portals"`
	GreTunnels                              types.String `tfsdk:"gre_tunnels"`
	IkeCryptoNetworkProfiles                types.String `tfsdk:"ike_crypto_network_profiles"`
	IkeGatewayNetworkProfiles               types.String `tfsdk:"ike_gateway_network_profiles"`
	InterfaceManagementNetworkProfiles      types.String `tfsdk:"interface_management_network_profiles"`
	IpsecCryptoNetworkProfiles              types.String `tfsdk:"ipsec_crypto_network_profiles"`
	IpsecTunnels                            types.String `tfsdk:"ipsec_tunnels"`
	Lldp                                    types.String `tfsdk:"lldp"`
	LldpNetworkProfiles                     types.String `tfsdk:"lldp_network_profiles"`
	LogicalRouters                          types.String `tfsdk:"logical_routers"`
	LoopbackInterfaces                      types.String `tfsdk:"loopback_interfaces"`
	QosInterfaces                           types.String `tfsdk:"qos_interfaces"`
	QosNetworkProfiles                      types.String `tfsdk:"qos_network_profiles"`
	SdwanInterfaceProfiles                  types.String `tfsdk:"sdwan_interface_profiles"`
	SdwanInterfaces                         types.String `tfsdk:"sdwan_interfaces"`
	TunnelInterfaces                        types.String `tfsdk:"tunnel_interfaces"`
	TunnelMonitorNetworkProfiles            types.String `tfsdk:"tunnel_monitor_network_profiles"`
	VirtualRouters                          types.String `tfsdk:"virtual_routers"`
	VirtualWires                            types.String `tfsdk:"virtual_wires"`
	VlanInterfaces                          types.String `tfsdk:"vlan_interfaces"`
	Vlans                                   types.String `tfsdk:"vlans"`
	ZoneProtectionNetworkProfiles           types.String `tfsdk:"zone_protection_network_profiles"`
	Zones                                   types.String `tfsdk:"zones"`
}
type AdminRoleResourceRoleDeviceRestapiObjectsObject struct {
	AddressGroups                           types.String `tfsdk:"address_groups"`
	Addresses                               types.String `tfsdk:"addresses"`
	AntiSpywareSecurityProfiles             types.String `tfsdk:"anti_spyware_security_profiles"`
	AntivirusSecurityProfiles               types.String `tfsdk:"antivirus_security_profiles"`
	ApplicationFilters                      types.String `tfsdk:"application_filters"`
	ApplicationGroups                       types.String `tfsdk:"application_groups"`
	Applications                            types.String `tfsdk:"applications"`
	AuthenticationEnforcements              types.String `tfsdk:"authentication_enforcements"`
	CustomDataPatterns                      types.String `tfsdk:"custom_data_patterns"`
	CustomSpywareSignatures                 types.String `tfsdk:"custom_spyware_signatures"`
	CustomUrlCategories                     types.String `tfsdk:"custom_url_categories"`
	CustomVulnerabilitySignatures           types.String `tfsdk:"custom_vulnerability_signatures"`
	DataFilteringSecurityProfiles           types.String `tfsdk:"data_filtering_security_profiles"`
	DecryptionProfiles                      types.String `tfsdk:"decryption_profiles"`
	Devices                                 types.String `tfsdk:"devices"`
	DosProtectionSecurityProfiles           types.String `tfsdk:"dos_protection_security_profiles"`
	DynamicUserGroups                       types.String `tfsdk:"dynamic_user_groups"`
	ExternalDynamicLists                    types.String `tfsdk:"external_dynamic_lists"`
	FileBlockingSecurityProfiles            types.String `tfsdk:"file_blocking_security_profiles"`
	GlobalprotectHipObjects                 types.String `tfsdk:"globalprotect_hip_objects"`
	GlobalprotectHipProfiles                types.String `tfsdk:"globalprotect_hip_profiles"`
	GtpProtectionSecurityProfiles           types.String `tfsdk:"gtp_protection_security_profiles"`
	LogForwardingProfiles                   types.String `tfsdk:"log_forwarding_profiles"`
	PacketBrokerProfiles                    types.String `tfsdk:"packet_broker_profiles"`
	Regions                                 types.String `tfsdk:"regions"`
	Schedules                               types.String `tfsdk:"schedules"`
	SctpProtectionSecurityProfiles          types.String `tfsdk:"sctp_protection_security_profiles"`
	SdwanErrorCorrectionProfiles            types.String `tfsdk:"sdwan_error_correction_profiles"`
	SdwanPathQualityProfiles                types.String `tfsdk:"sdwan_path_quality_profiles"`
	SdwanSaasQualityProfiles                types.String `tfsdk:"sdwan_saas_quality_profiles"`
	SdwanTrafficDistributionProfiles        types.String `tfsdk:"sdwan_traffic_distribution_profiles"`
	SecurityProfileGroups                   types.String `tfsdk:"security_profile_groups"`
	ServiceGroups                           types.String `tfsdk:"service_groups"`
	Services                                types.String `tfsdk:"services"`
	Tags                                    types.String `tfsdk:"tags"`
	UrlFilteringSecurityProfiles            types.String `tfsdk:"url_filtering_security_profiles"`
	VulnerabilityProtectionSecurityProfiles types.String `tfsdk:"vulnerability_protection_security_profiles"`
	WildfireAnalysisSecurityProfiles        types.String `tfsdk:"wildfire_analysis_security_profiles"`
}
type AdminRoleResourceRoleDeviceRestapiPoliciesObject struct {
	ApplicationOverrideRules   types.String `tfsdk:"application_override_rules"`
	AuthenticationRules        types.String `tfsdk:"authentication_rules"`
	DecryptionRules            types.String `tfsdk:"decryption_rules"`
	DosRules                   types.String `tfsdk:"dos_rules"`
	NatRules                   types.String `tfsdk:"nat_rules"`
	NetworkPacketBrokerRules   types.String `tfsdk:"network_packet_broker_rules"`
	PolicyBasedForwardingRules types.String `tfsdk:"policy_based_forwarding_rules"`
	QosRules                   types.String `tfsdk:"qos_rules"`
	SdwanRules                 types.String `tfsdk:"sdwan_rules"`
	SecurityRules              types.String `tfsdk:"security_rules"`
	TunnelInspectionRules      types.String `tfsdk:"tunnel_inspection_rules"`
}
type AdminRoleResourceRoleDeviceRestapiSystemObject struct {
	Configuration types.String `tfsdk:"configuration"`
}
type AdminRoleResourceRoleDeviceWebuiObject struct {
	Acc        types.String                                      `tfsdk:"acc"`
	Commit     *AdminRoleResourceRoleDeviceWebuiCommitObject     `tfsdk:"commit"`
	Dashboard  types.String                                      `tfsdk:"dashboard"`
	Device     *AdminRoleResourceRoleDeviceWebuiDeviceObject     `tfsdk:"device"`
	Global     *AdminRoleResourceRoleDeviceWebuiGlobalObject     `tfsdk:"global"`
	Monitor    *AdminRoleResourceRoleDeviceWebuiMonitorObject    `tfsdk:"monitor"`
	Network    *AdminRoleResourceRoleDeviceWebuiNetworkObject    `tfsdk:"network"`
	Objects    *AdminRoleResourceRoleDeviceWebuiObjectsObject    `tfsdk:"objects"`
	Operations *AdminRoleResourceRoleDeviceWebuiOperationsObject `tfsdk:"operations"`
	Policies   *AdminRoleResourceRoleDeviceWebuiPoliciesObject   `tfsdk:"policies"`
	Privacy    *AdminRoleResourceRoleDeviceWebuiPrivacyObject    `tfsdk:"privacy"`
	Save       *AdminRoleResourceRoleDeviceWebuiSaveObject       `tfsdk:"save"`
	Tasks      types.String                                      `tfsdk:"tasks"`
	Validate   types.String                                      `tfsdk:"validate"`
}
type AdminRoleResourceRoleDeviceWebuiCommitObject struct {
	CommitForOtherAdmins types.String `tfsdk:"commit_for_other_admins"`
	Device               types.String `tfsdk:"device"`
	ObjectLevelChanges   types.String `tfsdk:"object_level_changes"`
}
type AdminRoleResourceRoleDeviceWebuiDeviceObject struct {
	AccessDomain           types.String                                                       `tfsdk:"access_domain"`
	AdminRoles             types.String                                                       `tfsdk:"admin_roles"`
	Administrators         types.String                                                       `tfsdk:"administrators"`
	AuthenticationProfile  types.String                                                       `tfsdk:"authentication_profile"`
	AuthenticationSequence types.String                                                       `tfsdk:"authentication_sequence"`
	BlockPages             types.String                                                       `tfsdk:"block_pages"`
	CertificateManagement  *AdminRoleResourceRoleDeviceWebuiDeviceCertificateManagementObject `tfsdk:"certificate_management"`
	ConfigAudit            types.String                                                       `tfsdk:"config_audit"`
	DataRedistribution     types.String                                                       `tfsdk:"data_redistribution"`
	DeviceQuarantine       types.String                                                       `tfsdk:"device_quarantine"`
	DynamicUpdates         types.String                                                       `tfsdk:"dynamic_updates"`
	GlobalProtectClient    types.String                                                       `tfsdk:"global_protect_client"`
	HighAvailability       types.String                                                       `tfsdk:"high_availability"`
	Licenses               types.String                                                       `tfsdk:"licenses"`
	LocalUserDatabase      *AdminRoleResourceRoleDeviceWebuiDeviceLocalUserDatabaseObject     `tfsdk:"local_user_database"`
	LogFwdCard             types.String                                                       `tfsdk:"log_fwd_card"`
	LogSettings            *AdminRoleResourceRoleDeviceWebuiDeviceLogSettingsObject           `tfsdk:"log_settings"`
	MasterKey              types.String                                                       `tfsdk:"master_key"`
	Plugins                types.String                                                       `tfsdk:"plugins"`
	PolicyRecommendations  *AdminRoleResourceRoleDeviceWebuiDevicePolicyRecommendationsObject `tfsdk:"policy_recommendations"`
	ScheduledLogExport     types.String                                                       `tfsdk:"scheduled_log_export"`
	ServerProfile          *AdminRoleResourceRoleDeviceWebuiDeviceServerProfileObject         `tfsdk:"server_profile"`
	Setup                  *AdminRoleResourceRoleDeviceWebuiDeviceSetupObject                 `tfsdk:"setup"`
	SharedGateways         types.String                                                       `tfsdk:"shared_gateways"`
	Software               types.String                                                       `tfsdk:"software"`
	Support                types.String                                                       `tfsdk:"support"`
	Troubleshooting        types.String                                                       `tfsdk:"troubleshooting"`
	UserIdentification     types.String                                                       `tfsdk:"user_identification"`
	VirtualSystems         types.String                                                       `tfsdk:"virtual_systems"`
	VmInfoSource           types.String                                                       `tfsdk:"vm_info_source"`
	DhcpSyslogServer       types.String                                                       `tfsdk:"dhcp_syslog_server"`
}
type AdminRoleResourceRoleDeviceWebuiDeviceCertificateManagementObject struct {
	CertificateProfile     types.String `tfsdk:"certificate_profile"`
	Certificates           types.String `tfsdk:"certificates"`
	OcspResponder          types.String `tfsdk:"ocsp_responder"`
	Scep                   types.String `tfsdk:"scep"`
	SshServiceProfile      types.String `tfsdk:"ssh_service_profile"`
	SslDecryptionExclusion types.String `tfsdk:"ssl_decryption_exclusion"`
	SslTlsServiceProfile   types.String `tfsdk:"ssl_tls_service_profile"`
}
type AdminRoleResourceRoleDeviceWebuiDeviceLocalUserDatabaseObject struct {
	UserGroups types.String `tfsdk:"user_groups"`
	Users      types.String `tfsdk:"users"`
}
type AdminRoleResourceRoleDeviceWebuiDeviceLogSettingsObject struct {
	CcAlarm       types.String `tfsdk:"cc_alarm"`
	Config        types.String `tfsdk:"config"`
	Correlation   types.String `tfsdk:"correlation"`
	Globalprotect types.String `tfsdk:"globalprotect"`
	Hipmatch      types.String `tfsdk:"hipmatch"`
	Iptag         types.String `tfsdk:"iptag"`
	ManageLog     types.String `tfsdk:"manage_log"`
	System        types.String `tfsdk:"system"`
	UserId        types.String `tfsdk:"user_id"`
}
type AdminRoleResourceRoleDeviceWebuiDevicePolicyRecommendationsObject struct {
	Iot  types.String `tfsdk:"iot"`
	Saas types.String `tfsdk:"saas"`
}
type AdminRoleResourceRoleDeviceWebuiDeviceServerProfileObject struct {
	Dns      types.String `tfsdk:"dns"`
	Email    types.String `tfsdk:"email"`
	Http     types.String `tfsdk:"http"`
	Kerberos types.String `tfsdk:"kerberos"`
	Ldap     types.String `tfsdk:"ldap"`
	Mfa      types.String `tfsdk:"mfa"`
	Netflow  types.String `tfsdk:"netflow"`
	Radius   types.String `tfsdk:"radius"`
	SamlIdp  types.String `tfsdk:"saml_idp"`
	Scp      types.String `tfsdk:"scp"`
	SnmpTrap types.String `tfsdk:"snmp_trap"`
	Syslog   types.String `tfsdk:"syslog"`
	Tacplus  types.String `tfsdk:"tacplus"`
}
type AdminRoleResourceRoleDeviceWebuiDeviceSetupObject struct {
	ContentId  types.String `tfsdk:"content_id"`
	Hsm        types.String `tfsdk:"hsm"`
	Interfaces types.String `tfsdk:"interfaces"`
	Management types.String `tfsdk:"management"`
	Operations types.String `tfsdk:"operations"`
	Services   types.String `tfsdk:"services"`
	Session    types.String `tfsdk:"session"`
	Telemetry  types.String `tfsdk:"telemetry"`
	Wildfire   types.String `tfsdk:"wildfire"`
}
type AdminRoleResourceRoleDeviceWebuiGlobalObject struct {
	SystemAlarms types.String `tfsdk:"system_alarms"`
}
type AdminRoleResourceRoleDeviceWebuiMonitorObject struct {
	AppScope                   types.String                                                             `tfsdk:"app_scope"`
	ApplicationReports         types.String                                                             `tfsdk:"application_reports"`
	AutomatedCorrelationEngine *AdminRoleResourceRoleDeviceWebuiMonitorAutomatedCorrelationEngineObject `tfsdk:"automated_correlation_engine"`
	BlockIpList                types.String                                                             `tfsdk:"block_ip_list"`
	Botnet                     types.String                                                             `tfsdk:"botnet"`
	CustomReports              *AdminRoleResourceRoleDeviceWebuiMonitorCustomReportsObject              `tfsdk:"custom_reports"`
	ExternalLogs               types.String                                                             `tfsdk:"external_logs"`
	GtpReports                 types.String                                                             `tfsdk:"gtp_reports"`
	Logs                       *AdminRoleResourceRoleDeviceWebuiMonitorLogsObject                       `tfsdk:"logs"`
	PacketCapture              types.String                                                             `tfsdk:"packet_capture"`
	PdfReports                 *AdminRoleResourceRoleDeviceWebuiMonitorPdfReportsObject                 `tfsdk:"pdf_reports"`
	SctpReports                types.String                                                             `tfsdk:"sctp_reports"`
	SessionBrowser             types.String                                                             `tfsdk:"session_browser"`
	ThreatReports              types.String                                                             `tfsdk:"threat_reports"`
	TrafficReports             types.String                                                             `tfsdk:"traffic_reports"`
	UrlFilteringReports        types.String                                                             `tfsdk:"url_filtering_reports"`
	ViewCustomReports          types.String                                                             `tfsdk:"view_custom_reports"`
}
type AdminRoleResourceRoleDeviceWebuiMonitorAutomatedCorrelationEngineObject struct {
	CorrelatedEvents   types.String `tfsdk:"correlated_events"`
	CorrelationObjects types.String `tfsdk:"correlation_objects"`
}
type AdminRoleResourceRoleDeviceWebuiMonitorCustomReportsObject struct {
	ApplicationStatistics types.String `tfsdk:"application_statistics"`
	Auth                  types.String `tfsdk:"auth"`
	DataFilteringLog      types.String `tfsdk:"data_filtering_log"`
	DecryptionLog         types.String `tfsdk:"decryption_log"`
	DecryptionSummary     types.String `tfsdk:"decryption_summary"`
	Globalprotect         types.String `tfsdk:"globalprotect"`
	GtpLog                types.String `tfsdk:"gtp_log"`
	GtpSummary            types.String `tfsdk:"gtp_summary"`
	Hipmatch              types.String `tfsdk:"hipmatch"`
	Iptag                 types.String `tfsdk:"iptag"`
	SctpLog               types.String `tfsdk:"sctp_log"`
	SctpSummary           types.String `tfsdk:"sctp_summary"`
	ThreatLog             types.String `tfsdk:"threat_log"`
	ThreatSummary         types.String `tfsdk:"threat_summary"`
	TrafficLog            types.String `tfsdk:"traffic_log"`
	TrafficSummary        types.String `tfsdk:"traffic_summary"`
	TunnelLog             types.String `tfsdk:"tunnel_log"`
	TunnelSummary         types.String `tfsdk:"tunnel_summary"`
	UrlLog                types.String `tfsdk:"url_log"`
	UrlSummary            types.String `tfsdk:"url_summary"`
	Userid                types.String `tfsdk:"userid"`
	WildfireLog           types.String `tfsdk:"wildfire_log"`
}
type AdminRoleResourceRoleDeviceWebuiMonitorLogsObject struct {
	Alarm          types.String `tfsdk:"alarm"`
	Authentication types.String `tfsdk:"authentication"`
	Configuration  types.String `tfsdk:"configuration"`
	DataFiltering  types.String `tfsdk:"data_filtering"`
	Decryption     types.String `tfsdk:"decryption"`
	Globalprotect  types.String `tfsdk:"globalprotect"`
	Gtp            types.String `tfsdk:"gtp"`
	Hipmatch       types.String `tfsdk:"hipmatch"`
	Iptag          types.String `tfsdk:"iptag"`
	Sctp           types.String `tfsdk:"sctp"`
	System         types.String `tfsdk:"system"`
	Threat         types.String `tfsdk:"threat"`
	Traffic        types.String `tfsdk:"traffic"`
	Tunnel         types.String `tfsdk:"tunnel"`
	Url            types.String `tfsdk:"url"`
	Userid         types.String `tfsdk:"userid"`
	Wildfire       types.String `tfsdk:"wildfire"`
}
type AdminRoleResourceRoleDeviceWebuiMonitorPdfReportsObject struct {
	EmailScheduler             types.String `tfsdk:"email_scheduler"`
	ManagePdfSummary           types.String `tfsdk:"manage_pdf_summary"`
	PdfSummaryReports          types.String `tfsdk:"pdf_summary_reports"`
	ReportGroups               types.String `tfsdk:"report_groups"`
	SaasApplicationUsageReport types.String `tfsdk:"saas_application_usage_report"`
	UserActivityReport         types.String `tfsdk:"user_activity_report"`
}
type AdminRoleResourceRoleDeviceWebuiNetworkObject struct {
	Dhcp                  types.String                                                  `tfsdk:"dhcp"`
	DnsProxy              types.String                                                  `tfsdk:"dns_proxy"`
	GlobalProtect         *AdminRoleResourceRoleDeviceWebuiNetworkGlobalProtectObject   `tfsdk:"global_protect"`
	GreTunnels            types.String                                                  `tfsdk:"gre_tunnels"`
	Interfaces            types.String                                                  `tfsdk:"interfaces"`
	IpsecTunnels          types.String                                                  `tfsdk:"ipsec_tunnels"`
	Lldp                  types.String                                                  `tfsdk:"lldp"`
	NetworkProfiles       *AdminRoleResourceRoleDeviceWebuiNetworkNetworkProfilesObject `tfsdk:"network_profiles"`
	Qos                   types.String                                                  `tfsdk:"qos"`
	Routing               *AdminRoleResourceRoleDeviceWebuiNetworkRoutingObject         `tfsdk:"routing"`
	SdwanInterfaceProfile types.String                                                  `tfsdk:"sdwan_interface_profile"`
	VirtualRouters        types.String                                                  `tfsdk:"virtual_routers"`
	VirtualWires          types.String                                                  `tfsdk:"virtual_wires"`
	Vlans                 types.String                                                  `tfsdk:"vlans"`
	Zones                 types.String                                                  `tfsdk:"zones"`
	SecureWebGateway      types.String                                                  `tfsdk:"secure_web_gateway"`
}
type AdminRoleResourceRoleDeviceWebuiNetworkGlobalProtectObject struct {
	ClientlessAppGroups types.String `tfsdk:"clientless_app_groups"`
	ClientlessApps      types.String `tfsdk:"clientless_apps"`
	Gateways            types.String `tfsdk:"gateways"`
	Mdm                 types.String `tfsdk:"mdm"`
	Portals             types.String `tfsdk:"portals"`
}
type AdminRoleResourceRoleDeviceWebuiNetworkNetworkProfilesObject struct {
	BfdProfile       types.String `tfsdk:"bfd_profile"`
	GpAppIpsecCrypto types.String `tfsdk:"gp_app_ipsec_crypto"`
	IkeCrypto        types.String `tfsdk:"ike_crypto"`
	IkeGateways      types.String `tfsdk:"ike_gateways"`
	InterfaceMgmt    types.String `tfsdk:"interface_mgmt"`
	IpsecCrypto      types.String `tfsdk:"ipsec_crypto"`
	LldpProfile      types.String `tfsdk:"lldp_profile"`
	QosProfile       types.String `tfsdk:"qos_profile"`
	TunnelMonitor    types.String `tfsdk:"tunnel_monitor"`
	ZoneProtection   types.String `tfsdk:"zone_protection"`
}
type AdminRoleResourceRoleDeviceWebuiNetworkRoutingObject struct {
	LogicalRouters  types.String                                                         `tfsdk:"logical_routers"`
	RoutingProfiles *AdminRoleResourceRoleDeviceWebuiNetworkRoutingRoutingProfilesObject `tfsdk:"routing_profiles"`
}
type AdminRoleResourceRoleDeviceWebuiNetworkRoutingRoutingProfilesObject struct {
	Bfd       types.String `tfsdk:"bfd"`
	Bgp       types.String `tfsdk:"bgp"`
	Filters   types.String `tfsdk:"filters"`
	Multicast types.String `tfsdk:"multicast"`
	Ospf      types.String `tfsdk:"ospf"`
	Ospfv3    types.String `tfsdk:"ospfv3"`
	Ripv2     types.String `tfsdk:"ripv2"`
}
type AdminRoleResourceRoleDeviceWebuiObjectsObject struct {
	AddressGroups         types.String                                                   `tfsdk:"address_groups"`
	Addresses             types.String                                                   `tfsdk:"addresses"`
	ApplicationFilters    types.String                                                   `tfsdk:"application_filters"`
	ApplicationGroups     types.String                                                   `tfsdk:"application_groups"`
	Applications          types.String                                                   `tfsdk:"applications"`
	Authentication        types.String                                                   `tfsdk:"authentication"`
	CustomObjects         *AdminRoleResourceRoleDeviceWebuiObjectsCustomObjectsObject    `tfsdk:"custom_objects"`
	Decryption            *AdminRoleResourceRoleDeviceWebuiObjectsDecryptionObject       `tfsdk:"decryption"`
	Devices               types.String                                                   `tfsdk:"devices"`
	DynamicBlockLists     types.String                                                   `tfsdk:"dynamic_block_lists"`
	DynamicUserGroups     types.String                                                   `tfsdk:"dynamic_user_groups"`
	GlobalProtect         *AdminRoleResourceRoleDeviceWebuiObjectsGlobalProtectObject    `tfsdk:"global_protect"`
	LogForwarding         types.String                                                   `tfsdk:"log_forwarding"`
	PacketBrokerProfile   types.String                                                   `tfsdk:"packet_broker_profile"`
	Regions               types.String                                                   `tfsdk:"regions"`
	Schedules             types.String                                                   `tfsdk:"schedules"`
	Sdwan                 *AdminRoleResourceRoleDeviceWebuiObjectsSdwanObject            `tfsdk:"sdwan"`
	SecurityProfileGroups types.String                                                   `tfsdk:"security_profile_groups"`
	SecurityProfiles      *AdminRoleResourceRoleDeviceWebuiObjectsSecurityProfilesObject `tfsdk:"security_profiles"`
	ServiceGroups         types.String                                                   `tfsdk:"service_groups"`
	Services              types.String                                                   `tfsdk:"services"`
	Tags                  types.String                                                   `tfsdk:"tags"`
}
type AdminRoleResourceRoleDeviceWebuiObjectsCustomObjectsObject struct {
	DataPatterns  types.String `tfsdk:"data_patterns"`
	Spyware       types.String `tfsdk:"spyware"`
	UrlCategory   types.String `tfsdk:"url_category"`
	Vulnerability types.String `tfsdk:"vulnerability"`
}
type AdminRoleResourceRoleDeviceWebuiObjectsDecryptionObject struct {
	DecryptionProfile types.String `tfsdk:"decryption_profile"`
}
type AdminRoleResourceRoleDeviceWebuiObjectsGlobalProtectObject struct {
	HipObjects  types.String `tfsdk:"hip_objects"`
	HipProfiles types.String `tfsdk:"hip_profiles"`
}
type AdminRoleResourceRoleDeviceWebuiObjectsSdwanObject struct {
	SdwanDistProfile            types.String `tfsdk:"sdwan_dist_profile"`
	SdwanErrorCorrectionProfile types.String `tfsdk:"sdwan_error_correction_profile"`
	SdwanProfile                types.String `tfsdk:"sdwan_profile"`
	SdwanSaasQualityProfile     types.String `tfsdk:"sdwan_saas_quality_profile"`
}
type AdminRoleResourceRoleDeviceWebuiObjectsSecurityProfilesObject struct {
	AntiSpyware             types.String `tfsdk:"anti_spyware"`
	Antivirus               types.String `tfsdk:"antivirus"`
	DataFiltering           types.String `tfsdk:"data_filtering"`
	DosProtection           types.String `tfsdk:"dos_protection"`
	FileBlocking            types.String `tfsdk:"file_blocking"`
	GtpProtection           types.String `tfsdk:"gtp_protection"`
	SctpProtection          types.String `tfsdk:"sctp_protection"`
	UrlFiltering            types.String `tfsdk:"url_filtering"`
	VulnerabilityProtection types.String `tfsdk:"vulnerability_protection"`
	WildfireAnalysis        types.String `tfsdk:"wildfire_analysis"`
}
type AdminRoleResourceRoleDeviceWebuiOperationsObject struct {
	DownloadCoreFiles       types.String `tfsdk:"download_core_files"`
	DownloadPcapFiles       types.String `tfsdk:"download_pcap_files"`
	GenerateStatsDumpFile   types.String `tfsdk:"generate_stats_dump_file"`
	GenerateTechSupportFile types.String `tfsdk:"generate_tech_support_file"`
	Reboot                  types.String `tfsdk:"reboot"`
}
type AdminRoleResourceRoleDeviceWebuiPoliciesObject struct {
	ApplicationOverrideRulebase types.String `tfsdk:"application_override_rulebase"`
	AuthenticationRulebase      types.String `tfsdk:"authentication_rulebase"`
	DosRulebase                 types.String `tfsdk:"dos_rulebase"`
	NatRulebase                 types.String `tfsdk:"nat_rulebase"`
	NetworkPacketBrokerRulebase types.String `tfsdk:"network_packet_broker_rulebase"`
	PbfRulebase                 types.String `tfsdk:"pbf_rulebase"`
	QosRulebase                 types.String `tfsdk:"qos_rulebase"`
	RuleHitCountReset           types.String `tfsdk:"rule_hit_count_reset"`
	SdwanRulebase               types.String `tfsdk:"sdwan_rulebase"`
	SecurityRulebase            types.String `tfsdk:"security_rulebase"`
	SslDecryptionRulebase       types.String `tfsdk:"ssl_decryption_rulebase"`
	TunnelInspectRulebase       types.String `tfsdk:"tunnel_inspect_rulebase"`
}
type AdminRoleResourceRoleDeviceWebuiPrivacyObject struct {
	ShowFullIpAddresses           types.String `tfsdk:"show_full_ip_addresses"`
	ShowUserNamesInLogsAndReports types.String `tfsdk:"show_user_names_in_logs_and_reports"`
	ViewPcapFiles                 types.String `tfsdk:"view_pcap_files"`
}
type AdminRoleResourceRoleDeviceWebuiSaveObject struct {
	PartialSave        types.String `tfsdk:"partial_save"`
	SaveForOtherAdmins types.String `tfsdk:"save_for_other_admins"`
	ObjectLevelChanges types.String `tfsdk:"object_level_changes"`
}
type AdminRoleResourceRoleDeviceXmlapiObject struct {
	Commit types.String `tfsdk:"commit"`
	Config types.String `tfsdk:"config"`
	Export types.String `tfsdk:"export"`
	Import types.String `tfsdk:"import"`
	Iot    types.String `tfsdk:"iot"`
	Log    types.String `tfsdk:"log"`
	Op     types.String `tfsdk:"op"`
	Report types.String `tfsdk:"report"`
	UserId types.String `tfsdk:"user_id"`
}
type AdminRoleResourceRoleVsysObject struct {
	Cli     types.String                            `tfsdk:"cli"`
	Restapi *AdminRoleResourceRoleVsysRestapiObject `tfsdk:"restapi"`
	Webui   *AdminRoleResourceRoleVsysWebuiObject   `tfsdk:"webui"`
	Xmlapi  *AdminRoleResourceRoleVsysXmlapiObject  `tfsdk:"xmlapi"`
}
type AdminRoleResourceRoleVsysRestapiObject struct {
	Device   *AdminRoleResourceRoleVsysRestapiDeviceObject   `tfsdk:"device"`
	Network  *AdminRoleResourceRoleVsysRestapiNetworkObject  `tfsdk:"network"`
	Objects  *AdminRoleResourceRoleVsysRestapiObjectsObject  `tfsdk:"objects"`
	Policies *AdminRoleResourceRoleVsysRestapiPoliciesObject `tfsdk:"policies"`
	System   *AdminRoleResourceRoleVsysRestapiSystemObject   `tfsdk:"system"`
}
type AdminRoleResourceRoleVsysRestapiDeviceObject struct {
	EmailServerProfiles    types.String `tfsdk:"email_server_profiles"`
	HttpServerProfiles     types.String `tfsdk:"http_server_profiles"`
	LdapServerProfiles     types.String `tfsdk:"ldap_server_profiles"`
	LogInterfaceSetting    types.String `tfsdk:"log_interface_setting"`
	SnmpTrapServerProfiles types.String `tfsdk:"snmp_trap_server_profiles"`
	SyslogServerProfiles   types.String `tfsdk:"syslog_server_profiles"`
	VirtualSystems         types.String `tfsdk:"virtual_systems"`
}
type AdminRoleResourceRoleVsysRestapiNetworkObject struct {
	GlobalprotectClientlessAppGroups types.String `tfsdk:"globalprotect_clientless_app_groups"`
	GlobalprotectClientlessApps      types.String `tfsdk:"globalprotect_clientless_apps"`
	GlobalprotectGateways            types.String `tfsdk:"globalprotect_gateways"`
	GlobalprotectMdmServers          types.String `tfsdk:"globalprotect_mdm_servers"`
	GlobalprotectPortals             types.String `tfsdk:"globalprotect_portals"`
	Zones                            types.String `tfsdk:"zones"`
	SdwanInterfaceProfiles           types.String `tfsdk:"sdwan_interface_profiles"`
}
type AdminRoleResourceRoleVsysRestapiObjectsObject struct {
	AddressGroups                           types.String `tfsdk:"address_groups"`
	Addresses                               types.String `tfsdk:"addresses"`
	AntiSpywareSecurityProfiles             types.String `tfsdk:"anti_spyware_security_profiles"`
	AntivirusSecurityProfiles               types.String `tfsdk:"antivirus_security_profiles"`
	ApplicationFilters                      types.String `tfsdk:"application_filters"`
	ApplicationGroups                       types.String `tfsdk:"application_groups"`
	Applications                            types.String `tfsdk:"applications"`
	AuthenticationEnforcements              types.String `tfsdk:"authentication_enforcements"`
	CustomDataPatterns                      types.String `tfsdk:"custom_data_patterns"`
	CustomSpywareSignatures                 types.String `tfsdk:"custom_spyware_signatures"`
	CustomUrlCategories                     types.String `tfsdk:"custom_url_categories"`
	CustomVulnerabilitySignatures           types.String `tfsdk:"custom_vulnerability_signatures"`
	DataFilteringSecurityProfiles           types.String `tfsdk:"data_filtering_security_profiles"`
	DecryptionProfiles                      types.String `tfsdk:"decryption_profiles"`
	Devices                                 types.String `tfsdk:"devices"`
	DosProtectionSecurityProfiles           types.String `tfsdk:"dos_protection_security_profiles"`
	DynamicUserGroups                       types.String `tfsdk:"dynamic_user_groups"`
	ExternalDynamicLists                    types.String `tfsdk:"external_dynamic_lists"`
	FileBlockingSecurityProfiles            types.String `tfsdk:"file_blocking_security_profiles"`
	GlobalprotectHipObjects                 types.String `tfsdk:"globalprotect_hip_objects"`
	GlobalprotectHipProfiles                types.String `tfsdk:"globalprotect_hip_profiles"`
	GtpProtectionSecurityProfiles           types.String `tfsdk:"gtp_protection_security_profiles"`
	LogForwardingProfiles                   types.String `tfsdk:"log_forwarding_profiles"`
	PacketBrokerProfiles                    types.String `tfsdk:"packet_broker_profiles"`
	Regions                                 types.String `tfsdk:"regions"`
	Schedules                               types.String `tfsdk:"schedules"`
	SctpProtectionSecurityProfiles          types.String `tfsdk:"sctp_protection_security_profiles"`
	SdwanErrorCorrectionProfiles            types.String `tfsdk:"sdwan_error_correction_profiles"`
	SdwanPathQualityProfiles                types.String `tfsdk:"sdwan_path_quality_profiles"`
	SdwanSaasQualityProfiles                types.String `tfsdk:"sdwan_saas_quality_profiles"`
	SdwanTrafficDistributionProfiles        types.String `tfsdk:"sdwan_traffic_distribution_profiles"`
	SecurityProfileGroups                   types.String `tfsdk:"security_profile_groups"`
	ServiceGroups                           types.String `tfsdk:"service_groups"`
	Services                                types.String `tfsdk:"services"`
	Tags                                    types.String `tfsdk:"tags"`
	UrlFilteringSecurityProfiles            types.String `tfsdk:"url_filtering_security_profiles"`
	VulnerabilityProtectionSecurityProfiles types.String `tfsdk:"vulnerability_protection_security_profiles"`
	WildfireAnalysisSecurityProfiles        types.String `tfsdk:"wildfire_analysis_security_profiles"`
}
type AdminRoleResourceRoleVsysRestapiPoliciesObject struct {
	ApplicationOverrideRules   types.String `tfsdk:"application_override_rules"`
	AuthenticationRules        types.String `tfsdk:"authentication_rules"`
	DecryptionRules            types.String `tfsdk:"decryption_rules"`
	DosRules                   types.String `tfsdk:"dos_rules"`
	NatRules                   types.String `tfsdk:"nat_rules"`
	NetworkPacketBrokerRules   types.String `tfsdk:"network_packet_broker_rules"`
	PolicyBasedForwardingRules types.String `tfsdk:"policy_based_forwarding_rules"`
	QosRules                   types.String `tfsdk:"qos_rules"`
	SdwanRules                 types.String `tfsdk:"sdwan_rules"`
	SecurityRules              types.String `tfsdk:"security_rules"`
	TunnelInspectionRules      types.String `tfsdk:"tunnel_inspection_rules"`
}
type AdminRoleResourceRoleVsysRestapiSystemObject struct {
	Configuration types.String `tfsdk:"configuration"`
}
type AdminRoleResourceRoleVsysWebuiObject struct {
	Acc        types.String                                    `tfsdk:"acc"`
	Commit     *AdminRoleResourceRoleVsysWebuiCommitObject     `tfsdk:"commit"`
	Dashboard  types.String                                    `tfsdk:"dashboard"`
	Device     *AdminRoleResourceRoleVsysWebuiDeviceObject     `tfsdk:"device"`
	Monitor    *AdminRoleResourceRoleVsysWebuiMonitorObject    `tfsdk:"monitor"`
	Network    *AdminRoleResourceRoleVsysWebuiNetworkObject    `tfsdk:"network"`
	Objects    *AdminRoleResourceRoleVsysWebuiObjectsObject    `tfsdk:"objects"`
	Operations *AdminRoleResourceRoleVsysWebuiOperationsObject `tfsdk:"operations"`
	Policies   *AdminRoleResourceRoleVsysWebuiPoliciesObject   `tfsdk:"policies"`
	Privacy    *AdminRoleResourceRoleVsysWebuiPrivacyObject    `tfsdk:"privacy"`
	Save       *AdminRoleResourceRoleVsysWebuiSaveObject       `tfsdk:"save"`
	Tasks      types.String                                    `tfsdk:"tasks"`
	Validate   types.String                                    `tfsdk:"validate"`
}
type AdminRoleResourceRoleVsysWebuiCommitObject struct {
	CommitForOtherAdmins types.String `tfsdk:"commit_for_other_admins"`
	VirtualSystems       types.String `tfsdk:"virtual_systems"`
}
type AdminRoleResourceRoleVsysWebuiDeviceObject struct {
	Administrators         types.String                                                     `tfsdk:"administrators"`
	AuthenticationProfile  types.String                                                     `tfsdk:"authentication_profile"`
	AuthenticationSequence types.String                                                     `tfsdk:"authentication_sequence"`
	BlockPages             types.String                                                     `tfsdk:"block_pages"`
	CertificateManagement  *AdminRoleResourceRoleVsysWebuiDeviceCertificateManagementObject `tfsdk:"certificate_management"`
	DataRedistribution     types.String                                                     `tfsdk:"data_redistribution"`
	DeviceQuarantine       types.String                                                     `tfsdk:"device_quarantine"`
	LocalUserDatabase      *AdminRoleResourceRoleVsysWebuiDeviceLocalUserDatabaseObject     `tfsdk:"local_user_database"`
	LogSettings            *AdminRoleResourceRoleVsysWebuiDeviceLogSettingsObject           `tfsdk:"log_settings"`
	PolicyRecommendations  *AdminRoleResourceRoleVsysWebuiDevicePolicyRecommendationsObject `tfsdk:"policy_recommendations"`
	ServerProfile          *AdminRoleResourceRoleVsysWebuiDeviceServerProfileObject         `tfsdk:"server_profile"`
	Setup                  *AdminRoleResourceRoleVsysWebuiDeviceSetupObject                 `tfsdk:"setup"`
	Troubleshooting        types.String                                                     `tfsdk:"troubleshooting"`
	UserIdentification     types.String                                                     `tfsdk:"user_identification"`
	VmInfoSource           types.String                                                     `tfsdk:"vm_info_source"`
	DhcpSyslogServer       types.String                                                     `tfsdk:"dhcp_syslog_server"`
}
type AdminRoleResourceRoleVsysWebuiDeviceCertificateManagementObject struct {
	CertificateProfile     types.String `tfsdk:"certificate_profile"`
	Certificates           types.String `tfsdk:"certificates"`
	OcspResponder          types.String `tfsdk:"ocsp_responder"`
	Scep                   types.String `tfsdk:"scep"`
	SshServiceProfile      types.String `tfsdk:"ssh_service_profile"`
	SslDecryptionExclusion types.String `tfsdk:"ssl_decryption_exclusion"`
	SslTlsServiceProfile   types.String `tfsdk:"ssl_tls_service_profile"`
}
type AdminRoleResourceRoleVsysWebuiDeviceLocalUserDatabaseObject struct {
	UserGroups types.String `tfsdk:"user_groups"`
	Users      types.String `tfsdk:"users"`
}
type AdminRoleResourceRoleVsysWebuiDeviceLogSettingsObject struct {
	Config        types.String `tfsdk:"config"`
	Correlation   types.String `tfsdk:"correlation"`
	Globalprotect types.String `tfsdk:"globalprotect"`
	Hipmatch      types.String `tfsdk:"hipmatch"`
	Iptag         types.String `tfsdk:"iptag"`
	System        types.String `tfsdk:"system"`
	UserId        types.String `tfsdk:"user_id"`
}
type AdminRoleResourceRoleVsysWebuiDevicePolicyRecommendationsObject struct {
	Iot  types.String `tfsdk:"iot"`
	Saas types.String `tfsdk:"saas"`
}
type AdminRoleResourceRoleVsysWebuiDeviceServerProfileObject struct {
	Dns      types.String `tfsdk:"dns"`
	Email    types.String `tfsdk:"email"`
	Http     types.String `tfsdk:"http"`
	Kerberos types.String `tfsdk:"kerberos"`
	Ldap     types.String `tfsdk:"ldap"`
	Mfa      types.String `tfsdk:"mfa"`
	Netflow  types.String `tfsdk:"netflow"`
	Radius   types.String `tfsdk:"radius"`
	SamlIdp  types.String `tfsdk:"saml_idp"`
	Scp      types.String `tfsdk:"scp"`
	SnmpTrap types.String `tfsdk:"snmp_trap"`
	Syslog   types.String `tfsdk:"syslog"`
	Tacplus  types.String `tfsdk:"tacplus"`
}
type AdminRoleResourceRoleVsysWebuiDeviceSetupObject struct {
	ContentId  types.String `tfsdk:"content_id"`
	Hsm        types.String `tfsdk:"hsm"`
	Interfaces types.String `tfsdk:"interfaces"`
	Management types.String `tfsdk:"management"`
	Operations types.String `tfsdk:"operations"`
	Services   types.String `tfsdk:"services"`
	Session    types.String `tfsdk:"session"`
	Telemetry  types.String `tfsdk:"telemetry"`
	Wildfire   types.String `tfsdk:"wildfire"`
}
type AdminRoleResourceRoleVsysWebuiMonitorObject struct {
	AppScope                   types.String                                                           `tfsdk:"app_scope"`
	AutomatedCorrelationEngine *AdminRoleResourceRoleVsysWebuiMonitorAutomatedCorrelationEngineObject `tfsdk:"automated_correlation_engine"`
	BlockIpList                types.String                                                           `tfsdk:"block_ip_list"`
	CustomReports              *AdminRoleResourceRoleVsysWebuiMonitorCustomReportsObject              `tfsdk:"custom_reports"`
	ExternalLogs               types.String                                                           `tfsdk:"external_logs"`
	Logs                       *AdminRoleResourceRoleVsysWebuiMonitorLogsObject                       `tfsdk:"logs"`
	PdfReports                 *AdminRoleResourceRoleVsysWebuiMonitorPdfReportsObject                 `tfsdk:"pdf_reports"`
	SessionBrowser             types.String                                                           `tfsdk:"session_browser"`
	ViewCustomReports          types.String                                                           `tfsdk:"view_custom_reports"`
}
type AdminRoleResourceRoleVsysWebuiMonitorAutomatedCorrelationEngineObject struct {
	CorrelatedEvents   types.String `tfsdk:"correlated_events"`
	CorrelationObjects types.String `tfsdk:"correlation_objects"`
}
type AdminRoleResourceRoleVsysWebuiMonitorCustomReportsObject struct {
	ApplicationStatistics types.String `tfsdk:"application_statistics"`
	Auth                  types.String `tfsdk:"auth"`
	DataFilteringLog      types.String `tfsdk:"data_filtering_log"`
	DecryptionLog         types.String `tfsdk:"decryption_log"`
	DecryptionSummary     types.String `tfsdk:"decryption_summary"`
	Globalprotect         types.String `tfsdk:"globalprotect"`
	GtpLog                types.String `tfsdk:"gtp_log"`
	GtpSummary            types.String `tfsdk:"gtp_summary"`
	Hipmatch              types.String `tfsdk:"hipmatch"`
	Iptag                 types.String `tfsdk:"iptag"`
	SctpLog               types.String `tfsdk:"sctp_log"`
	SctpSummary           types.String `tfsdk:"sctp_summary"`
	ThreatLog             types.String `tfsdk:"threat_log"`
	ThreatSummary         types.String `tfsdk:"threat_summary"`
	TrafficLog            types.String `tfsdk:"traffic_log"`
	TrafficSummary        types.String `tfsdk:"traffic_summary"`
	TunnelLog             types.String `tfsdk:"tunnel_log"`
	TunnelSummary         types.String `tfsdk:"tunnel_summary"`
	UrlLog                types.String `tfsdk:"url_log"`
	UrlSummary            types.String `tfsdk:"url_summary"`
	Userid                types.String `tfsdk:"userid"`
	WildfireLog           types.String `tfsdk:"wildfire_log"`
}
type AdminRoleResourceRoleVsysWebuiMonitorLogsObject struct {
	Authentication types.String `tfsdk:"authentication"`
	DataFiltering  types.String `tfsdk:"data_filtering"`
	Decryption     types.String `tfsdk:"decryption"`
	Globalprotect  types.String `tfsdk:"globalprotect"`
	Gtp            types.String `tfsdk:"gtp"`
	Hipmatch       types.String `tfsdk:"hipmatch"`
	Iptag          types.String `tfsdk:"iptag"`
	Sctp           types.String `tfsdk:"sctp"`
	Threat         types.String `tfsdk:"threat"`
	Traffic        types.String `tfsdk:"traffic"`
	Tunnel         types.String `tfsdk:"tunnel"`
	Url            types.String `tfsdk:"url"`
	Userid         types.String `tfsdk:"userid"`
	Wildfire       types.String `tfsdk:"wildfire"`
}
type AdminRoleResourceRoleVsysWebuiMonitorPdfReportsObject struct {
	EmailScheduler             types.String `tfsdk:"email_scheduler"`
	ManagePdfSummary           types.String `tfsdk:"manage_pdf_summary"`
	PdfSummaryReports          types.String `tfsdk:"pdf_summary_reports"`
	ReportGroups               types.String `tfsdk:"report_groups"`
	SaasApplicationUsageReport types.String `tfsdk:"saas_application_usage_report"`
	UserActivityReport         types.String `tfsdk:"user_activity_report"`
}
type AdminRoleResourceRoleVsysWebuiNetworkObject struct {
	GlobalProtect         *AdminRoleResourceRoleVsysWebuiNetworkGlobalProtectObject `tfsdk:"global_protect"`
	SdwanInterfaceProfile types.String                                              `tfsdk:"sdwan_interface_profile"`
	Zones                 types.String                                              `tfsdk:"zones"`
}
type AdminRoleResourceRoleVsysWebuiNetworkGlobalProtectObject struct {
	ClientlessAppGroups types.String `tfsdk:"clientless_app_groups"`
	ClientlessApps      types.String `tfsdk:"clientless_apps"`
	Gateways            types.String `tfsdk:"gateways"`
	Mdm                 types.String `tfsdk:"mdm"`
	Portals             types.String `tfsdk:"portals"`
}
type AdminRoleResourceRoleVsysWebuiObjectsObject struct {
	AddressGroups         types.String                                                 `tfsdk:"address_groups"`
	Addresses             types.String                                                 `tfsdk:"addresses"`
	ApplicationFilters    types.String                                                 `tfsdk:"application_filters"`
	ApplicationGroups     types.String                                                 `tfsdk:"application_groups"`
	Applications          types.String                                                 `tfsdk:"applications"`
	Authentication        types.String                                                 `tfsdk:"authentication"`
	CustomObjects         *AdminRoleResourceRoleVsysWebuiObjectsCustomObjectsObject    `tfsdk:"custom_objects"`
	Decryption            *AdminRoleResourceRoleVsysWebuiObjectsDecryptionObject       `tfsdk:"decryption"`
	Devices               types.String                                                 `tfsdk:"devices"`
	DynamicBlockLists     types.String                                                 `tfsdk:"dynamic_block_lists"`
	DynamicUserGroups     types.String                                                 `tfsdk:"dynamic_user_groups"`
	GlobalProtect         *AdminRoleResourceRoleVsysWebuiObjectsGlobalProtectObject    `tfsdk:"global_protect"`
	LogForwarding         types.String                                                 `tfsdk:"log_forwarding"`
	PacketBrokerProfile   types.String                                                 `tfsdk:"packet_broker_profile"`
	Regions               types.String                                                 `tfsdk:"regions"`
	Schedules             types.String                                                 `tfsdk:"schedules"`
	Sdwan                 *AdminRoleResourceRoleVsysWebuiObjectsSdwanObject            `tfsdk:"sdwan"`
	SecurityProfileGroups types.String                                                 `tfsdk:"security_profile_groups"`
	SecurityProfiles      *AdminRoleResourceRoleVsysWebuiObjectsSecurityProfilesObject `tfsdk:"security_profiles"`
	ServiceGroups         types.String                                                 `tfsdk:"service_groups"`
	Services              types.String                                                 `tfsdk:"services"`
	Tags                  types.String                                                 `tfsdk:"tags"`
}
type AdminRoleResourceRoleVsysWebuiObjectsCustomObjectsObject struct {
	DataPatterns  types.String `tfsdk:"data_patterns"`
	Spyware       types.String `tfsdk:"spyware"`
	UrlCategory   types.String `tfsdk:"url_category"`
	Vulnerability types.String `tfsdk:"vulnerability"`
}
type AdminRoleResourceRoleVsysWebuiObjectsDecryptionObject struct {
	DecryptionProfile types.String `tfsdk:"decryption_profile"`
}
type AdminRoleResourceRoleVsysWebuiObjectsGlobalProtectObject struct {
	HipObjects  types.String `tfsdk:"hip_objects"`
	HipProfiles types.String `tfsdk:"hip_profiles"`
}
type AdminRoleResourceRoleVsysWebuiObjectsSdwanObject struct {
	SdwanDistProfile            types.String `tfsdk:"sdwan_dist_profile"`
	SdwanErrorCorrectionProfile types.String `tfsdk:"sdwan_error_correction_profile"`
	SdwanProfile                types.String `tfsdk:"sdwan_profile"`
	SdwanSaasQualityProfile     types.String `tfsdk:"sdwan_saas_quality_profile"`
}
type AdminRoleResourceRoleVsysWebuiObjectsSecurityProfilesObject struct {
	AntiSpyware             types.String `tfsdk:"anti_spyware"`
	Antivirus               types.String `tfsdk:"antivirus"`
	DataFiltering           types.String `tfsdk:"data_filtering"`
	DosProtection           types.String `tfsdk:"dos_protection"`
	FileBlocking            types.String `tfsdk:"file_blocking"`
	GtpProtection           types.String `tfsdk:"gtp_protection"`
	SctpProtection          types.String `tfsdk:"sctp_protection"`
	UrlFiltering            types.String `tfsdk:"url_filtering"`
	VulnerabilityProtection types.String `tfsdk:"vulnerability_protection"`
	WildfireAnalysis        types.String `tfsdk:"wildfire_analysis"`
}
type AdminRoleResourceRoleVsysWebuiOperationsObject struct {
	DownloadCoreFiles       types.String `tfsdk:"download_core_files"`
	DownloadPcapFiles       types.String `tfsdk:"download_pcap_files"`
	GenerateStatsDumpFile   types.String `tfsdk:"generate_stats_dump_file"`
	GenerateTechSupportFile types.String `tfsdk:"generate_tech_support_file"`
	Reboot                  types.String `tfsdk:"reboot"`
}
type AdminRoleResourceRoleVsysWebuiPoliciesObject struct {
	ApplicationOverrideRulebase types.String `tfsdk:"application_override_rulebase"`
	AuthenticationRulebase      types.String `tfsdk:"authentication_rulebase"`
	DosRulebase                 types.String `tfsdk:"dos_rulebase"`
	NatRulebase                 types.String `tfsdk:"nat_rulebase"`
	NetworkPacketBrokerRulebase types.String `tfsdk:"network_packet_broker_rulebase"`
	PbfRulebase                 types.String `tfsdk:"pbf_rulebase"`
	QosRulebase                 types.String `tfsdk:"qos_rulebase"`
	RuleHitCountReset           types.String `tfsdk:"rule_hit_count_reset"`
	SdwanRulebase               types.String `tfsdk:"sdwan_rulebase"`
	SecurityRulebase            types.String `tfsdk:"security_rulebase"`
	SslDecryptionRulebase       types.String `tfsdk:"ssl_decryption_rulebase"`
	TunnelInspectRulebase       types.String `tfsdk:"tunnel_inspect_rulebase"`
}
type AdminRoleResourceRoleVsysWebuiPrivacyObject struct {
	ShowFullIpAddresses           types.String `tfsdk:"show_full_ip_addresses"`
	ShowUserNamesInLogsAndReports types.String `tfsdk:"show_user_names_in_logs_and_reports"`
	ViewPcapFiles                 types.String `tfsdk:"view_pcap_files"`
}
type AdminRoleResourceRoleVsysWebuiSaveObject struct {
	PartialSave        types.String `tfsdk:"partial_save"`
	SaveForOtherAdmins types.String `tfsdk:"save_for_other_admins"`
	ObjectLevelChanges types.String `tfsdk:"object_level_changes"`
}
type AdminRoleResourceRoleVsysXmlapiObject struct {
	Commit types.String `tfsdk:"commit"`
	Config types.String `tfsdk:"config"`
	Export types.String `tfsdk:"export"`
	Import types.String `tfsdk:"import"`
	Iot    types.String `tfsdk:"iot"`
	Log    types.String `tfsdk:"log"`
	Op     types.String `tfsdk:"op"`
	Report types.String `tfsdk:"report"`
	UserId types.String `tfsdk:"user_id"`
}

func (r *AdminRoleResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func AdminRoleResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": AdminRoleResourceLocationSchema(),

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"description": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"role": AdminRoleResourceRoleSchema(),
		},
	}
}

func (o *AdminRoleResourceModel) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"device": AdminRoleResourceRoleDeviceSchema(),

			"vsys": AdminRoleResourceRoleVsysSchema(),
		},
	}
}

func (o *AdminRoleResourceRoleObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("device"),
				path.MatchRelative().AtParent().AtName("vsys"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"cli": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"restapi": AdminRoleResourceRoleDeviceRestapiSchema(),

			"webui": AdminRoleResourceRoleDeviceWebuiSchema(),

			"xmlapi": AdminRoleResourceRoleDeviceXmlapiSchema(),
		},
	}
}

func (o *AdminRoleResourceRoleDeviceObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceRestapiSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"device": AdminRoleResourceRoleDeviceRestapiDeviceSchema(),

			"network": AdminRoleResourceRoleDeviceRestapiNetworkSchema(),

			"objects": AdminRoleResourceRoleDeviceRestapiObjectsSchema(),

			"policies": AdminRoleResourceRoleDeviceRestapiPoliciesSchema(),

			"system": AdminRoleResourceRoleDeviceRestapiSystemSchema(),
		},
	}
}

func (o *AdminRoleResourceRoleDeviceRestapiObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceRestapiSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceRestapiDeviceSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"email_server_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"http_server_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ldap_server_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_interface_setting": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"snmp_trap_server_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"syslog_server_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"virtual_systems": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceRestapiDeviceObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceRestapiDeviceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceRestapiNetworkSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"aggregate_ethernet_interfaces": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"bfd_network_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"bgp_routing_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dhcp_relays": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dhcp_servers": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dns_proxies": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ethernet_interfaces": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_clientless_app_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_clientless_apps": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_gateways": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_ipsec_crypto_network_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_mdm_servers": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_portals": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gre_tunnels": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ike_crypto_network_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ike_gateway_network_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"interface_management_network_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ipsec_crypto_network_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ipsec_tunnels": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"lldp": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"lldp_network_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"logical_routers": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"loopback_interfaces": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"qos_interfaces": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"qos_network_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_interface_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_interfaces": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel_interfaces": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel_monitor_network_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"virtual_routers": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"virtual_wires": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"vlan_interfaces": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"vlans": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"zone_protection_network_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"zones": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceRestapiNetworkObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceRestapiNetworkSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceRestapiObjectsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"address_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"addresses": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"anti_spyware_security_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"antivirus_security_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"application_filters": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"application_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"applications": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_enforcements": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_data_patterns": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_spyware_signatures": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_url_categories": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_vulnerability_signatures": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"data_filtering_security_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"decryption_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"devices": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dos_protection_security_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dynamic_user_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"external_dynamic_lists": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"file_blocking_security_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_hip_objects": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_hip_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gtp_protection_security_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_forwarding_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"packet_broker_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"regions": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"schedules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sctp_protection_security_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_error_correction_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_path_quality_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_saas_quality_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_traffic_distribution_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"security_profile_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"service_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"services": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tags": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url_filtering_security_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"vulnerability_protection_security_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"wildfire_analysis_security_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceRestapiObjectsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceRestapiObjectsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceRestapiPoliciesSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"application_override_rules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_rules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"decryption_rules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dos_rules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"nat_rules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"network_packet_broker_rules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"policy_based_forwarding_rules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"qos_rules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_rules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"security_rules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel_inspection_rules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceRestapiPoliciesObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceRestapiPoliciesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceRestapiSystemSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"configuration": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceRestapiSystemObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceRestapiSystemSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"acc": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"commit": AdminRoleResourceRoleDeviceWebuiCommitSchema(),

			"dashboard": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"device": AdminRoleResourceRoleDeviceWebuiDeviceSchema(),

			"global": AdminRoleResourceRoleDeviceWebuiGlobalSchema(),

			"monitor": AdminRoleResourceRoleDeviceWebuiMonitorSchema(),

			"network": AdminRoleResourceRoleDeviceWebuiNetworkSchema(),

			"objects": AdminRoleResourceRoleDeviceWebuiObjectsSchema(),

			"operations": AdminRoleResourceRoleDeviceWebuiOperationsSchema(),

			"policies": AdminRoleResourceRoleDeviceWebuiPoliciesSchema(),

			"privacy": AdminRoleResourceRoleDeviceWebuiPrivacySchema(),

			"save": AdminRoleResourceRoleDeviceWebuiSaveSchema(),

			"tasks": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"validate": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiCommitSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"commit_for_other_admins": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"device": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"object_level_changes": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiCommitObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiCommitSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiDeviceSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"access_domain": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"admin_roles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"administrators": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_sequence": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"block_pages": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"certificate_management": AdminRoleResourceRoleDeviceWebuiDeviceCertificateManagementSchema(),

			"config_audit": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"data_redistribution": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"device_quarantine": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dynamic_updates": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"global_protect_client": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"high_availability": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"licenses": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"local_user_database": AdminRoleResourceRoleDeviceWebuiDeviceLocalUserDatabaseSchema(),

			"log_fwd_card": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_settings": AdminRoleResourceRoleDeviceWebuiDeviceLogSettingsSchema(),

			"master_key": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"plugins": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"policy_recommendations": AdminRoleResourceRoleDeviceWebuiDevicePolicyRecommendationsSchema(),

			"scheduled_log_export": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"server_profile": AdminRoleResourceRoleDeviceWebuiDeviceServerProfileSchema(),

			"setup": AdminRoleResourceRoleDeviceWebuiDeviceSetupSchema(),

			"shared_gateways": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"software": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"support": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"troubleshooting": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"user_identification": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"virtual_systems": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"vm_info_source": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dhcp_syslog_server": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiDeviceObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiDeviceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiDeviceCertificateManagementSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"certificate_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"certificates": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ocsp_responder": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"scep": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ssh_service_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ssl_decryption_exclusion": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ssl_tls_service_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiDeviceCertificateManagementObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiDeviceCertificateManagementSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiDeviceLocalUserDatabaseSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"user_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"users": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiDeviceLocalUserDatabaseObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiDeviceLocalUserDatabaseSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiDeviceLogSettingsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"cc_alarm": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"config": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"correlation": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hipmatch": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"iptag": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"manage_log": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"system": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"user_id": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiDeviceLogSettingsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiDeviceLogSettingsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiDevicePolicyRecommendationsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"iot": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"saas": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiDevicePolicyRecommendationsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiDevicePolicyRecommendationsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiDeviceServerProfileSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"dns": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"email": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"http": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"kerberos": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ldap": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"mfa": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"netflow": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"radius": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"saml_idp": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"scp": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"snmp_trap": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"syslog": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tacplus": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiDeviceServerProfileObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiDeviceServerProfileSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiDeviceSetupSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"content_id": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hsm": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"interfaces": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"management": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"operations": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"services": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"session": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"telemetry": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"wildfire": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiDeviceSetupObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiDeviceSetupSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiGlobalSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"system_alarms": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiGlobalObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiGlobalSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiMonitorSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"app_scope": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"application_reports": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"automated_correlation_engine": AdminRoleResourceRoleDeviceWebuiMonitorAutomatedCorrelationEngineSchema(),

			"block_ip_list": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"botnet": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_reports": AdminRoleResourceRoleDeviceWebuiMonitorCustomReportsSchema(),

			"external_logs": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gtp_reports": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"logs": AdminRoleResourceRoleDeviceWebuiMonitorLogsSchema(),

			"packet_capture": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"pdf_reports": AdminRoleResourceRoleDeviceWebuiMonitorPdfReportsSchema(),

			"sctp_reports": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"session_browser": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"threat_reports": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"traffic_reports": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url_filtering_reports": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"view_custom_reports": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiMonitorObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiMonitorSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiMonitorAutomatedCorrelationEngineSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"correlated_events": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"correlation_objects": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiMonitorAutomatedCorrelationEngineObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiMonitorAutomatedCorrelationEngineSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiMonitorCustomReportsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"application_statistics": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"auth": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"data_filtering_log": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"decryption_log": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"decryption_summary": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gtp_log": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gtp_summary": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hipmatch": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"iptag": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sctp_log": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sctp_summary": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"threat_log": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"threat_summary": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"traffic_log": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"traffic_summary": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel_log": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel_summary": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url_log": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url_summary": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"userid": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"wildfire_log": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiMonitorCustomReportsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiMonitorCustomReportsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiMonitorLogsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"alarm": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"configuration": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"data_filtering": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"decryption": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gtp": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hipmatch": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"iptag": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sctp": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"system": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"threat": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"traffic": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"userid": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"wildfire": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiMonitorLogsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiMonitorLogsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiMonitorPdfReportsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"email_scheduler": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"manage_pdf_summary": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"pdf_summary_reports": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"report_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"saas_application_usage_report": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"user_activity_report": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiMonitorPdfReportsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiMonitorPdfReportsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiNetworkSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"dhcp": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dns_proxy": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"global_protect": AdminRoleResourceRoleDeviceWebuiNetworkGlobalProtectSchema(),

			"gre_tunnels": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"interfaces": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ipsec_tunnels": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"lldp": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"network_profiles": AdminRoleResourceRoleDeviceWebuiNetworkNetworkProfilesSchema(),

			"qos": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"routing": AdminRoleResourceRoleDeviceWebuiNetworkRoutingSchema(),

			"sdwan_interface_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"virtual_routers": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"virtual_wires": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"vlans": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"zones": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"secure_web_gateway": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiNetworkObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiNetworkSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiNetworkGlobalProtectSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"clientless_app_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"clientless_apps": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gateways": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"mdm": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"portals": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiNetworkGlobalProtectObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiNetworkGlobalProtectSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiNetworkNetworkProfilesSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"bfd_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gp_app_ipsec_crypto": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ike_crypto": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ike_gateways": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"interface_mgmt": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ipsec_crypto": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"lldp_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"qos_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel_monitor": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"zone_protection": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiNetworkNetworkProfilesObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiNetworkNetworkProfilesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiNetworkRoutingSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"logical_routers": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"routing_profiles": AdminRoleResourceRoleDeviceWebuiNetworkRoutingRoutingProfilesSchema(),
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiNetworkRoutingObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiNetworkRoutingSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiNetworkRoutingRoutingProfilesSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"bfd": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"bgp": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"filters": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"multicast": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ospf": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ospfv3": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ripv2": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiNetworkRoutingRoutingProfilesObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiNetworkRoutingRoutingProfilesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiObjectsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"address_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"addresses": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"application_filters": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"application_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"applications": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_objects": AdminRoleResourceRoleDeviceWebuiObjectsCustomObjectsSchema(),

			"decryption": AdminRoleResourceRoleDeviceWebuiObjectsDecryptionSchema(),

			"devices": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dynamic_block_lists": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dynamic_user_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"global_protect": AdminRoleResourceRoleDeviceWebuiObjectsGlobalProtectSchema(),

			"log_forwarding": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"packet_broker_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"regions": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"schedules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan": AdminRoleResourceRoleDeviceWebuiObjectsSdwanSchema(),

			"security_profile_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"security_profiles": AdminRoleResourceRoleDeviceWebuiObjectsSecurityProfilesSchema(),

			"service_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"services": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tags": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiObjectsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiObjectsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiObjectsCustomObjectsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"data_patterns": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"spyware": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url_category": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"vulnerability": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiObjectsCustomObjectsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiObjectsCustomObjectsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiObjectsDecryptionSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"decryption_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiObjectsDecryptionObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiObjectsDecryptionSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiObjectsGlobalProtectSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"hip_objects": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hip_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiObjectsGlobalProtectObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiObjectsGlobalProtectSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiObjectsSdwanSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"sdwan_dist_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_error_correction_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_saas_quality_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiObjectsSdwanObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiObjectsSdwanSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiObjectsSecurityProfilesSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"anti_spyware": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"antivirus": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"data_filtering": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dos_protection": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"file_blocking": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gtp_protection": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sctp_protection": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url_filtering": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"vulnerability_protection": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"wildfire_analysis": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiObjectsSecurityProfilesObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiObjectsSecurityProfilesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiOperationsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"download_core_files": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"download_pcap_files": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"generate_stats_dump_file": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"generate_tech_support_file": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"reboot": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiOperationsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiOperationsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiPoliciesSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"application_override_rulebase": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_rulebase": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dos_rulebase": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"nat_rulebase": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"network_packet_broker_rulebase": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"pbf_rulebase": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"qos_rulebase": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"rule_hit_count_reset": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_rulebase": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"security_rulebase": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ssl_decryption_rulebase": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel_inspect_rulebase": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiPoliciesObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiPoliciesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiPrivacySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"show_full_ip_addresses": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"show_user_names_in_logs_and_reports": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"view_pcap_files": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiPrivacyObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiPrivacySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceWebuiSaveSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"partial_save": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"save_for_other_admins": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"object_level_changes": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceWebuiSaveObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceWebuiSaveSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleDeviceXmlapiSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"commit": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"config": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"export": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"import": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"iot": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"op": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"report": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"user_id": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleDeviceXmlapiObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleDeviceXmlapiSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("device"),
				path.MatchRelative().AtParent().AtName("vsys"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"cli": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"restapi": AdminRoleResourceRoleVsysRestapiSchema(),

			"webui": AdminRoleResourceRoleVsysWebuiSchema(),

			"xmlapi": AdminRoleResourceRoleVsysXmlapiSchema(),
		},
	}
}

func (o *AdminRoleResourceRoleVsysObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysRestapiSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"device": AdminRoleResourceRoleVsysRestapiDeviceSchema(),

			"network": AdminRoleResourceRoleVsysRestapiNetworkSchema(),

			"objects": AdminRoleResourceRoleVsysRestapiObjectsSchema(),

			"policies": AdminRoleResourceRoleVsysRestapiPoliciesSchema(),

			"system": AdminRoleResourceRoleVsysRestapiSystemSchema(),
		},
	}
}

func (o *AdminRoleResourceRoleVsysRestapiObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysRestapiSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysRestapiDeviceSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"email_server_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"http_server_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ldap_server_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_interface_setting": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"snmp_trap_server_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"syslog_server_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"virtual_systems": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysRestapiDeviceObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysRestapiDeviceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysRestapiNetworkSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"globalprotect_clientless_app_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_clientless_apps": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_gateways": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_mdm_servers": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_portals": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"zones": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_interface_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysRestapiNetworkObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysRestapiNetworkSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysRestapiObjectsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"address_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"addresses": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"anti_spyware_security_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"antivirus_security_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"application_filters": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"application_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"applications": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_enforcements": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_data_patterns": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_spyware_signatures": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_url_categories": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_vulnerability_signatures": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"data_filtering_security_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"decryption_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"devices": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dos_protection_security_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dynamic_user_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"external_dynamic_lists": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"file_blocking_security_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_hip_objects": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect_hip_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gtp_protection_security_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_forwarding_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"packet_broker_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"regions": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"schedules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sctp_protection_security_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_error_correction_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_path_quality_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_saas_quality_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_traffic_distribution_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"security_profile_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"service_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"services": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tags": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url_filtering_security_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"vulnerability_protection_security_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"wildfire_analysis_security_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysRestapiObjectsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysRestapiObjectsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysRestapiPoliciesSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"application_override_rules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_rules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"decryption_rules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dos_rules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"nat_rules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"network_packet_broker_rules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"policy_based_forwarding_rules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"qos_rules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_rules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"security_rules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel_inspection_rules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysRestapiPoliciesObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysRestapiPoliciesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysRestapiSystemSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"configuration": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysRestapiSystemObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysRestapiSystemSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"acc": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"commit": AdminRoleResourceRoleVsysWebuiCommitSchema(),

			"dashboard": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"device": AdminRoleResourceRoleVsysWebuiDeviceSchema(),

			"monitor": AdminRoleResourceRoleVsysWebuiMonitorSchema(),

			"network": AdminRoleResourceRoleVsysWebuiNetworkSchema(),

			"objects": AdminRoleResourceRoleVsysWebuiObjectsSchema(),

			"operations": AdminRoleResourceRoleVsysWebuiOperationsSchema(),

			"policies": AdminRoleResourceRoleVsysWebuiPoliciesSchema(),

			"privacy": AdminRoleResourceRoleVsysWebuiPrivacySchema(),

			"save": AdminRoleResourceRoleVsysWebuiSaveSchema(),

			"tasks": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"validate": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiCommitSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"commit_for_other_admins": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"virtual_systems": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiCommitObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiCommitSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiDeviceSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"administrators": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_sequence": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"block_pages": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"certificate_management": AdminRoleResourceRoleVsysWebuiDeviceCertificateManagementSchema(),

			"data_redistribution": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"device_quarantine": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"local_user_database": AdminRoleResourceRoleVsysWebuiDeviceLocalUserDatabaseSchema(),

			"log_settings": AdminRoleResourceRoleVsysWebuiDeviceLogSettingsSchema(),

			"policy_recommendations": AdminRoleResourceRoleVsysWebuiDevicePolicyRecommendationsSchema(),

			"server_profile": AdminRoleResourceRoleVsysWebuiDeviceServerProfileSchema(),

			"setup": AdminRoleResourceRoleVsysWebuiDeviceSetupSchema(),

			"troubleshooting": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"user_identification": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"vm_info_source": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dhcp_syslog_server": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiDeviceObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiDeviceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiDeviceCertificateManagementSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"certificate_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"certificates": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ocsp_responder": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"scep": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ssh_service_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ssl_decryption_exclusion": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ssl_tls_service_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiDeviceCertificateManagementObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiDeviceCertificateManagementSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiDeviceLocalUserDatabaseSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"user_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"users": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiDeviceLocalUserDatabaseObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiDeviceLocalUserDatabaseSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiDeviceLogSettingsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"config": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"correlation": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hipmatch": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"iptag": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"system": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"user_id": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiDeviceLogSettingsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiDeviceLogSettingsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiDevicePolicyRecommendationsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"iot": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"saas": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiDevicePolicyRecommendationsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiDevicePolicyRecommendationsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiDeviceServerProfileSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"dns": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"email": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"http": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"kerberos": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ldap": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"mfa": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"netflow": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"radius": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"saml_idp": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"scp": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"snmp_trap": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"syslog": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tacplus": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiDeviceServerProfileObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiDeviceServerProfileSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiDeviceSetupSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"content_id": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hsm": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"interfaces": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"management": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"operations": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"services": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"session": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"telemetry": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"wildfire": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiDeviceSetupObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiDeviceSetupSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiMonitorSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"app_scope": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"automated_correlation_engine": AdminRoleResourceRoleVsysWebuiMonitorAutomatedCorrelationEngineSchema(),

			"block_ip_list": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_reports": AdminRoleResourceRoleVsysWebuiMonitorCustomReportsSchema(),

			"external_logs": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"logs": AdminRoleResourceRoleVsysWebuiMonitorLogsSchema(),

			"pdf_reports": AdminRoleResourceRoleVsysWebuiMonitorPdfReportsSchema(),

			"session_browser": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"view_custom_reports": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiMonitorObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiMonitorSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiMonitorAutomatedCorrelationEngineSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"correlated_events": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"correlation_objects": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiMonitorAutomatedCorrelationEngineObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiMonitorAutomatedCorrelationEngineSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiMonitorCustomReportsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"application_statistics": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"auth": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"data_filtering_log": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"decryption_log": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"decryption_summary": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gtp_log": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gtp_summary": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hipmatch": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"iptag": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sctp_log": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sctp_summary": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"threat_log": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"threat_summary": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"traffic_log": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"traffic_summary": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel_log": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel_summary": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url_log": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url_summary": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"userid": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"wildfire_log": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiMonitorCustomReportsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiMonitorCustomReportsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiMonitorLogsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"authentication": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"data_filtering": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"decryption": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"globalprotect": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gtp": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hipmatch": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"iptag": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sctp": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"threat": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"traffic": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"userid": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"wildfire": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiMonitorLogsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiMonitorLogsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiMonitorPdfReportsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"email_scheduler": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"manage_pdf_summary": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"pdf_summary_reports": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"report_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"saas_application_usage_report": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"user_activity_report": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiMonitorPdfReportsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiMonitorPdfReportsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiNetworkSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"global_protect": AdminRoleResourceRoleVsysWebuiNetworkGlobalProtectSchema(),

			"sdwan_interface_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"zones": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiNetworkObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiNetworkSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiNetworkGlobalProtectSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"clientless_app_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"clientless_apps": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gateways": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"mdm": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"portals": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiNetworkGlobalProtectObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiNetworkGlobalProtectSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiObjectsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"address_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"addresses": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"application_filters": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"application_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"applications": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"custom_objects": AdminRoleResourceRoleVsysWebuiObjectsCustomObjectsSchema(),

			"decryption": AdminRoleResourceRoleVsysWebuiObjectsDecryptionSchema(),

			"devices": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dynamic_block_lists": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dynamic_user_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"global_protect": AdminRoleResourceRoleVsysWebuiObjectsGlobalProtectSchema(),

			"log_forwarding": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"packet_broker_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"regions": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"schedules": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan": AdminRoleResourceRoleVsysWebuiObjectsSdwanSchema(),

			"security_profile_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"security_profiles": AdminRoleResourceRoleVsysWebuiObjectsSecurityProfilesSchema(),

			"service_groups": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"services": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tags": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiObjectsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiObjectsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiObjectsCustomObjectsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"data_patterns": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"spyware": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url_category": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"vulnerability": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiObjectsCustomObjectsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiObjectsCustomObjectsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiObjectsDecryptionSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"decryption_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiObjectsDecryptionObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiObjectsDecryptionSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiObjectsGlobalProtectSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"hip_objects": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hip_profiles": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiObjectsGlobalProtectObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiObjectsGlobalProtectSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiObjectsSdwanSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"sdwan_dist_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_error_correction_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_saas_quality_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiObjectsSdwanObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiObjectsSdwanSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiObjectsSecurityProfilesSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"anti_spyware": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"antivirus": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"data_filtering": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dos_protection": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"file_blocking": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gtp_protection": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sctp_protection": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"url_filtering": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"vulnerability_protection": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"wildfire_analysis": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiObjectsSecurityProfilesObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiObjectsSecurityProfilesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiOperationsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"download_core_files": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"download_pcap_files": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"generate_stats_dump_file": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"generate_tech_support_file": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"reboot": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiOperationsObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiOperationsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiPoliciesSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"application_override_rulebase": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication_rulebase": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dos_rulebase": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"nat_rulebase": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"network_packet_broker_rulebase": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"pbf_rulebase": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"qos_rulebase": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"rule_hit_count_reset": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_rulebase": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"security_rulebase": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ssl_decryption_rulebase": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tunnel_inspect_rulebase": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiPoliciesObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiPoliciesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiPrivacySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"show_full_ip_addresses": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"show_user_names_in_logs_and_reports": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"view_pcap_files": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiPrivacyObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiPrivacySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysWebuiSaveSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"partial_save": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"save_for_other_admins": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"object_level_changes": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysWebuiSaveObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysWebuiSaveSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AdminRoleResourceRoleVsysXmlapiSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"commit": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"config": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"export": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"import": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"iot": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"op": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"report": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"user_id": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AdminRoleResourceRoleVsysXmlapiObject) getTypeFor(name string) attr.Type {
	schema := AdminRoleResourceRoleVsysXmlapiSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *AdminRoleResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_admin_role"
}

func (r *AdminRoleResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = AdminRoleResourceSchema()
}

// </ResourceSchema>

func (r *AdminRoleResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	r.client = providerData.Client
	specifier, _, err := adminrole.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	r.manager = sdkmanager.NewEntryObjectManager(r.client, adminrole.NewService(r.client), batchSize, specifier, adminrole.SpecMatches)
}

func (o *AdminRoleResourceModel) CopyToPango(ctx context.Context, obj **adminrole.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	description_value := o.Description.ValueStringPointer()
	var role_entry *adminrole.Role
	if o.Role != nil {
		if *obj != nil && (*obj).Role != nil {
			role_entry = (*obj).Role
		} else {
			role_entry = new(adminrole.Role)
		}

		diags.Append(o.Role.CopyToPango(ctx, &role_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(adminrole.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Description = description_value
	(*obj).Role = role_entry

	return diags
}
func (o *AdminRoleResourceRoleObject) CopyToPango(ctx context.Context, obj **adminrole.Role, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var device_entry *adminrole.RoleDevice
	if o.Device != nil {
		if *obj != nil && (*obj).Device != nil {
			device_entry = (*obj).Device
		} else {
			device_entry = new(adminrole.RoleDevice)
		}

		diags.Append(o.Device.CopyToPango(ctx, &device_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var vsys_entry *adminrole.RoleVsys
	if o.Vsys != nil {
		if *obj != nil && (*obj).Vsys != nil {
			vsys_entry = (*obj).Vsys
		} else {
			vsys_entry = new(adminrole.RoleVsys)
		}

		diags.Append(o.Vsys.CopyToPango(ctx, &vsys_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(adminrole.Role)
	}
	(*obj).Device = device_entry
	(*obj).Vsys = vsys_entry

	return diags
}
func (o *AdminRoleResourceRoleDeviceObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDevice, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	cli_value := o.Cli.ValueStringPointer()
	var restapi_entry *adminrole.RoleDeviceRestapi
	if o.Restapi != nil {
		if *obj != nil && (*obj).Restapi != nil {
			restapi_entry = (*obj).Restapi
		} else {
			restapi_entry = new(adminrole.RoleDeviceRestapi)
		}

		diags.Append(o.Restapi.CopyToPango(ctx, &restapi_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var webui_entry *adminrole.RoleDeviceWebui
	if o.Webui != nil {
		if *obj != nil && (*obj).Webui != nil {
			webui_entry = (*obj).Webui
		} else {
			webui_entry = new(adminrole.RoleDeviceWebui)
		}

		diags.Append(o.Webui.CopyToPango(ctx, &webui_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var xmlapi_entry *adminrole.RoleDeviceXmlapi
	if o.Xmlapi != nil {
		if *obj != nil && (*obj).Xmlapi != nil {
			xmlapi_entry = (*obj).Xmlapi
		} else {
			xmlapi_entry = new(adminrole.RoleDeviceXmlapi)
		}

		diags.Append(o.Xmlapi.CopyToPango(ctx, &xmlapi_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(adminrole.RoleDevice)
	}
	(*obj).Cli = cli_value
	(*obj).Restapi = restapi_entry
	(*obj).Webui = webui_entry
	(*obj).Xmlapi = xmlapi_entry

	return diags
}
func (o *AdminRoleResourceRoleDeviceRestapiObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceRestapi, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var device_entry *adminrole.RoleDeviceRestapiDevice
	if o.Device != nil {
		if *obj != nil && (*obj).Device != nil {
			device_entry = (*obj).Device
		} else {
			device_entry = new(adminrole.RoleDeviceRestapiDevice)
		}

		diags.Append(o.Device.CopyToPango(ctx, &device_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var network_entry *adminrole.RoleDeviceRestapiNetwork
	if o.Network != nil {
		if *obj != nil && (*obj).Network != nil {
			network_entry = (*obj).Network
		} else {
			network_entry = new(adminrole.RoleDeviceRestapiNetwork)
		}

		diags.Append(o.Network.CopyToPango(ctx, &network_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var objects_entry *adminrole.RoleDeviceRestapiObjects
	if o.Objects != nil {
		if *obj != nil && (*obj).Objects != nil {
			objects_entry = (*obj).Objects
		} else {
			objects_entry = new(adminrole.RoleDeviceRestapiObjects)
		}

		diags.Append(o.Objects.CopyToPango(ctx, &objects_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var policies_entry *adminrole.RoleDeviceRestapiPolicies
	if o.Policies != nil {
		if *obj != nil && (*obj).Policies != nil {
			policies_entry = (*obj).Policies
		} else {
			policies_entry = new(adminrole.RoleDeviceRestapiPolicies)
		}

		diags.Append(o.Policies.CopyToPango(ctx, &policies_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var system_entry *adminrole.RoleDeviceRestapiSystem
	if o.System != nil {
		if *obj != nil && (*obj).System != nil {
			system_entry = (*obj).System
		} else {
			system_entry = new(adminrole.RoleDeviceRestapiSystem)
		}

		diags.Append(o.System.CopyToPango(ctx, &system_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceRestapi)
	}
	(*obj).Device = device_entry
	(*obj).Network = network_entry
	(*obj).Objects = objects_entry
	(*obj).Policies = policies_entry
	(*obj).System = system_entry

	return diags
}
func (o *AdminRoleResourceRoleDeviceRestapiDeviceObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceRestapiDevice, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	emailServerProfiles_value := o.EmailServerProfiles.ValueStringPointer()
	httpServerProfiles_value := o.HttpServerProfiles.ValueStringPointer()
	ldapServerProfiles_value := o.LdapServerProfiles.ValueStringPointer()
	logInterfaceSetting_value := o.LogInterfaceSetting.ValueStringPointer()
	snmpTrapServerProfiles_value := o.SnmpTrapServerProfiles.ValueStringPointer()
	syslogServerProfiles_value := o.SyslogServerProfiles.ValueStringPointer()
	virtualSystems_value := o.VirtualSystems.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceRestapiDevice)
	}
	(*obj).EmailServerProfiles = emailServerProfiles_value
	(*obj).HttpServerProfiles = httpServerProfiles_value
	(*obj).LdapServerProfiles = ldapServerProfiles_value
	(*obj).LogInterfaceSetting = logInterfaceSetting_value
	(*obj).SnmpTrapServerProfiles = snmpTrapServerProfiles_value
	(*obj).SyslogServerProfiles = syslogServerProfiles_value
	(*obj).VirtualSystems = virtualSystems_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceRestapiNetworkObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceRestapiNetwork, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	aggregateEthernetInterfaces_value := o.AggregateEthernetInterfaces.ValueStringPointer()
	bfdNetworkProfiles_value := o.BfdNetworkProfiles.ValueStringPointer()
	bgpRoutingProfiles_value := o.BgpRoutingProfiles.ValueStringPointer()
	dhcpRelays_value := o.DhcpRelays.ValueStringPointer()
	dhcpServers_value := o.DhcpServers.ValueStringPointer()
	dnsProxies_value := o.DnsProxies.ValueStringPointer()
	ethernetInterfaces_value := o.EthernetInterfaces.ValueStringPointer()
	globalprotectClientlessAppGroups_value := o.GlobalprotectClientlessAppGroups.ValueStringPointer()
	globalprotectClientlessApps_value := o.GlobalprotectClientlessApps.ValueStringPointer()
	globalprotectGateways_value := o.GlobalprotectGateways.ValueStringPointer()
	globalprotectIpsecCryptoNetworkProfiles_value := o.GlobalprotectIpsecCryptoNetworkProfiles.ValueStringPointer()
	globalprotectMdmServers_value := o.GlobalprotectMdmServers.ValueStringPointer()
	globalprotectPortals_value := o.GlobalprotectPortals.ValueStringPointer()
	greTunnels_value := o.GreTunnels.ValueStringPointer()
	ikeCryptoNetworkProfiles_value := o.IkeCryptoNetworkProfiles.ValueStringPointer()
	ikeGatewayNetworkProfiles_value := o.IkeGatewayNetworkProfiles.ValueStringPointer()
	interfaceManagementNetworkProfiles_value := o.InterfaceManagementNetworkProfiles.ValueStringPointer()
	ipsecCryptoNetworkProfiles_value := o.IpsecCryptoNetworkProfiles.ValueStringPointer()
	ipsecTunnels_value := o.IpsecTunnels.ValueStringPointer()
	lldp_value := o.Lldp.ValueStringPointer()
	lldpNetworkProfiles_value := o.LldpNetworkProfiles.ValueStringPointer()
	logicalRouters_value := o.LogicalRouters.ValueStringPointer()
	loopbackInterfaces_value := o.LoopbackInterfaces.ValueStringPointer()
	qosInterfaces_value := o.QosInterfaces.ValueStringPointer()
	qosNetworkProfiles_value := o.QosNetworkProfiles.ValueStringPointer()
	sdwanInterfaceProfiles_value := o.SdwanInterfaceProfiles.ValueStringPointer()
	sdwanInterfaces_value := o.SdwanInterfaces.ValueStringPointer()
	tunnelInterfaces_value := o.TunnelInterfaces.ValueStringPointer()
	tunnelMonitorNetworkProfiles_value := o.TunnelMonitorNetworkProfiles.ValueStringPointer()
	virtualRouters_value := o.VirtualRouters.ValueStringPointer()
	virtualWires_value := o.VirtualWires.ValueStringPointer()
	vlanInterfaces_value := o.VlanInterfaces.ValueStringPointer()
	vlans_value := o.Vlans.ValueStringPointer()
	zoneProtectionNetworkProfiles_value := o.ZoneProtectionNetworkProfiles.ValueStringPointer()
	zones_value := o.Zones.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceRestapiNetwork)
	}
	(*obj).AggregateEthernetInterfaces = aggregateEthernetInterfaces_value
	(*obj).BfdNetworkProfiles = bfdNetworkProfiles_value
	(*obj).BgpRoutingProfiles = bgpRoutingProfiles_value
	(*obj).DhcpRelays = dhcpRelays_value
	(*obj).DhcpServers = dhcpServers_value
	(*obj).DnsProxies = dnsProxies_value
	(*obj).EthernetInterfaces = ethernetInterfaces_value
	(*obj).GlobalprotectClientlessAppGroups = globalprotectClientlessAppGroups_value
	(*obj).GlobalprotectClientlessApps = globalprotectClientlessApps_value
	(*obj).GlobalprotectGateways = globalprotectGateways_value
	(*obj).GlobalprotectIpsecCryptoNetworkProfiles = globalprotectIpsecCryptoNetworkProfiles_value
	(*obj).GlobalprotectMdmServers = globalprotectMdmServers_value
	(*obj).GlobalprotectPortals = globalprotectPortals_value
	(*obj).GreTunnels = greTunnels_value
	(*obj).IkeCryptoNetworkProfiles = ikeCryptoNetworkProfiles_value
	(*obj).IkeGatewayNetworkProfiles = ikeGatewayNetworkProfiles_value
	(*obj).InterfaceManagementNetworkProfiles = interfaceManagementNetworkProfiles_value
	(*obj).IpsecCryptoNetworkProfiles = ipsecCryptoNetworkProfiles_value
	(*obj).IpsecTunnels = ipsecTunnels_value
	(*obj).Lldp = lldp_value
	(*obj).LldpNetworkProfiles = lldpNetworkProfiles_value
	(*obj).LogicalRouters = logicalRouters_value
	(*obj).LoopbackInterfaces = loopbackInterfaces_value
	(*obj).QosInterfaces = qosInterfaces_value
	(*obj).QosNetworkProfiles = qosNetworkProfiles_value
	(*obj).SdwanInterfaceProfiles = sdwanInterfaceProfiles_value
	(*obj).SdwanInterfaces = sdwanInterfaces_value
	(*obj).TunnelInterfaces = tunnelInterfaces_value
	(*obj).TunnelMonitorNetworkProfiles = tunnelMonitorNetworkProfiles_value
	(*obj).VirtualRouters = virtualRouters_value
	(*obj).VirtualWires = virtualWires_value
	(*obj).VlanInterfaces = vlanInterfaces_value
	(*obj).Vlans = vlans_value
	(*obj).ZoneProtectionNetworkProfiles = zoneProtectionNetworkProfiles_value
	(*obj).Zones = zones_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceRestapiObjectsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceRestapiObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	addressGroups_value := o.AddressGroups.ValueStringPointer()
	addresses_value := o.Addresses.ValueStringPointer()
	antiSpywareSecurityProfiles_value := o.AntiSpywareSecurityProfiles.ValueStringPointer()
	antivirusSecurityProfiles_value := o.AntivirusSecurityProfiles.ValueStringPointer()
	applicationFilters_value := o.ApplicationFilters.ValueStringPointer()
	applicationGroups_value := o.ApplicationGroups.ValueStringPointer()
	applications_value := o.Applications.ValueStringPointer()
	authenticationEnforcements_value := o.AuthenticationEnforcements.ValueStringPointer()
	customDataPatterns_value := o.CustomDataPatterns.ValueStringPointer()
	customSpywareSignatures_value := o.CustomSpywareSignatures.ValueStringPointer()
	customUrlCategories_value := o.CustomUrlCategories.ValueStringPointer()
	customVulnerabilitySignatures_value := o.CustomVulnerabilitySignatures.ValueStringPointer()
	dataFilteringSecurityProfiles_value := o.DataFilteringSecurityProfiles.ValueStringPointer()
	decryptionProfiles_value := o.DecryptionProfiles.ValueStringPointer()
	devices_value := o.Devices.ValueStringPointer()
	dosProtectionSecurityProfiles_value := o.DosProtectionSecurityProfiles.ValueStringPointer()
	dynamicUserGroups_value := o.DynamicUserGroups.ValueStringPointer()
	externalDynamicLists_value := o.ExternalDynamicLists.ValueStringPointer()
	fileBlockingSecurityProfiles_value := o.FileBlockingSecurityProfiles.ValueStringPointer()
	globalprotectHipObjects_value := o.GlobalprotectHipObjects.ValueStringPointer()
	globalprotectHipProfiles_value := o.GlobalprotectHipProfiles.ValueStringPointer()
	gtpProtectionSecurityProfiles_value := o.GtpProtectionSecurityProfiles.ValueStringPointer()
	logForwardingProfiles_value := o.LogForwardingProfiles.ValueStringPointer()
	packetBrokerProfiles_value := o.PacketBrokerProfiles.ValueStringPointer()
	regions_value := o.Regions.ValueStringPointer()
	schedules_value := o.Schedules.ValueStringPointer()
	sctpProtectionSecurityProfiles_value := o.SctpProtectionSecurityProfiles.ValueStringPointer()
	sdwanErrorCorrectionProfiles_value := o.SdwanErrorCorrectionProfiles.ValueStringPointer()
	sdwanPathQualityProfiles_value := o.SdwanPathQualityProfiles.ValueStringPointer()
	sdwanSaasQualityProfiles_value := o.SdwanSaasQualityProfiles.ValueStringPointer()
	sdwanTrafficDistributionProfiles_value := o.SdwanTrafficDistributionProfiles.ValueStringPointer()
	securityProfileGroups_value := o.SecurityProfileGroups.ValueStringPointer()
	serviceGroups_value := o.ServiceGroups.ValueStringPointer()
	services_value := o.Services.ValueStringPointer()
	tags_value := o.Tags.ValueStringPointer()
	urlFilteringSecurityProfiles_value := o.UrlFilteringSecurityProfiles.ValueStringPointer()
	vulnerabilityProtectionSecurityProfiles_value := o.VulnerabilityProtectionSecurityProfiles.ValueStringPointer()
	wildfireAnalysisSecurityProfiles_value := o.WildfireAnalysisSecurityProfiles.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceRestapiObjects)
	}
	(*obj).AddressGroups = addressGroups_value
	(*obj).Addresses = addresses_value
	(*obj).AntiSpywareSecurityProfiles = antiSpywareSecurityProfiles_value
	(*obj).AntivirusSecurityProfiles = antivirusSecurityProfiles_value
	(*obj).ApplicationFilters = applicationFilters_value
	(*obj).ApplicationGroups = applicationGroups_value
	(*obj).Applications = applications_value
	(*obj).AuthenticationEnforcements = authenticationEnforcements_value
	(*obj).CustomDataPatterns = customDataPatterns_value
	(*obj).CustomSpywareSignatures = customSpywareSignatures_value
	(*obj).CustomUrlCategories = customUrlCategories_value
	(*obj).CustomVulnerabilitySignatures = customVulnerabilitySignatures_value
	(*obj).DataFilteringSecurityProfiles = dataFilteringSecurityProfiles_value
	(*obj).DecryptionProfiles = decryptionProfiles_value
	(*obj).Devices = devices_value
	(*obj).DosProtectionSecurityProfiles = dosProtectionSecurityProfiles_value
	(*obj).DynamicUserGroups = dynamicUserGroups_value
	(*obj).ExternalDynamicLists = externalDynamicLists_value
	(*obj).FileBlockingSecurityProfiles = fileBlockingSecurityProfiles_value
	(*obj).GlobalprotectHipObjects = globalprotectHipObjects_value
	(*obj).GlobalprotectHipProfiles = globalprotectHipProfiles_value
	(*obj).GtpProtectionSecurityProfiles = gtpProtectionSecurityProfiles_value
	(*obj).LogForwardingProfiles = logForwardingProfiles_value
	(*obj).PacketBrokerProfiles = packetBrokerProfiles_value
	(*obj).Regions = regions_value
	(*obj).Schedules = schedules_value
	(*obj).SctpProtectionSecurityProfiles = sctpProtectionSecurityProfiles_value
	(*obj).SdwanErrorCorrectionProfiles = sdwanErrorCorrectionProfiles_value
	(*obj).SdwanPathQualityProfiles = sdwanPathQualityProfiles_value
	(*obj).SdwanSaasQualityProfiles = sdwanSaasQualityProfiles_value
	(*obj).SdwanTrafficDistributionProfiles = sdwanTrafficDistributionProfiles_value
	(*obj).SecurityProfileGroups = securityProfileGroups_value
	(*obj).ServiceGroups = serviceGroups_value
	(*obj).Services = services_value
	(*obj).Tags = tags_value
	(*obj).UrlFilteringSecurityProfiles = urlFilteringSecurityProfiles_value
	(*obj).VulnerabilityProtectionSecurityProfiles = vulnerabilityProtectionSecurityProfiles_value
	(*obj).WildfireAnalysisSecurityProfiles = wildfireAnalysisSecurityProfiles_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceRestapiPoliciesObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceRestapiPolicies, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	applicationOverrideRules_value := o.ApplicationOverrideRules.ValueStringPointer()
	authenticationRules_value := o.AuthenticationRules.ValueStringPointer()
	decryptionRules_value := o.DecryptionRules.ValueStringPointer()
	dosRules_value := o.DosRules.ValueStringPointer()
	natRules_value := o.NatRules.ValueStringPointer()
	networkPacketBrokerRules_value := o.NetworkPacketBrokerRules.ValueStringPointer()
	policyBasedForwardingRules_value := o.PolicyBasedForwardingRules.ValueStringPointer()
	qosRules_value := o.QosRules.ValueStringPointer()
	sdwanRules_value := o.SdwanRules.ValueStringPointer()
	securityRules_value := o.SecurityRules.ValueStringPointer()
	tunnelInspectionRules_value := o.TunnelInspectionRules.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceRestapiPolicies)
	}
	(*obj).ApplicationOverrideRules = applicationOverrideRules_value
	(*obj).AuthenticationRules = authenticationRules_value
	(*obj).DecryptionRules = decryptionRules_value
	(*obj).DosRules = dosRules_value
	(*obj).NatRules = natRules_value
	(*obj).NetworkPacketBrokerRules = networkPacketBrokerRules_value
	(*obj).PolicyBasedForwardingRules = policyBasedForwardingRules_value
	(*obj).QosRules = qosRules_value
	(*obj).SdwanRules = sdwanRules_value
	(*obj).SecurityRules = securityRules_value
	(*obj).TunnelInspectionRules = tunnelInspectionRules_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceRestapiSystemObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceRestapiSystem, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	configuration_value := o.Configuration.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceRestapiSystem)
	}
	(*obj).Configuration = configuration_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebui, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	acc_value := o.Acc.ValueStringPointer()
	var commit_entry *adminrole.RoleDeviceWebuiCommit
	if o.Commit != nil {
		if *obj != nil && (*obj).Commit != nil {
			commit_entry = (*obj).Commit
		} else {
			commit_entry = new(adminrole.RoleDeviceWebuiCommit)
		}

		diags.Append(o.Commit.CopyToPango(ctx, &commit_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	dashboard_value := o.Dashboard.ValueStringPointer()
	var device_entry *adminrole.RoleDeviceWebuiDevice
	if o.Device != nil {
		if *obj != nil && (*obj).Device != nil {
			device_entry = (*obj).Device
		} else {
			device_entry = new(adminrole.RoleDeviceWebuiDevice)
		}

		diags.Append(o.Device.CopyToPango(ctx, &device_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var global_entry *adminrole.RoleDeviceWebuiGlobal
	if o.Global != nil {
		if *obj != nil && (*obj).Global != nil {
			global_entry = (*obj).Global
		} else {
			global_entry = new(adminrole.RoleDeviceWebuiGlobal)
		}

		diags.Append(o.Global.CopyToPango(ctx, &global_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var monitor_entry *adminrole.RoleDeviceWebuiMonitor
	if o.Monitor != nil {
		if *obj != nil && (*obj).Monitor != nil {
			monitor_entry = (*obj).Monitor
		} else {
			monitor_entry = new(adminrole.RoleDeviceWebuiMonitor)
		}

		diags.Append(o.Monitor.CopyToPango(ctx, &monitor_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var network_entry *adminrole.RoleDeviceWebuiNetwork
	if o.Network != nil {
		if *obj != nil && (*obj).Network != nil {
			network_entry = (*obj).Network
		} else {
			network_entry = new(adminrole.RoleDeviceWebuiNetwork)
		}

		diags.Append(o.Network.CopyToPango(ctx, &network_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var objects_entry *adminrole.RoleDeviceWebuiObjects
	if o.Objects != nil {
		if *obj != nil && (*obj).Objects != nil {
			objects_entry = (*obj).Objects
		} else {
			objects_entry = new(adminrole.RoleDeviceWebuiObjects)
		}

		diags.Append(o.Objects.CopyToPango(ctx, &objects_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var operations_entry *adminrole.RoleDeviceWebuiOperations
	if o.Operations != nil {
		if *obj != nil && (*obj).Operations != nil {
			operations_entry = (*obj).Operations
		} else {
			operations_entry = new(adminrole.RoleDeviceWebuiOperations)
		}

		diags.Append(o.Operations.CopyToPango(ctx, &operations_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var policies_entry *adminrole.RoleDeviceWebuiPolicies
	if o.Policies != nil {
		if *obj != nil && (*obj).Policies != nil {
			policies_entry = (*obj).Policies
		} else {
			policies_entry = new(adminrole.RoleDeviceWebuiPolicies)
		}

		diags.Append(o.Policies.CopyToPango(ctx, &policies_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var privacy_entry *adminrole.RoleDeviceWebuiPrivacy
	if o.Privacy != nil {
		if *obj != nil && (*obj).Privacy != nil {
			privacy_entry = (*obj).Privacy
		} else {
			privacy_entry = new(adminrole.RoleDeviceWebuiPrivacy)
		}

		diags.Append(o.Privacy.CopyToPango(ctx, &privacy_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var save_entry *adminrole.RoleDeviceWebuiSave
	if o.Save != nil {
		if *obj != nil && (*obj).Save != nil {
			save_entry = (*obj).Save
		} else {
			save_entry = new(adminrole.RoleDeviceWebuiSave)
		}

		diags.Append(o.Save.CopyToPango(ctx, &save_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	tasks_value := o.Tasks.ValueStringPointer()
	validate_value := o.Validate.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebui)
	}
	(*obj).Acc = acc_value
	(*obj).Commit = commit_entry
	(*obj).Dashboard = dashboard_value
	(*obj).Device = device_entry
	(*obj).Global = global_entry
	(*obj).Monitor = monitor_entry
	(*obj).Network = network_entry
	(*obj).Objects = objects_entry
	(*obj).Operations = operations_entry
	(*obj).Policies = policies_entry
	(*obj).Privacy = privacy_entry
	(*obj).Save = save_entry
	(*obj).Tasks = tasks_value
	(*obj).Validate = validate_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiCommitObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiCommit, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	commitForOtherAdmins_value := o.CommitForOtherAdmins.ValueStringPointer()
	device_value := o.Device.ValueStringPointer()
	objectLevelChanges_value := o.ObjectLevelChanges.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiCommit)
	}
	(*obj).CommitForOtherAdmins = commitForOtherAdmins_value
	(*obj).Device = device_value
	(*obj).ObjectLevelChanges = objectLevelChanges_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiDeviceObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiDevice, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	accessDomain_value := o.AccessDomain.ValueStringPointer()
	adminRoles_value := o.AdminRoles.ValueStringPointer()
	administrators_value := o.Administrators.ValueStringPointer()
	authenticationProfile_value := o.AuthenticationProfile.ValueStringPointer()
	authenticationSequence_value := o.AuthenticationSequence.ValueStringPointer()
	blockPages_value := o.BlockPages.ValueStringPointer()
	var certificateManagement_entry *adminrole.RoleDeviceWebuiDeviceCertificateManagement
	if o.CertificateManagement != nil {
		if *obj != nil && (*obj).CertificateManagement != nil {
			certificateManagement_entry = (*obj).CertificateManagement
		} else {
			certificateManagement_entry = new(adminrole.RoleDeviceWebuiDeviceCertificateManagement)
		}

		diags.Append(o.CertificateManagement.CopyToPango(ctx, &certificateManagement_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	configAudit_value := o.ConfigAudit.ValueStringPointer()
	dataRedistribution_value := o.DataRedistribution.ValueStringPointer()
	deviceQuarantine_value := o.DeviceQuarantine.ValueStringPointer()
	dynamicUpdates_value := o.DynamicUpdates.ValueStringPointer()
	globalProtectClient_value := o.GlobalProtectClient.ValueStringPointer()
	highAvailability_value := o.HighAvailability.ValueStringPointer()
	licenses_value := o.Licenses.ValueStringPointer()
	var localUserDatabase_entry *adminrole.RoleDeviceWebuiDeviceLocalUserDatabase
	if o.LocalUserDatabase != nil {
		if *obj != nil && (*obj).LocalUserDatabase != nil {
			localUserDatabase_entry = (*obj).LocalUserDatabase
		} else {
			localUserDatabase_entry = new(adminrole.RoleDeviceWebuiDeviceLocalUserDatabase)
		}

		diags.Append(o.LocalUserDatabase.CopyToPango(ctx, &localUserDatabase_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	logFwdCard_value := o.LogFwdCard.ValueStringPointer()
	var logSettings_entry *adminrole.RoleDeviceWebuiDeviceLogSettings
	if o.LogSettings != nil {
		if *obj != nil && (*obj).LogSettings != nil {
			logSettings_entry = (*obj).LogSettings
		} else {
			logSettings_entry = new(adminrole.RoleDeviceWebuiDeviceLogSettings)
		}

		diags.Append(o.LogSettings.CopyToPango(ctx, &logSettings_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	masterKey_value := o.MasterKey.ValueStringPointer()
	plugins_value := o.Plugins.ValueStringPointer()
	var policyRecommendations_entry *adminrole.RoleDeviceWebuiDevicePolicyRecommendations
	if o.PolicyRecommendations != nil {
		if *obj != nil && (*obj).PolicyRecommendations != nil {
			policyRecommendations_entry = (*obj).PolicyRecommendations
		} else {
			policyRecommendations_entry = new(adminrole.RoleDeviceWebuiDevicePolicyRecommendations)
		}

		diags.Append(o.PolicyRecommendations.CopyToPango(ctx, &policyRecommendations_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	scheduledLogExport_value := o.ScheduledLogExport.ValueStringPointer()
	var serverProfile_entry *adminrole.RoleDeviceWebuiDeviceServerProfile
	if o.ServerProfile != nil {
		if *obj != nil && (*obj).ServerProfile != nil {
			serverProfile_entry = (*obj).ServerProfile
		} else {
			serverProfile_entry = new(adminrole.RoleDeviceWebuiDeviceServerProfile)
		}

		diags.Append(o.ServerProfile.CopyToPango(ctx, &serverProfile_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var setup_entry *adminrole.RoleDeviceWebuiDeviceSetup
	if o.Setup != nil {
		if *obj != nil && (*obj).Setup != nil {
			setup_entry = (*obj).Setup
		} else {
			setup_entry = new(adminrole.RoleDeviceWebuiDeviceSetup)
		}

		diags.Append(o.Setup.CopyToPango(ctx, &setup_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	sharedGateways_value := o.SharedGateways.ValueStringPointer()
	software_value := o.Software.ValueStringPointer()
	support_value := o.Support.ValueStringPointer()
	troubleshooting_value := o.Troubleshooting.ValueStringPointer()
	userIdentification_value := o.UserIdentification.ValueStringPointer()
	virtualSystems_value := o.VirtualSystems.ValueStringPointer()
	vmInfoSource_value := o.VmInfoSource.ValueStringPointer()
	dhcpSyslogServer_value := o.DhcpSyslogServer.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiDevice)
	}
	(*obj).AccessDomain = accessDomain_value
	(*obj).AdminRoles = adminRoles_value
	(*obj).Administrators = administrators_value
	(*obj).AuthenticationProfile = authenticationProfile_value
	(*obj).AuthenticationSequence = authenticationSequence_value
	(*obj).BlockPages = blockPages_value
	(*obj).CertificateManagement = certificateManagement_entry
	(*obj).ConfigAudit = configAudit_value
	(*obj).DataRedistribution = dataRedistribution_value
	(*obj).DeviceQuarantine = deviceQuarantine_value
	(*obj).DynamicUpdates = dynamicUpdates_value
	(*obj).GlobalProtectClient = globalProtectClient_value
	(*obj).HighAvailability = highAvailability_value
	(*obj).Licenses = licenses_value
	(*obj).LocalUserDatabase = localUserDatabase_entry
	(*obj).LogFwdCard = logFwdCard_value
	(*obj).LogSettings = logSettings_entry
	(*obj).MasterKey = masterKey_value
	(*obj).Plugins = plugins_value
	(*obj).PolicyRecommendations = policyRecommendations_entry
	(*obj).ScheduledLogExport = scheduledLogExport_value
	(*obj).ServerProfile = serverProfile_entry
	(*obj).Setup = setup_entry
	(*obj).SharedGateways = sharedGateways_value
	(*obj).Software = software_value
	(*obj).Support = support_value
	(*obj).Troubleshooting = troubleshooting_value
	(*obj).UserIdentification = userIdentification_value
	(*obj).VirtualSystems = virtualSystems_value
	(*obj).VmInfoSource = vmInfoSource_value
	(*obj).DhcpSyslogServer = dhcpSyslogServer_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiDeviceCertificateManagementObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiDeviceCertificateManagement, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	certificateProfile_value := o.CertificateProfile.ValueStringPointer()
	certificates_value := o.Certificates.ValueStringPointer()
	ocspResponder_value := o.OcspResponder.ValueStringPointer()
	scep_value := o.Scep.ValueStringPointer()
	sshServiceProfile_value := o.SshServiceProfile.ValueStringPointer()
	sslDecryptionExclusion_value := o.SslDecryptionExclusion.ValueStringPointer()
	sslTlsServiceProfile_value := o.SslTlsServiceProfile.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiDeviceCertificateManagement)
	}
	(*obj).CertificateProfile = certificateProfile_value
	(*obj).Certificates = certificates_value
	(*obj).OcspResponder = ocspResponder_value
	(*obj).Scep = scep_value
	(*obj).SshServiceProfile = sshServiceProfile_value
	(*obj).SslDecryptionExclusion = sslDecryptionExclusion_value
	(*obj).SslTlsServiceProfile = sslTlsServiceProfile_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiDeviceLocalUserDatabaseObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiDeviceLocalUserDatabase, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	userGroups_value := o.UserGroups.ValueStringPointer()
	users_value := o.Users.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiDeviceLocalUserDatabase)
	}
	(*obj).UserGroups = userGroups_value
	(*obj).Users = users_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiDeviceLogSettingsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiDeviceLogSettings, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	ccAlarm_value := o.CcAlarm.ValueStringPointer()
	config_value := o.Config.ValueStringPointer()
	correlation_value := o.Correlation.ValueStringPointer()
	globalprotect_value := o.Globalprotect.ValueStringPointer()
	hipmatch_value := o.Hipmatch.ValueStringPointer()
	iptag_value := o.Iptag.ValueStringPointer()
	manageLog_value := o.ManageLog.ValueStringPointer()
	system_value := o.System.ValueStringPointer()
	userId_value := o.UserId.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiDeviceLogSettings)
	}
	(*obj).CcAlarm = ccAlarm_value
	(*obj).Config = config_value
	(*obj).Correlation = correlation_value
	(*obj).Globalprotect = globalprotect_value
	(*obj).Hipmatch = hipmatch_value
	(*obj).Iptag = iptag_value
	(*obj).ManageLog = manageLog_value
	(*obj).System = system_value
	(*obj).UserId = userId_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiDevicePolicyRecommendationsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiDevicePolicyRecommendations, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	iot_value := o.Iot.ValueStringPointer()
	saas_value := o.Saas.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiDevicePolicyRecommendations)
	}
	(*obj).Iot = iot_value
	(*obj).Saas = saas_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiDeviceServerProfileObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiDeviceServerProfile, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	dns_value := o.Dns.ValueStringPointer()
	email_value := o.Email.ValueStringPointer()
	http_value := o.Http.ValueStringPointer()
	kerberos_value := o.Kerberos.ValueStringPointer()
	ldap_value := o.Ldap.ValueStringPointer()
	mfa_value := o.Mfa.ValueStringPointer()
	netflow_value := o.Netflow.ValueStringPointer()
	radius_value := o.Radius.ValueStringPointer()
	samlIdp_value := o.SamlIdp.ValueStringPointer()
	scp_value := o.Scp.ValueStringPointer()
	snmpTrap_value := o.SnmpTrap.ValueStringPointer()
	syslog_value := o.Syslog.ValueStringPointer()
	tacplus_value := o.Tacplus.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiDeviceServerProfile)
	}
	(*obj).Dns = dns_value
	(*obj).Email = email_value
	(*obj).Http = http_value
	(*obj).Kerberos = kerberos_value
	(*obj).Ldap = ldap_value
	(*obj).Mfa = mfa_value
	(*obj).Netflow = netflow_value
	(*obj).Radius = radius_value
	(*obj).SamlIdp = samlIdp_value
	(*obj).Scp = scp_value
	(*obj).SnmpTrap = snmpTrap_value
	(*obj).Syslog = syslog_value
	(*obj).Tacplus = tacplus_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiDeviceSetupObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiDeviceSetup, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	contentId_value := o.ContentId.ValueStringPointer()
	hsm_value := o.Hsm.ValueStringPointer()
	interfaces_value := o.Interfaces.ValueStringPointer()
	management_value := o.Management.ValueStringPointer()
	operations_value := o.Operations.ValueStringPointer()
	services_value := o.Services.ValueStringPointer()
	session_value := o.Session.ValueStringPointer()
	telemetry_value := o.Telemetry.ValueStringPointer()
	wildfire_value := o.Wildfire.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiDeviceSetup)
	}
	(*obj).ContentId = contentId_value
	(*obj).Hsm = hsm_value
	(*obj).Interfaces = interfaces_value
	(*obj).Management = management_value
	(*obj).Operations = operations_value
	(*obj).Services = services_value
	(*obj).Session = session_value
	(*obj).Telemetry = telemetry_value
	(*obj).Wildfire = wildfire_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiGlobalObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiGlobal, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	systemAlarms_value := o.SystemAlarms.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiGlobal)
	}
	(*obj).SystemAlarms = systemAlarms_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiMonitorObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiMonitor, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	appScope_value := o.AppScope.ValueStringPointer()
	applicationReports_value := o.ApplicationReports.ValueStringPointer()
	var automatedCorrelationEngine_entry *adminrole.RoleDeviceWebuiMonitorAutomatedCorrelationEngine
	if o.AutomatedCorrelationEngine != nil {
		if *obj != nil && (*obj).AutomatedCorrelationEngine != nil {
			automatedCorrelationEngine_entry = (*obj).AutomatedCorrelationEngine
		} else {
			automatedCorrelationEngine_entry = new(adminrole.RoleDeviceWebuiMonitorAutomatedCorrelationEngine)
		}

		diags.Append(o.AutomatedCorrelationEngine.CopyToPango(ctx, &automatedCorrelationEngine_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	blockIpList_value := o.BlockIpList.ValueStringPointer()
	botnet_value := o.Botnet.ValueStringPointer()
	var customReports_entry *adminrole.RoleDeviceWebuiMonitorCustomReports
	if o.CustomReports != nil {
		if *obj != nil && (*obj).CustomReports != nil {
			customReports_entry = (*obj).CustomReports
		} else {
			customReports_entry = new(adminrole.RoleDeviceWebuiMonitorCustomReports)
		}

		diags.Append(o.CustomReports.CopyToPango(ctx, &customReports_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	externalLogs_value := o.ExternalLogs.ValueStringPointer()
	gtpReports_value := o.GtpReports.ValueStringPointer()
	var logs_entry *adminrole.RoleDeviceWebuiMonitorLogs
	if o.Logs != nil {
		if *obj != nil && (*obj).Logs != nil {
			logs_entry = (*obj).Logs
		} else {
			logs_entry = new(adminrole.RoleDeviceWebuiMonitorLogs)
		}

		diags.Append(o.Logs.CopyToPango(ctx, &logs_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	packetCapture_value := o.PacketCapture.ValueStringPointer()
	var pdfReports_entry *adminrole.RoleDeviceWebuiMonitorPdfReports
	if o.PdfReports != nil {
		if *obj != nil && (*obj).PdfReports != nil {
			pdfReports_entry = (*obj).PdfReports
		} else {
			pdfReports_entry = new(adminrole.RoleDeviceWebuiMonitorPdfReports)
		}

		diags.Append(o.PdfReports.CopyToPango(ctx, &pdfReports_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	sctpReports_value := o.SctpReports.ValueStringPointer()
	sessionBrowser_value := o.SessionBrowser.ValueStringPointer()
	threatReports_value := o.ThreatReports.ValueStringPointer()
	trafficReports_value := o.TrafficReports.ValueStringPointer()
	urlFilteringReports_value := o.UrlFilteringReports.ValueStringPointer()
	viewCustomReports_value := o.ViewCustomReports.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiMonitor)
	}
	(*obj).AppScope = appScope_value
	(*obj).ApplicationReports = applicationReports_value
	(*obj).AutomatedCorrelationEngine = automatedCorrelationEngine_entry
	(*obj).BlockIpList = blockIpList_value
	(*obj).Botnet = botnet_value
	(*obj).CustomReports = customReports_entry
	(*obj).ExternalLogs = externalLogs_value
	(*obj).GtpReports = gtpReports_value
	(*obj).Logs = logs_entry
	(*obj).PacketCapture = packetCapture_value
	(*obj).PdfReports = pdfReports_entry
	(*obj).SctpReports = sctpReports_value
	(*obj).SessionBrowser = sessionBrowser_value
	(*obj).ThreatReports = threatReports_value
	(*obj).TrafficReports = trafficReports_value
	(*obj).UrlFilteringReports = urlFilteringReports_value
	(*obj).ViewCustomReports = viewCustomReports_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiMonitorAutomatedCorrelationEngineObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiMonitorAutomatedCorrelationEngine, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	correlatedEvents_value := o.CorrelatedEvents.ValueStringPointer()
	correlationObjects_value := o.CorrelationObjects.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiMonitorAutomatedCorrelationEngine)
	}
	(*obj).CorrelatedEvents = correlatedEvents_value
	(*obj).CorrelationObjects = correlationObjects_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiMonitorCustomReportsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiMonitorCustomReports, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	applicationStatistics_value := o.ApplicationStatistics.ValueStringPointer()
	auth_value := o.Auth.ValueStringPointer()
	dataFilteringLog_value := o.DataFilteringLog.ValueStringPointer()
	decryptionLog_value := o.DecryptionLog.ValueStringPointer()
	decryptionSummary_value := o.DecryptionSummary.ValueStringPointer()
	globalprotect_value := o.Globalprotect.ValueStringPointer()
	gtpLog_value := o.GtpLog.ValueStringPointer()
	gtpSummary_value := o.GtpSummary.ValueStringPointer()
	hipmatch_value := o.Hipmatch.ValueStringPointer()
	iptag_value := o.Iptag.ValueStringPointer()
	sctpLog_value := o.SctpLog.ValueStringPointer()
	sctpSummary_value := o.SctpSummary.ValueStringPointer()
	threatLog_value := o.ThreatLog.ValueStringPointer()
	threatSummary_value := o.ThreatSummary.ValueStringPointer()
	trafficLog_value := o.TrafficLog.ValueStringPointer()
	trafficSummary_value := o.TrafficSummary.ValueStringPointer()
	tunnelLog_value := o.TunnelLog.ValueStringPointer()
	tunnelSummary_value := o.TunnelSummary.ValueStringPointer()
	urlLog_value := o.UrlLog.ValueStringPointer()
	urlSummary_value := o.UrlSummary.ValueStringPointer()
	userid_value := o.Userid.ValueStringPointer()
	wildfireLog_value := o.WildfireLog.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiMonitorCustomReports)
	}
	(*obj).ApplicationStatistics = applicationStatistics_value
	(*obj).Auth = auth_value
	(*obj).DataFilteringLog = dataFilteringLog_value
	(*obj).DecryptionLog = decryptionLog_value
	(*obj).DecryptionSummary = decryptionSummary_value
	(*obj).Globalprotect = globalprotect_value
	(*obj).GtpLog = gtpLog_value
	(*obj).GtpSummary = gtpSummary_value
	(*obj).Hipmatch = hipmatch_value
	(*obj).Iptag = iptag_value
	(*obj).SctpLog = sctpLog_value
	(*obj).SctpSummary = sctpSummary_value
	(*obj).ThreatLog = threatLog_value
	(*obj).ThreatSummary = threatSummary_value
	(*obj).TrafficLog = trafficLog_value
	(*obj).TrafficSummary = trafficSummary_value
	(*obj).TunnelLog = tunnelLog_value
	(*obj).TunnelSummary = tunnelSummary_value
	(*obj).UrlLog = urlLog_value
	(*obj).UrlSummary = urlSummary_value
	(*obj).Userid = userid_value
	(*obj).WildfireLog = wildfireLog_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiMonitorLogsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiMonitorLogs, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	alarm_value := o.Alarm.ValueStringPointer()
	authentication_value := o.Authentication.ValueStringPointer()
	configuration_value := o.Configuration.ValueStringPointer()
	dataFiltering_value := o.DataFiltering.ValueStringPointer()
	decryption_value := o.Decryption.ValueStringPointer()
	globalprotect_value := o.Globalprotect.ValueStringPointer()
	gtp_value := o.Gtp.ValueStringPointer()
	hipmatch_value := o.Hipmatch.ValueStringPointer()
	iptag_value := o.Iptag.ValueStringPointer()
	sctp_value := o.Sctp.ValueStringPointer()
	system_value := o.System.ValueStringPointer()
	threat_value := o.Threat.ValueStringPointer()
	traffic_value := o.Traffic.ValueStringPointer()
	tunnel_value := o.Tunnel.ValueStringPointer()
	url_value := o.Url.ValueStringPointer()
	userid_value := o.Userid.ValueStringPointer()
	wildfire_value := o.Wildfire.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiMonitorLogs)
	}
	(*obj).Alarm = alarm_value
	(*obj).Authentication = authentication_value
	(*obj).Configuration = configuration_value
	(*obj).DataFiltering = dataFiltering_value
	(*obj).Decryption = decryption_value
	(*obj).Globalprotect = globalprotect_value
	(*obj).Gtp = gtp_value
	(*obj).Hipmatch = hipmatch_value
	(*obj).Iptag = iptag_value
	(*obj).Sctp = sctp_value
	(*obj).System = system_value
	(*obj).Threat = threat_value
	(*obj).Traffic = traffic_value
	(*obj).Tunnel = tunnel_value
	(*obj).Url = url_value
	(*obj).Userid = userid_value
	(*obj).Wildfire = wildfire_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiMonitorPdfReportsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiMonitorPdfReports, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	emailScheduler_value := o.EmailScheduler.ValueStringPointer()
	managePdfSummary_value := o.ManagePdfSummary.ValueStringPointer()
	pdfSummaryReports_value := o.PdfSummaryReports.ValueStringPointer()
	reportGroups_value := o.ReportGroups.ValueStringPointer()
	saasApplicationUsageReport_value := o.SaasApplicationUsageReport.ValueStringPointer()
	userActivityReport_value := o.UserActivityReport.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiMonitorPdfReports)
	}
	(*obj).EmailScheduler = emailScheduler_value
	(*obj).ManagePdfSummary = managePdfSummary_value
	(*obj).PdfSummaryReports = pdfSummaryReports_value
	(*obj).ReportGroups = reportGroups_value
	(*obj).SaasApplicationUsageReport = saasApplicationUsageReport_value
	(*obj).UserActivityReport = userActivityReport_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiNetworkObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiNetwork, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	dhcp_value := o.Dhcp.ValueStringPointer()
	dnsProxy_value := o.DnsProxy.ValueStringPointer()
	var globalProtect_entry *adminrole.RoleDeviceWebuiNetworkGlobalProtect
	if o.GlobalProtect != nil {
		if *obj != nil && (*obj).GlobalProtect != nil {
			globalProtect_entry = (*obj).GlobalProtect
		} else {
			globalProtect_entry = new(adminrole.RoleDeviceWebuiNetworkGlobalProtect)
		}

		diags.Append(o.GlobalProtect.CopyToPango(ctx, &globalProtect_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	greTunnels_value := o.GreTunnels.ValueStringPointer()
	interfaces_value := o.Interfaces.ValueStringPointer()
	ipsecTunnels_value := o.IpsecTunnels.ValueStringPointer()
	lldp_value := o.Lldp.ValueStringPointer()
	var networkProfiles_entry *adminrole.RoleDeviceWebuiNetworkNetworkProfiles
	if o.NetworkProfiles != nil {
		if *obj != nil && (*obj).NetworkProfiles != nil {
			networkProfiles_entry = (*obj).NetworkProfiles
		} else {
			networkProfiles_entry = new(adminrole.RoleDeviceWebuiNetworkNetworkProfiles)
		}

		diags.Append(o.NetworkProfiles.CopyToPango(ctx, &networkProfiles_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	qos_value := o.Qos.ValueStringPointer()
	var routing_entry *adminrole.RoleDeviceWebuiNetworkRouting
	if o.Routing != nil {
		if *obj != nil && (*obj).Routing != nil {
			routing_entry = (*obj).Routing
		} else {
			routing_entry = new(adminrole.RoleDeviceWebuiNetworkRouting)
		}

		diags.Append(o.Routing.CopyToPango(ctx, &routing_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	sdwanInterfaceProfile_value := o.SdwanInterfaceProfile.ValueStringPointer()
	virtualRouters_value := o.VirtualRouters.ValueStringPointer()
	virtualWires_value := o.VirtualWires.ValueStringPointer()
	vlans_value := o.Vlans.ValueStringPointer()
	zones_value := o.Zones.ValueStringPointer()
	secureWebGateway_value := o.SecureWebGateway.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiNetwork)
	}
	(*obj).Dhcp = dhcp_value
	(*obj).DnsProxy = dnsProxy_value
	(*obj).GlobalProtect = globalProtect_entry
	(*obj).GreTunnels = greTunnels_value
	(*obj).Interfaces = interfaces_value
	(*obj).IpsecTunnels = ipsecTunnels_value
	(*obj).Lldp = lldp_value
	(*obj).NetworkProfiles = networkProfiles_entry
	(*obj).Qos = qos_value
	(*obj).Routing = routing_entry
	(*obj).SdwanInterfaceProfile = sdwanInterfaceProfile_value
	(*obj).VirtualRouters = virtualRouters_value
	(*obj).VirtualWires = virtualWires_value
	(*obj).Vlans = vlans_value
	(*obj).Zones = zones_value
	(*obj).SecureWebGateway = secureWebGateway_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiNetworkGlobalProtectObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiNetworkGlobalProtect, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	clientlessAppGroups_value := o.ClientlessAppGroups.ValueStringPointer()
	clientlessApps_value := o.ClientlessApps.ValueStringPointer()
	gateways_value := o.Gateways.ValueStringPointer()
	mdm_value := o.Mdm.ValueStringPointer()
	portals_value := o.Portals.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiNetworkGlobalProtect)
	}
	(*obj).ClientlessAppGroups = clientlessAppGroups_value
	(*obj).ClientlessApps = clientlessApps_value
	(*obj).Gateways = gateways_value
	(*obj).Mdm = mdm_value
	(*obj).Portals = portals_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiNetworkNetworkProfilesObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiNetworkNetworkProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	bfdProfile_value := o.BfdProfile.ValueStringPointer()
	gpAppIpsecCrypto_value := o.GpAppIpsecCrypto.ValueStringPointer()
	ikeCrypto_value := o.IkeCrypto.ValueStringPointer()
	ikeGateways_value := o.IkeGateways.ValueStringPointer()
	interfaceMgmt_value := o.InterfaceMgmt.ValueStringPointer()
	ipsecCrypto_value := o.IpsecCrypto.ValueStringPointer()
	lldpProfile_value := o.LldpProfile.ValueStringPointer()
	qosProfile_value := o.QosProfile.ValueStringPointer()
	tunnelMonitor_value := o.TunnelMonitor.ValueStringPointer()
	zoneProtection_value := o.ZoneProtection.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiNetworkNetworkProfiles)
	}
	(*obj).BfdProfile = bfdProfile_value
	(*obj).GpAppIpsecCrypto = gpAppIpsecCrypto_value
	(*obj).IkeCrypto = ikeCrypto_value
	(*obj).IkeGateways = ikeGateways_value
	(*obj).InterfaceMgmt = interfaceMgmt_value
	(*obj).IpsecCrypto = ipsecCrypto_value
	(*obj).LldpProfile = lldpProfile_value
	(*obj).QosProfile = qosProfile_value
	(*obj).TunnelMonitor = tunnelMonitor_value
	(*obj).ZoneProtection = zoneProtection_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiNetworkRoutingObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiNetworkRouting, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	logicalRouters_value := o.LogicalRouters.ValueStringPointer()
	var routingProfiles_entry *adminrole.RoleDeviceWebuiNetworkRoutingRoutingProfiles
	if o.RoutingProfiles != nil {
		if *obj != nil && (*obj).RoutingProfiles != nil {
			routingProfiles_entry = (*obj).RoutingProfiles
		} else {
			routingProfiles_entry = new(adminrole.RoleDeviceWebuiNetworkRoutingRoutingProfiles)
		}

		diags.Append(o.RoutingProfiles.CopyToPango(ctx, &routingProfiles_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiNetworkRouting)
	}
	(*obj).LogicalRouters = logicalRouters_value
	(*obj).RoutingProfiles = routingProfiles_entry

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiNetworkRoutingRoutingProfilesObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiNetworkRoutingRoutingProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	bfd_value := o.Bfd.ValueStringPointer()
	bgp_value := o.Bgp.ValueStringPointer()
	filters_value := o.Filters.ValueStringPointer()
	multicast_value := o.Multicast.ValueStringPointer()
	ospf_value := o.Ospf.ValueStringPointer()
	ospfv3_value := o.Ospfv3.ValueStringPointer()
	ripv2_value := o.Ripv2.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiNetworkRoutingRoutingProfiles)
	}
	(*obj).Bfd = bfd_value
	(*obj).Bgp = bgp_value
	(*obj).Filters = filters_value
	(*obj).Multicast = multicast_value
	(*obj).Ospf = ospf_value
	(*obj).Ospfv3 = ospfv3_value
	(*obj).Ripv2 = ripv2_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiObjectsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	addressGroups_value := o.AddressGroups.ValueStringPointer()
	addresses_value := o.Addresses.ValueStringPointer()
	applicationFilters_value := o.ApplicationFilters.ValueStringPointer()
	applicationGroups_value := o.ApplicationGroups.ValueStringPointer()
	applications_value := o.Applications.ValueStringPointer()
	authentication_value := o.Authentication.ValueStringPointer()
	var customObjects_entry *adminrole.RoleDeviceWebuiObjectsCustomObjects
	if o.CustomObjects != nil {
		if *obj != nil && (*obj).CustomObjects != nil {
			customObjects_entry = (*obj).CustomObjects
		} else {
			customObjects_entry = new(adminrole.RoleDeviceWebuiObjectsCustomObjects)
		}

		diags.Append(o.CustomObjects.CopyToPango(ctx, &customObjects_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var decryption_entry *adminrole.RoleDeviceWebuiObjectsDecryption
	if o.Decryption != nil {
		if *obj != nil && (*obj).Decryption != nil {
			decryption_entry = (*obj).Decryption
		} else {
			decryption_entry = new(adminrole.RoleDeviceWebuiObjectsDecryption)
		}

		diags.Append(o.Decryption.CopyToPango(ctx, &decryption_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	devices_value := o.Devices.ValueStringPointer()
	dynamicBlockLists_value := o.DynamicBlockLists.ValueStringPointer()
	dynamicUserGroups_value := o.DynamicUserGroups.ValueStringPointer()
	var globalProtect_entry *adminrole.RoleDeviceWebuiObjectsGlobalProtect
	if o.GlobalProtect != nil {
		if *obj != nil && (*obj).GlobalProtect != nil {
			globalProtect_entry = (*obj).GlobalProtect
		} else {
			globalProtect_entry = new(adminrole.RoleDeviceWebuiObjectsGlobalProtect)
		}

		diags.Append(o.GlobalProtect.CopyToPango(ctx, &globalProtect_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	logForwarding_value := o.LogForwarding.ValueStringPointer()
	packetBrokerProfile_value := o.PacketBrokerProfile.ValueStringPointer()
	regions_value := o.Regions.ValueStringPointer()
	schedules_value := o.Schedules.ValueStringPointer()
	var sdwan_entry *adminrole.RoleDeviceWebuiObjectsSdwan
	if o.Sdwan != nil {
		if *obj != nil && (*obj).Sdwan != nil {
			sdwan_entry = (*obj).Sdwan
		} else {
			sdwan_entry = new(adminrole.RoleDeviceWebuiObjectsSdwan)
		}

		diags.Append(o.Sdwan.CopyToPango(ctx, &sdwan_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	securityProfileGroups_value := o.SecurityProfileGroups.ValueStringPointer()
	var securityProfiles_entry *adminrole.RoleDeviceWebuiObjectsSecurityProfiles
	if o.SecurityProfiles != nil {
		if *obj != nil && (*obj).SecurityProfiles != nil {
			securityProfiles_entry = (*obj).SecurityProfiles
		} else {
			securityProfiles_entry = new(adminrole.RoleDeviceWebuiObjectsSecurityProfiles)
		}

		diags.Append(o.SecurityProfiles.CopyToPango(ctx, &securityProfiles_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	serviceGroups_value := o.ServiceGroups.ValueStringPointer()
	services_value := o.Services.ValueStringPointer()
	tags_value := o.Tags.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiObjects)
	}
	(*obj).AddressGroups = addressGroups_value
	(*obj).Addresses = addresses_value
	(*obj).ApplicationFilters = applicationFilters_value
	(*obj).ApplicationGroups = applicationGroups_value
	(*obj).Applications = applications_value
	(*obj).Authentication = authentication_value
	(*obj).CustomObjects = customObjects_entry
	(*obj).Decryption = decryption_entry
	(*obj).Devices = devices_value
	(*obj).DynamicBlockLists = dynamicBlockLists_value
	(*obj).DynamicUserGroups = dynamicUserGroups_value
	(*obj).GlobalProtect = globalProtect_entry
	(*obj).LogForwarding = logForwarding_value
	(*obj).PacketBrokerProfile = packetBrokerProfile_value
	(*obj).Regions = regions_value
	(*obj).Schedules = schedules_value
	(*obj).Sdwan = sdwan_entry
	(*obj).SecurityProfileGroups = securityProfileGroups_value
	(*obj).SecurityProfiles = securityProfiles_entry
	(*obj).ServiceGroups = serviceGroups_value
	(*obj).Services = services_value
	(*obj).Tags = tags_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiObjectsCustomObjectsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiObjectsCustomObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	dataPatterns_value := o.DataPatterns.ValueStringPointer()
	spyware_value := o.Spyware.ValueStringPointer()
	urlCategory_value := o.UrlCategory.ValueStringPointer()
	vulnerability_value := o.Vulnerability.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiObjectsCustomObjects)
	}
	(*obj).DataPatterns = dataPatterns_value
	(*obj).Spyware = spyware_value
	(*obj).UrlCategory = urlCategory_value
	(*obj).Vulnerability = vulnerability_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiObjectsDecryptionObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiObjectsDecryption, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	decryptionProfile_value := o.DecryptionProfile.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiObjectsDecryption)
	}
	(*obj).DecryptionProfile = decryptionProfile_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiObjectsGlobalProtectObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiObjectsGlobalProtect, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	hipObjects_value := o.HipObjects.ValueStringPointer()
	hipProfiles_value := o.HipProfiles.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiObjectsGlobalProtect)
	}
	(*obj).HipObjects = hipObjects_value
	(*obj).HipProfiles = hipProfiles_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiObjectsSdwanObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiObjectsSdwan, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	sdwanDistProfile_value := o.SdwanDistProfile.ValueStringPointer()
	sdwanErrorCorrectionProfile_value := o.SdwanErrorCorrectionProfile.ValueStringPointer()
	sdwanProfile_value := o.SdwanProfile.ValueStringPointer()
	sdwanSaasQualityProfile_value := o.SdwanSaasQualityProfile.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiObjectsSdwan)
	}
	(*obj).SdwanDistProfile = sdwanDistProfile_value
	(*obj).SdwanErrorCorrectionProfile = sdwanErrorCorrectionProfile_value
	(*obj).SdwanProfile = sdwanProfile_value
	(*obj).SdwanSaasQualityProfile = sdwanSaasQualityProfile_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiObjectsSecurityProfilesObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiObjectsSecurityProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	antiSpyware_value := o.AntiSpyware.ValueStringPointer()
	antivirus_value := o.Antivirus.ValueStringPointer()
	dataFiltering_value := o.DataFiltering.ValueStringPointer()
	dosProtection_value := o.DosProtection.ValueStringPointer()
	fileBlocking_value := o.FileBlocking.ValueStringPointer()
	gtpProtection_value := o.GtpProtection.ValueStringPointer()
	sctpProtection_value := o.SctpProtection.ValueStringPointer()
	urlFiltering_value := o.UrlFiltering.ValueStringPointer()
	vulnerabilityProtection_value := o.VulnerabilityProtection.ValueStringPointer()
	wildfireAnalysis_value := o.WildfireAnalysis.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiObjectsSecurityProfiles)
	}
	(*obj).AntiSpyware = antiSpyware_value
	(*obj).Antivirus = antivirus_value
	(*obj).DataFiltering = dataFiltering_value
	(*obj).DosProtection = dosProtection_value
	(*obj).FileBlocking = fileBlocking_value
	(*obj).GtpProtection = gtpProtection_value
	(*obj).SctpProtection = sctpProtection_value
	(*obj).UrlFiltering = urlFiltering_value
	(*obj).VulnerabilityProtection = vulnerabilityProtection_value
	(*obj).WildfireAnalysis = wildfireAnalysis_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiOperationsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiOperations, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	downloadCoreFiles_value := o.DownloadCoreFiles.ValueStringPointer()
	downloadPcapFiles_value := o.DownloadPcapFiles.ValueStringPointer()
	generateStatsDumpFile_value := o.GenerateStatsDumpFile.ValueStringPointer()
	generateTechSupportFile_value := o.GenerateTechSupportFile.ValueStringPointer()
	reboot_value := o.Reboot.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiOperations)
	}
	(*obj).DownloadCoreFiles = downloadCoreFiles_value
	(*obj).DownloadPcapFiles = downloadPcapFiles_value
	(*obj).GenerateStatsDumpFile = generateStatsDumpFile_value
	(*obj).GenerateTechSupportFile = generateTechSupportFile_value
	(*obj).Reboot = reboot_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiPoliciesObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiPolicies, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	applicationOverrideRulebase_value := o.ApplicationOverrideRulebase.ValueStringPointer()
	authenticationRulebase_value := o.AuthenticationRulebase.ValueStringPointer()
	dosRulebase_value := o.DosRulebase.ValueStringPointer()
	natRulebase_value := o.NatRulebase.ValueStringPointer()
	networkPacketBrokerRulebase_value := o.NetworkPacketBrokerRulebase.ValueStringPointer()
	pbfRulebase_value := o.PbfRulebase.ValueStringPointer()
	qosRulebase_value := o.QosRulebase.ValueStringPointer()
	ruleHitCountReset_value := o.RuleHitCountReset.ValueStringPointer()
	sdwanRulebase_value := o.SdwanRulebase.ValueStringPointer()
	securityRulebase_value := o.SecurityRulebase.ValueStringPointer()
	sslDecryptionRulebase_value := o.SslDecryptionRulebase.ValueStringPointer()
	tunnelInspectRulebase_value := o.TunnelInspectRulebase.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiPolicies)
	}
	(*obj).ApplicationOverrideRulebase = applicationOverrideRulebase_value
	(*obj).AuthenticationRulebase = authenticationRulebase_value
	(*obj).DosRulebase = dosRulebase_value
	(*obj).NatRulebase = natRulebase_value
	(*obj).NetworkPacketBrokerRulebase = networkPacketBrokerRulebase_value
	(*obj).PbfRulebase = pbfRulebase_value
	(*obj).QosRulebase = qosRulebase_value
	(*obj).RuleHitCountReset = ruleHitCountReset_value
	(*obj).SdwanRulebase = sdwanRulebase_value
	(*obj).SecurityRulebase = securityRulebase_value
	(*obj).SslDecryptionRulebase = sslDecryptionRulebase_value
	(*obj).TunnelInspectRulebase = tunnelInspectRulebase_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiPrivacyObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiPrivacy, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	showFullIpAddresses_value := o.ShowFullIpAddresses.ValueStringPointer()
	showUserNamesInLogsAndReports_value := o.ShowUserNamesInLogsAndReports.ValueStringPointer()
	viewPcapFiles_value := o.ViewPcapFiles.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiPrivacy)
	}
	(*obj).ShowFullIpAddresses = showFullIpAddresses_value
	(*obj).ShowUserNamesInLogsAndReports = showUserNamesInLogsAndReports_value
	(*obj).ViewPcapFiles = viewPcapFiles_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceWebuiSaveObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceWebuiSave, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	partialSave_value := o.PartialSave.ValueStringPointer()
	saveForOtherAdmins_value := o.SaveForOtherAdmins.ValueStringPointer()
	objectLevelChanges_value := o.ObjectLevelChanges.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceWebuiSave)
	}
	(*obj).PartialSave = partialSave_value
	(*obj).SaveForOtherAdmins = saveForOtherAdmins_value
	(*obj).ObjectLevelChanges = objectLevelChanges_value

	return diags
}
func (o *AdminRoleResourceRoleDeviceXmlapiObject) CopyToPango(ctx context.Context, obj **adminrole.RoleDeviceXmlapi, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	commit_value := o.Commit.ValueStringPointer()
	config_value := o.Config.ValueStringPointer()
	export_value := o.Export.ValueStringPointer()
	import_value := o.Import.ValueStringPointer()
	iot_value := o.Iot.ValueStringPointer()
	log_value := o.Log.ValueStringPointer()
	op_value := o.Op.ValueStringPointer()
	report_value := o.Report.ValueStringPointer()
	userId_value := o.UserId.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleDeviceXmlapi)
	}
	(*obj).Commit = commit_value
	(*obj).Config = config_value
	(*obj).Export = export_value
	(*obj).Import = import_value
	(*obj).Iot = iot_value
	(*obj).Log = log_value
	(*obj).Op = op_value
	(*obj).Report = report_value
	(*obj).UserId = userId_value

	return diags
}
func (o *AdminRoleResourceRoleVsysObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsys, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	cli_value := o.Cli.ValueStringPointer()
	var restapi_entry *adminrole.RoleVsysRestapi
	if o.Restapi != nil {
		if *obj != nil && (*obj).Restapi != nil {
			restapi_entry = (*obj).Restapi
		} else {
			restapi_entry = new(adminrole.RoleVsysRestapi)
		}

		diags.Append(o.Restapi.CopyToPango(ctx, &restapi_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var webui_entry *adminrole.RoleVsysWebui
	if o.Webui != nil {
		if *obj != nil && (*obj).Webui != nil {
			webui_entry = (*obj).Webui
		} else {
			webui_entry = new(adminrole.RoleVsysWebui)
		}

		diags.Append(o.Webui.CopyToPango(ctx, &webui_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var xmlapi_entry *adminrole.RoleVsysXmlapi
	if o.Xmlapi != nil {
		if *obj != nil && (*obj).Xmlapi != nil {
			xmlapi_entry = (*obj).Xmlapi
		} else {
			xmlapi_entry = new(adminrole.RoleVsysXmlapi)
		}

		diags.Append(o.Xmlapi.CopyToPango(ctx, &xmlapi_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsys)
	}
	(*obj).Cli = cli_value
	(*obj).Restapi = restapi_entry
	(*obj).Webui = webui_entry
	(*obj).Xmlapi = xmlapi_entry

	return diags
}
func (o *AdminRoleResourceRoleVsysRestapiObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysRestapi, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var device_entry *adminrole.RoleVsysRestapiDevice
	if o.Device != nil {
		if *obj != nil && (*obj).Device != nil {
			device_entry = (*obj).Device
		} else {
			device_entry = new(adminrole.RoleVsysRestapiDevice)
		}

		diags.Append(o.Device.CopyToPango(ctx, &device_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var network_entry *adminrole.RoleVsysRestapiNetwork
	if o.Network != nil {
		if *obj != nil && (*obj).Network != nil {
			network_entry = (*obj).Network
		} else {
			network_entry = new(adminrole.RoleVsysRestapiNetwork)
		}

		diags.Append(o.Network.CopyToPango(ctx, &network_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var objects_entry *adminrole.RoleVsysRestapiObjects
	if o.Objects != nil {
		if *obj != nil && (*obj).Objects != nil {
			objects_entry = (*obj).Objects
		} else {
			objects_entry = new(adminrole.RoleVsysRestapiObjects)
		}

		diags.Append(o.Objects.CopyToPango(ctx, &objects_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var policies_entry *adminrole.RoleVsysRestapiPolicies
	if o.Policies != nil {
		if *obj != nil && (*obj).Policies != nil {
			policies_entry = (*obj).Policies
		} else {
			policies_entry = new(adminrole.RoleVsysRestapiPolicies)
		}

		diags.Append(o.Policies.CopyToPango(ctx, &policies_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var system_entry *adminrole.RoleVsysRestapiSystem
	if o.System != nil {
		if *obj != nil && (*obj).System != nil {
			system_entry = (*obj).System
		} else {
			system_entry = new(adminrole.RoleVsysRestapiSystem)
		}

		diags.Append(o.System.CopyToPango(ctx, &system_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysRestapi)
	}
	(*obj).Device = device_entry
	(*obj).Network = network_entry
	(*obj).Objects = objects_entry
	(*obj).Policies = policies_entry
	(*obj).System = system_entry

	return diags
}
func (o *AdminRoleResourceRoleVsysRestapiDeviceObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysRestapiDevice, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	emailServerProfiles_value := o.EmailServerProfiles.ValueStringPointer()
	httpServerProfiles_value := o.HttpServerProfiles.ValueStringPointer()
	ldapServerProfiles_value := o.LdapServerProfiles.ValueStringPointer()
	logInterfaceSetting_value := o.LogInterfaceSetting.ValueStringPointer()
	snmpTrapServerProfiles_value := o.SnmpTrapServerProfiles.ValueStringPointer()
	syslogServerProfiles_value := o.SyslogServerProfiles.ValueStringPointer()
	virtualSystems_value := o.VirtualSystems.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysRestapiDevice)
	}
	(*obj).EmailServerProfiles = emailServerProfiles_value
	(*obj).HttpServerProfiles = httpServerProfiles_value
	(*obj).LdapServerProfiles = ldapServerProfiles_value
	(*obj).LogInterfaceSetting = logInterfaceSetting_value
	(*obj).SnmpTrapServerProfiles = snmpTrapServerProfiles_value
	(*obj).SyslogServerProfiles = syslogServerProfiles_value
	(*obj).VirtualSystems = virtualSystems_value

	return diags
}
func (o *AdminRoleResourceRoleVsysRestapiNetworkObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysRestapiNetwork, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	globalprotectClientlessAppGroups_value := o.GlobalprotectClientlessAppGroups.ValueStringPointer()
	globalprotectClientlessApps_value := o.GlobalprotectClientlessApps.ValueStringPointer()
	globalprotectGateways_value := o.GlobalprotectGateways.ValueStringPointer()
	globalprotectMdmServers_value := o.GlobalprotectMdmServers.ValueStringPointer()
	globalprotectPortals_value := o.GlobalprotectPortals.ValueStringPointer()
	zones_value := o.Zones.ValueStringPointer()
	sdwanInterfaceProfiles_value := o.SdwanInterfaceProfiles.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysRestapiNetwork)
	}
	(*obj).GlobalprotectClientlessAppGroups = globalprotectClientlessAppGroups_value
	(*obj).GlobalprotectClientlessApps = globalprotectClientlessApps_value
	(*obj).GlobalprotectGateways = globalprotectGateways_value
	(*obj).GlobalprotectMdmServers = globalprotectMdmServers_value
	(*obj).GlobalprotectPortals = globalprotectPortals_value
	(*obj).Zones = zones_value
	(*obj).SdwanInterfaceProfiles = sdwanInterfaceProfiles_value

	return diags
}
func (o *AdminRoleResourceRoleVsysRestapiObjectsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysRestapiObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	addressGroups_value := o.AddressGroups.ValueStringPointer()
	addresses_value := o.Addresses.ValueStringPointer()
	antiSpywareSecurityProfiles_value := o.AntiSpywareSecurityProfiles.ValueStringPointer()
	antivirusSecurityProfiles_value := o.AntivirusSecurityProfiles.ValueStringPointer()
	applicationFilters_value := o.ApplicationFilters.ValueStringPointer()
	applicationGroups_value := o.ApplicationGroups.ValueStringPointer()
	applications_value := o.Applications.ValueStringPointer()
	authenticationEnforcements_value := o.AuthenticationEnforcements.ValueStringPointer()
	customDataPatterns_value := o.CustomDataPatterns.ValueStringPointer()
	customSpywareSignatures_value := o.CustomSpywareSignatures.ValueStringPointer()
	customUrlCategories_value := o.CustomUrlCategories.ValueStringPointer()
	customVulnerabilitySignatures_value := o.CustomVulnerabilitySignatures.ValueStringPointer()
	dataFilteringSecurityProfiles_value := o.DataFilteringSecurityProfiles.ValueStringPointer()
	decryptionProfiles_value := o.DecryptionProfiles.ValueStringPointer()
	devices_value := o.Devices.ValueStringPointer()
	dosProtectionSecurityProfiles_value := o.DosProtectionSecurityProfiles.ValueStringPointer()
	dynamicUserGroups_value := o.DynamicUserGroups.ValueStringPointer()
	externalDynamicLists_value := o.ExternalDynamicLists.ValueStringPointer()
	fileBlockingSecurityProfiles_value := o.FileBlockingSecurityProfiles.ValueStringPointer()
	globalprotectHipObjects_value := o.GlobalprotectHipObjects.ValueStringPointer()
	globalprotectHipProfiles_value := o.GlobalprotectHipProfiles.ValueStringPointer()
	gtpProtectionSecurityProfiles_value := o.GtpProtectionSecurityProfiles.ValueStringPointer()
	logForwardingProfiles_value := o.LogForwardingProfiles.ValueStringPointer()
	packetBrokerProfiles_value := o.PacketBrokerProfiles.ValueStringPointer()
	regions_value := o.Regions.ValueStringPointer()
	schedules_value := o.Schedules.ValueStringPointer()
	sctpProtectionSecurityProfiles_value := o.SctpProtectionSecurityProfiles.ValueStringPointer()
	sdwanErrorCorrectionProfiles_value := o.SdwanErrorCorrectionProfiles.ValueStringPointer()
	sdwanPathQualityProfiles_value := o.SdwanPathQualityProfiles.ValueStringPointer()
	sdwanSaasQualityProfiles_value := o.SdwanSaasQualityProfiles.ValueStringPointer()
	sdwanTrafficDistributionProfiles_value := o.SdwanTrafficDistributionProfiles.ValueStringPointer()
	securityProfileGroups_value := o.SecurityProfileGroups.ValueStringPointer()
	serviceGroups_value := o.ServiceGroups.ValueStringPointer()
	services_value := o.Services.ValueStringPointer()
	tags_value := o.Tags.ValueStringPointer()
	urlFilteringSecurityProfiles_value := o.UrlFilteringSecurityProfiles.ValueStringPointer()
	vulnerabilityProtectionSecurityProfiles_value := o.VulnerabilityProtectionSecurityProfiles.ValueStringPointer()
	wildfireAnalysisSecurityProfiles_value := o.WildfireAnalysisSecurityProfiles.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysRestapiObjects)
	}
	(*obj).AddressGroups = addressGroups_value
	(*obj).Addresses = addresses_value
	(*obj).AntiSpywareSecurityProfiles = antiSpywareSecurityProfiles_value
	(*obj).AntivirusSecurityProfiles = antivirusSecurityProfiles_value
	(*obj).ApplicationFilters = applicationFilters_value
	(*obj).ApplicationGroups = applicationGroups_value
	(*obj).Applications = applications_value
	(*obj).AuthenticationEnforcements = authenticationEnforcements_value
	(*obj).CustomDataPatterns = customDataPatterns_value
	(*obj).CustomSpywareSignatures = customSpywareSignatures_value
	(*obj).CustomUrlCategories = customUrlCategories_value
	(*obj).CustomVulnerabilitySignatures = customVulnerabilitySignatures_value
	(*obj).DataFilteringSecurityProfiles = dataFilteringSecurityProfiles_value
	(*obj).DecryptionProfiles = decryptionProfiles_value
	(*obj).Devices = devices_value
	(*obj).DosProtectionSecurityProfiles = dosProtectionSecurityProfiles_value
	(*obj).DynamicUserGroups = dynamicUserGroups_value
	(*obj).ExternalDynamicLists = externalDynamicLists_value
	(*obj).FileBlockingSecurityProfiles = fileBlockingSecurityProfiles_value
	(*obj).GlobalprotectHipObjects = globalprotectHipObjects_value
	(*obj).GlobalprotectHipProfiles = globalprotectHipProfiles_value
	(*obj).GtpProtectionSecurityProfiles = gtpProtectionSecurityProfiles_value
	(*obj).LogForwardingProfiles = logForwardingProfiles_value
	(*obj).PacketBrokerProfiles = packetBrokerProfiles_value
	(*obj).Regions = regions_value
	(*obj).Schedules = schedules_value
	(*obj).SctpProtectionSecurityProfiles = sctpProtectionSecurityProfiles_value
	(*obj).SdwanErrorCorrectionProfiles = sdwanErrorCorrectionProfiles_value
	(*obj).SdwanPathQualityProfiles = sdwanPathQualityProfiles_value
	(*obj).SdwanSaasQualityProfiles = sdwanSaasQualityProfiles_value
	(*obj).SdwanTrafficDistributionProfiles = sdwanTrafficDistributionProfiles_value
	(*obj).SecurityProfileGroups = securityProfileGroups_value
	(*obj).ServiceGroups = serviceGroups_value
	(*obj).Services = services_value
	(*obj).Tags = tags_value
	(*obj).UrlFilteringSecurityProfiles = urlFilteringSecurityProfiles_value
	(*obj).VulnerabilityProtectionSecurityProfiles = vulnerabilityProtectionSecurityProfiles_value
	(*obj).WildfireAnalysisSecurityProfiles = wildfireAnalysisSecurityProfiles_value

	return diags
}
func (o *AdminRoleResourceRoleVsysRestapiPoliciesObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysRestapiPolicies, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	applicationOverrideRules_value := o.ApplicationOverrideRules.ValueStringPointer()
	authenticationRules_value := o.AuthenticationRules.ValueStringPointer()
	decryptionRules_value := o.DecryptionRules.ValueStringPointer()
	dosRules_value := o.DosRules.ValueStringPointer()
	natRules_value := o.NatRules.ValueStringPointer()
	networkPacketBrokerRules_value := o.NetworkPacketBrokerRules.ValueStringPointer()
	policyBasedForwardingRules_value := o.PolicyBasedForwardingRules.ValueStringPointer()
	qosRules_value := o.QosRules.ValueStringPointer()
	sdwanRules_value := o.SdwanRules.ValueStringPointer()
	securityRules_value := o.SecurityRules.ValueStringPointer()
	tunnelInspectionRules_value := o.TunnelInspectionRules.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysRestapiPolicies)
	}
	(*obj).ApplicationOverrideRules = applicationOverrideRules_value
	(*obj).AuthenticationRules = authenticationRules_value
	(*obj).DecryptionRules = decryptionRules_value
	(*obj).DosRules = dosRules_value
	(*obj).NatRules = natRules_value
	(*obj).NetworkPacketBrokerRules = networkPacketBrokerRules_value
	(*obj).PolicyBasedForwardingRules = policyBasedForwardingRules_value
	(*obj).QosRules = qosRules_value
	(*obj).SdwanRules = sdwanRules_value
	(*obj).SecurityRules = securityRules_value
	(*obj).TunnelInspectionRules = tunnelInspectionRules_value

	return diags
}
func (o *AdminRoleResourceRoleVsysRestapiSystemObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysRestapiSystem, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	configuration_value := o.Configuration.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysRestapiSystem)
	}
	(*obj).Configuration = configuration_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebui, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	acc_value := o.Acc.ValueStringPointer()
	var commit_entry *adminrole.RoleVsysWebuiCommit
	if o.Commit != nil {
		if *obj != nil && (*obj).Commit != nil {
			commit_entry = (*obj).Commit
		} else {
			commit_entry = new(adminrole.RoleVsysWebuiCommit)
		}

		diags.Append(o.Commit.CopyToPango(ctx, &commit_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	dashboard_value := o.Dashboard.ValueStringPointer()
	var device_entry *adminrole.RoleVsysWebuiDevice
	if o.Device != nil {
		if *obj != nil && (*obj).Device != nil {
			device_entry = (*obj).Device
		} else {
			device_entry = new(adminrole.RoleVsysWebuiDevice)
		}

		diags.Append(o.Device.CopyToPango(ctx, &device_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var monitor_entry *adminrole.RoleVsysWebuiMonitor
	if o.Monitor != nil {
		if *obj != nil && (*obj).Monitor != nil {
			monitor_entry = (*obj).Monitor
		} else {
			monitor_entry = new(adminrole.RoleVsysWebuiMonitor)
		}

		diags.Append(o.Monitor.CopyToPango(ctx, &monitor_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var network_entry *adminrole.RoleVsysWebuiNetwork
	if o.Network != nil {
		if *obj != nil && (*obj).Network != nil {
			network_entry = (*obj).Network
		} else {
			network_entry = new(adminrole.RoleVsysWebuiNetwork)
		}

		diags.Append(o.Network.CopyToPango(ctx, &network_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var objects_entry *adminrole.RoleVsysWebuiObjects
	if o.Objects != nil {
		if *obj != nil && (*obj).Objects != nil {
			objects_entry = (*obj).Objects
		} else {
			objects_entry = new(adminrole.RoleVsysWebuiObjects)
		}

		diags.Append(o.Objects.CopyToPango(ctx, &objects_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var operations_entry *adminrole.RoleVsysWebuiOperations
	if o.Operations != nil {
		if *obj != nil && (*obj).Operations != nil {
			operations_entry = (*obj).Operations
		} else {
			operations_entry = new(adminrole.RoleVsysWebuiOperations)
		}

		diags.Append(o.Operations.CopyToPango(ctx, &operations_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var policies_entry *adminrole.RoleVsysWebuiPolicies
	if o.Policies != nil {
		if *obj != nil && (*obj).Policies != nil {
			policies_entry = (*obj).Policies
		} else {
			policies_entry = new(adminrole.RoleVsysWebuiPolicies)
		}

		diags.Append(o.Policies.CopyToPango(ctx, &policies_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var privacy_entry *adminrole.RoleVsysWebuiPrivacy
	if o.Privacy != nil {
		if *obj != nil && (*obj).Privacy != nil {
			privacy_entry = (*obj).Privacy
		} else {
			privacy_entry = new(adminrole.RoleVsysWebuiPrivacy)
		}

		diags.Append(o.Privacy.CopyToPango(ctx, &privacy_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var save_entry *adminrole.RoleVsysWebuiSave
	if o.Save != nil {
		if *obj != nil && (*obj).Save != nil {
			save_entry = (*obj).Save
		} else {
			save_entry = new(adminrole.RoleVsysWebuiSave)
		}

		diags.Append(o.Save.CopyToPango(ctx, &save_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	tasks_value := o.Tasks.ValueStringPointer()
	validate_value := o.Validate.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebui)
	}
	(*obj).Acc = acc_value
	(*obj).Commit = commit_entry
	(*obj).Dashboard = dashboard_value
	(*obj).Device = device_entry
	(*obj).Monitor = monitor_entry
	(*obj).Network = network_entry
	(*obj).Objects = objects_entry
	(*obj).Operations = operations_entry
	(*obj).Policies = policies_entry
	(*obj).Privacy = privacy_entry
	(*obj).Save = save_entry
	(*obj).Tasks = tasks_value
	(*obj).Validate = validate_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiCommitObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiCommit, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	commitForOtherAdmins_value := o.CommitForOtherAdmins.ValueStringPointer()
	virtualSystems_value := o.VirtualSystems.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiCommit)
	}
	(*obj).CommitForOtherAdmins = commitForOtherAdmins_value
	(*obj).VirtualSystems = virtualSystems_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiDeviceObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiDevice, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	administrators_value := o.Administrators.ValueStringPointer()
	authenticationProfile_value := o.AuthenticationProfile.ValueStringPointer()
	authenticationSequence_value := o.AuthenticationSequence.ValueStringPointer()
	blockPages_value := o.BlockPages.ValueStringPointer()
	var certificateManagement_entry *adminrole.RoleVsysWebuiDeviceCertificateManagement
	if o.CertificateManagement != nil {
		if *obj != nil && (*obj).CertificateManagement != nil {
			certificateManagement_entry = (*obj).CertificateManagement
		} else {
			certificateManagement_entry = new(adminrole.RoleVsysWebuiDeviceCertificateManagement)
		}

		diags.Append(o.CertificateManagement.CopyToPango(ctx, &certificateManagement_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	dataRedistribution_value := o.DataRedistribution.ValueStringPointer()
	deviceQuarantine_value := o.DeviceQuarantine.ValueStringPointer()
	var localUserDatabase_entry *adminrole.RoleVsysWebuiDeviceLocalUserDatabase
	if o.LocalUserDatabase != nil {
		if *obj != nil && (*obj).LocalUserDatabase != nil {
			localUserDatabase_entry = (*obj).LocalUserDatabase
		} else {
			localUserDatabase_entry = new(adminrole.RoleVsysWebuiDeviceLocalUserDatabase)
		}

		diags.Append(o.LocalUserDatabase.CopyToPango(ctx, &localUserDatabase_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var logSettings_entry *adminrole.RoleVsysWebuiDeviceLogSettings
	if o.LogSettings != nil {
		if *obj != nil && (*obj).LogSettings != nil {
			logSettings_entry = (*obj).LogSettings
		} else {
			logSettings_entry = new(adminrole.RoleVsysWebuiDeviceLogSettings)
		}

		diags.Append(o.LogSettings.CopyToPango(ctx, &logSettings_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var policyRecommendations_entry *adminrole.RoleVsysWebuiDevicePolicyRecommendations
	if o.PolicyRecommendations != nil {
		if *obj != nil && (*obj).PolicyRecommendations != nil {
			policyRecommendations_entry = (*obj).PolicyRecommendations
		} else {
			policyRecommendations_entry = new(adminrole.RoleVsysWebuiDevicePolicyRecommendations)
		}

		diags.Append(o.PolicyRecommendations.CopyToPango(ctx, &policyRecommendations_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var serverProfile_entry *adminrole.RoleVsysWebuiDeviceServerProfile
	if o.ServerProfile != nil {
		if *obj != nil && (*obj).ServerProfile != nil {
			serverProfile_entry = (*obj).ServerProfile
		} else {
			serverProfile_entry = new(adminrole.RoleVsysWebuiDeviceServerProfile)
		}

		diags.Append(o.ServerProfile.CopyToPango(ctx, &serverProfile_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var setup_entry *adminrole.RoleVsysWebuiDeviceSetup
	if o.Setup != nil {
		if *obj != nil && (*obj).Setup != nil {
			setup_entry = (*obj).Setup
		} else {
			setup_entry = new(adminrole.RoleVsysWebuiDeviceSetup)
		}

		diags.Append(o.Setup.CopyToPango(ctx, &setup_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	troubleshooting_value := o.Troubleshooting.ValueStringPointer()
	userIdentification_value := o.UserIdentification.ValueStringPointer()
	vmInfoSource_value := o.VmInfoSource.ValueStringPointer()
	dhcpSyslogServer_value := o.DhcpSyslogServer.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiDevice)
	}
	(*obj).Administrators = administrators_value
	(*obj).AuthenticationProfile = authenticationProfile_value
	(*obj).AuthenticationSequence = authenticationSequence_value
	(*obj).BlockPages = blockPages_value
	(*obj).CertificateManagement = certificateManagement_entry
	(*obj).DataRedistribution = dataRedistribution_value
	(*obj).DeviceQuarantine = deviceQuarantine_value
	(*obj).LocalUserDatabase = localUserDatabase_entry
	(*obj).LogSettings = logSettings_entry
	(*obj).PolicyRecommendations = policyRecommendations_entry
	(*obj).ServerProfile = serverProfile_entry
	(*obj).Setup = setup_entry
	(*obj).Troubleshooting = troubleshooting_value
	(*obj).UserIdentification = userIdentification_value
	(*obj).VmInfoSource = vmInfoSource_value
	(*obj).DhcpSyslogServer = dhcpSyslogServer_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiDeviceCertificateManagementObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiDeviceCertificateManagement, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	certificateProfile_value := o.CertificateProfile.ValueStringPointer()
	certificates_value := o.Certificates.ValueStringPointer()
	ocspResponder_value := o.OcspResponder.ValueStringPointer()
	scep_value := o.Scep.ValueStringPointer()
	sshServiceProfile_value := o.SshServiceProfile.ValueStringPointer()
	sslDecryptionExclusion_value := o.SslDecryptionExclusion.ValueStringPointer()
	sslTlsServiceProfile_value := o.SslTlsServiceProfile.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiDeviceCertificateManagement)
	}
	(*obj).CertificateProfile = certificateProfile_value
	(*obj).Certificates = certificates_value
	(*obj).OcspResponder = ocspResponder_value
	(*obj).Scep = scep_value
	(*obj).SshServiceProfile = sshServiceProfile_value
	(*obj).SslDecryptionExclusion = sslDecryptionExclusion_value
	(*obj).SslTlsServiceProfile = sslTlsServiceProfile_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiDeviceLocalUserDatabaseObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiDeviceLocalUserDatabase, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	userGroups_value := o.UserGroups.ValueStringPointer()
	users_value := o.Users.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiDeviceLocalUserDatabase)
	}
	(*obj).UserGroups = userGroups_value
	(*obj).Users = users_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiDeviceLogSettingsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiDeviceLogSettings, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	config_value := o.Config.ValueStringPointer()
	correlation_value := o.Correlation.ValueStringPointer()
	globalprotect_value := o.Globalprotect.ValueStringPointer()
	hipmatch_value := o.Hipmatch.ValueStringPointer()
	iptag_value := o.Iptag.ValueStringPointer()
	system_value := o.System.ValueStringPointer()
	userId_value := o.UserId.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiDeviceLogSettings)
	}
	(*obj).Config = config_value
	(*obj).Correlation = correlation_value
	(*obj).Globalprotect = globalprotect_value
	(*obj).Hipmatch = hipmatch_value
	(*obj).Iptag = iptag_value
	(*obj).System = system_value
	(*obj).UserId = userId_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiDevicePolicyRecommendationsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiDevicePolicyRecommendations, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	iot_value := o.Iot.ValueStringPointer()
	saas_value := o.Saas.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiDevicePolicyRecommendations)
	}
	(*obj).Iot = iot_value
	(*obj).Saas = saas_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiDeviceServerProfileObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiDeviceServerProfile, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	dns_value := o.Dns.ValueStringPointer()
	email_value := o.Email.ValueStringPointer()
	http_value := o.Http.ValueStringPointer()
	kerberos_value := o.Kerberos.ValueStringPointer()
	ldap_value := o.Ldap.ValueStringPointer()
	mfa_value := o.Mfa.ValueStringPointer()
	netflow_value := o.Netflow.ValueStringPointer()
	radius_value := o.Radius.ValueStringPointer()
	samlIdp_value := o.SamlIdp.ValueStringPointer()
	scp_value := o.Scp.ValueStringPointer()
	snmpTrap_value := o.SnmpTrap.ValueStringPointer()
	syslog_value := o.Syslog.ValueStringPointer()
	tacplus_value := o.Tacplus.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiDeviceServerProfile)
	}
	(*obj).Dns = dns_value
	(*obj).Email = email_value
	(*obj).Http = http_value
	(*obj).Kerberos = kerberos_value
	(*obj).Ldap = ldap_value
	(*obj).Mfa = mfa_value
	(*obj).Netflow = netflow_value
	(*obj).Radius = radius_value
	(*obj).SamlIdp = samlIdp_value
	(*obj).Scp = scp_value
	(*obj).SnmpTrap = snmpTrap_value
	(*obj).Syslog = syslog_value
	(*obj).Tacplus = tacplus_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiDeviceSetupObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiDeviceSetup, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	contentId_value := o.ContentId.ValueStringPointer()
	hsm_value := o.Hsm.ValueStringPointer()
	interfaces_value := o.Interfaces.ValueStringPointer()
	management_value := o.Management.ValueStringPointer()
	operations_value := o.Operations.ValueStringPointer()
	services_value := o.Services.ValueStringPointer()
	session_value := o.Session.ValueStringPointer()
	telemetry_value := o.Telemetry.ValueStringPointer()
	wildfire_value := o.Wildfire.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiDeviceSetup)
	}
	(*obj).ContentId = contentId_value
	(*obj).Hsm = hsm_value
	(*obj).Interfaces = interfaces_value
	(*obj).Management = management_value
	(*obj).Operations = operations_value
	(*obj).Services = services_value
	(*obj).Session = session_value
	(*obj).Telemetry = telemetry_value
	(*obj).Wildfire = wildfire_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiMonitorObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiMonitor, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	appScope_value := o.AppScope.ValueStringPointer()
	var automatedCorrelationEngine_entry *adminrole.RoleVsysWebuiMonitorAutomatedCorrelationEngine
	if o.AutomatedCorrelationEngine != nil {
		if *obj != nil && (*obj).AutomatedCorrelationEngine != nil {
			automatedCorrelationEngine_entry = (*obj).AutomatedCorrelationEngine
		} else {
			automatedCorrelationEngine_entry = new(adminrole.RoleVsysWebuiMonitorAutomatedCorrelationEngine)
		}

		diags.Append(o.AutomatedCorrelationEngine.CopyToPango(ctx, &automatedCorrelationEngine_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	blockIpList_value := o.BlockIpList.ValueStringPointer()
	var customReports_entry *adminrole.RoleVsysWebuiMonitorCustomReports
	if o.CustomReports != nil {
		if *obj != nil && (*obj).CustomReports != nil {
			customReports_entry = (*obj).CustomReports
		} else {
			customReports_entry = new(adminrole.RoleVsysWebuiMonitorCustomReports)
		}

		diags.Append(o.CustomReports.CopyToPango(ctx, &customReports_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	externalLogs_value := o.ExternalLogs.ValueStringPointer()
	var logs_entry *adminrole.RoleVsysWebuiMonitorLogs
	if o.Logs != nil {
		if *obj != nil && (*obj).Logs != nil {
			logs_entry = (*obj).Logs
		} else {
			logs_entry = new(adminrole.RoleVsysWebuiMonitorLogs)
		}

		diags.Append(o.Logs.CopyToPango(ctx, &logs_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var pdfReports_entry *adminrole.RoleVsysWebuiMonitorPdfReports
	if o.PdfReports != nil {
		if *obj != nil && (*obj).PdfReports != nil {
			pdfReports_entry = (*obj).PdfReports
		} else {
			pdfReports_entry = new(adminrole.RoleVsysWebuiMonitorPdfReports)
		}

		diags.Append(o.PdfReports.CopyToPango(ctx, &pdfReports_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	sessionBrowser_value := o.SessionBrowser.ValueStringPointer()
	viewCustomReports_value := o.ViewCustomReports.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiMonitor)
	}
	(*obj).AppScope = appScope_value
	(*obj).AutomatedCorrelationEngine = automatedCorrelationEngine_entry
	(*obj).BlockIpList = blockIpList_value
	(*obj).CustomReports = customReports_entry
	(*obj).ExternalLogs = externalLogs_value
	(*obj).Logs = logs_entry
	(*obj).PdfReports = pdfReports_entry
	(*obj).SessionBrowser = sessionBrowser_value
	(*obj).ViewCustomReports = viewCustomReports_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiMonitorAutomatedCorrelationEngineObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiMonitorAutomatedCorrelationEngine, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	correlatedEvents_value := o.CorrelatedEvents.ValueStringPointer()
	correlationObjects_value := o.CorrelationObjects.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiMonitorAutomatedCorrelationEngine)
	}
	(*obj).CorrelatedEvents = correlatedEvents_value
	(*obj).CorrelationObjects = correlationObjects_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiMonitorCustomReportsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiMonitorCustomReports, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	applicationStatistics_value := o.ApplicationStatistics.ValueStringPointer()
	auth_value := o.Auth.ValueStringPointer()
	dataFilteringLog_value := o.DataFilteringLog.ValueStringPointer()
	decryptionLog_value := o.DecryptionLog.ValueStringPointer()
	decryptionSummary_value := o.DecryptionSummary.ValueStringPointer()
	globalprotect_value := o.Globalprotect.ValueStringPointer()
	gtpLog_value := o.GtpLog.ValueStringPointer()
	gtpSummary_value := o.GtpSummary.ValueStringPointer()
	hipmatch_value := o.Hipmatch.ValueStringPointer()
	iptag_value := o.Iptag.ValueStringPointer()
	sctpLog_value := o.SctpLog.ValueStringPointer()
	sctpSummary_value := o.SctpSummary.ValueStringPointer()
	threatLog_value := o.ThreatLog.ValueStringPointer()
	threatSummary_value := o.ThreatSummary.ValueStringPointer()
	trafficLog_value := o.TrafficLog.ValueStringPointer()
	trafficSummary_value := o.TrafficSummary.ValueStringPointer()
	tunnelLog_value := o.TunnelLog.ValueStringPointer()
	tunnelSummary_value := o.TunnelSummary.ValueStringPointer()
	urlLog_value := o.UrlLog.ValueStringPointer()
	urlSummary_value := o.UrlSummary.ValueStringPointer()
	userid_value := o.Userid.ValueStringPointer()
	wildfireLog_value := o.WildfireLog.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiMonitorCustomReports)
	}
	(*obj).ApplicationStatistics = applicationStatistics_value
	(*obj).Auth = auth_value
	(*obj).DataFilteringLog = dataFilteringLog_value
	(*obj).DecryptionLog = decryptionLog_value
	(*obj).DecryptionSummary = decryptionSummary_value
	(*obj).Globalprotect = globalprotect_value
	(*obj).GtpLog = gtpLog_value
	(*obj).GtpSummary = gtpSummary_value
	(*obj).Hipmatch = hipmatch_value
	(*obj).Iptag = iptag_value
	(*obj).SctpLog = sctpLog_value
	(*obj).SctpSummary = sctpSummary_value
	(*obj).ThreatLog = threatLog_value
	(*obj).ThreatSummary = threatSummary_value
	(*obj).TrafficLog = trafficLog_value
	(*obj).TrafficSummary = trafficSummary_value
	(*obj).TunnelLog = tunnelLog_value
	(*obj).TunnelSummary = tunnelSummary_value
	(*obj).UrlLog = urlLog_value
	(*obj).UrlSummary = urlSummary_value
	(*obj).Userid = userid_value
	(*obj).WildfireLog = wildfireLog_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiMonitorLogsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiMonitorLogs, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	authentication_value := o.Authentication.ValueStringPointer()
	dataFiltering_value := o.DataFiltering.ValueStringPointer()
	decryption_value := o.Decryption.ValueStringPointer()
	globalprotect_value := o.Globalprotect.ValueStringPointer()
	gtp_value := o.Gtp.ValueStringPointer()
	hipmatch_value := o.Hipmatch.ValueStringPointer()
	iptag_value := o.Iptag.ValueStringPointer()
	sctp_value := o.Sctp.ValueStringPointer()
	threat_value := o.Threat.ValueStringPointer()
	traffic_value := o.Traffic.ValueStringPointer()
	tunnel_value := o.Tunnel.ValueStringPointer()
	url_value := o.Url.ValueStringPointer()
	userid_value := o.Userid.ValueStringPointer()
	wildfire_value := o.Wildfire.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiMonitorLogs)
	}
	(*obj).Authentication = authentication_value
	(*obj).DataFiltering = dataFiltering_value
	(*obj).Decryption = decryption_value
	(*obj).Globalprotect = globalprotect_value
	(*obj).Gtp = gtp_value
	(*obj).Hipmatch = hipmatch_value
	(*obj).Iptag = iptag_value
	(*obj).Sctp = sctp_value
	(*obj).Threat = threat_value
	(*obj).Traffic = traffic_value
	(*obj).Tunnel = tunnel_value
	(*obj).Url = url_value
	(*obj).Userid = userid_value
	(*obj).Wildfire = wildfire_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiMonitorPdfReportsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiMonitorPdfReports, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	emailScheduler_value := o.EmailScheduler.ValueStringPointer()
	managePdfSummary_value := o.ManagePdfSummary.ValueStringPointer()
	pdfSummaryReports_value := o.PdfSummaryReports.ValueStringPointer()
	reportGroups_value := o.ReportGroups.ValueStringPointer()
	saasApplicationUsageReport_value := o.SaasApplicationUsageReport.ValueStringPointer()
	userActivityReport_value := o.UserActivityReport.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiMonitorPdfReports)
	}
	(*obj).EmailScheduler = emailScheduler_value
	(*obj).ManagePdfSummary = managePdfSummary_value
	(*obj).PdfSummaryReports = pdfSummaryReports_value
	(*obj).ReportGroups = reportGroups_value
	(*obj).SaasApplicationUsageReport = saasApplicationUsageReport_value
	(*obj).UserActivityReport = userActivityReport_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiNetworkObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiNetwork, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var globalProtect_entry *adminrole.RoleVsysWebuiNetworkGlobalProtect
	if o.GlobalProtect != nil {
		if *obj != nil && (*obj).GlobalProtect != nil {
			globalProtect_entry = (*obj).GlobalProtect
		} else {
			globalProtect_entry = new(adminrole.RoleVsysWebuiNetworkGlobalProtect)
		}

		diags.Append(o.GlobalProtect.CopyToPango(ctx, &globalProtect_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	sdwanInterfaceProfile_value := o.SdwanInterfaceProfile.ValueStringPointer()
	zones_value := o.Zones.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiNetwork)
	}
	(*obj).GlobalProtect = globalProtect_entry
	(*obj).SdwanInterfaceProfile = sdwanInterfaceProfile_value
	(*obj).Zones = zones_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiNetworkGlobalProtectObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiNetworkGlobalProtect, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	clientlessAppGroups_value := o.ClientlessAppGroups.ValueStringPointer()
	clientlessApps_value := o.ClientlessApps.ValueStringPointer()
	gateways_value := o.Gateways.ValueStringPointer()
	mdm_value := o.Mdm.ValueStringPointer()
	portals_value := o.Portals.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiNetworkGlobalProtect)
	}
	(*obj).ClientlessAppGroups = clientlessAppGroups_value
	(*obj).ClientlessApps = clientlessApps_value
	(*obj).Gateways = gateways_value
	(*obj).Mdm = mdm_value
	(*obj).Portals = portals_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiObjectsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	addressGroups_value := o.AddressGroups.ValueStringPointer()
	addresses_value := o.Addresses.ValueStringPointer()
	applicationFilters_value := o.ApplicationFilters.ValueStringPointer()
	applicationGroups_value := o.ApplicationGroups.ValueStringPointer()
	applications_value := o.Applications.ValueStringPointer()
	authentication_value := o.Authentication.ValueStringPointer()
	var customObjects_entry *adminrole.RoleVsysWebuiObjectsCustomObjects
	if o.CustomObjects != nil {
		if *obj != nil && (*obj).CustomObjects != nil {
			customObjects_entry = (*obj).CustomObjects
		} else {
			customObjects_entry = new(adminrole.RoleVsysWebuiObjectsCustomObjects)
		}

		diags.Append(o.CustomObjects.CopyToPango(ctx, &customObjects_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var decryption_entry *adminrole.RoleVsysWebuiObjectsDecryption
	if o.Decryption != nil {
		if *obj != nil && (*obj).Decryption != nil {
			decryption_entry = (*obj).Decryption
		} else {
			decryption_entry = new(adminrole.RoleVsysWebuiObjectsDecryption)
		}

		diags.Append(o.Decryption.CopyToPango(ctx, &decryption_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	devices_value := o.Devices.ValueStringPointer()
	dynamicBlockLists_value := o.DynamicBlockLists.ValueStringPointer()
	dynamicUserGroups_value := o.DynamicUserGroups.ValueStringPointer()
	var globalProtect_entry *adminrole.RoleVsysWebuiObjectsGlobalProtect
	if o.GlobalProtect != nil {
		if *obj != nil && (*obj).GlobalProtect != nil {
			globalProtect_entry = (*obj).GlobalProtect
		} else {
			globalProtect_entry = new(adminrole.RoleVsysWebuiObjectsGlobalProtect)
		}

		diags.Append(o.GlobalProtect.CopyToPango(ctx, &globalProtect_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	logForwarding_value := o.LogForwarding.ValueStringPointer()
	packetBrokerProfile_value := o.PacketBrokerProfile.ValueStringPointer()
	regions_value := o.Regions.ValueStringPointer()
	schedules_value := o.Schedules.ValueStringPointer()
	var sdwan_entry *adminrole.RoleVsysWebuiObjectsSdwan
	if o.Sdwan != nil {
		if *obj != nil && (*obj).Sdwan != nil {
			sdwan_entry = (*obj).Sdwan
		} else {
			sdwan_entry = new(adminrole.RoleVsysWebuiObjectsSdwan)
		}

		diags.Append(o.Sdwan.CopyToPango(ctx, &sdwan_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	securityProfileGroups_value := o.SecurityProfileGroups.ValueStringPointer()
	var securityProfiles_entry *adminrole.RoleVsysWebuiObjectsSecurityProfiles
	if o.SecurityProfiles != nil {
		if *obj != nil && (*obj).SecurityProfiles != nil {
			securityProfiles_entry = (*obj).SecurityProfiles
		} else {
			securityProfiles_entry = new(adminrole.RoleVsysWebuiObjectsSecurityProfiles)
		}

		diags.Append(o.SecurityProfiles.CopyToPango(ctx, &securityProfiles_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	serviceGroups_value := o.ServiceGroups.ValueStringPointer()
	services_value := o.Services.ValueStringPointer()
	tags_value := o.Tags.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiObjects)
	}
	(*obj).AddressGroups = addressGroups_value
	(*obj).Addresses = addresses_value
	(*obj).ApplicationFilters = applicationFilters_value
	(*obj).ApplicationGroups = applicationGroups_value
	(*obj).Applications = applications_value
	(*obj).Authentication = authentication_value
	(*obj).CustomObjects = customObjects_entry
	(*obj).Decryption = decryption_entry
	(*obj).Devices = devices_value
	(*obj).DynamicBlockLists = dynamicBlockLists_value
	(*obj).DynamicUserGroups = dynamicUserGroups_value
	(*obj).GlobalProtect = globalProtect_entry
	(*obj).LogForwarding = logForwarding_value
	(*obj).PacketBrokerProfile = packetBrokerProfile_value
	(*obj).Regions = regions_value
	(*obj).Schedules = schedules_value
	(*obj).Sdwan = sdwan_entry
	(*obj).SecurityProfileGroups = securityProfileGroups_value
	(*obj).SecurityProfiles = securityProfiles_entry
	(*obj).ServiceGroups = serviceGroups_value
	(*obj).Services = services_value
	(*obj).Tags = tags_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiObjectsCustomObjectsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiObjectsCustomObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	dataPatterns_value := o.DataPatterns.ValueStringPointer()
	spyware_value := o.Spyware.ValueStringPointer()
	urlCategory_value := o.UrlCategory.ValueStringPointer()
	vulnerability_value := o.Vulnerability.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiObjectsCustomObjects)
	}
	(*obj).DataPatterns = dataPatterns_value
	(*obj).Spyware = spyware_value
	(*obj).UrlCategory = urlCategory_value
	(*obj).Vulnerability = vulnerability_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiObjectsDecryptionObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiObjectsDecryption, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	decryptionProfile_value := o.DecryptionProfile.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiObjectsDecryption)
	}
	(*obj).DecryptionProfile = decryptionProfile_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiObjectsGlobalProtectObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiObjectsGlobalProtect, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	hipObjects_value := o.HipObjects.ValueStringPointer()
	hipProfiles_value := o.HipProfiles.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiObjectsGlobalProtect)
	}
	(*obj).HipObjects = hipObjects_value
	(*obj).HipProfiles = hipProfiles_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiObjectsSdwanObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiObjectsSdwan, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	sdwanDistProfile_value := o.SdwanDistProfile.ValueStringPointer()
	sdwanErrorCorrectionProfile_value := o.SdwanErrorCorrectionProfile.ValueStringPointer()
	sdwanProfile_value := o.SdwanProfile.ValueStringPointer()
	sdwanSaasQualityProfile_value := o.SdwanSaasQualityProfile.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiObjectsSdwan)
	}
	(*obj).SdwanDistProfile = sdwanDistProfile_value
	(*obj).SdwanErrorCorrectionProfile = sdwanErrorCorrectionProfile_value
	(*obj).SdwanProfile = sdwanProfile_value
	(*obj).SdwanSaasQualityProfile = sdwanSaasQualityProfile_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiObjectsSecurityProfilesObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiObjectsSecurityProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	antiSpyware_value := o.AntiSpyware.ValueStringPointer()
	antivirus_value := o.Antivirus.ValueStringPointer()
	dataFiltering_value := o.DataFiltering.ValueStringPointer()
	dosProtection_value := o.DosProtection.ValueStringPointer()
	fileBlocking_value := o.FileBlocking.ValueStringPointer()
	gtpProtection_value := o.GtpProtection.ValueStringPointer()
	sctpProtection_value := o.SctpProtection.ValueStringPointer()
	urlFiltering_value := o.UrlFiltering.ValueStringPointer()
	vulnerabilityProtection_value := o.VulnerabilityProtection.ValueStringPointer()
	wildfireAnalysis_value := o.WildfireAnalysis.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiObjectsSecurityProfiles)
	}
	(*obj).AntiSpyware = antiSpyware_value
	(*obj).Antivirus = antivirus_value
	(*obj).DataFiltering = dataFiltering_value
	(*obj).DosProtection = dosProtection_value
	(*obj).FileBlocking = fileBlocking_value
	(*obj).GtpProtection = gtpProtection_value
	(*obj).SctpProtection = sctpProtection_value
	(*obj).UrlFiltering = urlFiltering_value
	(*obj).VulnerabilityProtection = vulnerabilityProtection_value
	(*obj).WildfireAnalysis = wildfireAnalysis_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiOperationsObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiOperations, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	downloadCoreFiles_value := o.DownloadCoreFiles.ValueStringPointer()
	downloadPcapFiles_value := o.DownloadPcapFiles.ValueStringPointer()
	generateStatsDumpFile_value := o.GenerateStatsDumpFile.ValueStringPointer()
	generateTechSupportFile_value := o.GenerateTechSupportFile.ValueStringPointer()
	reboot_value := o.Reboot.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiOperations)
	}
	(*obj).DownloadCoreFiles = downloadCoreFiles_value
	(*obj).DownloadPcapFiles = downloadPcapFiles_value
	(*obj).GenerateStatsDumpFile = generateStatsDumpFile_value
	(*obj).GenerateTechSupportFile = generateTechSupportFile_value
	(*obj).Reboot = reboot_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiPoliciesObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiPolicies, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	applicationOverrideRulebase_value := o.ApplicationOverrideRulebase.ValueStringPointer()
	authenticationRulebase_value := o.AuthenticationRulebase.ValueStringPointer()
	dosRulebase_value := o.DosRulebase.ValueStringPointer()
	natRulebase_value := o.NatRulebase.ValueStringPointer()
	networkPacketBrokerRulebase_value := o.NetworkPacketBrokerRulebase.ValueStringPointer()
	pbfRulebase_value := o.PbfRulebase.ValueStringPointer()
	qosRulebase_value := o.QosRulebase.ValueStringPointer()
	ruleHitCountReset_value := o.RuleHitCountReset.ValueStringPointer()
	sdwanRulebase_value := o.SdwanRulebase.ValueStringPointer()
	securityRulebase_value := o.SecurityRulebase.ValueStringPointer()
	sslDecryptionRulebase_value := o.SslDecryptionRulebase.ValueStringPointer()
	tunnelInspectRulebase_value := o.TunnelInspectRulebase.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiPolicies)
	}
	(*obj).ApplicationOverrideRulebase = applicationOverrideRulebase_value
	(*obj).AuthenticationRulebase = authenticationRulebase_value
	(*obj).DosRulebase = dosRulebase_value
	(*obj).NatRulebase = natRulebase_value
	(*obj).NetworkPacketBrokerRulebase = networkPacketBrokerRulebase_value
	(*obj).PbfRulebase = pbfRulebase_value
	(*obj).QosRulebase = qosRulebase_value
	(*obj).RuleHitCountReset = ruleHitCountReset_value
	(*obj).SdwanRulebase = sdwanRulebase_value
	(*obj).SecurityRulebase = securityRulebase_value
	(*obj).SslDecryptionRulebase = sslDecryptionRulebase_value
	(*obj).TunnelInspectRulebase = tunnelInspectRulebase_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiPrivacyObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiPrivacy, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	showFullIpAddresses_value := o.ShowFullIpAddresses.ValueStringPointer()
	showUserNamesInLogsAndReports_value := o.ShowUserNamesInLogsAndReports.ValueStringPointer()
	viewPcapFiles_value := o.ViewPcapFiles.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiPrivacy)
	}
	(*obj).ShowFullIpAddresses = showFullIpAddresses_value
	(*obj).ShowUserNamesInLogsAndReports = showUserNamesInLogsAndReports_value
	(*obj).ViewPcapFiles = viewPcapFiles_value

	return diags
}
func (o *AdminRoleResourceRoleVsysWebuiSaveObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysWebuiSave, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	partialSave_value := o.PartialSave.ValueStringPointer()
	saveForOtherAdmins_value := o.SaveForOtherAdmins.ValueStringPointer()
	objectLevelChanges_value := o.ObjectLevelChanges.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysWebuiSave)
	}
	(*obj).PartialSave = partialSave_value
	(*obj).SaveForOtherAdmins = saveForOtherAdmins_value
	(*obj).ObjectLevelChanges = objectLevelChanges_value

	return diags
}
func (o *AdminRoleResourceRoleVsysXmlapiObject) CopyToPango(ctx context.Context, obj **adminrole.RoleVsysXmlapi, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	commit_value := o.Commit.ValueStringPointer()
	config_value := o.Config.ValueStringPointer()
	export_value := o.Export.ValueStringPointer()
	import_value := o.Import.ValueStringPointer()
	iot_value := o.Iot.ValueStringPointer()
	log_value := o.Log.ValueStringPointer()
	op_value := o.Op.ValueStringPointer()
	report_value := o.Report.ValueStringPointer()
	userId_value := o.UserId.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(adminrole.RoleVsysXmlapi)
	}
	(*obj).Commit = commit_value
	(*obj).Config = config_value
	(*obj).Export = export_value
	(*obj).Import = import_value
	(*obj).Iot = iot_value
	(*obj).Log = log_value
	(*obj).Op = op_value
	(*obj).Report = report_value
	(*obj).UserId = userId_value

	return diags
}

func (o *AdminRoleResourceModel) CopyFromPango(ctx context.Context, obj *adminrole.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var role_object *AdminRoleResourceRoleObject
	if obj.Role != nil {
		role_object = new(AdminRoleResourceRoleObject)

		diags.Append(role_object.CopyFromPango(ctx, obj.Role, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	o.Name = types.StringValue(obj.Name)
	o.Description = description_value
	o.Role = role_object

	return diags
}

func (o *AdminRoleResourceRoleObject) CopyFromPango(ctx context.Context, obj *adminrole.Role, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var device_object *AdminRoleResourceRoleDeviceObject
	if obj.Device != nil {
		device_object = new(AdminRoleResourceRoleDeviceObject)

		diags.Append(device_object.CopyFromPango(ctx, obj.Device, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var vsys_object *AdminRoleResourceRoleVsysObject
	if obj.Vsys != nil {
		vsys_object = new(AdminRoleResourceRoleVsysObject)

		diags.Append(vsys_object.CopyFromPango(ctx, obj.Vsys, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Device = device_object
	o.Vsys = vsys_object

	return diags
}

func (o *AdminRoleResourceRoleDeviceObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDevice, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var restapi_object *AdminRoleResourceRoleDeviceRestapiObject
	if obj.Restapi != nil {
		restapi_object = new(AdminRoleResourceRoleDeviceRestapiObject)

		diags.Append(restapi_object.CopyFromPango(ctx, obj.Restapi, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var webui_object *AdminRoleResourceRoleDeviceWebuiObject
	if obj.Webui != nil {
		webui_object = new(AdminRoleResourceRoleDeviceWebuiObject)

		diags.Append(webui_object.CopyFromPango(ctx, obj.Webui, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var xmlapi_object *AdminRoleResourceRoleDeviceXmlapiObject
	if obj.Xmlapi != nil {
		xmlapi_object = new(AdminRoleResourceRoleDeviceXmlapiObject)

		diags.Append(xmlapi_object.CopyFromPango(ctx, obj.Xmlapi, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var cli_value types.String
	if obj.Cli != nil {
		cli_value = types.StringValue(*obj.Cli)
	}
	o.Cli = cli_value
	o.Restapi = restapi_object
	o.Webui = webui_object
	o.Xmlapi = xmlapi_object

	return diags
}

func (o *AdminRoleResourceRoleDeviceRestapiObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceRestapi, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var device_object *AdminRoleResourceRoleDeviceRestapiDeviceObject
	if obj.Device != nil {
		device_object = new(AdminRoleResourceRoleDeviceRestapiDeviceObject)

		diags.Append(device_object.CopyFromPango(ctx, obj.Device, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var network_object *AdminRoleResourceRoleDeviceRestapiNetworkObject
	if obj.Network != nil {
		network_object = new(AdminRoleResourceRoleDeviceRestapiNetworkObject)

		diags.Append(network_object.CopyFromPango(ctx, obj.Network, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var objects_object *AdminRoleResourceRoleDeviceRestapiObjectsObject
	if obj.Objects != nil {
		objects_object = new(AdminRoleResourceRoleDeviceRestapiObjectsObject)

		diags.Append(objects_object.CopyFromPango(ctx, obj.Objects, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var policies_object *AdminRoleResourceRoleDeviceRestapiPoliciesObject
	if obj.Policies != nil {
		policies_object = new(AdminRoleResourceRoleDeviceRestapiPoliciesObject)

		diags.Append(policies_object.CopyFromPango(ctx, obj.Policies, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var system_object *AdminRoleResourceRoleDeviceRestapiSystemObject
	if obj.System != nil {
		system_object = new(AdminRoleResourceRoleDeviceRestapiSystemObject)

		diags.Append(system_object.CopyFromPango(ctx, obj.System, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Device = device_object
	o.Network = network_object
	o.Objects = objects_object
	o.Policies = policies_object
	o.System = system_object

	return diags
}

func (o *AdminRoleResourceRoleDeviceRestapiDeviceObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceRestapiDevice, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var emailServerProfiles_value types.String
	if obj.EmailServerProfiles != nil {
		emailServerProfiles_value = types.StringValue(*obj.EmailServerProfiles)
	}
	var httpServerProfiles_value types.String
	if obj.HttpServerProfiles != nil {
		httpServerProfiles_value = types.StringValue(*obj.HttpServerProfiles)
	}
	var ldapServerProfiles_value types.String
	if obj.LdapServerProfiles != nil {
		ldapServerProfiles_value = types.StringValue(*obj.LdapServerProfiles)
	}
	var logInterfaceSetting_value types.String
	if obj.LogInterfaceSetting != nil {
		logInterfaceSetting_value = types.StringValue(*obj.LogInterfaceSetting)
	}
	var snmpTrapServerProfiles_value types.String
	if obj.SnmpTrapServerProfiles != nil {
		snmpTrapServerProfiles_value = types.StringValue(*obj.SnmpTrapServerProfiles)
	}
	var syslogServerProfiles_value types.String
	if obj.SyslogServerProfiles != nil {
		syslogServerProfiles_value = types.StringValue(*obj.SyslogServerProfiles)
	}
	var virtualSystems_value types.String
	if obj.VirtualSystems != nil {
		virtualSystems_value = types.StringValue(*obj.VirtualSystems)
	}
	o.EmailServerProfiles = emailServerProfiles_value
	o.HttpServerProfiles = httpServerProfiles_value
	o.LdapServerProfiles = ldapServerProfiles_value
	o.LogInterfaceSetting = logInterfaceSetting_value
	o.SnmpTrapServerProfiles = snmpTrapServerProfiles_value
	o.SyslogServerProfiles = syslogServerProfiles_value
	o.VirtualSystems = virtualSystems_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceRestapiNetworkObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceRestapiNetwork, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var aggregateEthernetInterfaces_value types.String
	if obj.AggregateEthernetInterfaces != nil {
		aggregateEthernetInterfaces_value = types.StringValue(*obj.AggregateEthernetInterfaces)
	}
	var bfdNetworkProfiles_value types.String
	if obj.BfdNetworkProfiles != nil {
		bfdNetworkProfiles_value = types.StringValue(*obj.BfdNetworkProfiles)
	}
	var bgpRoutingProfiles_value types.String
	if obj.BgpRoutingProfiles != nil {
		bgpRoutingProfiles_value = types.StringValue(*obj.BgpRoutingProfiles)
	}
	var dhcpRelays_value types.String
	if obj.DhcpRelays != nil {
		dhcpRelays_value = types.StringValue(*obj.DhcpRelays)
	}
	var dhcpServers_value types.String
	if obj.DhcpServers != nil {
		dhcpServers_value = types.StringValue(*obj.DhcpServers)
	}
	var dnsProxies_value types.String
	if obj.DnsProxies != nil {
		dnsProxies_value = types.StringValue(*obj.DnsProxies)
	}
	var ethernetInterfaces_value types.String
	if obj.EthernetInterfaces != nil {
		ethernetInterfaces_value = types.StringValue(*obj.EthernetInterfaces)
	}
	var globalprotectClientlessAppGroups_value types.String
	if obj.GlobalprotectClientlessAppGroups != nil {
		globalprotectClientlessAppGroups_value = types.StringValue(*obj.GlobalprotectClientlessAppGroups)
	}
	var globalprotectClientlessApps_value types.String
	if obj.GlobalprotectClientlessApps != nil {
		globalprotectClientlessApps_value = types.StringValue(*obj.GlobalprotectClientlessApps)
	}
	var globalprotectGateways_value types.String
	if obj.GlobalprotectGateways != nil {
		globalprotectGateways_value = types.StringValue(*obj.GlobalprotectGateways)
	}
	var globalprotectIpsecCryptoNetworkProfiles_value types.String
	if obj.GlobalprotectIpsecCryptoNetworkProfiles != nil {
		globalprotectIpsecCryptoNetworkProfiles_value = types.StringValue(*obj.GlobalprotectIpsecCryptoNetworkProfiles)
	}
	var globalprotectMdmServers_value types.String
	if obj.GlobalprotectMdmServers != nil {
		globalprotectMdmServers_value = types.StringValue(*obj.GlobalprotectMdmServers)
	}
	var globalprotectPortals_value types.String
	if obj.GlobalprotectPortals != nil {
		globalprotectPortals_value = types.StringValue(*obj.GlobalprotectPortals)
	}
	var greTunnels_value types.String
	if obj.GreTunnels != nil {
		greTunnels_value = types.StringValue(*obj.GreTunnels)
	}
	var ikeCryptoNetworkProfiles_value types.String
	if obj.IkeCryptoNetworkProfiles != nil {
		ikeCryptoNetworkProfiles_value = types.StringValue(*obj.IkeCryptoNetworkProfiles)
	}
	var ikeGatewayNetworkProfiles_value types.String
	if obj.IkeGatewayNetworkProfiles != nil {
		ikeGatewayNetworkProfiles_value = types.StringValue(*obj.IkeGatewayNetworkProfiles)
	}
	var interfaceManagementNetworkProfiles_value types.String
	if obj.InterfaceManagementNetworkProfiles != nil {
		interfaceManagementNetworkProfiles_value = types.StringValue(*obj.InterfaceManagementNetworkProfiles)
	}
	var ipsecCryptoNetworkProfiles_value types.String
	if obj.IpsecCryptoNetworkProfiles != nil {
		ipsecCryptoNetworkProfiles_value = types.StringValue(*obj.IpsecCryptoNetworkProfiles)
	}
	var ipsecTunnels_value types.String
	if obj.IpsecTunnels != nil {
		ipsecTunnels_value = types.StringValue(*obj.IpsecTunnels)
	}
	var lldp_value types.String
	if obj.Lldp != nil {
		lldp_value = types.StringValue(*obj.Lldp)
	}
	var lldpNetworkProfiles_value types.String
	if obj.LldpNetworkProfiles != nil {
		lldpNetworkProfiles_value = types.StringValue(*obj.LldpNetworkProfiles)
	}
	var logicalRouters_value types.String
	if obj.LogicalRouters != nil {
		logicalRouters_value = types.StringValue(*obj.LogicalRouters)
	}
	var loopbackInterfaces_value types.String
	if obj.LoopbackInterfaces != nil {
		loopbackInterfaces_value = types.StringValue(*obj.LoopbackInterfaces)
	}
	var qosInterfaces_value types.String
	if obj.QosInterfaces != nil {
		qosInterfaces_value = types.StringValue(*obj.QosInterfaces)
	}
	var qosNetworkProfiles_value types.String
	if obj.QosNetworkProfiles != nil {
		qosNetworkProfiles_value = types.StringValue(*obj.QosNetworkProfiles)
	}
	var sdwanInterfaceProfiles_value types.String
	if obj.SdwanInterfaceProfiles != nil {
		sdwanInterfaceProfiles_value = types.StringValue(*obj.SdwanInterfaceProfiles)
	}
	var sdwanInterfaces_value types.String
	if obj.SdwanInterfaces != nil {
		sdwanInterfaces_value = types.StringValue(*obj.SdwanInterfaces)
	}
	var tunnelInterfaces_value types.String
	if obj.TunnelInterfaces != nil {
		tunnelInterfaces_value = types.StringValue(*obj.TunnelInterfaces)
	}
	var tunnelMonitorNetworkProfiles_value types.String
	if obj.TunnelMonitorNetworkProfiles != nil {
		tunnelMonitorNetworkProfiles_value = types.StringValue(*obj.TunnelMonitorNetworkProfiles)
	}
	var virtualRouters_value types.String
	if obj.VirtualRouters != nil {
		virtualRouters_value = types.StringValue(*obj.VirtualRouters)
	}
	var virtualWires_value types.String
	if obj.VirtualWires != nil {
		virtualWires_value = types.StringValue(*obj.VirtualWires)
	}
	var vlanInterfaces_value types.String
	if obj.VlanInterfaces != nil {
		vlanInterfaces_value = types.StringValue(*obj.VlanInterfaces)
	}
	var vlans_value types.String
	if obj.Vlans != nil {
		vlans_value = types.StringValue(*obj.Vlans)
	}
	var zoneProtectionNetworkProfiles_value types.String
	if obj.ZoneProtectionNetworkProfiles != nil {
		zoneProtectionNetworkProfiles_value = types.StringValue(*obj.ZoneProtectionNetworkProfiles)
	}
	var zones_value types.String
	if obj.Zones != nil {
		zones_value = types.StringValue(*obj.Zones)
	}
	o.AggregateEthernetInterfaces = aggregateEthernetInterfaces_value
	o.BfdNetworkProfiles = bfdNetworkProfiles_value
	o.BgpRoutingProfiles = bgpRoutingProfiles_value
	o.DhcpRelays = dhcpRelays_value
	o.DhcpServers = dhcpServers_value
	o.DnsProxies = dnsProxies_value
	o.EthernetInterfaces = ethernetInterfaces_value
	o.GlobalprotectClientlessAppGroups = globalprotectClientlessAppGroups_value
	o.GlobalprotectClientlessApps = globalprotectClientlessApps_value
	o.GlobalprotectGateways = globalprotectGateways_value
	o.GlobalprotectIpsecCryptoNetworkProfiles = globalprotectIpsecCryptoNetworkProfiles_value
	o.GlobalprotectMdmServers = globalprotectMdmServers_value
	o.GlobalprotectPortals = globalprotectPortals_value
	o.GreTunnels = greTunnels_value
	o.IkeCryptoNetworkProfiles = ikeCryptoNetworkProfiles_value
	o.IkeGatewayNetworkProfiles = ikeGatewayNetworkProfiles_value
	o.InterfaceManagementNetworkProfiles = interfaceManagementNetworkProfiles_value
	o.IpsecCryptoNetworkProfiles = ipsecCryptoNetworkProfiles_value
	o.IpsecTunnels = ipsecTunnels_value
	o.Lldp = lldp_value
	o.LldpNetworkProfiles = lldpNetworkProfiles_value
	o.LogicalRouters = logicalRouters_value
	o.LoopbackInterfaces = loopbackInterfaces_value
	o.QosInterfaces = qosInterfaces_value
	o.QosNetworkProfiles = qosNetworkProfiles_value
	o.SdwanInterfaceProfiles = sdwanInterfaceProfiles_value
	o.SdwanInterfaces = sdwanInterfaces_value
	o.TunnelInterfaces = tunnelInterfaces_value
	o.TunnelMonitorNetworkProfiles = tunnelMonitorNetworkProfiles_value
	o.VirtualRouters = virtualRouters_value
	o.VirtualWires = virtualWires_value
	o.VlanInterfaces = vlanInterfaces_value
	o.Vlans = vlans_value
	o.ZoneProtectionNetworkProfiles = zoneProtectionNetworkProfiles_value
	o.Zones = zones_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceRestapiObjectsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceRestapiObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var addressGroups_value types.String
	if obj.AddressGroups != nil {
		addressGroups_value = types.StringValue(*obj.AddressGroups)
	}
	var addresses_value types.String
	if obj.Addresses != nil {
		addresses_value = types.StringValue(*obj.Addresses)
	}
	var antiSpywareSecurityProfiles_value types.String
	if obj.AntiSpywareSecurityProfiles != nil {
		antiSpywareSecurityProfiles_value = types.StringValue(*obj.AntiSpywareSecurityProfiles)
	}
	var antivirusSecurityProfiles_value types.String
	if obj.AntivirusSecurityProfiles != nil {
		antivirusSecurityProfiles_value = types.StringValue(*obj.AntivirusSecurityProfiles)
	}
	var applicationFilters_value types.String
	if obj.ApplicationFilters != nil {
		applicationFilters_value = types.StringValue(*obj.ApplicationFilters)
	}
	var applicationGroups_value types.String
	if obj.ApplicationGroups != nil {
		applicationGroups_value = types.StringValue(*obj.ApplicationGroups)
	}
	var applications_value types.String
	if obj.Applications != nil {
		applications_value = types.StringValue(*obj.Applications)
	}
	var authenticationEnforcements_value types.String
	if obj.AuthenticationEnforcements != nil {
		authenticationEnforcements_value = types.StringValue(*obj.AuthenticationEnforcements)
	}
	var customDataPatterns_value types.String
	if obj.CustomDataPatterns != nil {
		customDataPatterns_value = types.StringValue(*obj.CustomDataPatterns)
	}
	var customSpywareSignatures_value types.String
	if obj.CustomSpywareSignatures != nil {
		customSpywareSignatures_value = types.StringValue(*obj.CustomSpywareSignatures)
	}
	var customUrlCategories_value types.String
	if obj.CustomUrlCategories != nil {
		customUrlCategories_value = types.StringValue(*obj.CustomUrlCategories)
	}
	var customVulnerabilitySignatures_value types.String
	if obj.CustomVulnerabilitySignatures != nil {
		customVulnerabilitySignatures_value = types.StringValue(*obj.CustomVulnerabilitySignatures)
	}
	var dataFilteringSecurityProfiles_value types.String
	if obj.DataFilteringSecurityProfiles != nil {
		dataFilteringSecurityProfiles_value = types.StringValue(*obj.DataFilteringSecurityProfiles)
	}
	var decryptionProfiles_value types.String
	if obj.DecryptionProfiles != nil {
		decryptionProfiles_value = types.StringValue(*obj.DecryptionProfiles)
	}
	var devices_value types.String
	if obj.Devices != nil {
		devices_value = types.StringValue(*obj.Devices)
	}
	var dosProtectionSecurityProfiles_value types.String
	if obj.DosProtectionSecurityProfiles != nil {
		dosProtectionSecurityProfiles_value = types.StringValue(*obj.DosProtectionSecurityProfiles)
	}
	var dynamicUserGroups_value types.String
	if obj.DynamicUserGroups != nil {
		dynamicUserGroups_value = types.StringValue(*obj.DynamicUserGroups)
	}
	var externalDynamicLists_value types.String
	if obj.ExternalDynamicLists != nil {
		externalDynamicLists_value = types.StringValue(*obj.ExternalDynamicLists)
	}
	var fileBlockingSecurityProfiles_value types.String
	if obj.FileBlockingSecurityProfiles != nil {
		fileBlockingSecurityProfiles_value = types.StringValue(*obj.FileBlockingSecurityProfiles)
	}
	var globalprotectHipObjects_value types.String
	if obj.GlobalprotectHipObjects != nil {
		globalprotectHipObjects_value = types.StringValue(*obj.GlobalprotectHipObjects)
	}
	var globalprotectHipProfiles_value types.String
	if obj.GlobalprotectHipProfiles != nil {
		globalprotectHipProfiles_value = types.StringValue(*obj.GlobalprotectHipProfiles)
	}
	var gtpProtectionSecurityProfiles_value types.String
	if obj.GtpProtectionSecurityProfiles != nil {
		gtpProtectionSecurityProfiles_value = types.StringValue(*obj.GtpProtectionSecurityProfiles)
	}
	var logForwardingProfiles_value types.String
	if obj.LogForwardingProfiles != nil {
		logForwardingProfiles_value = types.StringValue(*obj.LogForwardingProfiles)
	}
	var packetBrokerProfiles_value types.String
	if obj.PacketBrokerProfiles != nil {
		packetBrokerProfiles_value = types.StringValue(*obj.PacketBrokerProfiles)
	}
	var regions_value types.String
	if obj.Regions != nil {
		regions_value = types.StringValue(*obj.Regions)
	}
	var schedules_value types.String
	if obj.Schedules != nil {
		schedules_value = types.StringValue(*obj.Schedules)
	}
	var sctpProtectionSecurityProfiles_value types.String
	if obj.SctpProtectionSecurityProfiles != nil {
		sctpProtectionSecurityProfiles_value = types.StringValue(*obj.SctpProtectionSecurityProfiles)
	}
	var sdwanErrorCorrectionProfiles_value types.String
	if obj.SdwanErrorCorrectionProfiles != nil {
		sdwanErrorCorrectionProfiles_value = types.StringValue(*obj.SdwanErrorCorrectionProfiles)
	}
	var sdwanPathQualityProfiles_value types.String
	if obj.SdwanPathQualityProfiles != nil {
		sdwanPathQualityProfiles_value = types.StringValue(*obj.SdwanPathQualityProfiles)
	}
	var sdwanSaasQualityProfiles_value types.String
	if obj.SdwanSaasQualityProfiles != nil {
		sdwanSaasQualityProfiles_value = types.StringValue(*obj.SdwanSaasQualityProfiles)
	}
	var sdwanTrafficDistributionProfiles_value types.String
	if obj.SdwanTrafficDistributionProfiles != nil {
		sdwanTrafficDistributionProfiles_value = types.StringValue(*obj.SdwanTrafficDistributionProfiles)
	}
	var securityProfileGroups_value types.String
	if obj.SecurityProfileGroups != nil {
		securityProfileGroups_value = types.StringValue(*obj.SecurityProfileGroups)
	}
	var serviceGroups_value types.String
	if obj.ServiceGroups != nil {
		serviceGroups_value = types.StringValue(*obj.ServiceGroups)
	}
	var services_value types.String
	if obj.Services != nil {
		services_value = types.StringValue(*obj.Services)
	}
	var tags_value types.String
	if obj.Tags != nil {
		tags_value = types.StringValue(*obj.Tags)
	}
	var urlFilteringSecurityProfiles_value types.String
	if obj.UrlFilteringSecurityProfiles != nil {
		urlFilteringSecurityProfiles_value = types.StringValue(*obj.UrlFilteringSecurityProfiles)
	}
	var vulnerabilityProtectionSecurityProfiles_value types.String
	if obj.VulnerabilityProtectionSecurityProfiles != nil {
		vulnerabilityProtectionSecurityProfiles_value = types.StringValue(*obj.VulnerabilityProtectionSecurityProfiles)
	}
	var wildfireAnalysisSecurityProfiles_value types.String
	if obj.WildfireAnalysisSecurityProfiles != nil {
		wildfireAnalysisSecurityProfiles_value = types.StringValue(*obj.WildfireAnalysisSecurityProfiles)
	}
	o.AddressGroups = addressGroups_value
	o.Addresses = addresses_value
	o.AntiSpywareSecurityProfiles = antiSpywareSecurityProfiles_value
	o.AntivirusSecurityProfiles = antivirusSecurityProfiles_value
	o.ApplicationFilters = applicationFilters_value
	o.ApplicationGroups = applicationGroups_value
	o.Applications = applications_value
	o.AuthenticationEnforcements = authenticationEnforcements_value
	o.CustomDataPatterns = customDataPatterns_value
	o.CustomSpywareSignatures = customSpywareSignatures_value
	o.CustomUrlCategories = customUrlCategories_value
	o.CustomVulnerabilitySignatures = customVulnerabilitySignatures_value
	o.DataFilteringSecurityProfiles = dataFilteringSecurityProfiles_value
	o.DecryptionProfiles = decryptionProfiles_value
	o.Devices = devices_value
	o.DosProtectionSecurityProfiles = dosProtectionSecurityProfiles_value
	o.DynamicUserGroups = dynamicUserGroups_value
	o.ExternalDynamicLists = externalDynamicLists_value
	o.FileBlockingSecurityProfiles = fileBlockingSecurityProfiles_value
	o.GlobalprotectHipObjects = globalprotectHipObjects_value
	o.GlobalprotectHipProfiles = globalprotectHipProfiles_value
	o.GtpProtectionSecurityProfiles = gtpProtectionSecurityProfiles_value
	o.LogForwardingProfiles = logForwardingProfiles_value
	o.PacketBrokerProfiles = packetBrokerProfiles_value
	o.Regions = regions_value
	o.Schedules = schedules_value
	o.SctpProtectionSecurityProfiles = sctpProtectionSecurityProfiles_value
	o.SdwanErrorCorrectionProfiles = sdwanErrorCorrectionProfiles_value
	o.SdwanPathQualityProfiles = sdwanPathQualityProfiles_value
	o.SdwanSaasQualityProfiles = sdwanSaasQualityProfiles_value
	o.SdwanTrafficDistributionProfiles = sdwanTrafficDistributionProfiles_value
	o.SecurityProfileGroups = securityProfileGroups_value
	o.ServiceGroups = serviceGroups_value
	o.Services = services_value
	o.Tags = tags_value
	o.UrlFilteringSecurityProfiles = urlFilteringSecurityProfiles_value
	o.VulnerabilityProtectionSecurityProfiles = vulnerabilityProtectionSecurityProfiles_value
	o.WildfireAnalysisSecurityProfiles = wildfireAnalysisSecurityProfiles_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceRestapiPoliciesObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceRestapiPolicies, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var applicationOverrideRules_value types.String
	if obj.ApplicationOverrideRules != nil {
		applicationOverrideRules_value = types.StringValue(*obj.ApplicationOverrideRules)
	}
	var authenticationRules_value types.String
	if obj.AuthenticationRules != nil {
		authenticationRules_value = types.StringValue(*obj.AuthenticationRules)
	}
	var decryptionRules_value types.String
	if obj.DecryptionRules != nil {
		decryptionRules_value = types.StringValue(*obj.DecryptionRules)
	}
	var dosRules_value types.String
	if obj.DosRules != nil {
		dosRules_value = types.StringValue(*obj.DosRules)
	}
	var natRules_value types.String
	if obj.NatRules != nil {
		natRules_value = types.StringValue(*obj.NatRules)
	}
	var networkPacketBrokerRules_value types.String
	if obj.NetworkPacketBrokerRules != nil {
		networkPacketBrokerRules_value = types.StringValue(*obj.NetworkPacketBrokerRules)
	}
	var policyBasedForwardingRules_value types.String
	if obj.PolicyBasedForwardingRules != nil {
		policyBasedForwardingRules_value = types.StringValue(*obj.PolicyBasedForwardingRules)
	}
	var qosRules_value types.String
	if obj.QosRules != nil {
		qosRules_value = types.StringValue(*obj.QosRules)
	}
	var sdwanRules_value types.String
	if obj.SdwanRules != nil {
		sdwanRules_value = types.StringValue(*obj.SdwanRules)
	}
	var securityRules_value types.String
	if obj.SecurityRules != nil {
		securityRules_value = types.StringValue(*obj.SecurityRules)
	}
	var tunnelInspectionRules_value types.String
	if obj.TunnelInspectionRules != nil {
		tunnelInspectionRules_value = types.StringValue(*obj.TunnelInspectionRules)
	}
	o.ApplicationOverrideRules = applicationOverrideRules_value
	o.AuthenticationRules = authenticationRules_value
	o.DecryptionRules = decryptionRules_value
	o.DosRules = dosRules_value
	o.NatRules = natRules_value
	o.NetworkPacketBrokerRules = networkPacketBrokerRules_value
	o.PolicyBasedForwardingRules = policyBasedForwardingRules_value
	o.QosRules = qosRules_value
	o.SdwanRules = sdwanRules_value
	o.SecurityRules = securityRules_value
	o.TunnelInspectionRules = tunnelInspectionRules_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceRestapiSystemObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceRestapiSystem, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var configuration_value types.String
	if obj.Configuration != nil {
		configuration_value = types.StringValue(*obj.Configuration)
	}
	o.Configuration = configuration_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebui, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var commit_object *AdminRoleResourceRoleDeviceWebuiCommitObject
	if obj.Commit != nil {
		commit_object = new(AdminRoleResourceRoleDeviceWebuiCommitObject)

		diags.Append(commit_object.CopyFromPango(ctx, obj.Commit, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var device_object *AdminRoleResourceRoleDeviceWebuiDeviceObject
	if obj.Device != nil {
		device_object = new(AdminRoleResourceRoleDeviceWebuiDeviceObject)

		diags.Append(device_object.CopyFromPango(ctx, obj.Device, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var global_object *AdminRoleResourceRoleDeviceWebuiGlobalObject
	if obj.Global != nil {
		global_object = new(AdminRoleResourceRoleDeviceWebuiGlobalObject)

		diags.Append(global_object.CopyFromPango(ctx, obj.Global, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var monitor_object *AdminRoleResourceRoleDeviceWebuiMonitorObject
	if obj.Monitor != nil {
		monitor_object = new(AdminRoleResourceRoleDeviceWebuiMonitorObject)

		diags.Append(monitor_object.CopyFromPango(ctx, obj.Monitor, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var network_object *AdminRoleResourceRoleDeviceWebuiNetworkObject
	if obj.Network != nil {
		network_object = new(AdminRoleResourceRoleDeviceWebuiNetworkObject)

		diags.Append(network_object.CopyFromPango(ctx, obj.Network, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var objects_object *AdminRoleResourceRoleDeviceWebuiObjectsObject
	if obj.Objects != nil {
		objects_object = new(AdminRoleResourceRoleDeviceWebuiObjectsObject)

		diags.Append(objects_object.CopyFromPango(ctx, obj.Objects, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var operations_object *AdminRoleResourceRoleDeviceWebuiOperationsObject
	if obj.Operations != nil {
		operations_object = new(AdminRoleResourceRoleDeviceWebuiOperationsObject)

		diags.Append(operations_object.CopyFromPango(ctx, obj.Operations, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var policies_object *AdminRoleResourceRoleDeviceWebuiPoliciesObject
	if obj.Policies != nil {
		policies_object = new(AdminRoleResourceRoleDeviceWebuiPoliciesObject)

		diags.Append(policies_object.CopyFromPango(ctx, obj.Policies, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var privacy_object *AdminRoleResourceRoleDeviceWebuiPrivacyObject
	if obj.Privacy != nil {
		privacy_object = new(AdminRoleResourceRoleDeviceWebuiPrivacyObject)

		diags.Append(privacy_object.CopyFromPango(ctx, obj.Privacy, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var save_object *AdminRoleResourceRoleDeviceWebuiSaveObject
	if obj.Save != nil {
		save_object = new(AdminRoleResourceRoleDeviceWebuiSaveObject)

		diags.Append(save_object.CopyFromPango(ctx, obj.Save, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var acc_value types.String
	if obj.Acc != nil {
		acc_value = types.StringValue(*obj.Acc)
	}
	var dashboard_value types.String
	if obj.Dashboard != nil {
		dashboard_value = types.StringValue(*obj.Dashboard)
	}
	var tasks_value types.String
	if obj.Tasks != nil {
		tasks_value = types.StringValue(*obj.Tasks)
	}
	var validate_value types.String
	if obj.Validate != nil {
		validate_value = types.StringValue(*obj.Validate)
	}
	o.Acc = acc_value
	o.Commit = commit_object
	o.Dashboard = dashboard_value
	o.Device = device_object
	o.Global = global_object
	o.Monitor = monitor_object
	o.Network = network_object
	o.Objects = objects_object
	o.Operations = operations_object
	o.Policies = policies_object
	o.Privacy = privacy_object
	o.Save = save_object
	o.Tasks = tasks_value
	o.Validate = validate_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiCommitObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiCommit, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var commitForOtherAdmins_value types.String
	if obj.CommitForOtherAdmins != nil {
		commitForOtherAdmins_value = types.StringValue(*obj.CommitForOtherAdmins)
	}
	var device_value types.String
	if obj.Device != nil {
		device_value = types.StringValue(*obj.Device)
	}
	var objectLevelChanges_value types.String
	if obj.ObjectLevelChanges != nil {
		objectLevelChanges_value = types.StringValue(*obj.ObjectLevelChanges)
	}
	o.CommitForOtherAdmins = commitForOtherAdmins_value
	o.Device = device_value
	o.ObjectLevelChanges = objectLevelChanges_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiDeviceObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiDevice, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var certificateManagement_object *AdminRoleResourceRoleDeviceWebuiDeviceCertificateManagementObject
	if obj.CertificateManagement != nil {
		certificateManagement_object = new(AdminRoleResourceRoleDeviceWebuiDeviceCertificateManagementObject)

		diags.Append(certificateManagement_object.CopyFromPango(ctx, obj.CertificateManagement, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var localUserDatabase_object *AdminRoleResourceRoleDeviceWebuiDeviceLocalUserDatabaseObject
	if obj.LocalUserDatabase != nil {
		localUserDatabase_object = new(AdminRoleResourceRoleDeviceWebuiDeviceLocalUserDatabaseObject)

		diags.Append(localUserDatabase_object.CopyFromPango(ctx, obj.LocalUserDatabase, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var logSettings_object *AdminRoleResourceRoleDeviceWebuiDeviceLogSettingsObject
	if obj.LogSettings != nil {
		logSettings_object = new(AdminRoleResourceRoleDeviceWebuiDeviceLogSettingsObject)

		diags.Append(logSettings_object.CopyFromPango(ctx, obj.LogSettings, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var policyRecommendations_object *AdminRoleResourceRoleDeviceWebuiDevicePolicyRecommendationsObject
	if obj.PolicyRecommendations != nil {
		policyRecommendations_object = new(AdminRoleResourceRoleDeviceWebuiDevicePolicyRecommendationsObject)

		diags.Append(policyRecommendations_object.CopyFromPango(ctx, obj.PolicyRecommendations, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var serverProfile_object *AdminRoleResourceRoleDeviceWebuiDeviceServerProfileObject
	if obj.ServerProfile != nil {
		serverProfile_object = new(AdminRoleResourceRoleDeviceWebuiDeviceServerProfileObject)

		diags.Append(serverProfile_object.CopyFromPango(ctx, obj.ServerProfile, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var setup_object *AdminRoleResourceRoleDeviceWebuiDeviceSetupObject
	if obj.Setup != nil {
		setup_object = new(AdminRoleResourceRoleDeviceWebuiDeviceSetupObject)

		diags.Append(setup_object.CopyFromPango(ctx, obj.Setup, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var accessDomain_value types.String
	if obj.AccessDomain != nil {
		accessDomain_value = types.StringValue(*obj.AccessDomain)
	}
	var adminRoles_value types.String
	if obj.AdminRoles != nil {
		adminRoles_value = types.StringValue(*obj.AdminRoles)
	}
	var administrators_value types.String
	if obj.Administrators != nil {
		administrators_value = types.StringValue(*obj.Administrators)
	}
	var authenticationProfile_value types.String
	if obj.AuthenticationProfile != nil {
		authenticationProfile_value = types.StringValue(*obj.AuthenticationProfile)
	}
	var authenticationSequence_value types.String
	if obj.AuthenticationSequence != nil {
		authenticationSequence_value = types.StringValue(*obj.AuthenticationSequence)
	}
	var blockPages_value types.String
	if obj.BlockPages != nil {
		blockPages_value = types.StringValue(*obj.BlockPages)
	}
	var configAudit_value types.String
	if obj.ConfigAudit != nil {
		configAudit_value = types.StringValue(*obj.ConfigAudit)
	}
	var dataRedistribution_value types.String
	if obj.DataRedistribution != nil {
		dataRedistribution_value = types.StringValue(*obj.DataRedistribution)
	}
	var deviceQuarantine_value types.String
	if obj.DeviceQuarantine != nil {
		deviceQuarantine_value = types.StringValue(*obj.DeviceQuarantine)
	}
	var dynamicUpdates_value types.String
	if obj.DynamicUpdates != nil {
		dynamicUpdates_value = types.StringValue(*obj.DynamicUpdates)
	}
	var globalProtectClient_value types.String
	if obj.GlobalProtectClient != nil {
		globalProtectClient_value = types.StringValue(*obj.GlobalProtectClient)
	}
	var highAvailability_value types.String
	if obj.HighAvailability != nil {
		highAvailability_value = types.StringValue(*obj.HighAvailability)
	}
	var licenses_value types.String
	if obj.Licenses != nil {
		licenses_value = types.StringValue(*obj.Licenses)
	}
	var logFwdCard_value types.String
	if obj.LogFwdCard != nil {
		logFwdCard_value = types.StringValue(*obj.LogFwdCard)
	}
	var masterKey_value types.String
	if obj.MasterKey != nil {
		masterKey_value = types.StringValue(*obj.MasterKey)
	}
	var plugins_value types.String
	if obj.Plugins != nil {
		plugins_value = types.StringValue(*obj.Plugins)
	}
	var scheduledLogExport_value types.String
	if obj.ScheduledLogExport != nil {
		scheduledLogExport_value = types.StringValue(*obj.ScheduledLogExport)
	}
	var sharedGateways_value types.String
	if obj.SharedGateways != nil {
		sharedGateways_value = types.StringValue(*obj.SharedGateways)
	}
	var software_value types.String
	if obj.Software != nil {
		software_value = types.StringValue(*obj.Software)
	}
	var support_value types.String
	if obj.Support != nil {
		support_value = types.StringValue(*obj.Support)
	}
	var troubleshooting_value types.String
	if obj.Troubleshooting != nil {
		troubleshooting_value = types.StringValue(*obj.Troubleshooting)
	}
	var userIdentification_value types.String
	if obj.UserIdentification != nil {
		userIdentification_value = types.StringValue(*obj.UserIdentification)
	}
	var virtualSystems_value types.String
	if obj.VirtualSystems != nil {
		virtualSystems_value = types.StringValue(*obj.VirtualSystems)
	}
	var vmInfoSource_value types.String
	if obj.VmInfoSource != nil {
		vmInfoSource_value = types.StringValue(*obj.VmInfoSource)
	}
	var dhcpSyslogServer_value types.String
	if obj.DhcpSyslogServer != nil {
		dhcpSyslogServer_value = types.StringValue(*obj.DhcpSyslogServer)
	}
	o.AccessDomain = accessDomain_value
	o.AdminRoles = adminRoles_value
	o.Administrators = administrators_value
	o.AuthenticationProfile = authenticationProfile_value
	o.AuthenticationSequence = authenticationSequence_value
	o.BlockPages = blockPages_value
	o.CertificateManagement = certificateManagement_object
	o.ConfigAudit = configAudit_value
	o.DataRedistribution = dataRedistribution_value
	o.DeviceQuarantine = deviceQuarantine_value
	o.DynamicUpdates = dynamicUpdates_value
	o.GlobalProtectClient = globalProtectClient_value
	o.HighAvailability = highAvailability_value
	o.Licenses = licenses_value
	o.LocalUserDatabase = localUserDatabase_object
	o.LogFwdCard = logFwdCard_value
	o.LogSettings = logSettings_object
	o.MasterKey = masterKey_value
	o.Plugins = plugins_value
	o.PolicyRecommendations = policyRecommendations_object
	o.ScheduledLogExport = scheduledLogExport_value
	o.ServerProfile = serverProfile_object
	o.Setup = setup_object
	o.SharedGateways = sharedGateways_value
	o.Software = software_value
	o.Support = support_value
	o.Troubleshooting = troubleshooting_value
	o.UserIdentification = userIdentification_value
	o.VirtualSystems = virtualSystems_value
	o.VmInfoSource = vmInfoSource_value
	o.DhcpSyslogServer = dhcpSyslogServer_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiDeviceCertificateManagementObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiDeviceCertificateManagement, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var certificateProfile_value types.String
	if obj.CertificateProfile != nil {
		certificateProfile_value = types.StringValue(*obj.CertificateProfile)
	}
	var certificates_value types.String
	if obj.Certificates != nil {
		certificates_value = types.StringValue(*obj.Certificates)
	}
	var ocspResponder_value types.String
	if obj.OcspResponder != nil {
		ocspResponder_value = types.StringValue(*obj.OcspResponder)
	}
	var scep_value types.String
	if obj.Scep != nil {
		scep_value = types.StringValue(*obj.Scep)
	}
	var sshServiceProfile_value types.String
	if obj.SshServiceProfile != nil {
		sshServiceProfile_value = types.StringValue(*obj.SshServiceProfile)
	}
	var sslDecryptionExclusion_value types.String
	if obj.SslDecryptionExclusion != nil {
		sslDecryptionExclusion_value = types.StringValue(*obj.SslDecryptionExclusion)
	}
	var sslTlsServiceProfile_value types.String
	if obj.SslTlsServiceProfile != nil {
		sslTlsServiceProfile_value = types.StringValue(*obj.SslTlsServiceProfile)
	}
	o.CertificateProfile = certificateProfile_value
	o.Certificates = certificates_value
	o.OcspResponder = ocspResponder_value
	o.Scep = scep_value
	o.SshServiceProfile = sshServiceProfile_value
	o.SslDecryptionExclusion = sslDecryptionExclusion_value
	o.SslTlsServiceProfile = sslTlsServiceProfile_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiDeviceLocalUserDatabaseObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiDeviceLocalUserDatabase, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var userGroups_value types.String
	if obj.UserGroups != nil {
		userGroups_value = types.StringValue(*obj.UserGroups)
	}
	var users_value types.String
	if obj.Users != nil {
		users_value = types.StringValue(*obj.Users)
	}
	o.UserGroups = userGroups_value
	o.Users = users_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiDeviceLogSettingsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiDeviceLogSettings, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var ccAlarm_value types.String
	if obj.CcAlarm != nil {
		ccAlarm_value = types.StringValue(*obj.CcAlarm)
	}
	var config_value types.String
	if obj.Config != nil {
		config_value = types.StringValue(*obj.Config)
	}
	var correlation_value types.String
	if obj.Correlation != nil {
		correlation_value = types.StringValue(*obj.Correlation)
	}
	var globalprotect_value types.String
	if obj.Globalprotect != nil {
		globalprotect_value = types.StringValue(*obj.Globalprotect)
	}
	var hipmatch_value types.String
	if obj.Hipmatch != nil {
		hipmatch_value = types.StringValue(*obj.Hipmatch)
	}
	var iptag_value types.String
	if obj.Iptag != nil {
		iptag_value = types.StringValue(*obj.Iptag)
	}
	var manageLog_value types.String
	if obj.ManageLog != nil {
		manageLog_value = types.StringValue(*obj.ManageLog)
	}
	var system_value types.String
	if obj.System != nil {
		system_value = types.StringValue(*obj.System)
	}
	var userId_value types.String
	if obj.UserId != nil {
		userId_value = types.StringValue(*obj.UserId)
	}
	o.CcAlarm = ccAlarm_value
	o.Config = config_value
	o.Correlation = correlation_value
	o.Globalprotect = globalprotect_value
	o.Hipmatch = hipmatch_value
	o.Iptag = iptag_value
	o.ManageLog = manageLog_value
	o.System = system_value
	o.UserId = userId_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiDevicePolicyRecommendationsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiDevicePolicyRecommendations, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var iot_value types.String
	if obj.Iot != nil {
		iot_value = types.StringValue(*obj.Iot)
	}
	var saas_value types.String
	if obj.Saas != nil {
		saas_value = types.StringValue(*obj.Saas)
	}
	o.Iot = iot_value
	o.Saas = saas_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiDeviceServerProfileObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiDeviceServerProfile, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var dns_value types.String
	if obj.Dns != nil {
		dns_value = types.StringValue(*obj.Dns)
	}
	var email_value types.String
	if obj.Email != nil {
		email_value = types.StringValue(*obj.Email)
	}
	var http_value types.String
	if obj.Http != nil {
		http_value = types.StringValue(*obj.Http)
	}
	var kerberos_value types.String
	if obj.Kerberos != nil {
		kerberos_value = types.StringValue(*obj.Kerberos)
	}
	var ldap_value types.String
	if obj.Ldap != nil {
		ldap_value = types.StringValue(*obj.Ldap)
	}
	var mfa_value types.String
	if obj.Mfa != nil {
		mfa_value = types.StringValue(*obj.Mfa)
	}
	var netflow_value types.String
	if obj.Netflow != nil {
		netflow_value = types.StringValue(*obj.Netflow)
	}
	var radius_value types.String
	if obj.Radius != nil {
		radius_value = types.StringValue(*obj.Radius)
	}
	var samlIdp_value types.String
	if obj.SamlIdp != nil {
		samlIdp_value = types.StringValue(*obj.SamlIdp)
	}
	var scp_value types.String
	if obj.Scp != nil {
		scp_value = types.StringValue(*obj.Scp)
	}
	var snmpTrap_value types.String
	if obj.SnmpTrap != nil {
		snmpTrap_value = types.StringValue(*obj.SnmpTrap)
	}
	var syslog_value types.String
	if obj.Syslog != nil {
		syslog_value = types.StringValue(*obj.Syslog)
	}
	var tacplus_value types.String
	if obj.Tacplus != nil {
		tacplus_value = types.StringValue(*obj.Tacplus)
	}
	o.Dns = dns_value
	o.Email = email_value
	o.Http = http_value
	o.Kerberos = kerberos_value
	o.Ldap = ldap_value
	o.Mfa = mfa_value
	o.Netflow = netflow_value
	o.Radius = radius_value
	o.SamlIdp = samlIdp_value
	o.Scp = scp_value
	o.SnmpTrap = snmpTrap_value
	o.Syslog = syslog_value
	o.Tacplus = tacplus_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiDeviceSetupObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiDeviceSetup, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var contentId_value types.String
	if obj.ContentId != nil {
		contentId_value = types.StringValue(*obj.ContentId)
	}
	var hsm_value types.String
	if obj.Hsm != nil {
		hsm_value = types.StringValue(*obj.Hsm)
	}
	var interfaces_value types.String
	if obj.Interfaces != nil {
		interfaces_value = types.StringValue(*obj.Interfaces)
	}
	var management_value types.String
	if obj.Management != nil {
		management_value = types.StringValue(*obj.Management)
	}
	var operations_value types.String
	if obj.Operations != nil {
		operations_value = types.StringValue(*obj.Operations)
	}
	var services_value types.String
	if obj.Services != nil {
		services_value = types.StringValue(*obj.Services)
	}
	var session_value types.String
	if obj.Session != nil {
		session_value = types.StringValue(*obj.Session)
	}
	var telemetry_value types.String
	if obj.Telemetry != nil {
		telemetry_value = types.StringValue(*obj.Telemetry)
	}
	var wildfire_value types.String
	if obj.Wildfire != nil {
		wildfire_value = types.StringValue(*obj.Wildfire)
	}
	o.ContentId = contentId_value
	o.Hsm = hsm_value
	o.Interfaces = interfaces_value
	o.Management = management_value
	o.Operations = operations_value
	o.Services = services_value
	o.Session = session_value
	o.Telemetry = telemetry_value
	o.Wildfire = wildfire_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiGlobalObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiGlobal, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var systemAlarms_value types.String
	if obj.SystemAlarms != nil {
		systemAlarms_value = types.StringValue(*obj.SystemAlarms)
	}
	o.SystemAlarms = systemAlarms_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiMonitorObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiMonitor, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var automatedCorrelationEngine_object *AdminRoleResourceRoleDeviceWebuiMonitorAutomatedCorrelationEngineObject
	if obj.AutomatedCorrelationEngine != nil {
		automatedCorrelationEngine_object = new(AdminRoleResourceRoleDeviceWebuiMonitorAutomatedCorrelationEngineObject)

		diags.Append(automatedCorrelationEngine_object.CopyFromPango(ctx, obj.AutomatedCorrelationEngine, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var customReports_object *AdminRoleResourceRoleDeviceWebuiMonitorCustomReportsObject
	if obj.CustomReports != nil {
		customReports_object = new(AdminRoleResourceRoleDeviceWebuiMonitorCustomReportsObject)

		diags.Append(customReports_object.CopyFromPango(ctx, obj.CustomReports, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var logs_object *AdminRoleResourceRoleDeviceWebuiMonitorLogsObject
	if obj.Logs != nil {
		logs_object = new(AdminRoleResourceRoleDeviceWebuiMonitorLogsObject)

		diags.Append(logs_object.CopyFromPango(ctx, obj.Logs, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var pdfReports_object *AdminRoleResourceRoleDeviceWebuiMonitorPdfReportsObject
	if obj.PdfReports != nil {
		pdfReports_object = new(AdminRoleResourceRoleDeviceWebuiMonitorPdfReportsObject)

		diags.Append(pdfReports_object.CopyFromPango(ctx, obj.PdfReports, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var appScope_value types.String
	if obj.AppScope != nil {
		appScope_value = types.StringValue(*obj.AppScope)
	}
	var applicationReports_value types.String
	if obj.ApplicationReports != nil {
		applicationReports_value = types.StringValue(*obj.ApplicationReports)
	}
	var blockIpList_value types.String
	if obj.BlockIpList != nil {
		blockIpList_value = types.StringValue(*obj.BlockIpList)
	}
	var botnet_value types.String
	if obj.Botnet != nil {
		botnet_value = types.StringValue(*obj.Botnet)
	}
	var externalLogs_value types.String
	if obj.ExternalLogs != nil {
		externalLogs_value = types.StringValue(*obj.ExternalLogs)
	}
	var gtpReports_value types.String
	if obj.GtpReports != nil {
		gtpReports_value = types.StringValue(*obj.GtpReports)
	}
	var packetCapture_value types.String
	if obj.PacketCapture != nil {
		packetCapture_value = types.StringValue(*obj.PacketCapture)
	}
	var sctpReports_value types.String
	if obj.SctpReports != nil {
		sctpReports_value = types.StringValue(*obj.SctpReports)
	}
	var sessionBrowser_value types.String
	if obj.SessionBrowser != nil {
		sessionBrowser_value = types.StringValue(*obj.SessionBrowser)
	}
	var threatReports_value types.String
	if obj.ThreatReports != nil {
		threatReports_value = types.StringValue(*obj.ThreatReports)
	}
	var trafficReports_value types.String
	if obj.TrafficReports != nil {
		trafficReports_value = types.StringValue(*obj.TrafficReports)
	}
	var urlFilteringReports_value types.String
	if obj.UrlFilteringReports != nil {
		urlFilteringReports_value = types.StringValue(*obj.UrlFilteringReports)
	}
	var viewCustomReports_value types.String
	if obj.ViewCustomReports != nil {
		viewCustomReports_value = types.StringValue(*obj.ViewCustomReports)
	}
	o.AppScope = appScope_value
	o.ApplicationReports = applicationReports_value
	o.AutomatedCorrelationEngine = automatedCorrelationEngine_object
	o.BlockIpList = blockIpList_value
	o.Botnet = botnet_value
	o.CustomReports = customReports_object
	o.ExternalLogs = externalLogs_value
	o.GtpReports = gtpReports_value
	o.Logs = logs_object
	o.PacketCapture = packetCapture_value
	o.PdfReports = pdfReports_object
	o.SctpReports = sctpReports_value
	o.SessionBrowser = sessionBrowser_value
	o.ThreatReports = threatReports_value
	o.TrafficReports = trafficReports_value
	o.UrlFilteringReports = urlFilteringReports_value
	o.ViewCustomReports = viewCustomReports_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiMonitorAutomatedCorrelationEngineObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiMonitorAutomatedCorrelationEngine, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var correlatedEvents_value types.String
	if obj.CorrelatedEvents != nil {
		correlatedEvents_value = types.StringValue(*obj.CorrelatedEvents)
	}
	var correlationObjects_value types.String
	if obj.CorrelationObjects != nil {
		correlationObjects_value = types.StringValue(*obj.CorrelationObjects)
	}
	o.CorrelatedEvents = correlatedEvents_value
	o.CorrelationObjects = correlationObjects_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiMonitorCustomReportsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiMonitorCustomReports, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var applicationStatistics_value types.String
	if obj.ApplicationStatistics != nil {
		applicationStatistics_value = types.StringValue(*obj.ApplicationStatistics)
	}
	var auth_value types.String
	if obj.Auth != nil {
		auth_value = types.StringValue(*obj.Auth)
	}
	var dataFilteringLog_value types.String
	if obj.DataFilteringLog != nil {
		dataFilteringLog_value = types.StringValue(*obj.DataFilteringLog)
	}
	var decryptionLog_value types.String
	if obj.DecryptionLog != nil {
		decryptionLog_value = types.StringValue(*obj.DecryptionLog)
	}
	var decryptionSummary_value types.String
	if obj.DecryptionSummary != nil {
		decryptionSummary_value = types.StringValue(*obj.DecryptionSummary)
	}
	var globalprotect_value types.String
	if obj.Globalprotect != nil {
		globalprotect_value = types.StringValue(*obj.Globalprotect)
	}
	var gtpLog_value types.String
	if obj.GtpLog != nil {
		gtpLog_value = types.StringValue(*obj.GtpLog)
	}
	var gtpSummary_value types.String
	if obj.GtpSummary != nil {
		gtpSummary_value = types.StringValue(*obj.GtpSummary)
	}
	var hipmatch_value types.String
	if obj.Hipmatch != nil {
		hipmatch_value = types.StringValue(*obj.Hipmatch)
	}
	var iptag_value types.String
	if obj.Iptag != nil {
		iptag_value = types.StringValue(*obj.Iptag)
	}
	var sctpLog_value types.String
	if obj.SctpLog != nil {
		sctpLog_value = types.StringValue(*obj.SctpLog)
	}
	var sctpSummary_value types.String
	if obj.SctpSummary != nil {
		sctpSummary_value = types.StringValue(*obj.SctpSummary)
	}
	var threatLog_value types.String
	if obj.ThreatLog != nil {
		threatLog_value = types.StringValue(*obj.ThreatLog)
	}
	var threatSummary_value types.String
	if obj.ThreatSummary != nil {
		threatSummary_value = types.StringValue(*obj.ThreatSummary)
	}
	var trafficLog_value types.String
	if obj.TrafficLog != nil {
		trafficLog_value = types.StringValue(*obj.TrafficLog)
	}
	var trafficSummary_value types.String
	if obj.TrafficSummary != nil {
		trafficSummary_value = types.StringValue(*obj.TrafficSummary)
	}
	var tunnelLog_value types.String
	if obj.TunnelLog != nil {
		tunnelLog_value = types.StringValue(*obj.TunnelLog)
	}
	var tunnelSummary_value types.String
	if obj.TunnelSummary != nil {
		tunnelSummary_value = types.StringValue(*obj.TunnelSummary)
	}
	var urlLog_value types.String
	if obj.UrlLog != nil {
		urlLog_value = types.StringValue(*obj.UrlLog)
	}
	var urlSummary_value types.String
	if obj.UrlSummary != nil {
		urlSummary_value = types.StringValue(*obj.UrlSummary)
	}
	var userid_value types.String
	if obj.Userid != nil {
		userid_value = types.StringValue(*obj.Userid)
	}
	var wildfireLog_value types.String
	if obj.WildfireLog != nil {
		wildfireLog_value = types.StringValue(*obj.WildfireLog)
	}
	o.ApplicationStatistics = applicationStatistics_value
	o.Auth = auth_value
	o.DataFilteringLog = dataFilteringLog_value
	o.DecryptionLog = decryptionLog_value
	o.DecryptionSummary = decryptionSummary_value
	o.Globalprotect = globalprotect_value
	o.GtpLog = gtpLog_value
	o.GtpSummary = gtpSummary_value
	o.Hipmatch = hipmatch_value
	o.Iptag = iptag_value
	o.SctpLog = sctpLog_value
	o.SctpSummary = sctpSummary_value
	o.ThreatLog = threatLog_value
	o.ThreatSummary = threatSummary_value
	o.TrafficLog = trafficLog_value
	o.TrafficSummary = trafficSummary_value
	o.TunnelLog = tunnelLog_value
	o.TunnelSummary = tunnelSummary_value
	o.UrlLog = urlLog_value
	o.UrlSummary = urlSummary_value
	o.Userid = userid_value
	o.WildfireLog = wildfireLog_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiMonitorLogsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiMonitorLogs, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var alarm_value types.String
	if obj.Alarm != nil {
		alarm_value = types.StringValue(*obj.Alarm)
	}
	var authentication_value types.String
	if obj.Authentication != nil {
		authentication_value = types.StringValue(*obj.Authentication)
	}
	var configuration_value types.String
	if obj.Configuration != nil {
		configuration_value = types.StringValue(*obj.Configuration)
	}
	var dataFiltering_value types.String
	if obj.DataFiltering != nil {
		dataFiltering_value = types.StringValue(*obj.DataFiltering)
	}
	var decryption_value types.String
	if obj.Decryption != nil {
		decryption_value = types.StringValue(*obj.Decryption)
	}
	var globalprotect_value types.String
	if obj.Globalprotect != nil {
		globalprotect_value = types.StringValue(*obj.Globalprotect)
	}
	var gtp_value types.String
	if obj.Gtp != nil {
		gtp_value = types.StringValue(*obj.Gtp)
	}
	var hipmatch_value types.String
	if obj.Hipmatch != nil {
		hipmatch_value = types.StringValue(*obj.Hipmatch)
	}
	var iptag_value types.String
	if obj.Iptag != nil {
		iptag_value = types.StringValue(*obj.Iptag)
	}
	var sctp_value types.String
	if obj.Sctp != nil {
		sctp_value = types.StringValue(*obj.Sctp)
	}
	var system_value types.String
	if obj.System != nil {
		system_value = types.StringValue(*obj.System)
	}
	var threat_value types.String
	if obj.Threat != nil {
		threat_value = types.StringValue(*obj.Threat)
	}
	var traffic_value types.String
	if obj.Traffic != nil {
		traffic_value = types.StringValue(*obj.Traffic)
	}
	var tunnel_value types.String
	if obj.Tunnel != nil {
		tunnel_value = types.StringValue(*obj.Tunnel)
	}
	var url_value types.String
	if obj.Url != nil {
		url_value = types.StringValue(*obj.Url)
	}
	var userid_value types.String
	if obj.Userid != nil {
		userid_value = types.StringValue(*obj.Userid)
	}
	var wildfire_value types.String
	if obj.Wildfire != nil {
		wildfire_value = types.StringValue(*obj.Wildfire)
	}
	o.Alarm = alarm_value
	o.Authentication = authentication_value
	o.Configuration = configuration_value
	o.DataFiltering = dataFiltering_value
	o.Decryption = decryption_value
	o.Globalprotect = globalprotect_value
	o.Gtp = gtp_value
	o.Hipmatch = hipmatch_value
	o.Iptag = iptag_value
	o.Sctp = sctp_value
	o.System = system_value
	o.Threat = threat_value
	o.Traffic = traffic_value
	o.Tunnel = tunnel_value
	o.Url = url_value
	o.Userid = userid_value
	o.Wildfire = wildfire_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiMonitorPdfReportsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiMonitorPdfReports, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var emailScheduler_value types.String
	if obj.EmailScheduler != nil {
		emailScheduler_value = types.StringValue(*obj.EmailScheduler)
	}
	var managePdfSummary_value types.String
	if obj.ManagePdfSummary != nil {
		managePdfSummary_value = types.StringValue(*obj.ManagePdfSummary)
	}
	var pdfSummaryReports_value types.String
	if obj.PdfSummaryReports != nil {
		pdfSummaryReports_value = types.StringValue(*obj.PdfSummaryReports)
	}
	var reportGroups_value types.String
	if obj.ReportGroups != nil {
		reportGroups_value = types.StringValue(*obj.ReportGroups)
	}
	var saasApplicationUsageReport_value types.String
	if obj.SaasApplicationUsageReport != nil {
		saasApplicationUsageReport_value = types.StringValue(*obj.SaasApplicationUsageReport)
	}
	var userActivityReport_value types.String
	if obj.UserActivityReport != nil {
		userActivityReport_value = types.StringValue(*obj.UserActivityReport)
	}
	o.EmailScheduler = emailScheduler_value
	o.ManagePdfSummary = managePdfSummary_value
	o.PdfSummaryReports = pdfSummaryReports_value
	o.ReportGroups = reportGroups_value
	o.SaasApplicationUsageReport = saasApplicationUsageReport_value
	o.UserActivityReport = userActivityReport_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiNetworkObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiNetwork, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var globalProtect_object *AdminRoleResourceRoleDeviceWebuiNetworkGlobalProtectObject
	if obj.GlobalProtect != nil {
		globalProtect_object = new(AdminRoleResourceRoleDeviceWebuiNetworkGlobalProtectObject)

		diags.Append(globalProtect_object.CopyFromPango(ctx, obj.GlobalProtect, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var networkProfiles_object *AdminRoleResourceRoleDeviceWebuiNetworkNetworkProfilesObject
	if obj.NetworkProfiles != nil {
		networkProfiles_object = new(AdminRoleResourceRoleDeviceWebuiNetworkNetworkProfilesObject)

		diags.Append(networkProfiles_object.CopyFromPango(ctx, obj.NetworkProfiles, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var routing_object *AdminRoleResourceRoleDeviceWebuiNetworkRoutingObject
	if obj.Routing != nil {
		routing_object = new(AdminRoleResourceRoleDeviceWebuiNetworkRoutingObject)

		diags.Append(routing_object.CopyFromPango(ctx, obj.Routing, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var dhcp_value types.String
	if obj.Dhcp != nil {
		dhcp_value = types.StringValue(*obj.Dhcp)
	}
	var dnsProxy_value types.String
	if obj.DnsProxy != nil {
		dnsProxy_value = types.StringValue(*obj.DnsProxy)
	}
	var greTunnels_value types.String
	if obj.GreTunnels != nil {
		greTunnels_value = types.StringValue(*obj.GreTunnels)
	}
	var interfaces_value types.String
	if obj.Interfaces != nil {
		interfaces_value = types.StringValue(*obj.Interfaces)
	}
	var ipsecTunnels_value types.String
	if obj.IpsecTunnels != nil {
		ipsecTunnels_value = types.StringValue(*obj.IpsecTunnels)
	}
	var lldp_value types.String
	if obj.Lldp != nil {
		lldp_value = types.StringValue(*obj.Lldp)
	}
	var qos_value types.String
	if obj.Qos != nil {
		qos_value = types.StringValue(*obj.Qos)
	}
	var sdwanInterfaceProfile_value types.String
	if obj.SdwanInterfaceProfile != nil {
		sdwanInterfaceProfile_value = types.StringValue(*obj.SdwanInterfaceProfile)
	}
	var virtualRouters_value types.String
	if obj.VirtualRouters != nil {
		virtualRouters_value = types.StringValue(*obj.VirtualRouters)
	}
	var virtualWires_value types.String
	if obj.VirtualWires != nil {
		virtualWires_value = types.StringValue(*obj.VirtualWires)
	}
	var vlans_value types.String
	if obj.Vlans != nil {
		vlans_value = types.StringValue(*obj.Vlans)
	}
	var zones_value types.String
	if obj.Zones != nil {
		zones_value = types.StringValue(*obj.Zones)
	}
	var secureWebGateway_value types.String
	if obj.SecureWebGateway != nil {
		secureWebGateway_value = types.StringValue(*obj.SecureWebGateway)
	}
	o.Dhcp = dhcp_value
	o.DnsProxy = dnsProxy_value
	o.GlobalProtect = globalProtect_object
	o.GreTunnels = greTunnels_value
	o.Interfaces = interfaces_value
	o.IpsecTunnels = ipsecTunnels_value
	o.Lldp = lldp_value
	o.NetworkProfiles = networkProfiles_object
	o.Qos = qos_value
	o.Routing = routing_object
	o.SdwanInterfaceProfile = sdwanInterfaceProfile_value
	o.VirtualRouters = virtualRouters_value
	o.VirtualWires = virtualWires_value
	o.Vlans = vlans_value
	o.Zones = zones_value
	o.SecureWebGateway = secureWebGateway_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiNetworkGlobalProtectObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiNetworkGlobalProtect, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var clientlessAppGroups_value types.String
	if obj.ClientlessAppGroups != nil {
		clientlessAppGroups_value = types.StringValue(*obj.ClientlessAppGroups)
	}
	var clientlessApps_value types.String
	if obj.ClientlessApps != nil {
		clientlessApps_value = types.StringValue(*obj.ClientlessApps)
	}
	var gateways_value types.String
	if obj.Gateways != nil {
		gateways_value = types.StringValue(*obj.Gateways)
	}
	var mdm_value types.String
	if obj.Mdm != nil {
		mdm_value = types.StringValue(*obj.Mdm)
	}
	var portals_value types.String
	if obj.Portals != nil {
		portals_value = types.StringValue(*obj.Portals)
	}
	o.ClientlessAppGroups = clientlessAppGroups_value
	o.ClientlessApps = clientlessApps_value
	o.Gateways = gateways_value
	o.Mdm = mdm_value
	o.Portals = portals_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiNetworkNetworkProfilesObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiNetworkNetworkProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var bfdProfile_value types.String
	if obj.BfdProfile != nil {
		bfdProfile_value = types.StringValue(*obj.BfdProfile)
	}
	var gpAppIpsecCrypto_value types.String
	if obj.GpAppIpsecCrypto != nil {
		gpAppIpsecCrypto_value = types.StringValue(*obj.GpAppIpsecCrypto)
	}
	var ikeCrypto_value types.String
	if obj.IkeCrypto != nil {
		ikeCrypto_value = types.StringValue(*obj.IkeCrypto)
	}
	var ikeGateways_value types.String
	if obj.IkeGateways != nil {
		ikeGateways_value = types.StringValue(*obj.IkeGateways)
	}
	var interfaceMgmt_value types.String
	if obj.InterfaceMgmt != nil {
		interfaceMgmt_value = types.StringValue(*obj.InterfaceMgmt)
	}
	var ipsecCrypto_value types.String
	if obj.IpsecCrypto != nil {
		ipsecCrypto_value = types.StringValue(*obj.IpsecCrypto)
	}
	var lldpProfile_value types.String
	if obj.LldpProfile != nil {
		lldpProfile_value = types.StringValue(*obj.LldpProfile)
	}
	var qosProfile_value types.String
	if obj.QosProfile != nil {
		qosProfile_value = types.StringValue(*obj.QosProfile)
	}
	var tunnelMonitor_value types.String
	if obj.TunnelMonitor != nil {
		tunnelMonitor_value = types.StringValue(*obj.TunnelMonitor)
	}
	var zoneProtection_value types.String
	if obj.ZoneProtection != nil {
		zoneProtection_value = types.StringValue(*obj.ZoneProtection)
	}
	o.BfdProfile = bfdProfile_value
	o.GpAppIpsecCrypto = gpAppIpsecCrypto_value
	o.IkeCrypto = ikeCrypto_value
	o.IkeGateways = ikeGateways_value
	o.InterfaceMgmt = interfaceMgmt_value
	o.IpsecCrypto = ipsecCrypto_value
	o.LldpProfile = lldpProfile_value
	o.QosProfile = qosProfile_value
	o.TunnelMonitor = tunnelMonitor_value
	o.ZoneProtection = zoneProtection_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiNetworkRoutingObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiNetworkRouting, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var routingProfiles_object *AdminRoleResourceRoleDeviceWebuiNetworkRoutingRoutingProfilesObject
	if obj.RoutingProfiles != nil {
		routingProfiles_object = new(AdminRoleResourceRoleDeviceWebuiNetworkRoutingRoutingProfilesObject)

		diags.Append(routingProfiles_object.CopyFromPango(ctx, obj.RoutingProfiles, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var logicalRouters_value types.String
	if obj.LogicalRouters != nil {
		logicalRouters_value = types.StringValue(*obj.LogicalRouters)
	}
	o.LogicalRouters = logicalRouters_value
	o.RoutingProfiles = routingProfiles_object

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiNetworkRoutingRoutingProfilesObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiNetworkRoutingRoutingProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var bfd_value types.String
	if obj.Bfd != nil {
		bfd_value = types.StringValue(*obj.Bfd)
	}
	var bgp_value types.String
	if obj.Bgp != nil {
		bgp_value = types.StringValue(*obj.Bgp)
	}
	var filters_value types.String
	if obj.Filters != nil {
		filters_value = types.StringValue(*obj.Filters)
	}
	var multicast_value types.String
	if obj.Multicast != nil {
		multicast_value = types.StringValue(*obj.Multicast)
	}
	var ospf_value types.String
	if obj.Ospf != nil {
		ospf_value = types.StringValue(*obj.Ospf)
	}
	var ospfv3_value types.String
	if obj.Ospfv3 != nil {
		ospfv3_value = types.StringValue(*obj.Ospfv3)
	}
	var ripv2_value types.String
	if obj.Ripv2 != nil {
		ripv2_value = types.StringValue(*obj.Ripv2)
	}
	o.Bfd = bfd_value
	o.Bgp = bgp_value
	o.Filters = filters_value
	o.Multicast = multicast_value
	o.Ospf = ospf_value
	o.Ospfv3 = ospfv3_value
	o.Ripv2 = ripv2_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiObjectsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var customObjects_object *AdminRoleResourceRoleDeviceWebuiObjectsCustomObjectsObject
	if obj.CustomObjects != nil {
		customObjects_object = new(AdminRoleResourceRoleDeviceWebuiObjectsCustomObjectsObject)

		diags.Append(customObjects_object.CopyFromPango(ctx, obj.CustomObjects, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var decryption_object *AdminRoleResourceRoleDeviceWebuiObjectsDecryptionObject
	if obj.Decryption != nil {
		decryption_object = new(AdminRoleResourceRoleDeviceWebuiObjectsDecryptionObject)

		diags.Append(decryption_object.CopyFromPango(ctx, obj.Decryption, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var globalProtect_object *AdminRoleResourceRoleDeviceWebuiObjectsGlobalProtectObject
	if obj.GlobalProtect != nil {
		globalProtect_object = new(AdminRoleResourceRoleDeviceWebuiObjectsGlobalProtectObject)

		diags.Append(globalProtect_object.CopyFromPango(ctx, obj.GlobalProtect, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sdwan_object *AdminRoleResourceRoleDeviceWebuiObjectsSdwanObject
	if obj.Sdwan != nil {
		sdwan_object = new(AdminRoleResourceRoleDeviceWebuiObjectsSdwanObject)

		diags.Append(sdwan_object.CopyFromPango(ctx, obj.Sdwan, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var securityProfiles_object *AdminRoleResourceRoleDeviceWebuiObjectsSecurityProfilesObject
	if obj.SecurityProfiles != nil {
		securityProfiles_object = new(AdminRoleResourceRoleDeviceWebuiObjectsSecurityProfilesObject)

		diags.Append(securityProfiles_object.CopyFromPango(ctx, obj.SecurityProfiles, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var addressGroups_value types.String
	if obj.AddressGroups != nil {
		addressGroups_value = types.StringValue(*obj.AddressGroups)
	}
	var addresses_value types.String
	if obj.Addresses != nil {
		addresses_value = types.StringValue(*obj.Addresses)
	}
	var applicationFilters_value types.String
	if obj.ApplicationFilters != nil {
		applicationFilters_value = types.StringValue(*obj.ApplicationFilters)
	}
	var applicationGroups_value types.String
	if obj.ApplicationGroups != nil {
		applicationGroups_value = types.StringValue(*obj.ApplicationGroups)
	}
	var applications_value types.String
	if obj.Applications != nil {
		applications_value = types.StringValue(*obj.Applications)
	}
	var authentication_value types.String
	if obj.Authentication != nil {
		authentication_value = types.StringValue(*obj.Authentication)
	}
	var devices_value types.String
	if obj.Devices != nil {
		devices_value = types.StringValue(*obj.Devices)
	}
	var dynamicBlockLists_value types.String
	if obj.DynamicBlockLists != nil {
		dynamicBlockLists_value = types.StringValue(*obj.DynamicBlockLists)
	}
	var dynamicUserGroups_value types.String
	if obj.DynamicUserGroups != nil {
		dynamicUserGroups_value = types.StringValue(*obj.DynamicUserGroups)
	}
	var logForwarding_value types.String
	if obj.LogForwarding != nil {
		logForwarding_value = types.StringValue(*obj.LogForwarding)
	}
	var packetBrokerProfile_value types.String
	if obj.PacketBrokerProfile != nil {
		packetBrokerProfile_value = types.StringValue(*obj.PacketBrokerProfile)
	}
	var regions_value types.String
	if obj.Regions != nil {
		regions_value = types.StringValue(*obj.Regions)
	}
	var schedules_value types.String
	if obj.Schedules != nil {
		schedules_value = types.StringValue(*obj.Schedules)
	}
	var securityProfileGroups_value types.String
	if obj.SecurityProfileGroups != nil {
		securityProfileGroups_value = types.StringValue(*obj.SecurityProfileGroups)
	}
	var serviceGroups_value types.String
	if obj.ServiceGroups != nil {
		serviceGroups_value = types.StringValue(*obj.ServiceGroups)
	}
	var services_value types.String
	if obj.Services != nil {
		services_value = types.StringValue(*obj.Services)
	}
	var tags_value types.String
	if obj.Tags != nil {
		tags_value = types.StringValue(*obj.Tags)
	}
	o.AddressGroups = addressGroups_value
	o.Addresses = addresses_value
	o.ApplicationFilters = applicationFilters_value
	o.ApplicationGroups = applicationGroups_value
	o.Applications = applications_value
	o.Authentication = authentication_value
	o.CustomObjects = customObjects_object
	o.Decryption = decryption_object
	o.Devices = devices_value
	o.DynamicBlockLists = dynamicBlockLists_value
	o.DynamicUserGroups = dynamicUserGroups_value
	o.GlobalProtect = globalProtect_object
	o.LogForwarding = logForwarding_value
	o.PacketBrokerProfile = packetBrokerProfile_value
	o.Regions = regions_value
	o.Schedules = schedules_value
	o.Sdwan = sdwan_object
	o.SecurityProfileGroups = securityProfileGroups_value
	o.SecurityProfiles = securityProfiles_object
	o.ServiceGroups = serviceGroups_value
	o.Services = services_value
	o.Tags = tags_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiObjectsCustomObjectsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiObjectsCustomObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var dataPatterns_value types.String
	if obj.DataPatterns != nil {
		dataPatterns_value = types.StringValue(*obj.DataPatterns)
	}
	var spyware_value types.String
	if obj.Spyware != nil {
		spyware_value = types.StringValue(*obj.Spyware)
	}
	var urlCategory_value types.String
	if obj.UrlCategory != nil {
		urlCategory_value = types.StringValue(*obj.UrlCategory)
	}
	var vulnerability_value types.String
	if obj.Vulnerability != nil {
		vulnerability_value = types.StringValue(*obj.Vulnerability)
	}
	o.DataPatterns = dataPatterns_value
	o.Spyware = spyware_value
	o.UrlCategory = urlCategory_value
	o.Vulnerability = vulnerability_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiObjectsDecryptionObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiObjectsDecryption, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var decryptionProfile_value types.String
	if obj.DecryptionProfile != nil {
		decryptionProfile_value = types.StringValue(*obj.DecryptionProfile)
	}
	o.DecryptionProfile = decryptionProfile_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiObjectsGlobalProtectObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiObjectsGlobalProtect, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var hipObjects_value types.String
	if obj.HipObjects != nil {
		hipObjects_value = types.StringValue(*obj.HipObjects)
	}
	var hipProfiles_value types.String
	if obj.HipProfiles != nil {
		hipProfiles_value = types.StringValue(*obj.HipProfiles)
	}
	o.HipObjects = hipObjects_value
	o.HipProfiles = hipProfiles_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiObjectsSdwanObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiObjectsSdwan, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var sdwanDistProfile_value types.String
	if obj.SdwanDistProfile != nil {
		sdwanDistProfile_value = types.StringValue(*obj.SdwanDistProfile)
	}
	var sdwanErrorCorrectionProfile_value types.String
	if obj.SdwanErrorCorrectionProfile != nil {
		sdwanErrorCorrectionProfile_value = types.StringValue(*obj.SdwanErrorCorrectionProfile)
	}
	var sdwanProfile_value types.String
	if obj.SdwanProfile != nil {
		sdwanProfile_value = types.StringValue(*obj.SdwanProfile)
	}
	var sdwanSaasQualityProfile_value types.String
	if obj.SdwanSaasQualityProfile != nil {
		sdwanSaasQualityProfile_value = types.StringValue(*obj.SdwanSaasQualityProfile)
	}
	o.SdwanDistProfile = sdwanDistProfile_value
	o.SdwanErrorCorrectionProfile = sdwanErrorCorrectionProfile_value
	o.SdwanProfile = sdwanProfile_value
	o.SdwanSaasQualityProfile = sdwanSaasQualityProfile_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiObjectsSecurityProfilesObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiObjectsSecurityProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var antiSpyware_value types.String
	if obj.AntiSpyware != nil {
		antiSpyware_value = types.StringValue(*obj.AntiSpyware)
	}
	var antivirus_value types.String
	if obj.Antivirus != nil {
		antivirus_value = types.StringValue(*obj.Antivirus)
	}
	var dataFiltering_value types.String
	if obj.DataFiltering != nil {
		dataFiltering_value = types.StringValue(*obj.DataFiltering)
	}
	var dosProtection_value types.String
	if obj.DosProtection != nil {
		dosProtection_value = types.StringValue(*obj.DosProtection)
	}
	var fileBlocking_value types.String
	if obj.FileBlocking != nil {
		fileBlocking_value = types.StringValue(*obj.FileBlocking)
	}
	var gtpProtection_value types.String
	if obj.GtpProtection != nil {
		gtpProtection_value = types.StringValue(*obj.GtpProtection)
	}
	var sctpProtection_value types.String
	if obj.SctpProtection != nil {
		sctpProtection_value = types.StringValue(*obj.SctpProtection)
	}
	var urlFiltering_value types.String
	if obj.UrlFiltering != nil {
		urlFiltering_value = types.StringValue(*obj.UrlFiltering)
	}
	var vulnerabilityProtection_value types.String
	if obj.VulnerabilityProtection != nil {
		vulnerabilityProtection_value = types.StringValue(*obj.VulnerabilityProtection)
	}
	var wildfireAnalysis_value types.String
	if obj.WildfireAnalysis != nil {
		wildfireAnalysis_value = types.StringValue(*obj.WildfireAnalysis)
	}
	o.AntiSpyware = antiSpyware_value
	o.Antivirus = antivirus_value
	o.DataFiltering = dataFiltering_value
	o.DosProtection = dosProtection_value
	o.FileBlocking = fileBlocking_value
	o.GtpProtection = gtpProtection_value
	o.SctpProtection = sctpProtection_value
	o.UrlFiltering = urlFiltering_value
	o.VulnerabilityProtection = vulnerabilityProtection_value
	o.WildfireAnalysis = wildfireAnalysis_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiOperationsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiOperations, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var downloadCoreFiles_value types.String
	if obj.DownloadCoreFiles != nil {
		downloadCoreFiles_value = types.StringValue(*obj.DownloadCoreFiles)
	}
	var downloadPcapFiles_value types.String
	if obj.DownloadPcapFiles != nil {
		downloadPcapFiles_value = types.StringValue(*obj.DownloadPcapFiles)
	}
	var generateStatsDumpFile_value types.String
	if obj.GenerateStatsDumpFile != nil {
		generateStatsDumpFile_value = types.StringValue(*obj.GenerateStatsDumpFile)
	}
	var generateTechSupportFile_value types.String
	if obj.GenerateTechSupportFile != nil {
		generateTechSupportFile_value = types.StringValue(*obj.GenerateTechSupportFile)
	}
	var reboot_value types.String
	if obj.Reboot != nil {
		reboot_value = types.StringValue(*obj.Reboot)
	}
	o.DownloadCoreFiles = downloadCoreFiles_value
	o.DownloadPcapFiles = downloadPcapFiles_value
	o.GenerateStatsDumpFile = generateStatsDumpFile_value
	o.GenerateTechSupportFile = generateTechSupportFile_value
	o.Reboot = reboot_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiPoliciesObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiPolicies, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var applicationOverrideRulebase_value types.String
	if obj.ApplicationOverrideRulebase != nil {
		applicationOverrideRulebase_value = types.StringValue(*obj.ApplicationOverrideRulebase)
	}
	var authenticationRulebase_value types.String
	if obj.AuthenticationRulebase != nil {
		authenticationRulebase_value = types.StringValue(*obj.AuthenticationRulebase)
	}
	var dosRulebase_value types.String
	if obj.DosRulebase != nil {
		dosRulebase_value = types.StringValue(*obj.DosRulebase)
	}
	var natRulebase_value types.String
	if obj.NatRulebase != nil {
		natRulebase_value = types.StringValue(*obj.NatRulebase)
	}
	var networkPacketBrokerRulebase_value types.String
	if obj.NetworkPacketBrokerRulebase != nil {
		networkPacketBrokerRulebase_value = types.StringValue(*obj.NetworkPacketBrokerRulebase)
	}
	var pbfRulebase_value types.String
	if obj.PbfRulebase != nil {
		pbfRulebase_value = types.StringValue(*obj.PbfRulebase)
	}
	var qosRulebase_value types.String
	if obj.QosRulebase != nil {
		qosRulebase_value = types.StringValue(*obj.QosRulebase)
	}
	var ruleHitCountReset_value types.String
	if obj.RuleHitCountReset != nil {
		ruleHitCountReset_value = types.StringValue(*obj.RuleHitCountReset)
	}
	var sdwanRulebase_value types.String
	if obj.SdwanRulebase != nil {
		sdwanRulebase_value = types.StringValue(*obj.SdwanRulebase)
	}
	var securityRulebase_value types.String
	if obj.SecurityRulebase != nil {
		securityRulebase_value = types.StringValue(*obj.SecurityRulebase)
	}
	var sslDecryptionRulebase_value types.String
	if obj.SslDecryptionRulebase != nil {
		sslDecryptionRulebase_value = types.StringValue(*obj.SslDecryptionRulebase)
	}
	var tunnelInspectRulebase_value types.String
	if obj.TunnelInspectRulebase != nil {
		tunnelInspectRulebase_value = types.StringValue(*obj.TunnelInspectRulebase)
	}
	o.ApplicationOverrideRulebase = applicationOverrideRulebase_value
	o.AuthenticationRulebase = authenticationRulebase_value
	o.DosRulebase = dosRulebase_value
	o.NatRulebase = natRulebase_value
	o.NetworkPacketBrokerRulebase = networkPacketBrokerRulebase_value
	o.PbfRulebase = pbfRulebase_value
	o.QosRulebase = qosRulebase_value
	o.RuleHitCountReset = ruleHitCountReset_value
	o.SdwanRulebase = sdwanRulebase_value
	o.SecurityRulebase = securityRulebase_value
	o.SslDecryptionRulebase = sslDecryptionRulebase_value
	o.TunnelInspectRulebase = tunnelInspectRulebase_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiPrivacyObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiPrivacy, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var showFullIpAddresses_value types.String
	if obj.ShowFullIpAddresses != nil {
		showFullIpAddresses_value = types.StringValue(*obj.ShowFullIpAddresses)
	}
	var showUserNamesInLogsAndReports_value types.String
	if obj.ShowUserNamesInLogsAndReports != nil {
		showUserNamesInLogsAndReports_value = types.StringValue(*obj.ShowUserNamesInLogsAndReports)
	}
	var viewPcapFiles_value types.String
	if obj.ViewPcapFiles != nil {
		viewPcapFiles_value = types.StringValue(*obj.ViewPcapFiles)
	}
	o.ShowFullIpAddresses = showFullIpAddresses_value
	o.ShowUserNamesInLogsAndReports = showUserNamesInLogsAndReports_value
	o.ViewPcapFiles = viewPcapFiles_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceWebuiSaveObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceWebuiSave, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var partialSave_value types.String
	if obj.PartialSave != nil {
		partialSave_value = types.StringValue(*obj.PartialSave)
	}
	var saveForOtherAdmins_value types.String
	if obj.SaveForOtherAdmins != nil {
		saveForOtherAdmins_value = types.StringValue(*obj.SaveForOtherAdmins)
	}
	var objectLevelChanges_value types.String
	if obj.ObjectLevelChanges != nil {
		objectLevelChanges_value = types.StringValue(*obj.ObjectLevelChanges)
	}
	o.PartialSave = partialSave_value
	o.SaveForOtherAdmins = saveForOtherAdmins_value
	o.ObjectLevelChanges = objectLevelChanges_value

	return diags
}

func (o *AdminRoleResourceRoleDeviceXmlapiObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleDeviceXmlapi, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var commit_value types.String
	if obj.Commit != nil {
		commit_value = types.StringValue(*obj.Commit)
	}
	var config_value types.String
	if obj.Config != nil {
		config_value = types.StringValue(*obj.Config)
	}
	var export_value types.String
	if obj.Export != nil {
		export_value = types.StringValue(*obj.Export)
	}
	var import_value types.String
	if obj.Import != nil {
		import_value = types.StringValue(*obj.Import)
	}
	var iot_value types.String
	if obj.Iot != nil {
		iot_value = types.StringValue(*obj.Iot)
	}
	var log_value types.String
	if obj.Log != nil {
		log_value = types.StringValue(*obj.Log)
	}
	var op_value types.String
	if obj.Op != nil {
		op_value = types.StringValue(*obj.Op)
	}
	var report_value types.String
	if obj.Report != nil {
		report_value = types.StringValue(*obj.Report)
	}
	var userId_value types.String
	if obj.UserId != nil {
		userId_value = types.StringValue(*obj.UserId)
	}
	o.Commit = commit_value
	o.Config = config_value
	o.Export = export_value
	o.Import = import_value
	o.Iot = iot_value
	o.Log = log_value
	o.Op = op_value
	o.Report = report_value
	o.UserId = userId_value

	return diags
}

func (o *AdminRoleResourceRoleVsysObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsys, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var restapi_object *AdminRoleResourceRoleVsysRestapiObject
	if obj.Restapi != nil {
		restapi_object = new(AdminRoleResourceRoleVsysRestapiObject)

		diags.Append(restapi_object.CopyFromPango(ctx, obj.Restapi, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var webui_object *AdminRoleResourceRoleVsysWebuiObject
	if obj.Webui != nil {
		webui_object = new(AdminRoleResourceRoleVsysWebuiObject)

		diags.Append(webui_object.CopyFromPango(ctx, obj.Webui, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var xmlapi_object *AdminRoleResourceRoleVsysXmlapiObject
	if obj.Xmlapi != nil {
		xmlapi_object = new(AdminRoleResourceRoleVsysXmlapiObject)

		diags.Append(xmlapi_object.CopyFromPango(ctx, obj.Xmlapi, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var cli_value types.String
	if obj.Cli != nil {
		cli_value = types.StringValue(*obj.Cli)
	}
	o.Cli = cli_value
	o.Restapi = restapi_object
	o.Webui = webui_object
	o.Xmlapi = xmlapi_object

	return diags
}

func (o *AdminRoleResourceRoleVsysRestapiObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysRestapi, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var device_object *AdminRoleResourceRoleVsysRestapiDeviceObject
	if obj.Device != nil {
		device_object = new(AdminRoleResourceRoleVsysRestapiDeviceObject)

		diags.Append(device_object.CopyFromPango(ctx, obj.Device, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var network_object *AdminRoleResourceRoleVsysRestapiNetworkObject
	if obj.Network != nil {
		network_object = new(AdminRoleResourceRoleVsysRestapiNetworkObject)

		diags.Append(network_object.CopyFromPango(ctx, obj.Network, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var objects_object *AdminRoleResourceRoleVsysRestapiObjectsObject
	if obj.Objects != nil {
		objects_object = new(AdminRoleResourceRoleVsysRestapiObjectsObject)

		diags.Append(objects_object.CopyFromPango(ctx, obj.Objects, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var policies_object *AdminRoleResourceRoleVsysRestapiPoliciesObject
	if obj.Policies != nil {
		policies_object = new(AdminRoleResourceRoleVsysRestapiPoliciesObject)

		diags.Append(policies_object.CopyFromPango(ctx, obj.Policies, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var system_object *AdminRoleResourceRoleVsysRestapiSystemObject
	if obj.System != nil {
		system_object = new(AdminRoleResourceRoleVsysRestapiSystemObject)

		diags.Append(system_object.CopyFromPango(ctx, obj.System, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Device = device_object
	o.Network = network_object
	o.Objects = objects_object
	o.Policies = policies_object
	o.System = system_object

	return diags
}

func (o *AdminRoleResourceRoleVsysRestapiDeviceObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysRestapiDevice, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var emailServerProfiles_value types.String
	if obj.EmailServerProfiles != nil {
		emailServerProfiles_value = types.StringValue(*obj.EmailServerProfiles)
	}
	var httpServerProfiles_value types.String
	if obj.HttpServerProfiles != nil {
		httpServerProfiles_value = types.StringValue(*obj.HttpServerProfiles)
	}
	var ldapServerProfiles_value types.String
	if obj.LdapServerProfiles != nil {
		ldapServerProfiles_value = types.StringValue(*obj.LdapServerProfiles)
	}
	var logInterfaceSetting_value types.String
	if obj.LogInterfaceSetting != nil {
		logInterfaceSetting_value = types.StringValue(*obj.LogInterfaceSetting)
	}
	var snmpTrapServerProfiles_value types.String
	if obj.SnmpTrapServerProfiles != nil {
		snmpTrapServerProfiles_value = types.StringValue(*obj.SnmpTrapServerProfiles)
	}
	var syslogServerProfiles_value types.String
	if obj.SyslogServerProfiles != nil {
		syslogServerProfiles_value = types.StringValue(*obj.SyslogServerProfiles)
	}
	var virtualSystems_value types.String
	if obj.VirtualSystems != nil {
		virtualSystems_value = types.StringValue(*obj.VirtualSystems)
	}
	o.EmailServerProfiles = emailServerProfiles_value
	o.HttpServerProfiles = httpServerProfiles_value
	o.LdapServerProfiles = ldapServerProfiles_value
	o.LogInterfaceSetting = logInterfaceSetting_value
	o.SnmpTrapServerProfiles = snmpTrapServerProfiles_value
	o.SyslogServerProfiles = syslogServerProfiles_value
	o.VirtualSystems = virtualSystems_value

	return diags
}

func (o *AdminRoleResourceRoleVsysRestapiNetworkObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysRestapiNetwork, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var globalprotectClientlessAppGroups_value types.String
	if obj.GlobalprotectClientlessAppGroups != nil {
		globalprotectClientlessAppGroups_value = types.StringValue(*obj.GlobalprotectClientlessAppGroups)
	}
	var globalprotectClientlessApps_value types.String
	if obj.GlobalprotectClientlessApps != nil {
		globalprotectClientlessApps_value = types.StringValue(*obj.GlobalprotectClientlessApps)
	}
	var globalprotectGateways_value types.String
	if obj.GlobalprotectGateways != nil {
		globalprotectGateways_value = types.StringValue(*obj.GlobalprotectGateways)
	}
	var globalprotectMdmServers_value types.String
	if obj.GlobalprotectMdmServers != nil {
		globalprotectMdmServers_value = types.StringValue(*obj.GlobalprotectMdmServers)
	}
	var globalprotectPortals_value types.String
	if obj.GlobalprotectPortals != nil {
		globalprotectPortals_value = types.StringValue(*obj.GlobalprotectPortals)
	}
	var zones_value types.String
	if obj.Zones != nil {
		zones_value = types.StringValue(*obj.Zones)
	}
	var sdwanInterfaceProfiles_value types.String
	if obj.SdwanInterfaceProfiles != nil {
		sdwanInterfaceProfiles_value = types.StringValue(*obj.SdwanInterfaceProfiles)
	}
	o.GlobalprotectClientlessAppGroups = globalprotectClientlessAppGroups_value
	o.GlobalprotectClientlessApps = globalprotectClientlessApps_value
	o.GlobalprotectGateways = globalprotectGateways_value
	o.GlobalprotectMdmServers = globalprotectMdmServers_value
	o.GlobalprotectPortals = globalprotectPortals_value
	o.Zones = zones_value
	o.SdwanInterfaceProfiles = sdwanInterfaceProfiles_value

	return diags
}

func (o *AdminRoleResourceRoleVsysRestapiObjectsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysRestapiObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var addressGroups_value types.String
	if obj.AddressGroups != nil {
		addressGroups_value = types.StringValue(*obj.AddressGroups)
	}
	var addresses_value types.String
	if obj.Addresses != nil {
		addresses_value = types.StringValue(*obj.Addresses)
	}
	var antiSpywareSecurityProfiles_value types.String
	if obj.AntiSpywareSecurityProfiles != nil {
		antiSpywareSecurityProfiles_value = types.StringValue(*obj.AntiSpywareSecurityProfiles)
	}
	var antivirusSecurityProfiles_value types.String
	if obj.AntivirusSecurityProfiles != nil {
		antivirusSecurityProfiles_value = types.StringValue(*obj.AntivirusSecurityProfiles)
	}
	var applicationFilters_value types.String
	if obj.ApplicationFilters != nil {
		applicationFilters_value = types.StringValue(*obj.ApplicationFilters)
	}
	var applicationGroups_value types.String
	if obj.ApplicationGroups != nil {
		applicationGroups_value = types.StringValue(*obj.ApplicationGroups)
	}
	var applications_value types.String
	if obj.Applications != nil {
		applications_value = types.StringValue(*obj.Applications)
	}
	var authenticationEnforcements_value types.String
	if obj.AuthenticationEnforcements != nil {
		authenticationEnforcements_value = types.StringValue(*obj.AuthenticationEnforcements)
	}
	var customDataPatterns_value types.String
	if obj.CustomDataPatterns != nil {
		customDataPatterns_value = types.StringValue(*obj.CustomDataPatterns)
	}
	var customSpywareSignatures_value types.String
	if obj.CustomSpywareSignatures != nil {
		customSpywareSignatures_value = types.StringValue(*obj.CustomSpywareSignatures)
	}
	var customUrlCategories_value types.String
	if obj.CustomUrlCategories != nil {
		customUrlCategories_value = types.StringValue(*obj.CustomUrlCategories)
	}
	var customVulnerabilitySignatures_value types.String
	if obj.CustomVulnerabilitySignatures != nil {
		customVulnerabilitySignatures_value = types.StringValue(*obj.CustomVulnerabilitySignatures)
	}
	var dataFilteringSecurityProfiles_value types.String
	if obj.DataFilteringSecurityProfiles != nil {
		dataFilteringSecurityProfiles_value = types.StringValue(*obj.DataFilteringSecurityProfiles)
	}
	var decryptionProfiles_value types.String
	if obj.DecryptionProfiles != nil {
		decryptionProfiles_value = types.StringValue(*obj.DecryptionProfiles)
	}
	var devices_value types.String
	if obj.Devices != nil {
		devices_value = types.StringValue(*obj.Devices)
	}
	var dosProtectionSecurityProfiles_value types.String
	if obj.DosProtectionSecurityProfiles != nil {
		dosProtectionSecurityProfiles_value = types.StringValue(*obj.DosProtectionSecurityProfiles)
	}
	var dynamicUserGroups_value types.String
	if obj.DynamicUserGroups != nil {
		dynamicUserGroups_value = types.StringValue(*obj.DynamicUserGroups)
	}
	var externalDynamicLists_value types.String
	if obj.ExternalDynamicLists != nil {
		externalDynamicLists_value = types.StringValue(*obj.ExternalDynamicLists)
	}
	var fileBlockingSecurityProfiles_value types.String
	if obj.FileBlockingSecurityProfiles != nil {
		fileBlockingSecurityProfiles_value = types.StringValue(*obj.FileBlockingSecurityProfiles)
	}
	var globalprotectHipObjects_value types.String
	if obj.GlobalprotectHipObjects != nil {
		globalprotectHipObjects_value = types.StringValue(*obj.GlobalprotectHipObjects)
	}
	var globalprotectHipProfiles_value types.String
	if obj.GlobalprotectHipProfiles != nil {
		globalprotectHipProfiles_value = types.StringValue(*obj.GlobalprotectHipProfiles)
	}
	var gtpProtectionSecurityProfiles_value types.String
	if obj.GtpProtectionSecurityProfiles != nil {
		gtpProtectionSecurityProfiles_value = types.StringValue(*obj.GtpProtectionSecurityProfiles)
	}
	var logForwardingProfiles_value types.String
	if obj.LogForwardingProfiles != nil {
		logForwardingProfiles_value = types.StringValue(*obj.LogForwardingProfiles)
	}
	var packetBrokerProfiles_value types.String
	if obj.PacketBrokerProfiles != nil {
		packetBrokerProfiles_value = types.StringValue(*obj.PacketBrokerProfiles)
	}
	var regions_value types.String
	if obj.Regions != nil {
		regions_value = types.StringValue(*obj.Regions)
	}
	var schedules_value types.String
	if obj.Schedules != nil {
		schedules_value = types.StringValue(*obj.Schedules)
	}
	var sctpProtectionSecurityProfiles_value types.String
	if obj.SctpProtectionSecurityProfiles != nil {
		sctpProtectionSecurityProfiles_value = types.StringValue(*obj.SctpProtectionSecurityProfiles)
	}
	var sdwanErrorCorrectionProfiles_value types.String
	if obj.SdwanErrorCorrectionProfiles != nil {
		sdwanErrorCorrectionProfiles_value = types.StringValue(*obj.SdwanErrorCorrectionProfiles)
	}
	var sdwanPathQualityProfiles_value types.String
	if obj.SdwanPathQualityProfiles != nil {
		sdwanPathQualityProfiles_value = types.StringValue(*obj.SdwanPathQualityProfiles)
	}
	var sdwanSaasQualityProfiles_value types.String
	if obj.SdwanSaasQualityProfiles != nil {
		sdwanSaasQualityProfiles_value = types.StringValue(*obj.SdwanSaasQualityProfiles)
	}
	var sdwanTrafficDistributionProfiles_value types.String
	if obj.SdwanTrafficDistributionProfiles != nil {
		sdwanTrafficDistributionProfiles_value = types.StringValue(*obj.SdwanTrafficDistributionProfiles)
	}
	var securityProfileGroups_value types.String
	if obj.SecurityProfileGroups != nil {
		securityProfileGroups_value = types.StringValue(*obj.SecurityProfileGroups)
	}
	var serviceGroups_value types.String
	if obj.ServiceGroups != nil {
		serviceGroups_value = types.StringValue(*obj.ServiceGroups)
	}
	var services_value types.String
	if obj.Services != nil {
		services_value = types.StringValue(*obj.Services)
	}
	var tags_value types.String
	if obj.Tags != nil {
		tags_value = types.StringValue(*obj.Tags)
	}
	var urlFilteringSecurityProfiles_value types.String
	if obj.UrlFilteringSecurityProfiles != nil {
		urlFilteringSecurityProfiles_value = types.StringValue(*obj.UrlFilteringSecurityProfiles)
	}
	var vulnerabilityProtectionSecurityProfiles_value types.String
	if obj.VulnerabilityProtectionSecurityProfiles != nil {
		vulnerabilityProtectionSecurityProfiles_value = types.StringValue(*obj.VulnerabilityProtectionSecurityProfiles)
	}
	var wildfireAnalysisSecurityProfiles_value types.String
	if obj.WildfireAnalysisSecurityProfiles != nil {
		wildfireAnalysisSecurityProfiles_value = types.StringValue(*obj.WildfireAnalysisSecurityProfiles)
	}
	o.AddressGroups = addressGroups_value
	o.Addresses = addresses_value
	o.AntiSpywareSecurityProfiles = antiSpywareSecurityProfiles_value
	o.AntivirusSecurityProfiles = antivirusSecurityProfiles_value
	o.ApplicationFilters = applicationFilters_value
	o.ApplicationGroups = applicationGroups_value
	o.Applications = applications_value
	o.AuthenticationEnforcements = authenticationEnforcements_value
	o.CustomDataPatterns = customDataPatterns_value
	o.CustomSpywareSignatures = customSpywareSignatures_value
	o.CustomUrlCategories = customUrlCategories_value
	o.CustomVulnerabilitySignatures = customVulnerabilitySignatures_value
	o.DataFilteringSecurityProfiles = dataFilteringSecurityProfiles_value
	o.DecryptionProfiles = decryptionProfiles_value
	o.Devices = devices_value
	o.DosProtectionSecurityProfiles = dosProtectionSecurityProfiles_value
	o.DynamicUserGroups = dynamicUserGroups_value
	o.ExternalDynamicLists = externalDynamicLists_value
	o.FileBlockingSecurityProfiles = fileBlockingSecurityProfiles_value
	o.GlobalprotectHipObjects = globalprotectHipObjects_value
	o.GlobalprotectHipProfiles = globalprotectHipProfiles_value
	o.GtpProtectionSecurityProfiles = gtpProtectionSecurityProfiles_value
	o.LogForwardingProfiles = logForwardingProfiles_value
	o.PacketBrokerProfiles = packetBrokerProfiles_value
	o.Regions = regions_value
	o.Schedules = schedules_value
	o.SctpProtectionSecurityProfiles = sctpProtectionSecurityProfiles_value
	o.SdwanErrorCorrectionProfiles = sdwanErrorCorrectionProfiles_value
	o.SdwanPathQualityProfiles = sdwanPathQualityProfiles_value
	o.SdwanSaasQualityProfiles = sdwanSaasQualityProfiles_value
	o.SdwanTrafficDistributionProfiles = sdwanTrafficDistributionProfiles_value
	o.SecurityProfileGroups = securityProfileGroups_value
	o.ServiceGroups = serviceGroups_value
	o.Services = services_value
	o.Tags = tags_value
	o.UrlFilteringSecurityProfiles = urlFilteringSecurityProfiles_value
	o.VulnerabilityProtectionSecurityProfiles = vulnerabilityProtectionSecurityProfiles_value
	o.WildfireAnalysisSecurityProfiles = wildfireAnalysisSecurityProfiles_value

	return diags
}

func (o *AdminRoleResourceRoleVsysRestapiPoliciesObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysRestapiPolicies, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var applicationOverrideRules_value types.String
	if obj.ApplicationOverrideRules != nil {
		applicationOverrideRules_value = types.StringValue(*obj.ApplicationOverrideRules)
	}
	var authenticationRules_value types.String
	if obj.AuthenticationRules != nil {
		authenticationRules_value = types.StringValue(*obj.AuthenticationRules)
	}
	var decryptionRules_value types.String
	if obj.DecryptionRules != nil {
		decryptionRules_value = types.StringValue(*obj.DecryptionRules)
	}
	var dosRules_value types.String
	if obj.DosRules != nil {
		dosRules_value = types.StringValue(*obj.DosRules)
	}
	var natRules_value types.String
	if obj.NatRules != nil {
		natRules_value = types.StringValue(*obj.NatRules)
	}
	var networkPacketBrokerRules_value types.String
	if obj.NetworkPacketBrokerRules != nil {
		networkPacketBrokerRules_value = types.StringValue(*obj.NetworkPacketBrokerRules)
	}
	var policyBasedForwardingRules_value types.String
	if obj.PolicyBasedForwardingRules != nil {
		policyBasedForwardingRules_value = types.StringValue(*obj.PolicyBasedForwardingRules)
	}
	var qosRules_value types.String
	if obj.QosRules != nil {
		qosRules_value = types.StringValue(*obj.QosRules)
	}
	var sdwanRules_value types.String
	if obj.SdwanRules != nil {
		sdwanRules_value = types.StringValue(*obj.SdwanRules)
	}
	var securityRules_value types.String
	if obj.SecurityRules != nil {
		securityRules_value = types.StringValue(*obj.SecurityRules)
	}
	var tunnelInspectionRules_value types.String
	if obj.TunnelInspectionRules != nil {
		tunnelInspectionRules_value = types.StringValue(*obj.TunnelInspectionRules)
	}
	o.ApplicationOverrideRules = applicationOverrideRules_value
	o.AuthenticationRules = authenticationRules_value
	o.DecryptionRules = decryptionRules_value
	o.DosRules = dosRules_value
	o.NatRules = natRules_value
	o.NetworkPacketBrokerRules = networkPacketBrokerRules_value
	o.PolicyBasedForwardingRules = policyBasedForwardingRules_value
	o.QosRules = qosRules_value
	o.SdwanRules = sdwanRules_value
	o.SecurityRules = securityRules_value
	o.TunnelInspectionRules = tunnelInspectionRules_value

	return diags
}

func (o *AdminRoleResourceRoleVsysRestapiSystemObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysRestapiSystem, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var configuration_value types.String
	if obj.Configuration != nil {
		configuration_value = types.StringValue(*obj.Configuration)
	}
	o.Configuration = configuration_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebui, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var commit_object *AdminRoleResourceRoleVsysWebuiCommitObject
	if obj.Commit != nil {
		commit_object = new(AdminRoleResourceRoleVsysWebuiCommitObject)

		diags.Append(commit_object.CopyFromPango(ctx, obj.Commit, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var device_object *AdminRoleResourceRoleVsysWebuiDeviceObject
	if obj.Device != nil {
		device_object = new(AdminRoleResourceRoleVsysWebuiDeviceObject)

		diags.Append(device_object.CopyFromPango(ctx, obj.Device, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var monitor_object *AdminRoleResourceRoleVsysWebuiMonitorObject
	if obj.Monitor != nil {
		monitor_object = new(AdminRoleResourceRoleVsysWebuiMonitorObject)

		diags.Append(monitor_object.CopyFromPango(ctx, obj.Monitor, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var network_object *AdminRoleResourceRoleVsysWebuiNetworkObject
	if obj.Network != nil {
		network_object = new(AdminRoleResourceRoleVsysWebuiNetworkObject)

		diags.Append(network_object.CopyFromPango(ctx, obj.Network, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var objects_object *AdminRoleResourceRoleVsysWebuiObjectsObject
	if obj.Objects != nil {
		objects_object = new(AdminRoleResourceRoleVsysWebuiObjectsObject)

		diags.Append(objects_object.CopyFromPango(ctx, obj.Objects, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var operations_object *AdminRoleResourceRoleVsysWebuiOperationsObject
	if obj.Operations != nil {
		operations_object = new(AdminRoleResourceRoleVsysWebuiOperationsObject)

		diags.Append(operations_object.CopyFromPango(ctx, obj.Operations, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var policies_object *AdminRoleResourceRoleVsysWebuiPoliciesObject
	if obj.Policies != nil {
		policies_object = new(AdminRoleResourceRoleVsysWebuiPoliciesObject)

		diags.Append(policies_object.CopyFromPango(ctx, obj.Policies, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var privacy_object *AdminRoleResourceRoleVsysWebuiPrivacyObject
	if obj.Privacy != nil {
		privacy_object = new(AdminRoleResourceRoleVsysWebuiPrivacyObject)

		diags.Append(privacy_object.CopyFromPango(ctx, obj.Privacy, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var save_object *AdminRoleResourceRoleVsysWebuiSaveObject
	if obj.Save != nil {
		save_object = new(AdminRoleResourceRoleVsysWebuiSaveObject)

		diags.Append(save_object.CopyFromPango(ctx, obj.Save, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var acc_value types.String
	if obj.Acc != nil {
		acc_value = types.StringValue(*obj.Acc)
	}
	var dashboard_value types.String
	if obj.Dashboard != nil {
		dashboard_value = types.StringValue(*obj.Dashboard)
	}
	var tasks_value types.String
	if obj.Tasks != nil {
		tasks_value = types.StringValue(*obj.Tasks)
	}
	var validate_value types.String
	if obj.Validate != nil {
		validate_value = types.StringValue(*obj.Validate)
	}
	o.Acc = acc_value
	o.Commit = commit_object
	o.Dashboard = dashboard_value
	o.Device = device_object
	o.Monitor = monitor_object
	o.Network = network_object
	o.Objects = objects_object
	o.Operations = operations_object
	o.Policies = policies_object
	o.Privacy = privacy_object
	o.Save = save_object
	o.Tasks = tasks_value
	o.Validate = validate_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiCommitObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiCommit, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var commitForOtherAdmins_value types.String
	if obj.CommitForOtherAdmins != nil {
		commitForOtherAdmins_value = types.StringValue(*obj.CommitForOtherAdmins)
	}
	var virtualSystems_value types.String
	if obj.VirtualSystems != nil {
		virtualSystems_value = types.StringValue(*obj.VirtualSystems)
	}
	o.CommitForOtherAdmins = commitForOtherAdmins_value
	o.VirtualSystems = virtualSystems_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiDeviceObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiDevice, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var certificateManagement_object *AdminRoleResourceRoleVsysWebuiDeviceCertificateManagementObject
	if obj.CertificateManagement != nil {
		certificateManagement_object = new(AdminRoleResourceRoleVsysWebuiDeviceCertificateManagementObject)

		diags.Append(certificateManagement_object.CopyFromPango(ctx, obj.CertificateManagement, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var localUserDatabase_object *AdminRoleResourceRoleVsysWebuiDeviceLocalUserDatabaseObject
	if obj.LocalUserDatabase != nil {
		localUserDatabase_object = new(AdminRoleResourceRoleVsysWebuiDeviceLocalUserDatabaseObject)

		diags.Append(localUserDatabase_object.CopyFromPango(ctx, obj.LocalUserDatabase, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var logSettings_object *AdminRoleResourceRoleVsysWebuiDeviceLogSettingsObject
	if obj.LogSettings != nil {
		logSettings_object = new(AdminRoleResourceRoleVsysWebuiDeviceLogSettingsObject)

		diags.Append(logSettings_object.CopyFromPango(ctx, obj.LogSettings, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var policyRecommendations_object *AdminRoleResourceRoleVsysWebuiDevicePolicyRecommendationsObject
	if obj.PolicyRecommendations != nil {
		policyRecommendations_object = new(AdminRoleResourceRoleVsysWebuiDevicePolicyRecommendationsObject)

		diags.Append(policyRecommendations_object.CopyFromPango(ctx, obj.PolicyRecommendations, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var serverProfile_object *AdminRoleResourceRoleVsysWebuiDeviceServerProfileObject
	if obj.ServerProfile != nil {
		serverProfile_object = new(AdminRoleResourceRoleVsysWebuiDeviceServerProfileObject)

		diags.Append(serverProfile_object.CopyFromPango(ctx, obj.ServerProfile, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var setup_object *AdminRoleResourceRoleVsysWebuiDeviceSetupObject
	if obj.Setup != nil {
		setup_object = new(AdminRoleResourceRoleVsysWebuiDeviceSetupObject)

		diags.Append(setup_object.CopyFromPango(ctx, obj.Setup, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var administrators_value types.String
	if obj.Administrators != nil {
		administrators_value = types.StringValue(*obj.Administrators)
	}
	var authenticationProfile_value types.String
	if obj.AuthenticationProfile != nil {
		authenticationProfile_value = types.StringValue(*obj.AuthenticationProfile)
	}
	var authenticationSequence_value types.String
	if obj.AuthenticationSequence != nil {
		authenticationSequence_value = types.StringValue(*obj.AuthenticationSequence)
	}
	var blockPages_value types.String
	if obj.BlockPages != nil {
		blockPages_value = types.StringValue(*obj.BlockPages)
	}
	var dataRedistribution_value types.String
	if obj.DataRedistribution != nil {
		dataRedistribution_value = types.StringValue(*obj.DataRedistribution)
	}
	var deviceQuarantine_value types.String
	if obj.DeviceQuarantine != nil {
		deviceQuarantine_value = types.StringValue(*obj.DeviceQuarantine)
	}
	var troubleshooting_value types.String
	if obj.Troubleshooting != nil {
		troubleshooting_value = types.StringValue(*obj.Troubleshooting)
	}
	var userIdentification_value types.String
	if obj.UserIdentification != nil {
		userIdentification_value = types.StringValue(*obj.UserIdentification)
	}
	var vmInfoSource_value types.String
	if obj.VmInfoSource != nil {
		vmInfoSource_value = types.StringValue(*obj.VmInfoSource)
	}
	var dhcpSyslogServer_value types.String
	if obj.DhcpSyslogServer != nil {
		dhcpSyslogServer_value = types.StringValue(*obj.DhcpSyslogServer)
	}
	o.Administrators = administrators_value
	o.AuthenticationProfile = authenticationProfile_value
	o.AuthenticationSequence = authenticationSequence_value
	o.BlockPages = blockPages_value
	o.CertificateManagement = certificateManagement_object
	o.DataRedistribution = dataRedistribution_value
	o.DeviceQuarantine = deviceQuarantine_value
	o.LocalUserDatabase = localUserDatabase_object
	o.LogSettings = logSettings_object
	o.PolicyRecommendations = policyRecommendations_object
	o.ServerProfile = serverProfile_object
	o.Setup = setup_object
	o.Troubleshooting = troubleshooting_value
	o.UserIdentification = userIdentification_value
	o.VmInfoSource = vmInfoSource_value
	o.DhcpSyslogServer = dhcpSyslogServer_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiDeviceCertificateManagementObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiDeviceCertificateManagement, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var certificateProfile_value types.String
	if obj.CertificateProfile != nil {
		certificateProfile_value = types.StringValue(*obj.CertificateProfile)
	}
	var certificates_value types.String
	if obj.Certificates != nil {
		certificates_value = types.StringValue(*obj.Certificates)
	}
	var ocspResponder_value types.String
	if obj.OcspResponder != nil {
		ocspResponder_value = types.StringValue(*obj.OcspResponder)
	}
	var scep_value types.String
	if obj.Scep != nil {
		scep_value = types.StringValue(*obj.Scep)
	}
	var sshServiceProfile_value types.String
	if obj.SshServiceProfile != nil {
		sshServiceProfile_value = types.StringValue(*obj.SshServiceProfile)
	}
	var sslDecryptionExclusion_value types.String
	if obj.SslDecryptionExclusion != nil {
		sslDecryptionExclusion_value = types.StringValue(*obj.SslDecryptionExclusion)
	}
	var sslTlsServiceProfile_value types.String
	if obj.SslTlsServiceProfile != nil {
		sslTlsServiceProfile_value = types.StringValue(*obj.SslTlsServiceProfile)
	}
	o.CertificateProfile = certificateProfile_value
	o.Certificates = certificates_value
	o.OcspResponder = ocspResponder_value
	o.Scep = scep_value
	o.SshServiceProfile = sshServiceProfile_value
	o.SslDecryptionExclusion = sslDecryptionExclusion_value
	o.SslTlsServiceProfile = sslTlsServiceProfile_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiDeviceLocalUserDatabaseObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiDeviceLocalUserDatabase, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var userGroups_value types.String
	if obj.UserGroups != nil {
		userGroups_value = types.StringValue(*obj.UserGroups)
	}
	var users_value types.String
	if obj.Users != nil {
		users_value = types.StringValue(*obj.Users)
	}
	o.UserGroups = userGroups_value
	o.Users = users_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiDeviceLogSettingsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiDeviceLogSettings, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var config_value types.String
	if obj.Config != nil {
		config_value = types.StringValue(*obj.Config)
	}
	var correlation_value types.String
	if obj.Correlation != nil {
		correlation_value = types.StringValue(*obj.Correlation)
	}
	var globalprotect_value types.String
	if obj.Globalprotect != nil {
		globalprotect_value = types.StringValue(*obj.Globalprotect)
	}
	var hipmatch_value types.String
	if obj.Hipmatch != nil {
		hipmatch_value = types.StringValue(*obj.Hipmatch)
	}
	var iptag_value types.String
	if obj.Iptag != nil {
		iptag_value = types.StringValue(*obj.Iptag)
	}
	var system_value types.String
	if obj.System != nil {
		system_value = types.StringValue(*obj.System)
	}
	var userId_value types.String
	if obj.UserId != nil {
		userId_value = types.StringValue(*obj.UserId)
	}
	o.Config = config_value
	o.Correlation = correlation_value
	o.Globalprotect = globalprotect_value
	o.Hipmatch = hipmatch_value
	o.Iptag = iptag_value
	o.System = system_value
	o.UserId = userId_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiDevicePolicyRecommendationsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiDevicePolicyRecommendations, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var iot_value types.String
	if obj.Iot != nil {
		iot_value = types.StringValue(*obj.Iot)
	}
	var saas_value types.String
	if obj.Saas != nil {
		saas_value = types.StringValue(*obj.Saas)
	}
	o.Iot = iot_value
	o.Saas = saas_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiDeviceServerProfileObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiDeviceServerProfile, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var dns_value types.String
	if obj.Dns != nil {
		dns_value = types.StringValue(*obj.Dns)
	}
	var email_value types.String
	if obj.Email != nil {
		email_value = types.StringValue(*obj.Email)
	}
	var http_value types.String
	if obj.Http != nil {
		http_value = types.StringValue(*obj.Http)
	}
	var kerberos_value types.String
	if obj.Kerberos != nil {
		kerberos_value = types.StringValue(*obj.Kerberos)
	}
	var ldap_value types.String
	if obj.Ldap != nil {
		ldap_value = types.StringValue(*obj.Ldap)
	}
	var mfa_value types.String
	if obj.Mfa != nil {
		mfa_value = types.StringValue(*obj.Mfa)
	}
	var netflow_value types.String
	if obj.Netflow != nil {
		netflow_value = types.StringValue(*obj.Netflow)
	}
	var radius_value types.String
	if obj.Radius != nil {
		radius_value = types.StringValue(*obj.Radius)
	}
	var samlIdp_value types.String
	if obj.SamlIdp != nil {
		samlIdp_value = types.StringValue(*obj.SamlIdp)
	}
	var scp_value types.String
	if obj.Scp != nil {
		scp_value = types.StringValue(*obj.Scp)
	}
	var snmpTrap_value types.String
	if obj.SnmpTrap != nil {
		snmpTrap_value = types.StringValue(*obj.SnmpTrap)
	}
	var syslog_value types.String
	if obj.Syslog != nil {
		syslog_value = types.StringValue(*obj.Syslog)
	}
	var tacplus_value types.String
	if obj.Tacplus != nil {
		tacplus_value = types.StringValue(*obj.Tacplus)
	}
	o.Dns = dns_value
	o.Email = email_value
	o.Http = http_value
	o.Kerberos = kerberos_value
	o.Ldap = ldap_value
	o.Mfa = mfa_value
	o.Netflow = netflow_value
	o.Radius = radius_value
	o.SamlIdp = samlIdp_value
	o.Scp = scp_value
	o.SnmpTrap = snmpTrap_value
	o.Syslog = syslog_value
	o.Tacplus = tacplus_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiDeviceSetupObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiDeviceSetup, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var contentId_value types.String
	if obj.ContentId != nil {
		contentId_value = types.StringValue(*obj.ContentId)
	}
	var hsm_value types.String
	if obj.Hsm != nil {
		hsm_value = types.StringValue(*obj.Hsm)
	}
	var interfaces_value types.String
	if obj.Interfaces != nil {
		interfaces_value = types.StringValue(*obj.Interfaces)
	}
	var management_value types.String
	if obj.Management != nil {
		management_value = types.StringValue(*obj.Management)
	}
	var operations_value types.String
	if obj.Operations != nil {
		operations_value = types.StringValue(*obj.Operations)
	}
	var services_value types.String
	if obj.Services != nil {
		services_value = types.StringValue(*obj.Services)
	}
	var session_value types.String
	if obj.Session != nil {
		session_value = types.StringValue(*obj.Session)
	}
	var telemetry_value types.String
	if obj.Telemetry != nil {
		telemetry_value = types.StringValue(*obj.Telemetry)
	}
	var wildfire_value types.String
	if obj.Wildfire != nil {
		wildfire_value = types.StringValue(*obj.Wildfire)
	}
	o.ContentId = contentId_value
	o.Hsm = hsm_value
	o.Interfaces = interfaces_value
	o.Management = management_value
	o.Operations = operations_value
	o.Services = services_value
	o.Session = session_value
	o.Telemetry = telemetry_value
	o.Wildfire = wildfire_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiMonitorObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiMonitor, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var automatedCorrelationEngine_object *AdminRoleResourceRoleVsysWebuiMonitorAutomatedCorrelationEngineObject
	if obj.AutomatedCorrelationEngine != nil {
		automatedCorrelationEngine_object = new(AdminRoleResourceRoleVsysWebuiMonitorAutomatedCorrelationEngineObject)

		diags.Append(automatedCorrelationEngine_object.CopyFromPango(ctx, obj.AutomatedCorrelationEngine, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var customReports_object *AdminRoleResourceRoleVsysWebuiMonitorCustomReportsObject
	if obj.CustomReports != nil {
		customReports_object = new(AdminRoleResourceRoleVsysWebuiMonitorCustomReportsObject)

		diags.Append(customReports_object.CopyFromPango(ctx, obj.CustomReports, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var logs_object *AdminRoleResourceRoleVsysWebuiMonitorLogsObject
	if obj.Logs != nil {
		logs_object = new(AdminRoleResourceRoleVsysWebuiMonitorLogsObject)

		diags.Append(logs_object.CopyFromPango(ctx, obj.Logs, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var pdfReports_object *AdminRoleResourceRoleVsysWebuiMonitorPdfReportsObject
	if obj.PdfReports != nil {
		pdfReports_object = new(AdminRoleResourceRoleVsysWebuiMonitorPdfReportsObject)

		diags.Append(pdfReports_object.CopyFromPango(ctx, obj.PdfReports, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var appScope_value types.String
	if obj.AppScope != nil {
		appScope_value = types.StringValue(*obj.AppScope)
	}
	var blockIpList_value types.String
	if obj.BlockIpList != nil {
		blockIpList_value = types.StringValue(*obj.BlockIpList)
	}
	var externalLogs_value types.String
	if obj.ExternalLogs != nil {
		externalLogs_value = types.StringValue(*obj.ExternalLogs)
	}
	var sessionBrowser_value types.String
	if obj.SessionBrowser != nil {
		sessionBrowser_value = types.StringValue(*obj.SessionBrowser)
	}
	var viewCustomReports_value types.String
	if obj.ViewCustomReports != nil {
		viewCustomReports_value = types.StringValue(*obj.ViewCustomReports)
	}
	o.AppScope = appScope_value
	o.AutomatedCorrelationEngine = automatedCorrelationEngine_object
	o.BlockIpList = blockIpList_value
	o.CustomReports = customReports_object
	o.ExternalLogs = externalLogs_value
	o.Logs = logs_object
	o.PdfReports = pdfReports_object
	o.SessionBrowser = sessionBrowser_value
	o.ViewCustomReports = viewCustomReports_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiMonitorAutomatedCorrelationEngineObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiMonitorAutomatedCorrelationEngine, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var correlatedEvents_value types.String
	if obj.CorrelatedEvents != nil {
		correlatedEvents_value = types.StringValue(*obj.CorrelatedEvents)
	}
	var correlationObjects_value types.String
	if obj.CorrelationObjects != nil {
		correlationObjects_value = types.StringValue(*obj.CorrelationObjects)
	}
	o.CorrelatedEvents = correlatedEvents_value
	o.CorrelationObjects = correlationObjects_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiMonitorCustomReportsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiMonitorCustomReports, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var applicationStatistics_value types.String
	if obj.ApplicationStatistics != nil {
		applicationStatistics_value = types.StringValue(*obj.ApplicationStatistics)
	}
	var auth_value types.String
	if obj.Auth != nil {
		auth_value = types.StringValue(*obj.Auth)
	}
	var dataFilteringLog_value types.String
	if obj.DataFilteringLog != nil {
		dataFilteringLog_value = types.StringValue(*obj.DataFilteringLog)
	}
	var decryptionLog_value types.String
	if obj.DecryptionLog != nil {
		decryptionLog_value = types.StringValue(*obj.DecryptionLog)
	}
	var decryptionSummary_value types.String
	if obj.DecryptionSummary != nil {
		decryptionSummary_value = types.StringValue(*obj.DecryptionSummary)
	}
	var globalprotect_value types.String
	if obj.Globalprotect != nil {
		globalprotect_value = types.StringValue(*obj.Globalprotect)
	}
	var gtpLog_value types.String
	if obj.GtpLog != nil {
		gtpLog_value = types.StringValue(*obj.GtpLog)
	}
	var gtpSummary_value types.String
	if obj.GtpSummary != nil {
		gtpSummary_value = types.StringValue(*obj.GtpSummary)
	}
	var hipmatch_value types.String
	if obj.Hipmatch != nil {
		hipmatch_value = types.StringValue(*obj.Hipmatch)
	}
	var iptag_value types.String
	if obj.Iptag != nil {
		iptag_value = types.StringValue(*obj.Iptag)
	}
	var sctpLog_value types.String
	if obj.SctpLog != nil {
		sctpLog_value = types.StringValue(*obj.SctpLog)
	}
	var sctpSummary_value types.String
	if obj.SctpSummary != nil {
		sctpSummary_value = types.StringValue(*obj.SctpSummary)
	}
	var threatLog_value types.String
	if obj.ThreatLog != nil {
		threatLog_value = types.StringValue(*obj.ThreatLog)
	}
	var threatSummary_value types.String
	if obj.ThreatSummary != nil {
		threatSummary_value = types.StringValue(*obj.ThreatSummary)
	}
	var trafficLog_value types.String
	if obj.TrafficLog != nil {
		trafficLog_value = types.StringValue(*obj.TrafficLog)
	}
	var trafficSummary_value types.String
	if obj.TrafficSummary != nil {
		trafficSummary_value = types.StringValue(*obj.TrafficSummary)
	}
	var tunnelLog_value types.String
	if obj.TunnelLog != nil {
		tunnelLog_value = types.StringValue(*obj.TunnelLog)
	}
	var tunnelSummary_value types.String
	if obj.TunnelSummary != nil {
		tunnelSummary_value = types.StringValue(*obj.TunnelSummary)
	}
	var urlLog_value types.String
	if obj.UrlLog != nil {
		urlLog_value = types.StringValue(*obj.UrlLog)
	}
	var urlSummary_value types.String
	if obj.UrlSummary != nil {
		urlSummary_value = types.StringValue(*obj.UrlSummary)
	}
	var userid_value types.String
	if obj.Userid != nil {
		userid_value = types.StringValue(*obj.Userid)
	}
	var wildfireLog_value types.String
	if obj.WildfireLog != nil {
		wildfireLog_value = types.StringValue(*obj.WildfireLog)
	}
	o.ApplicationStatistics = applicationStatistics_value
	o.Auth = auth_value
	o.DataFilteringLog = dataFilteringLog_value
	o.DecryptionLog = decryptionLog_value
	o.DecryptionSummary = decryptionSummary_value
	o.Globalprotect = globalprotect_value
	o.GtpLog = gtpLog_value
	o.GtpSummary = gtpSummary_value
	o.Hipmatch = hipmatch_value
	o.Iptag = iptag_value
	o.SctpLog = sctpLog_value
	o.SctpSummary = sctpSummary_value
	o.ThreatLog = threatLog_value
	o.ThreatSummary = threatSummary_value
	o.TrafficLog = trafficLog_value
	o.TrafficSummary = trafficSummary_value
	o.TunnelLog = tunnelLog_value
	o.TunnelSummary = tunnelSummary_value
	o.UrlLog = urlLog_value
	o.UrlSummary = urlSummary_value
	o.Userid = userid_value
	o.WildfireLog = wildfireLog_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiMonitorLogsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiMonitorLogs, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var authentication_value types.String
	if obj.Authentication != nil {
		authentication_value = types.StringValue(*obj.Authentication)
	}
	var dataFiltering_value types.String
	if obj.DataFiltering != nil {
		dataFiltering_value = types.StringValue(*obj.DataFiltering)
	}
	var decryption_value types.String
	if obj.Decryption != nil {
		decryption_value = types.StringValue(*obj.Decryption)
	}
	var globalprotect_value types.String
	if obj.Globalprotect != nil {
		globalprotect_value = types.StringValue(*obj.Globalprotect)
	}
	var gtp_value types.String
	if obj.Gtp != nil {
		gtp_value = types.StringValue(*obj.Gtp)
	}
	var hipmatch_value types.String
	if obj.Hipmatch != nil {
		hipmatch_value = types.StringValue(*obj.Hipmatch)
	}
	var iptag_value types.String
	if obj.Iptag != nil {
		iptag_value = types.StringValue(*obj.Iptag)
	}
	var sctp_value types.String
	if obj.Sctp != nil {
		sctp_value = types.StringValue(*obj.Sctp)
	}
	var threat_value types.String
	if obj.Threat != nil {
		threat_value = types.StringValue(*obj.Threat)
	}
	var traffic_value types.String
	if obj.Traffic != nil {
		traffic_value = types.StringValue(*obj.Traffic)
	}
	var tunnel_value types.String
	if obj.Tunnel != nil {
		tunnel_value = types.StringValue(*obj.Tunnel)
	}
	var url_value types.String
	if obj.Url != nil {
		url_value = types.StringValue(*obj.Url)
	}
	var userid_value types.String
	if obj.Userid != nil {
		userid_value = types.StringValue(*obj.Userid)
	}
	var wildfire_value types.String
	if obj.Wildfire != nil {
		wildfire_value = types.StringValue(*obj.Wildfire)
	}
	o.Authentication = authentication_value
	o.DataFiltering = dataFiltering_value
	o.Decryption = decryption_value
	o.Globalprotect = globalprotect_value
	o.Gtp = gtp_value
	o.Hipmatch = hipmatch_value
	o.Iptag = iptag_value
	o.Sctp = sctp_value
	o.Threat = threat_value
	o.Traffic = traffic_value
	o.Tunnel = tunnel_value
	o.Url = url_value
	o.Userid = userid_value
	o.Wildfire = wildfire_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiMonitorPdfReportsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiMonitorPdfReports, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var emailScheduler_value types.String
	if obj.EmailScheduler != nil {
		emailScheduler_value = types.StringValue(*obj.EmailScheduler)
	}
	var managePdfSummary_value types.String
	if obj.ManagePdfSummary != nil {
		managePdfSummary_value = types.StringValue(*obj.ManagePdfSummary)
	}
	var pdfSummaryReports_value types.String
	if obj.PdfSummaryReports != nil {
		pdfSummaryReports_value = types.StringValue(*obj.PdfSummaryReports)
	}
	var reportGroups_value types.String
	if obj.ReportGroups != nil {
		reportGroups_value = types.StringValue(*obj.ReportGroups)
	}
	var saasApplicationUsageReport_value types.String
	if obj.SaasApplicationUsageReport != nil {
		saasApplicationUsageReport_value = types.StringValue(*obj.SaasApplicationUsageReport)
	}
	var userActivityReport_value types.String
	if obj.UserActivityReport != nil {
		userActivityReport_value = types.StringValue(*obj.UserActivityReport)
	}
	o.EmailScheduler = emailScheduler_value
	o.ManagePdfSummary = managePdfSummary_value
	o.PdfSummaryReports = pdfSummaryReports_value
	o.ReportGroups = reportGroups_value
	o.SaasApplicationUsageReport = saasApplicationUsageReport_value
	o.UserActivityReport = userActivityReport_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiNetworkObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiNetwork, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var globalProtect_object *AdminRoleResourceRoleVsysWebuiNetworkGlobalProtectObject
	if obj.GlobalProtect != nil {
		globalProtect_object = new(AdminRoleResourceRoleVsysWebuiNetworkGlobalProtectObject)

		diags.Append(globalProtect_object.CopyFromPango(ctx, obj.GlobalProtect, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var sdwanInterfaceProfile_value types.String
	if obj.SdwanInterfaceProfile != nil {
		sdwanInterfaceProfile_value = types.StringValue(*obj.SdwanInterfaceProfile)
	}
	var zones_value types.String
	if obj.Zones != nil {
		zones_value = types.StringValue(*obj.Zones)
	}
	o.GlobalProtect = globalProtect_object
	o.SdwanInterfaceProfile = sdwanInterfaceProfile_value
	o.Zones = zones_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiNetworkGlobalProtectObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiNetworkGlobalProtect, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var clientlessAppGroups_value types.String
	if obj.ClientlessAppGroups != nil {
		clientlessAppGroups_value = types.StringValue(*obj.ClientlessAppGroups)
	}
	var clientlessApps_value types.String
	if obj.ClientlessApps != nil {
		clientlessApps_value = types.StringValue(*obj.ClientlessApps)
	}
	var gateways_value types.String
	if obj.Gateways != nil {
		gateways_value = types.StringValue(*obj.Gateways)
	}
	var mdm_value types.String
	if obj.Mdm != nil {
		mdm_value = types.StringValue(*obj.Mdm)
	}
	var portals_value types.String
	if obj.Portals != nil {
		portals_value = types.StringValue(*obj.Portals)
	}
	o.ClientlessAppGroups = clientlessAppGroups_value
	o.ClientlessApps = clientlessApps_value
	o.Gateways = gateways_value
	o.Mdm = mdm_value
	o.Portals = portals_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiObjectsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var customObjects_object *AdminRoleResourceRoleVsysWebuiObjectsCustomObjectsObject
	if obj.CustomObjects != nil {
		customObjects_object = new(AdminRoleResourceRoleVsysWebuiObjectsCustomObjectsObject)

		diags.Append(customObjects_object.CopyFromPango(ctx, obj.CustomObjects, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var decryption_object *AdminRoleResourceRoleVsysWebuiObjectsDecryptionObject
	if obj.Decryption != nil {
		decryption_object = new(AdminRoleResourceRoleVsysWebuiObjectsDecryptionObject)

		diags.Append(decryption_object.CopyFromPango(ctx, obj.Decryption, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var globalProtect_object *AdminRoleResourceRoleVsysWebuiObjectsGlobalProtectObject
	if obj.GlobalProtect != nil {
		globalProtect_object = new(AdminRoleResourceRoleVsysWebuiObjectsGlobalProtectObject)

		diags.Append(globalProtect_object.CopyFromPango(ctx, obj.GlobalProtect, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sdwan_object *AdminRoleResourceRoleVsysWebuiObjectsSdwanObject
	if obj.Sdwan != nil {
		sdwan_object = new(AdminRoleResourceRoleVsysWebuiObjectsSdwanObject)

		diags.Append(sdwan_object.CopyFromPango(ctx, obj.Sdwan, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var securityProfiles_object *AdminRoleResourceRoleVsysWebuiObjectsSecurityProfilesObject
	if obj.SecurityProfiles != nil {
		securityProfiles_object = new(AdminRoleResourceRoleVsysWebuiObjectsSecurityProfilesObject)

		diags.Append(securityProfiles_object.CopyFromPango(ctx, obj.SecurityProfiles, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var addressGroups_value types.String
	if obj.AddressGroups != nil {
		addressGroups_value = types.StringValue(*obj.AddressGroups)
	}
	var addresses_value types.String
	if obj.Addresses != nil {
		addresses_value = types.StringValue(*obj.Addresses)
	}
	var applicationFilters_value types.String
	if obj.ApplicationFilters != nil {
		applicationFilters_value = types.StringValue(*obj.ApplicationFilters)
	}
	var applicationGroups_value types.String
	if obj.ApplicationGroups != nil {
		applicationGroups_value = types.StringValue(*obj.ApplicationGroups)
	}
	var applications_value types.String
	if obj.Applications != nil {
		applications_value = types.StringValue(*obj.Applications)
	}
	var authentication_value types.String
	if obj.Authentication != nil {
		authentication_value = types.StringValue(*obj.Authentication)
	}
	var devices_value types.String
	if obj.Devices != nil {
		devices_value = types.StringValue(*obj.Devices)
	}
	var dynamicBlockLists_value types.String
	if obj.DynamicBlockLists != nil {
		dynamicBlockLists_value = types.StringValue(*obj.DynamicBlockLists)
	}
	var dynamicUserGroups_value types.String
	if obj.DynamicUserGroups != nil {
		dynamicUserGroups_value = types.StringValue(*obj.DynamicUserGroups)
	}
	var logForwarding_value types.String
	if obj.LogForwarding != nil {
		logForwarding_value = types.StringValue(*obj.LogForwarding)
	}
	var packetBrokerProfile_value types.String
	if obj.PacketBrokerProfile != nil {
		packetBrokerProfile_value = types.StringValue(*obj.PacketBrokerProfile)
	}
	var regions_value types.String
	if obj.Regions != nil {
		regions_value = types.StringValue(*obj.Regions)
	}
	var schedules_value types.String
	if obj.Schedules != nil {
		schedules_value = types.StringValue(*obj.Schedules)
	}
	var securityProfileGroups_value types.String
	if obj.SecurityProfileGroups != nil {
		securityProfileGroups_value = types.StringValue(*obj.SecurityProfileGroups)
	}
	var serviceGroups_value types.String
	if obj.ServiceGroups != nil {
		serviceGroups_value = types.StringValue(*obj.ServiceGroups)
	}
	var services_value types.String
	if obj.Services != nil {
		services_value = types.StringValue(*obj.Services)
	}
	var tags_value types.String
	if obj.Tags != nil {
		tags_value = types.StringValue(*obj.Tags)
	}
	o.AddressGroups = addressGroups_value
	o.Addresses = addresses_value
	o.ApplicationFilters = applicationFilters_value
	o.ApplicationGroups = applicationGroups_value
	o.Applications = applications_value
	o.Authentication = authentication_value
	o.CustomObjects = customObjects_object
	o.Decryption = decryption_object
	o.Devices = devices_value
	o.DynamicBlockLists = dynamicBlockLists_value
	o.DynamicUserGroups = dynamicUserGroups_value
	o.GlobalProtect = globalProtect_object
	o.LogForwarding = logForwarding_value
	o.PacketBrokerProfile = packetBrokerProfile_value
	o.Regions = regions_value
	o.Schedules = schedules_value
	o.Sdwan = sdwan_object
	o.SecurityProfileGroups = securityProfileGroups_value
	o.SecurityProfiles = securityProfiles_object
	o.ServiceGroups = serviceGroups_value
	o.Services = services_value
	o.Tags = tags_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiObjectsCustomObjectsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiObjectsCustomObjects, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var dataPatterns_value types.String
	if obj.DataPatterns != nil {
		dataPatterns_value = types.StringValue(*obj.DataPatterns)
	}
	var spyware_value types.String
	if obj.Spyware != nil {
		spyware_value = types.StringValue(*obj.Spyware)
	}
	var urlCategory_value types.String
	if obj.UrlCategory != nil {
		urlCategory_value = types.StringValue(*obj.UrlCategory)
	}
	var vulnerability_value types.String
	if obj.Vulnerability != nil {
		vulnerability_value = types.StringValue(*obj.Vulnerability)
	}
	o.DataPatterns = dataPatterns_value
	o.Spyware = spyware_value
	o.UrlCategory = urlCategory_value
	o.Vulnerability = vulnerability_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiObjectsDecryptionObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiObjectsDecryption, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var decryptionProfile_value types.String
	if obj.DecryptionProfile != nil {
		decryptionProfile_value = types.StringValue(*obj.DecryptionProfile)
	}
	o.DecryptionProfile = decryptionProfile_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiObjectsGlobalProtectObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiObjectsGlobalProtect, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var hipObjects_value types.String
	if obj.HipObjects != nil {
		hipObjects_value = types.StringValue(*obj.HipObjects)
	}
	var hipProfiles_value types.String
	if obj.HipProfiles != nil {
		hipProfiles_value = types.StringValue(*obj.HipProfiles)
	}
	o.HipObjects = hipObjects_value
	o.HipProfiles = hipProfiles_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiObjectsSdwanObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiObjectsSdwan, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var sdwanDistProfile_value types.String
	if obj.SdwanDistProfile != nil {
		sdwanDistProfile_value = types.StringValue(*obj.SdwanDistProfile)
	}
	var sdwanErrorCorrectionProfile_value types.String
	if obj.SdwanErrorCorrectionProfile != nil {
		sdwanErrorCorrectionProfile_value = types.StringValue(*obj.SdwanErrorCorrectionProfile)
	}
	var sdwanProfile_value types.String
	if obj.SdwanProfile != nil {
		sdwanProfile_value = types.StringValue(*obj.SdwanProfile)
	}
	var sdwanSaasQualityProfile_value types.String
	if obj.SdwanSaasQualityProfile != nil {
		sdwanSaasQualityProfile_value = types.StringValue(*obj.SdwanSaasQualityProfile)
	}
	o.SdwanDistProfile = sdwanDistProfile_value
	o.SdwanErrorCorrectionProfile = sdwanErrorCorrectionProfile_value
	o.SdwanProfile = sdwanProfile_value
	o.SdwanSaasQualityProfile = sdwanSaasQualityProfile_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiObjectsSecurityProfilesObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiObjectsSecurityProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var antiSpyware_value types.String
	if obj.AntiSpyware != nil {
		antiSpyware_value = types.StringValue(*obj.AntiSpyware)
	}
	var antivirus_value types.String
	if obj.Antivirus != nil {
		antivirus_value = types.StringValue(*obj.Antivirus)
	}
	var dataFiltering_value types.String
	if obj.DataFiltering != nil {
		dataFiltering_value = types.StringValue(*obj.DataFiltering)
	}
	var dosProtection_value types.String
	if obj.DosProtection != nil {
		dosProtection_value = types.StringValue(*obj.DosProtection)
	}
	var fileBlocking_value types.String
	if obj.FileBlocking != nil {
		fileBlocking_value = types.StringValue(*obj.FileBlocking)
	}
	var gtpProtection_value types.String
	if obj.GtpProtection != nil {
		gtpProtection_value = types.StringValue(*obj.GtpProtection)
	}
	var sctpProtection_value types.String
	if obj.SctpProtection != nil {
		sctpProtection_value = types.StringValue(*obj.SctpProtection)
	}
	var urlFiltering_value types.String
	if obj.UrlFiltering != nil {
		urlFiltering_value = types.StringValue(*obj.UrlFiltering)
	}
	var vulnerabilityProtection_value types.String
	if obj.VulnerabilityProtection != nil {
		vulnerabilityProtection_value = types.StringValue(*obj.VulnerabilityProtection)
	}
	var wildfireAnalysis_value types.String
	if obj.WildfireAnalysis != nil {
		wildfireAnalysis_value = types.StringValue(*obj.WildfireAnalysis)
	}
	o.AntiSpyware = antiSpyware_value
	o.Antivirus = antivirus_value
	o.DataFiltering = dataFiltering_value
	o.DosProtection = dosProtection_value
	o.FileBlocking = fileBlocking_value
	o.GtpProtection = gtpProtection_value
	o.SctpProtection = sctpProtection_value
	o.UrlFiltering = urlFiltering_value
	o.VulnerabilityProtection = vulnerabilityProtection_value
	o.WildfireAnalysis = wildfireAnalysis_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiOperationsObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiOperations, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var downloadCoreFiles_value types.String
	if obj.DownloadCoreFiles != nil {
		downloadCoreFiles_value = types.StringValue(*obj.DownloadCoreFiles)
	}
	var downloadPcapFiles_value types.String
	if obj.DownloadPcapFiles != nil {
		downloadPcapFiles_value = types.StringValue(*obj.DownloadPcapFiles)
	}
	var generateStatsDumpFile_value types.String
	if obj.GenerateStatsDumpFile != nil {
		generateStatsDumpFile_value = types.StringValue(*obj.GenerateStatsDumpFile)
	}
	var generateTechSupportFile_value types.String
	if obj.GenerateTechSupportFile != nil {
		generateTechSupportFile_value = types.StringValue(*obj.GenerateTechSupportFile)
	}
	var reboot_value types.String
	if obj.Reboot != nil {
		reboot_value = types.StringValue(*obj.Reboot)
	}
	o.DownloadCoreFiles = downloadCoreFiles_value
	o.DownloadPcapFiles = downloadPcapFiles_value
	o.GenerateStatsDumpFile = generateStatsDumpFile_value
	o.GenerateTechSupportFile = generateTechSupportFile_value
	o.Reboot = reboot_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiPoliciesObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiPolicies, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var applicationOverrideRulebase_value types.String
	if obj.ApplicationOverrideRulebase != nil {
		applicationOverrideRulebase_value = types.StringValue(*obj.ApplicationOverrideRulebase)
	}
	var authenticationRulebase_value types.String
	if obj.AuthenticationRulebase != nil {
		authenticationRulebase_value = types.StringValue(*obj.AuthenticationRulebase)
	}
	var dosRulebase_value types.String
	if obj.DosRulebase != nil {
		dosRulebase_value = types.StringValue(*obj.DosRulebase)
	}
	var natRulebase_value types.String
	if obj.NatRulebase != nil {
		natRulebase_value = types.StringValue(*obj.NatRulebase)
	}
	var networkPacketBrokerRulebase_value types.String
	if obj.NetworkPacketBrokerRulebase != nil {
		networkPacketBrokerRulebase_value = types.StringValue(*obj.NetworkPacketBrokerRulebase)
	}
	var pbfRulebase_value types.String
	if obj.PbfRulebase != nil {
		pbfRulebase_value = types.StringValue(*obj.PbfRulebase)
	}
	var qosRulebase_value types.String
	if obj.QosRulebase != nil {
		qosRulebase_value = types.StringValue(*obj.QosRulebase)
	}
	var ruleHitCountReset_value types.String
	if obj.RuleHitCountReset != nil {
		ruleHitCountReset_value = types.StringValue(*obj.RuleHitCountReset)
	}
	var sdwanRulebase_value types.String
	if obj.SdwanRulebase != nil {
		sdwanRulebase_value = types.StringValue(*obj.SdwanRulebase)
	}
	var securityRulebase_value types.String
	if obj.SecurityRulebase != nil {
		securityRulebase_value = types.StringValue(*obj.SecurityRulebase)
	}
	var sslDecryptionRulebase_value types.String
	if obj.SslDecryptionRulebase != nil {
		sslDecryptionRulebase_value = types.StringValue(*obj.SslDecryptionRulebase)
	}
	var tunnelInspectRulebase_value types.String
	if obj.TunnelInspectRulebase != nil {
		tunnelInspectRulebase_value = types.StringValue(*obj.TunnelInspectRulebase)
	}
	o.ApplicationOverrideRulebase = applicationOverrideRulebase_value
	o.AuthenticationRulebase = authenticationRulebase_value
	o.DosRulebase = dosRulebase_value
	o.NatRulebase = natRulebase_value
	o.NetworkPacketBrokerRulebase = networkPacketBrokerRulebase_value
	o.PbfRulebase = pbfRulebase_value
	o.QosRulebase = qosRulebase_value
	o.RuleHitCountReset = ruleHitCountReset_value
	o.SdwanRulebase = sdwanRulebase_value
	o.SecurityRulebase = securityRulebase_value
	o.SslDecryptionRulebase = sslDecryptionRulebase_value
	o.TunnelInspectRulebase = tunnelInspectRulebase_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiPrivacyObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiPrivacy, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var showFullIpAddresses_value types.String
	if obj.ShowFullIpAddresses != nil {
		showFullIpAddresses_value = types.StringValue(*obj.ShowFullIpAddresses)
	}
	var showUserNamesInLogsAndReports_value types.String
	if obj.ShowUserNamesInLogsAndReports != nil {
		showUserNamesInLogsAndReports_value = types.StringValue(*obj.ShowUserNamesInLogsAndReports)
	}
	var viewPcapFiles_value types.String
	if obj.ViewPcapFiles != nil {
		viewPcapFiles_value = types.StringValue(*obj.ViewPcapFiles)
	}
	o.ShowFullIpAddresses = showFullIpAddresses_value
	o.ShowUserNamesInLogsAndReports = showUserNamesInLogsAndReports_value
	o.ViewPcapFiles = viewPcapFiles_value

	return diags
}

func (o *AdminRoleResourceRoleVsysWebuiSaveObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysWebuiSave, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var partialSave_value types.String
	if obj.PartialSave != nil {
		partialSave_value = types.StringValue(*obj.PartialSave)
	}
	var saveForOtherAdmins_value types.String
	if obj.SaveForOtherAdmins != nil {
		saveForOtherAdmins_value = types.StringValue(*obj.SaveForOtherAdmins)
	}
	var objectLevelChanges_value types.String
	if obj.ObjectLevelChanges != nil {
		objectLevelChanges_value = types.StringValue(*obj.ObjectLevelChanges)
	}
	o.PartialSave = partialSave_value
	o.SaveForOtherAdmins = saveForOtherAdmins_value
	o.ObjectLevelChanges = objectLevelChanges_value

	return diags
}

func (o *AdminRoleResourceRoleVsysXmlapiObject) CopyFromPango(ctx context.Context, obj *adminrole.RoleVsysXmlapi, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var commit_value types.String
	if obj.Commit != nil {
		commit_value = types.StringValue(*obj.Commit)
	}
	var config_value types.String
	if obj.Config != nil {
		config_value = types.StringValue(*obj.Config)
	}
	var export_value types.String
	if obj.Export != nil {
		export_value = types.StringValue(*obj.Export)
	}
	var import_value types.String
	if obj.Import != nil {
		import_value = types.StringValue(*obj.Import)
	}
	var iot_value types.String
	if obj.Iot != nil {
		iot_value = types.StringValue(*obj.Iot)
	}
	var log_value types.String
	if obj.Log != nil {
		log_value = types.StringValue(*obj.Log)
	}
	var op_value types.String
	if obj.Op != nil {
		op_value = types.StringValue(*obj.Op)
	}
	var report_value types.String
	if obj.Report != nil {
		report_value = types.StringValue(*obj.Report)
	}
	var userId_value types.String
	if obj.UserId != nil {
		userId_value = types.StringValue(*obj.UserId)
	}
	o.Commit = commit_value
	o.Config = config_value
	o.Export = export_value
	o.Import = import_value
	o.Iot = iot_value
	o.Log = log_value
	o.Op = op_value
	o.Report = report_value
	o.UserId = userId_value

	return diags
}

func (r *AdminRoleResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state AdminRoleResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_admin_role_resource",
		"function":      "Create",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	// Determine the location.

	var location adminrole.Location

	if state.Location.Template != nil {
		location.Template = &adminrole.TemplateLocation{

			PanoramaDevice: state.Location.Template.PanoramaDevice.ValueString(),
			Template:       state.Location.Template.Name.ValueString(),
		}
	}

	if err := location.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *adminrole.Entry

	resp.Diagnostics.Append(state.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.
	created, err := r.manager.Create(ctx, location, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	resp.Diagnostics.Append(state.CopyFromPango(ctx, created, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}
	state.Name = types.StringValue(created.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
func (o *AdminRoleResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state AdminRoleResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location adminrole.Location

	if savestate.Location.Template != nil {
		location.Template = &adminrole.TemplateLocation{

			PanoramaDevice: savestate.Location.Template.PanoramaDevice.ValueString(),
			Template:       savestate.Location.Template.Name.ValueString(),
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_admin_role_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, location, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *AdminRoleResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state AdminRoleResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location adminrole.Location

	if state.Location.Template != nil {
		location.Template = &adminrole.TemplateLocation{

			PanoramaDevice: state.Location.Template.PanoramaDevice.ValueString(),
			Template:       state.Location.Template.Name.ValueString(),
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_admin_role_resource",
		"function":      "Update",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}
	obj, err := r.manager.Read(ctx, location, plan.Name.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Perform the operation.
	updated, err := r.manager.Update(ctx, location, obj, obj.Name)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	copy_diags := state.CopyFromPango(ctx, updated, nil)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *AdminRoleResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state AdminRoleResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_admin_role_resource",
		"function":      "Delete",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var location adminrole.Location

	if state.Location.Template != nil {
		location.Template = &adminrole.TemplateLocation{

			PanoramaDevice: state.Location.Template.PanoramaDevice.ValueString(),
			Template:       state.Location.Template.Name.ValueString(),
		}
	}

	err := r.manager.Delete(ctx, location, []string{state.Name.ValueString()})
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}

}

type AdminRoleImportState struct {
	Location AdminRoleLocation `json:"location"`
	Name     string            `json:"name"`
}

func AdminRoleImportStateCreator(ctx context.Context, resource types.Object) ([]byte, error) {
	attrs := resource.Attributes()
	if attrs == nil {
		return nil, fmt.Errorf("Object has no attributes")
	}

	locationAttr, ok := attrs["location"]
	if !ok {
		return nil, fmt.Errorf("location attribute missing")
	}

	var location AdminRoleLocation
	switch value := locationAttr.(type) {
	case types.Object:
		value.As(ctx, &location, basetypes.ObjectAsOptions{})
	default:
		return nil, fmt.Errorf("location attribute expected to be an object")
	}
	nameAttr, ok := attrs["name"]
	if !ok {
		return nil, fmt.Errorf("name attribute missing")
	}

	var name string
	switch value := nameAttr.(type) {
	case types.String:
		name = value.ValueString()
	default:
		return nil, fmt.Errorf("name attribute expected to be a string")
	}

	importStruct := AdminRoleImportState{
		Location: location,
		Name:     name,
	}

	return json.Marshal(importStruct)
}

func (r *AdminRoleResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	var obj AdminRoleImportState
	data, err := base64.StdEncoding.DecodeString(req.ID)
	if err != nil {
		resp.Diagnostics.AddError("Failed to decode Import ID", err.Error())
		return
	}

	err = json.Unmarshal(data, &obj)
	if err != nil {
		resp.Diagnostics.AddError("Failed to unmarshal Import ID", err.Error())
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("location"), obj.Location)...)
	if resp.Diagnostics.HasError() {
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("name"), obj.Name)...)
}

type AdminRoleTemplateLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
}
type AdminRoleLocation struct {
	Template *AdminRoleTemplateLocation `tfsdk:"template"`
}

func AdminRoleLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"template": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Specific Panorama template",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o AdminRoleTemplateLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		PanoramaDevice *string `json:"panorama_device"`
		Name           *string `json:"name"`
	}{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *AdminRoleTemplateLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device"`
		Name           *string `json:"name"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o AdminRoleLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		Template *AdminRoleTemplateLocation `json:"template"`
	}{
		Template: o.Template,
	}

	return json.Marshal(obj)
}

func (o *AdminRoleLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Template *AdminRoleTemplateLocation `json:"template"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.Template = shadow.Template

	return nil
}
