package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/objects/extdynlist"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &ExternalDynamicListDataSource{}
	_ datasource.DataSourceWithConfigure = &ExternalDynamicListDataSource{}
)

func NewExternalDynamicListDataSource() datasource.DataSource {
	return &ExternalDynamicListDataSource{}
}

type ExternalDynamicListDataSource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*extdynlist.Entry, extdynlist.Location, *extdynlist.Service]
}

type ExternalDynamicListDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type ExternalDynamicListDataSourceModel struct {
	Location        types.Object                             `tfsdk:"location"`
	Name            types.String                             `tfsdk:"name"`
	DisableOverride types.String                             `tfsdk:"disable_override"`
	Type            *ExternalDynamicListDataSourceTypeObject `tfsdk:"type"`
}
type ExternalDynamicListDataSourceTypeObject struct {
	Domain        *ExternalDynamicListDataSourceTypeDomainObject        `tfsdk:"domain"`
	Imei          *ExternalDynamicListDataSourceTypeImeiObject          `tfsdk:"imei"`
	Imsi          *ExternalDynamicListDataSourceTypeImsiObject          `tfsdk:"imsi"`
	Ip            *ExternalDynamicListDataSourceTypeIpObject            `tfsdk:"ip"`
	PredefinedIp  *ExternalDynamicListDataSourceTypePredefinedIpObject  `tfsdk:"predefined_ip"`
	PredefinedUrl *ExternalDynamicListDataSourceTypePredefinedUrlObject `tfsdk:"predefined_url"`
	Url           *ExternalDynamicListDataSourceTypeUrlObject           `tfsdk:"url"`
}
type ExternalDynamicListDataSourceTypeDomainObject struct {
	Auth               *ExternalDynamicListDataSourceTypeDomainAuthObject      `tfsdk:"auth"`
	CertificateProfile types.String                                            `tfsdk:"certificate_profile"`
	Description        types.String                                            `tfsdk:"description"`
	ExceptionList      types.List                                              `tfsdk:"exception_list"`
	ExpandDomain       types.Bool                                              `tfsdk:"expand_domain"`
	Recurring          *ExternalDynamicListDataSourceTypeDomainRecurringObject `tfsdk:"recurring"`
	Url                types.String                                            `tfsdk:"url"`
}
type ExternalDynamicListDataSourceTypeDomainAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}
type ExternalDynamicListDataSourceTypeDomainRecurringObject struct {
	Daily      *ExternalDynamicListDataSourceTypeDomainRecurringDailyObject      `tfsdk:"daily"`
	FiveMinute *ExternalDynamicListDataSourceTypeDomainRecurringFiveMinuteObject `tfsdk:"five_minute"`
	Hourly     *ExternalDynamicListDataSourceTypeDomainRecurringHourlyObject     `tfsdk:"hourly"`
	Monthly    *ExternalDynamicListDataSourceTypeDomainRecurringMonthlyObject    `tfsdk:"monthly"`
	Weekly     *ExternalDynamicListDataSourceTypeDomainRecurringWeeklyObject     `tfsdk:"weekly"`
}
type ExternalDynamicListDataSourceTypeDomainRecurringDailyObject struct {
	At types.String `tfsdk:"at"`
}
type ExternalDynamicListDataSourceTypeDomainRecurringFiveMinuteObject struct {
}
type ExternalDynamicListDataSourceTypeDomainRecurringHourlyObject struct {
}
type ExternalDynamicListDataSourceTypeDomainRecurringMonthlyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}
type ExternalDynamicListDataSourceTypeDomainRecurringWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}
type ExternalDynamicListDataSourceTypeImeiObject struct {
	Auth               *ExternalDynamicListDataSourceTypeImeiAuthObject      `tfsdk:"auth"`
	CertificateProfile types.String                                          `tfsdk:"certificate_profile"`
	Description        types.String                                          `tfsdk:"description"`
	ExceptionList      types.List                                            `tfsdk:"exception_list"`
	Recurring          *ExternalDynamicListDataSourceTypeImeiRecurringObject `tfsdk:"recurring"`
	Url                types.String                                          `tfsdk:"url"`
}
type ExternalDynamicListDataSourceTypeImeiAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}
type ExternalDynamicListDataSourceTypeImeiRecurringObject struct {
	Daily      *ExternalDynamicListDataSourceTypeImeiRecurringDailyObject      `tfsdk:"daily"`
	FiveMinute *ExternalDynamicListDataSourceTypeImeiRecurringFiveMinuteObject `tfsdk:"five_minute"`
	Hourly     *ExternalDynamicListDataSourceTypeImeiRecurringHourlyObject     `tfsdk:"hourly"`
	Monthly    *ExternalDynamicListDataSourceTypeImeiRecurringMonthlyObject    `tfsdk:"monthly"`
	Weekly     *ExternalDynamicListDataSourceTypeImeiRecurringWeeklyObject     `tfsdk:"weekly"`
}
type ExternalDynamicListDataSourceTypeImeiRecurringDailyObject struct {
	At types.String `tfsdk:"at"`
}
type ExternalDynamicListDataSourceTypeImeiRecurringFiveMinuteObject struct {
}
type ExternalDynamicListDataSourceTypeImeiRecurringHourlyObject struct {
}
type ExternalDynamicListDataSourceTypeImeiRecurringMonthlyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}
type ExternalDynamicListDataSourceTypeImeiRecurringWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}
type ExternalDynamicListDataSourceTypeImsiObject struct {
	Auth               *ExternalDynamicListDataSourceTypeImsiAuthObject      `tfsdk:"auth"`
	CertificateProfile types.String                                          `tfsdk:"certificate_profile"`
	Description        types.String                                          `tfsdk:"description"`
	ExceptionList      types.List                                            `tfsdk:"exception_list"`
	Recurring          *ExternalDynamicListDataSourceTypeImsiRecurringObject `tfsdk:"recurring"`
	Url                types.String                                          `tfsdk:"url"`
}
type ExternalDynamicListDataSourceTypeImsiAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}
type ExternalDynamicListDataSourceTypeImsiRecurringObject struct {
	Daily      *ExternalDynamicListDataSourceTypeImsiRecurringDailyObject      `tfsdk:"daily"`
	FiveMinute *ExternalDynamicListDataSourceTypeImsiRecurringFiveMinuteObject `tfsdk:"five_minute"`
	Hourly     *ExternalDynamicListDataSourceTypeImsiRecurringHourlyObject     `tfsdk:"hourly"`
	Monthly    *ExternalDynamicListDataSourceTypeImsiRecurringMonthlyObject    `tfsdk:"monthly"`
	Weekly     *ExternalDynamicListDataSourceTypeImsiRecurringWeeklyObject     `tfsdk:"weekly"`
}
type ExternalDynamicListDataSourceTypeImsiRecurringDailyObject struct {
	At types.String `tfsdk:"at"`
}
type ExternalDynamicListDataSourceTypeImsiRecurringFiveMinuteObject struct {
}
type ExternalDynamicListDataSourceTypeImsiRecurringHourlyObject struct {
}
type ExternalDynamicListDataSourceTypeImsiRecurringMonthlyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}
type ExternalDynamicListDataSourceTypeImsiRecurringWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}
type ExternalDynamicListDataSourceTypeIpObject struct {
	Auth               *ExternalDynamicListDataSourceTypeIpAuthObject      `tfsdk:"auth"`
	CertificateProfile types.String                                        `tfsdk:"certificate_profile"`
	Description        types.String                                        `tfsdk:"description"`
	ExceptionList      types.List                                          `tfsdk:"exception_list"`
	Recurring          *ExternalDynamicListDataSourceTypeIpRecurringObject `tfsdk:"recurring"`
	Url                types.String                                        `tfsdk:"url"`
}
type ExternalDynamicListDataSourceTypeIpAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}
type ExternalDynamicListDataSourceTypeIpRecurringObject struct {
	Daily      *ExternalDynamicListDataSourceTypeIpRecurringDailyObject      `tfsdk:"daily"`
	FiveMinute *ExternalDynamicListDataSourceTypeIpRecurringFiveMinuteObject `tfsdk:"five_minute"`
	Hourly     *ExternalDynamicListDataSourceTypeIpRecurringHourlyObject     `tfsdk:"hourly"`
	Monthly    *ExternalDynamicListDataSourceTypeIpRecurringMonthlyObject    `tfsdk:"monthly"`
	Weekly     *ExternalDynamicListDataSourceTypeIpRecurringWeeklyObject     `tfsdk:"weekly"`
}
type ExternalDynamicListDataSourceTypeIpRecurringDailyObject struct {
	At types.String `tfsdk:"at"`
}
type ExternalDynamicListDataSourceTypeIpRecurringFiveMinuteObject struct {
}
type ExternalDynamicListDataSourceTypeIpRecurringHourlyObject struct {
}
type ExternalDynamicListDataSourceTypeIpRecurringMonthlyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}
type ExternalDynamicListDataSourceTypeIpRecurringWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}
type ExternalDynamicListDataSourceTypePredefinedIpObject struct {
	Description   types.String `tfsdk:"description"`
	ExceptionList types.List   `tfsdk:"exception_list"`
	Url           types.String `tfsdk:"url"`
}
type ExternalDynamicListDataSourceTypePredefinedUrlObject struct {
	Description   types.String `tfsdk:"description"`
	ExceptionList types.List   `tfsdk:"exception_list"`
	Url           types.String `tfsdk:"url"`
}
type ExternalDynamicListDataSourceTypeUrlObject struct {
	Auth               *ExternalDynamicListDataSourceTypeUrlAuthObject      `tfsdk:"auth"`
	CertificateProfile types.String                                         `tfsdk:"certificate_profile"`
	Description        types.String                                         `tfsdk:"description"`
	ExceptionList      types.List                                           `tfsdk:"exception_list"`
	Recurring          *ExternalDynamicListDataSourceTypeUrlRecurringObject `tfsdk:"recurring"`
	Url                types.String                                         `tfsdk:"url"`
}
type ExternalDynamicListDataSourceTypeUrlAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}
type ExternalDynamicListDataSourceTypeUrlRecurringObject struct {
	Daily      *ExternalDynamicListDataSourceTypeUrlRecurringDailyObject      `tfsdk:"daily"`
	FiveMinute *ExternalDynamicListDataSourceTypeUrlRecurringFiveMinuteObject `tfsdk:"five_minute"`
	Hourly     *ExternalDynamicListDataSourceTypeUrlRecurringHourlyObject     `tfsdk:"hourly"`
	Monthly    *ExternalDynamicListDataSourceTypeUrlRecurringMonthlyObject    `tfsdk:"monthly"`
	Weekly     *ExternalDynamicListDataSourceTypeUrlRecurringWeeklyObject     `tfsdk:"weekly"`
}
type ExternalDynamicListDataSourceTypeUrlRecurringDailyObject struct {
	At types.String `tfsdk:"at"`
}
type ExternalDynamicListDataSourceTypeUrlRecurringFiveMinuteObject struct {
}
type ExternalDynamicListDataSourceTypeUrlRecurringHourlyObject struct {
}
type ExternalDynamicListDataSourceTypeUrlRecurringMonthlyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}
type ExternalDynamicListDataSourceTypeUrlRecurringWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}

func (o *ExternalDynamicListDataSourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj ExternalDynamicListLocation

	var typeObj *ExternalDynamicListDataSourceTypeObject
	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"name":             types.StringType,
		"disable_override": types.StringType,
		"type": types.ObjectType{
			AttrTypes: typeObj.AttributeTypes(),
		},
	}
}

func (o ExternalDynamicListDataSourceModel) AncestorName() string {
	return ""
}

func (o ExternalDynamicListDataSourceModel) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeObject) AttributeTypes() map[string]attr.Type {

	var domainObj *ExternalDynamicListDataSourceTypeDomainObject

	var imeiObj *ExternalDynamicListDataSourceTypeImeiObject

	var imsiObj *ExternalDynamicListDataSourceTypeImsiObject

	var ipObj *ExternalDynamicListDataSourceTypeIpObject

	var predefinedIpObj *ExternalDynamicListDataSourceTypePredefinedIpObject

	var predefinedUrlObj *ExternalDynamicListDataSourceTypePredefinedUrlObject

	var urlObj *ExternalDynamicListDataSourceTypeUrlObject
	return map[string]attr.Type{
		"domain": types.ObjectType{
			AttrTypes: domainObj.AttributeTypes(),
		},
		"imei": types.ObjectType{
			AttrTypes: imeiObj.AttributeTypes(),
		},
		"imsi": types.ObjectType{
			AttrTypes: imsiObj.AttributeTypes(),
		},
		"ip": types.ObjectType{
			AttrTypes: ipObj.AttributeTypes(),
		},
		"predefined_ip": types.ObjectType{
			AttrTypes: predefinedIpObj.AttributeTypes(),
		},
		"predefined_url": types.ObjectType{
			AttrTypes: predefinedUrlObj.AttributeTypes(),
		},
		"url": types.ObjectType{
			AttrTypes: urlObj.AttributeTypes(),
		},
	}
}

func (o ExternalDynamicListDataSourceTypeObject) AncestorName() string {
	return "type"
}

func (o ExternalDynamicListDataSourceTypeObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeDomainObject) AttributeTypes() map[string]attr.Type {

	var authObj *ExternalDynamicListDataSourceTypeDomainAuthObject

	var recurringObj *ExternalDynamicListDataSourceTypeDomainRecurringObject

	return map[string]attr.Type{
		"auth": types.ObjectType{
			AttrTypes: authObj.AttributeTypes(),
		},
		"certificate_profile": types.StringType,
		"description":         types.StringType,
		"exception_list":      types.ListType{},
		"expand_domain":       types.BoolType,
		"recurring": types.ObjectType{
			AttrTypes: recurringObj.AttributeTypes(),
		},
		"url": types.StringType,
	}
}

func (o ExternalDynamicListDataSourceTypeDomainObject) AncestorName() string {
	return "domain"
}

func (o ExternalDynamicListDataSourceTypeDomainObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeDomainAuthObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"password": types.StringType,
		"username": types.StringType,
	}
}

func (o ExternalDynamicListDataSourceTypeDomainAuthObject) AncestorName() string {
	return "auth"
}

func (o ExternalDynamicListDataSourceTypeDomainAuthObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeDomainRecurringObject) AttributeTypes() map[string]attr.Type {

	var dailyObj *ExternalDynamicListDataSourceTypeDomainRecurringDailyObject

	var fiveMinuteObj *ExternalDynamicListDataSourceTypeDomainRecurringFiveMinuteObject

	var hourlyObj *ExternalDynamicListDataSourceTypeDomainRecurringHourlyObject

	var monthlyObj *ExternalDynamicListDataSourceTypeDomainRecurringMonthlyObject

	var weeklyObj *ExternalDynamicListDataSourceTypeDomainRecurringWeeklyObject
	return map[string]attr.Type{
		"daily": types.ObjectType{
			AttrTypes: dailyObj.AttributeTypes(),
		},
		"five_minute": types.ObjectType{
			AttrTypes: fiveMinuteObj.AttributeTypes(),
		},
		"hourly": types.ObjectType{
			AttrTypes: hourlyObj.AttributeTypes(),
		},
		"monthly": types.ObjectType{
			AttrTypes: monthlyObj.AttributeTypes(),
		},
		"weekly": types.ObjectType{
			AttrTypes: weeklyObj.AttributeTypes(),
		},
	}
}

func (o ExternalDynamicListDataSourceTypeDomainRecurringObject) AncestorName() string {
	return "recurring"
}

func (o ExternalDynamicListDataSourceTypeDomainRecurringObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeDomainRecurringDailyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at": types.StringType,
	}
}

func (o ExternalDynamicListDataSourceTypeDomainRecurringDailyObject) AncestorName() string {
	return "daily"
}

func (o ExternalDynamicListDataSourceTypeDomainRecurringDailyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeDomainRecurringFiveMinuteObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o ExternalDynamicListDataSourceTypeDomainRecurringFiveMinuteObject) AncestorName() string {
	return "five-minute"
}

func (o ExternalDynamicListDataSourceTypeDomainRecurringFiveMinuteObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeDomainRecurringHourlyObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o ExternalDynamicListDataSourceTypeDomainRecurringHourlyObject) AncestorName() string {
	return "hourly"
}

func (o ExternalDynamicListDataSourceTypeDomainRecurringHourlyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeDomainRecurringMonthlyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at":           types.StringType,
		"day_of_month": types.Int64Type,
	}
}

func (o ExternalDynamicListDataSourceTypeDomainRecurringMonthlyObject) AncestorName() string {
	return "monthly"
}

func (o ExternalDynamicListDataSourceTypeDomainRecurringMonthlyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeDomainRecurringWeeklyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at":          types.StringType,
		"day_of_week": types.StringType,
	}
}

func (o ExternalDynamicListDataSourceTypeDomainRecurringWeeklyObject) AncestorName() string {
	return "weekly"
}

func (o ExternalDynamicListDataSourceTypeDomainRecurringWeeklyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeImeiObject) AttributeTypes() map[string]attr.Type {

	var authObj *ExternalDynamicListDataSourceTypeImeiAuthObject

	var recurringObj *ExternalDynamicListDataSourceTypeImeiRecurringObject

	return map[string]attr.Type{
		"auth": types.ObjectType{
			AttrTypes: authObj.AttributeTypes(),
		},
		"certificate_profile": types.StringType,
		"description":         types.StringType,
		"exception_list":      types.ListType{},
		"recurring": types.ObjectType{
			AttrTypes: recurringObj.AttributeTypes(),
		},
		"url": types.StringType,
	}
}

func (o ExternalDynamicListDataSourceTypeImeiObject) AncestorName() string {
	return "imei"
}

func (o ExternalDynamicListDataSourceTypeImeiObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeImeiAuthObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"password": types.StringType,
		"username": types.StringType,
	}
}

func (o ExternalDynamicListDataSourceTypeImeiAuthObject) AncestorName() string {
	return "auth"
}

func (o ExternalDynamicListDataSourceTypeImeiAuthObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeImeiRecurringObject) AttributeTypes() map[string]attr.Type {

	var dailyObj *ExternalDynamicListDataSourceTypeImeiRecurringDailyObject

	var fiveMinuteObj *ExternalDynamicListDataSourceTypeImeiRecurringFiveMinuteObject

	var hourlyObj *ExternalDynamicListDataSourceTypeImeiRecurringHourlyObject

	var monthlyObj *ExternalDynamicListDataSourceTypeImeiRecurringMonthlyObject

	var weeklyObj *ExternalDynamicListDataSourceTypeImeiRecurringWeeklyObject
	return map[string]attr.Type{
		"daily": types.ObjectType{
			AttrTypes: dailyObj.AttributeTypes(),
		},
		"five_minute": types.ObjectType{
			AttrTypes: fiveMinuteObj.AttributeTypes(),
		},
		"hourly": types.ObjectType{
			AttrTypes: hourlyObj.AttributeTypes(),
		},
		"monthly": types.ObjectType{
			AttrTypes: monthlyObj.AttributeTypes(),
		},
		"weekly": types.ObjectType{
			AttrTypes: weeklyObj.AttributeTypes(),
		},
	}
}

func (o ExternalDynamicListDataSourceTypeImeiRecurringObject) AncestorName() string {
	return "recurring"
}

func (o ExternalDynamicListDataSourceTypeImeiRecurringObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeImeiRecurringDailyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at": types.StringType,
	}
}

func (o ExternalDynamicListDataSourceTypeImeiRecurringDailyObject) AncestorName() string {
	return "daily"
}

func (o ExternalDynamicListDataSourceTypeImeiRecurringDailyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeImeiRecurringFiveMinuteObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o ExternalDynamicListDataSourceTypeImeiRecurringFiveMinuteObject) AncestorName() string {
	return "five-minute"
}

func (o ExternalDynamicListDataSourceTypeImeiRecurringFiveMinuteObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeImeiRecurringHourlyObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o ExternalDynamicListDataSourceTypeImeiRecurringHourlyObject) AncestorName() string {
	return "hourly"
}

func (o ExternalDynamicListDataSourceTypeImeiRecurringHourlyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeImeiRecurringMonthlyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at":           types.StringType,
		"day_of_month": types.Int64Type,
	}
}

func (o ExternalDynamicListDataSourceTypeImeiRecurringMonthlyObject) AncestorName() string {
	return "monthly"
}

func (o ExternalDynamicListDataSourceTypeImeiRecurringMonthlyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeImeiRecurringWeeklyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at":          types.StringType,
		"day_of_week": types.StringType,
	}
}

func (o ExternalDynamicListDataSourceTypeImeiRecurringWeeklyObject) AncestorName() string {
	return "weekly"
}

func (o ExternalDynamicListDataSourceTypeImeiRecurringWeeklyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeImsiObject) AttributeTypes() map[string]attr.Type {

	var authObj *ExternalDynamicListDataSourceTypeImsiAuthObject

	var recurringObj *ExternalDynamicListDataSourceTypeImsiRecurringObject

	return map[string]attr.Type{
		"auth": types.ObjectType{
			AttrTypes: authObj.AttributeTypes(),
		},
		"certificate_profile": types.StringType,
		"description":         types.StringType,
		"exception_list":      types.ListType{},
		"recurring": types.ObjectType{
			AttrTypes: recurringObj.AttributeTypes(),
		},
		"url": types.StringType,
	}
}

func (o ExternalDynamicListDataSourceTypeImsiObject) AncestorName() string {
	return "imsi"
}

func (o ExternalDynamicListDataSourceTypeImsiObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeImsiAuthObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"password": types.StringType,
		"username": types.StringType,
	}
}

func (o ExternalDynamicListDataSourceTypeImsiAuthObject) AncestorName() string {
	return "auth"
}

func (o ExternalDynamicListDataSourceTypeImsiAuthObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeImsiRecurringObject) AttributeTypes() map[string]attr.Type {

	var dailyObj *ExternalDynamicListDataSourceTypeImsiRecurringDailyObject

	var fiveMinuteObj *ExternalDynamicListDataSourceTypeImsiRecurringFiveMinuteObject

	var hourlyObj *ExternalDynamicListDataSourceTypeImsiRecurringHourlyObject

	var monthlyObj *ExternalDynamicListDataSourceTypeImsiRecurringMonthlyObject

	var weeklyObj *ExternalDynamicListDataSourceTypeImsiRecurringWeeklyObject
	return map[string]attr.Type{
		"daily": types.ObjectType{
			AttrTypes: dailyObj.AttributeTypes(),
		},
		"five_minute": types.ObjectType{
			AttrTypes: fiveMinuteObj.AttributeTypes(),
		},
		"hourly": types.ObjectType{
			AttrTypes: hourlyObj.AttributeTypes(),
		},
		"monthly": types.ObjectType{
			AttrTypes: monthlyObj.AttributeTypes(),
		},
		"weekly": types.ObjectType{
			AttrTypes: weeklyObj.AttributeTypes(),
		},
	}
}

func (o ExternalDynamicListDataSourceTypeImsiRecurringObject) AncestorName() string {
	return "recurring"
}

func (o ExternalDynamicListDataSourceTypeImsiRecurringObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeImsiRecurringDailyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at": types.StringType,
	}
}

func (o ExternalDynamicListDataSourceTypeImsiRecurringDailyObject) AncestorName() string {
	return "daily"
}

func (o ExternalDynamicListDataSourceTypeImsiRecurringDailyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeImsiRecurringFiveMinuteObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o ExternalDynamicListDataSourceTypeImsiRecurringFiveMinuteObject) AncestorName() string {
	return "five-minute"
}

func (o ExternalDynamicListDataSourceTypeImsiRecurringFiveMinuteObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeImsiRecurringHourlyObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o ExternalDynamicListDataSourceTypeImsiRecurringHourlyObject) AncestorName() string {
	return "hourly"
}

func (o ExternalDynamicListDataSourceTypeImsiRecurringHourlyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeImsiRecurringMonthlyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at":           types.StringType,
		"day_of_month": types.Int64Type,
	}
}

func (o ExternalDynamicListDataSourceTypeImsiRecurringMonthlyObject) AncestorName() string {
	return "monthly"
}

func (o ExternalDynamicListDataSourceTypeImsiRecurringMonthlyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeImsiRecurringWeeklyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at":          types.StringType,
		"day_of_week": types.StringType,
	}
}

func (o ExternalDynamicListDataSourceTypeImsiRecurringWeeklyObject) AncestorName() string {
	return "weekly"
}

func (o ExternalDynamicListDataSourceTypeImsiRecurringWeeklyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeIpObject) AttributeTypes() map[string]attr.Type {

	var authObj *ExternalDynamicListDataSourceTypeIpAuthObject

	var recurringObj *ExternalDynamicListDataSourceTypeIpRecurringObject

	return map[string]attr.Type{
		"auth": types.ObjectType{
			AttrTypes: authObj.AttributeTypes(),
		},
		"certificate_profile": types.StringType,
		"description":         types.StringType,
		"exception_list":      types.ListType{},
		"recurring": types.ObjectType{
			AttrTypes: recurringObj.AttributeTypes(),
		},
		"url": types.StringType,
	}
}

func (o ExternalDynamicListDataSourceTypeIpObject) AncestorName() string {
	return "ip"
}

func (o ExternalDynamicListDataSourceTypeIpObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeIpAuthObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"password": types.StringType,
		"username": types.StringType,
	}
}

func (o ExternalDynamicListDataSourceTypeIpAuthObject) AncestorName() string {
	return "auth"
}

func (o ExternalDynamicListDataSourceTypeIpAuthObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeIpRecurringObject) AttributeTypes() map[string]attr.Type {

	var dailyObj *ExternalDynamicListDataSourceTypeIpRecurringDailyObject

	var fiveMinuteObj *ExternalDynamicListDataSourceTypeIpRecurringFiveMinuteObject

	var hourlyObj *ExternalDynamicListDataSourceTypeIpRecurringHourlyObject

	var monthlyObj *ExternalDynamicListDataSourceTypeIpRecurringMonthlyObject

	var weeklyObj *ExternalDynamicListDataSourceTypeIpRecurringWeeklyObject
	return map[string]attr.Type{
		"daily": types.ObjectType{
			AttrTypes: dailyObj.AttributeTypes(),
		},
		"five_minute": types.ObjectType{
			AttrTypes: fiveMinuteObj.AttributeTypes(),
		},
		"hourly": types.ObjectType{
			AttrTypes: hourlyObj.AttributeTypes(),
		},
		"monthly": types.ObjectType{
			AttrTypes: monthlyObj.AttributeTypes(),
		},
		"weekly": types.ObjectType{
			AttrTypes: weeklyObj.AttributeTypes(),
		},
	}
}

func (o ExternalDynamicListDataSourceTypeIpRecurringObject) AncestorName() string {
	return "recurring"
}

func (o ExternalDynamicListDataSourceTypeIpRecurringObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeIpRecurringDailyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at": types.StringType,
	}
}

func (o ExternalDynamicListDataSourceTypeIpRecurringDailyObject) AncestorName() string {
	return "daily"
}

func (o ExternalDynamicListDataSourceTypeIpRecurringDailyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeIpRecurringFiveMinuteObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o ExternalDynamicListDataSourceTypeIpRecurringFiveMinuteObject) AncestorName() string {
	return "five-minute"
}

func (o ExternalDynamicListDataSourceTypeIpRecurringFiveMinuteObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeIpRecurringHourlyObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o ExternalDynamicListDataSourceTypeIpRecurringHourlyObject) AncestorName() string {
	return "hourly"
}

func (o ExternalDynamicListDataSourceTypeIpRecurringHourlyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeIpRecurringMonthlyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at":           types.StringType,
		"day_of_month": types.Int64Type,
	}
}

func (o ExternalDynamicListDataSourceTypeIpRecurringMonthlyObject) AncestorName() string {
	return "monthly"
}

func (o ExternalDynamicListDataSourceTypeIpRecurringMonthlyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeIpRecurringWeeklyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at":          types.StringType,
		"day_of_week": types.StringType,
	}
}

func (o ExternalDynamicListDataSourceTypeIpRecurringWeeklyObject) AncestorName() string {
	return "weekly"
}

func (o ExternalDynamicListDataSourceTypeIpRecurringWeeklyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypePredefinedIpObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"description":    types.StringType,
		"exception_list": types.ListType{},
		"url":            types.StringType,
	}
}

func (o ExternalDynamicListDataSourceTypePredefinedIpObject) AncestorName() string {
	return "predefined-ip"
}

func (o ExternalDynamicListDataSourceTypePredefinedIpObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypePredefinedUrlObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"description":    types.StringType,
		"exception_list": types.ListType{},
		"url":            types.StringType,
	}
}

func (o ExternalDynamicListDataSourceTypePredefinedUrlObject) AncestorName() string {
	return "predefined-url"
}

func (o ExternalDynamicListDataSourceTypePredefinedUrlObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeUrlObject) AttributeTypes() map[string]attr.Type {

	var authObj *ExternalDynamicListDataSourceTypeUrlAuthObject

	var recurringObj *ExternalDynamicListDataSourceTypeUrlRecurringObject

	return map[string]attr.Type{
		"auth": types.ObjectType{
			AttrTypes: authObj.AttributeTypes(),
		},
		"certificate_profile": types.StringType,
		"description":         types.StringType,
		"exception_list":      types.ListType{},
		"recurring": types.ObjectType{
			AttrTypes: recurringObj.AttributeTypes(),
		},
		"url": types.StringType,
	}
}

func (o ExternalDynamicListDataSourceTypeUrlObject) AncestorName() string {
	return "url"
}

func (o ExternalDynamicListDataSourceTypeUrlObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeUrlAuthObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"password": types.StringType,
		"username": types.StringType,
	}
}

func (o ExternalDynamicListDataSourceTypeUrlAuthObject) AncestorName() string {
	return "auth"
}

func (o ExternalDynamicListDataSourceTypeUrlAuthObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeUrlRecurringObject) AttributeTypes() map[string]attr.Type {

	var dailyObj *ExternalDynamicListDataSourceTypeUrlRecurringDailyObject

	var fiveMinuteObj *ExternalDynamicListDataSourceTypeUrlRecurringFiveMinuteObject

	var hourlyObj *ExternalDynamicListDataSourceTypeUrlRecurringHourlyObject

	var monthlyObj *ExternalDynamicListDataSourceTypeUrlRecurringMonthlyObject

	var weeklyObj *ExternalDynamicListDataSourceTypeUrlRecurringWeeklyObject
	return map[string]attr.Type{
		"daily": types.ObjectType{
			AttrTypes: dailyObj.AttributeTypes(),
		},
		"five_minute": types.ObjectType{
			AttrTypes: fiveMinuteObj.AttributeTypes(),
		},
		"hourly": types.ObjectType{
			AttrTypes: hourlyObj.AttributeTypes(),
		},
		"monthly": types.ObjectType{
			AttrTypes: monthlyObj.AttributeTypes(),
		},
		"weekly": types.ObjectType{
			AttrTypes: weeklyObj.AttributeTypes(),
		},
	}
}

func (o ExternalDynamicListDataSourceTypeUrlRecurringObject) AncestorName() string {
	return "recurring"
}

func (o ExternalDynamicListDataSourceTypeUrlRecurringObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeUrlRecurringDailyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at": types.StringType,
	}
}

func (o ExternalDynamicListDataSourceTypeUrlRecurringDailyObject) AncestorName() string {
	return "daily"
}

func (o ExternalDynamicListDataSourceTypeUrlRecurringDailyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeUrlRecurringFiveMinuteObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o ExternalDynamicListDataSourceTypeUrlRecurringFiveMinuteObject) AncestorName() string {
	return "five-minute"
}

func (o ExternalDynamicListDataSourceTypeUrlRecurringFiveMinuteObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeUrlRecurringHourlyObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o ExternalDynamicListDataSourceTypeUrlRecurringHourlyObject) AncestorName() string {
	return "hourly"
}

func (o ExternalDynamicListDataSourceTypeUrlRecurringHourlyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeUrlRecurringMonthlyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at":           types.StringType,
		"day_of_month": types.Int64Type,
	}
}

func (o ExternalDynamicListDataSourceTypeUrlRecurringMonthlyObject) AncestorName() string {
	return "monthly"
}

func (o ExternalDynamicListDataSourceTypeUrlRecurringMonthlyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListDataSourceTypeUrlRecurringWeeklyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at":          types.StringType,
		"day_of_week": types.StringType,
	}
}

func (o ExternalDynamicListDataSourceTypeUrlRecurringWeeklyObject) AncestorName() string {
	return "weekly"
}

func (o ExternalDynamicListDataSourceTypeUrlRecurringWeeklyObject) EntryName() *string {
	return nil
}

func (o *ExternalDynamicListDataSourceModel) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	disableOverride_value := o.DisableOverride.ValueStringPointer()
	var type_entry *extdynlist.Type
	if o.Type != nil {
		if *obj != nil && (*obj).Type != nil {
			type_entry = (*obj).Type
		} else {
			type_entry = new(extdynlist.Type)
		}
		// ModelOrObject: Model
		diags.Append(o.Type.CopyToPango(ctx, ancestors, &type_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(extdynlist.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).DisableOverride = disableOverride_value
	(*obj).Type = type_entry

	return diags
}
func (o *ExternalDynamicListDataSourceTypeObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.Type, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var domain_entry *extdynlist.TypeDomain
	if o.Domain != nil {
		if *obj != nil && (*obj).Domain != nil {
			domain_entry = (*obj).Domain
		} else {
			domain_entry = new(extdynlist.TypeDomain)
		}
		// ModelOrObject: Object
		diags.Append(o.Domain.CopyToPango(ctx, append(ancestors, o), &domain_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var imei_entry *extdynlist.TypeImei
	if o.Imei != nil {
		if *obj != nil && (*obj).Imei != nil {
			imei_entry = (*obj).Imei
		} else {
			imei_entry = new(extdynlist.TypeImei)
		}
		// ModelOrObject: Object
		diags.Append(o.Imei.CopyToPango(ctx, append(ancestors, o), &imei_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var imsi_entry *extdynlist.TypeImsi
	if o.Imsi != nil {
		if *obj != nil && (*obj).Imsi != nil {
			imsi_entry = (*obj).Imsi
		} else {
			imsi_entry = new(extdynlist.TypeImsi)
		}
		// ModelOrObject: Object
		diags.Append(o.Imsi.CopyToPango(ctx, append(ancestors, o), &imsi_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var ip_entry *extdynlist.TypeIp
	if o.Ip != nil {
		if *obj != nil && (*obj).Ip != nil {
			ip_entry = (*obj).Ip
		} else {
			ip_entry = new(extdynlist.TypeIp)
		}
		// ModelOrObject: Object
		diags.Append(o.Ip.CopyToPango(ctx, append(ancestors, o), &ip_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var predefinedIp_entry *extdynlist.TypePredefinedIp
	if o.PredefinedIp != nil {
		if *obj != nil && (*obj).PredefinedIp != nil {
			predefinedIp_entry = (*obj).PredefinedIp
		} else {
			predefinedIp_entry = new(extdynlist.TypePredefinedIp)
		}
		// ModelOrObject: Object
		diags.Append(o.PredefinedIp.CopyToPango(ctx, append(ancestors, o), &predefinedIp_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var predefinedUrl_entry *extdynlist.TypePredefinedUrl
	if o.PredefinedUrl != nil {
		if *obj != nil && (*obj).PredefinedUrl != nil {
			predefinedUrl_entry = (*obj).PredefinedUrl
		} else {
			predefinedUrl_entry = new(extdynlist.TypePredefinedUrl)
		}
		// ModelOrObject: Object
		diags.Append(o.PredefinedUrl.CopyToPango(ctx, append(ancestors, o), &predefinedUrl_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var url_entry *extdynlist.TypeUrl
	if o.Url != nil {
		if *obj != nil && (*obj).Url != nil {
			url_entry = (*obj).Url
		} else {
			url_entry = new(extdynlist.TypeUrl)
		}
		// ModelOrObject: Object
		diags.Append(o.Url.CopyToPango(ctx, append(ancestors, o), &url_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(extdynlist.Type)
	}
	(*obj).Domain = domain_entry
	(*obj).Imei = imei_entry
	(*obj).Imsi = imsi_entry
	(*obj).Ip = ip_entry
	(*obj).PredefinedIp = predefinedIp_entry
	(*obj).PredefinedUrl = predefinedUrl_entry
	(*obj).Url = url_entry

	return diags
}
func (o *ExternalDynamicListDataSourceTypeDomainObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeDomain, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var auth_entry *extdynlist.TypeDomainAuth
	if o.Auth != nil {
		if *obj != nil && (*obj).Auth != nil {
			auth_entry = (*obj).Auth
		} else {
			auth_entry = new(extdynlist.TypeDomainAuth)
		}
		// ModelOrObject: Object
		diags.Append(o.Auth.CopyToPango(ctx, append(ancestors, o), &auth_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	certificateProfile_value := o.CertificateProfile.ValueStringPointer()
	description_value := o.Description.ValueStringPointer()
	exceptionList_pango_entries := make([]string, 0)
	diags.Append(o.ExceptionList.ElementsAs(ctx, &exceptionList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	expandDomain_value := o.ExpandDomain.ValueBoolPointer()
	var recurring_entry *extdynlist.TypeDomainRecurring
	if o.Recurring != nil {
		if *obj != nil && (*obj).Recurring != nil {
			recurring_entry = (*obj).Recurring
		} else {
			recurring_entry = new(extdynlist.TypeDomainRecurring)
		}
		// ModelOrObject: Object
		diags.Append(o.Recurring.CopyToPango(ctx, append(ancestors, o), &recurring_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	url_value := o.Url.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeDomain)
	}
	(*obj).Auth = auth_entry
	(*obj).CertificateProfile = certificateProfile_value
	(*obj).Description = description_value
	(*obj).ExceptionList = exceptionList_pango_entries
	(*obj).ExpandDomain = expandDomain_value
	(*obj).Recurring = recurring_entry
	(*obj).Url = url_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeDomainAuthObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeDomainAuth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
	if err != nil {
		diags.AddError("Failed to create encrypted values state key", err.Error())
		return diags
	}

	var password_value *string
	err = ev.StorePlaintextValue(valueKey, "solo", o.Password.ValueString())
	if err != nil {
		diags.AddError("Failed to manage encrypted values state", err.Error())
		return diags
	}
	password_value = o.Password.ValueStringPointer()
	username_value := o.Username.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeDomainAuth)
	}
	(*obj).Password = password_value
	(*obj).Username = username_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeDomainRecurringObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeDomainRecurring, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var daily_entry *extdynlist.TypeDomainRecurringDaily
	if o.Daily != nil {
		if *obj != nil && (*obj).Daily != nil {
			daily_entry = (*obj).Daily
		} else {
			daily_entry = new(extdynlist.TypeDomainRecurringDaily)
		}
		// ModelOrObject: Object
		diags.Append(o.Daily.CopyToPango(ctx, append(ancestors, o), &daily_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var fiveMinute_entry *extdynlist.TypeDomainRecurringFiveMinute
	if o.FiveMinute != nil {
		if *obj != nil && (*obj).FiveMinute != nil {
			fiveMinute_entry = (*obj).FiveMinute
		} else {
			fiveMinute_entry = new(extdynlist.TypeDomainRecurringFiveMinute)
		}
		// ModelOrObject: Object
		diags.Append(o.FiveMinute.CopyToPango(ctx, append(ancestors, o), &fiveMinute_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var hourly_entry *extdynlist.TypeDomainRecurringHourly
	if o.Hourly != nil {
		if *obj != nil && (*obj).Hourly != nil {
			hourly_entry = (*obj).Hourly
		} else {
			hourly_entry = new(extdynlist.TypeDomainRecurringHourly)
		}
		// ModelOrObject: Object
		diags.Append(o.Hourly.CopyToPango(ctx, append(ancestors, o), &hourly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var monthly_entry *extdynlist.TypeDomainRecurringMonthly
	if o.Monthly != nil {
		if *obj != nil && (*obj).Monthly != nil {
			monthly_entry = (*obj).Monthly
		} else {
			monthly_entry = new(extdynlist.TypeDomainRecurringMonthly)
		}
		// ModelOrObject: Object
		diags.Append(o.Monthly.CopyToPango(ctx, append(ancestors, o), &monthly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var weekly_entry *extdynlist.TypeDomainRecurringWeekly
	if o.Weekly != nil {
		if *obj != nil && (*obj).Weekly != nil {
			weekly_entry = (*obj).Weekly
		} else {
			weekly_entry = new(extdynlist.TypeDomainRecurringWeekly)
		}
		// ModelOrObject: Object
		diags.Append(o.Weekly.CopyToPango(ctx, append(ancestors, o), &weekly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(extdynlist.TypeDomainRecurring)
	}
	(*obj).Daily = daily_entry
	(*obj).FiveMinute = fiveMinute_entry
	(*obj).Hourly = hourly_entry
	(*obj).Monthly = monthly_entry
	(*obj).Weekly = weekly_entry

	return diags
}
func (o *ExternalDynamicListDataSourceTypeDomainRecurringDailyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeDomainRecurringDaily, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeDomainRecurringDaily)
	}
	(*obj).At = at_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeDomainRecurringFiveMinuteObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeDomainRecurringFiveMinute, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(extdynlist.TypeDomainRecurringFiveMinute)
	}

	return diags
}
func (o *ExternalDynamicListDataSourceTypeDomainRecurringHourlyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeDomainRecurringHourly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(extdynlist.TypeDomainRecurringHourly)
	}

	return diags
}
func (o *ExternalDynamicListDataSourceTypeDomainRecurringMonthlyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeDomainRecurringMonthly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()
	dayOfMonth_value := o.DayOfMonth.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeDomainRecurringMonthly)
	}
	(*obj).At = at_value
	(*obj).DayOfMonth = dayOfMonth_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeDomainRecurringWeeklyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeDomainRecurringWeekly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()
	dayOfWeek_value := o.DayOfWeek.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeDomainRecurringWeekly)
	}
	(*obj).At = at_value
	(*obj).DayOfWeek = dayOfWeek_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeImeiObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImei, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var auth_entry *extdynlist.TypeImeiAuth
	if o.Auth != nil {
		if *obj != nil && (*obj).Auth != nil {
			auth_entry = (*obj).Auth
		} else {
			auth_entry = new(extdynlist.TypeImeiAuth)
		}
		// ModelOrObject: Object
		diags.Append(o.Auth.CopyToPango(ctx, append(ancestors, o), &auth_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	certificateProfile_value := o.CertificateProfile.ValueStringPointer()
	description_value := o.Description.ValueStringPointer()
	exceptionList_pango_entries := make([]string, 0)
	diags.Append(o.ExceptionList.ElementsAs(ctx, &exceptionList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var recurring_entry *extdynlist.TypeImeiRecurring
	if o.Recurring != nil {
		if *obj != nil && (*obj).Recurring != nil {
			recurring_entry = (*obj).Recurring
		} else {
			recurring_entry = new(extdynlist.TypeImeiRecurring)
		}
		// ModelOrObject: Object
		diags.Append(o.Recurring.CopyToPango(ctx, append(ancestors, o), &recurring_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	url_value := o.Url.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImei)
	}
	(*obj).Auth = auth_entry
	(*obj).CertificateProfile = certificateProfile_value
	(*obj).Description = description_value
	(*obj).ExceptionList = exceptionList_pango_entries
	(*obj).Recurring = recurring_entry
	(*obj).Url = url_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeImeiAuthObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImeiAuth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
	if err != nil {
		diags.AddError("Failed to create encrypted values state key", err.Error())
		return diags
	}

	var password_value *string
	err = ev.StorePlaintextValue(valueKey, "solo", o.Password.ValueString())
	if err != nil {
		diags.AddError("Failed to manage encrypted values state", err.Error())
		return diags
	}
	password_value = o.Password.ValueStringPointer()
	username_value := o.Username.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImeiAuth)
	}
	(*obj).Password = password_value
	(*obj).Username = username_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeImeiRecurringObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImeiRecurring, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var daily_entry *extdynlist.TypeImeiRecurringDaily
	if o.Daily != nil {
		if *obj != nil && (*obj).Daily != nil {
			daily_entry = (*obj).Daily
		} else {
			daily_entry = new(extdynlist.TypeImeiRecurringDaily)
		}
		// ModelOrObject: Object
		diags.Append(o.Daily.CopyToPango(ctx, append(ancestors, o), &daily_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var fiveMinute_entry *extdynlist.TypeImeiRecurringFiveMinute
	if o.FiveMinute != nil {
		if *obj != nil && (*obj).FiveMinute != nil {
			fiveMinute_entry = (*obj).FiveMinute
		} else {
			fiveMinute_entry = new(extdynlist.TypeImeiRecurringFiveMinute)
		}
		// ModelOrObject: Object
		diags.Append(o.FiveMinute.CopyToPango(ctx, append(ancestors, o), &fiveMinute_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var hourly_entry *extdynlist.TypeImeiRecurringHourly
	if o.Hourly != nil {
		if *obj != nil && (*obj).Hourly != nil {
			hourly_entry = (*obj).Hourly
		} else {
			hourly_entry = new(extdynlist.TypeImeiRecurringHourly)
		}
		// ModelOrObject: Object
		diags.Append(o.Hourly.CopyToPango(ctx, append(ancestors, o), &hourly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var monthly_entry *extdynlist.TypeImeiRecurringMonthly
	if o.Monthly != nil {
		if *obj != nil && (*obj).Monthly != nil {
			monthly_entry = (*obj).Monthly
		} else {
			monthly_entry = new(extdynlist.TypeImeiRecurringMonthly)
		}
		// ModelOrObject: Object
		diags.Append(o.Monthly.CopyToPango(ctx, append(ancestors, o), &monthly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var weekly_entry *extdynlist.TypeImeiRecurringWeekly
	if o.Weekly != nil {
		if *obj != nil && (*obj).Weekly != nil {
			weekly_entry = (*obj).Weekly
		} else {
			weekly_entry = new(extdynlist.TypeImeiRecurringWeekly)
		}
		// ModelOrObject: Object
		diags.Append(o.Weekly.CopyToPango(ctx, append(ancestors, o), &weekly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImeiRecurring)
	}
	(*obj).Daily = daily_entry
	(*obj).FiveMinute = fiveMinute_entry
	(*obj).Hourly = hourly_entry
	(*obj).Monthly = monthly_entry
	(*obj).Weekly = weekly_entry

	return diags
}
func (o *ExternalDynamicListDataSourceTypeImeiRecurringDailyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImeiRecurringDaily, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImeiRecurringDaily)
	}
	(*obj).At = at_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeImeiRecurringFiveMinuteObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImeiRecurringFiveMinute, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImeiRecurringFiveMinute)
	}

	return diags
}
func (o *ExternalDynamicListDataSourceTypeImeiRecurringHourlyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImeiRecurringHourly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImeiRecurringHourly)
	}

	return diags
}
func (o *ExternalDynamicListDataSourceTypeImeiRecurringMonthlyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImeiRecurringMonthly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()
	dayOfMonth_value := o.DayOfMonth.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImeiRecurringMonthly)
	}
	(*obj).At = at_value
	(*obj).DayOfMonth = dayOfMonth_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeImeiRecurringWeeklyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImeiRecurringWeekly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()
	dayOfWeek_value := o.DayOfWeek.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImeiRecurringWeekly)
	}
	(*obj).At = at_value
	(*obj).DayOfWeek = dayOfWeek_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeImsiObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImsi, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var auth_entry *extdynlist.TypeImsiAuth
	if o.Auth != nil {
		if *obj != nil && (*obj).Auth != nil {
			auth_entry = (*obj).Auth
		} else {
			auth_entry = new(extdynlist.TypeImsiAuth)
		}
		// ModelOrObject: Object
		diags.Append(o.Auth.CopyToPango(ctx, append(ancestors, o), &auth_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	certificateProfile_value := o.CertificateProfile.ValueStringPointer()
	description_value := o.Description.ValueStringPointer()
	exceptionList_pango_entries := make([]string, 0)
	diags.Append(o.ExceptionList.ElementsAs(ctx, &exceptionList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var recurring_entry *extdynlist.TypeImsiRecurring
	if o.Recurring != nil {
		if *obj != nil && (*obj).Recurring != nil {
			recurring_entry = (*obj).Recurring
		} else {
			recurring_entry = new(extdynlist.TypeImsiRecurring)
		}
		// ModelOrObject: Object
		diags.Append(o.Recurring.CopyToPango(ctx, append(ancestors, o), &recurring_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	url_value := o.Url.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImsi)
	}
	(*obj).Auth = auth_entry
	(*obj).CertificateProfile = certificateProfile_value
	(*obj).Description = description_value
	(*obj).ExceptionList = exceptionList_pango_entries
	(*obj).Recurring = recurring_entry
	(*obj).Url = url_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeImsiAuthObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImsiAuth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
	if err != nil {
		diags.AddError("Failed to create encrypted values state key", err.Error())
		return diags
	}

	var password_value *string
	err = ev.StorePlaintextValue(valueKey, "solo", o.Password.ValueString())
	if err != nil {
		diags.AddError("Failed to manage encrypted values state", err.Error())
		return diags
	}
	password_value = o.Password.ValueStringPointer()
	username_value := o.Username.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImsiAuth)
	}
	(*obj).Password = password_value
	(*obj).Username = username_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeImsiRecurringObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImsiRecurring, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var daily_entry *extdynlist.TypeImsiRecurringDaily
	if o.Daily != nil {
		if *obj != nil && (*obj).Daily != nil {
			daily_entry = (*obj).Daily
		} else {
			daily_entry = new(extdynlist.TypeImsiRecurringDaily)
		}
		// ModelOrObject: Object
		diags.Append(o.Daily.CopyToPango(ctx, append(ancestors, o), &daily_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var fiveMinute_entry *extdynlist.TypeImsiRecurringFiveMinute
	if o.FiveMinute != nil {
		if *obj != nil && (*obj).FiveMinute != nil {
			fiveMinute_entry = (*obj).FiveMinute
		} else {
			fiveMinute_entry = new(extdynlist.TypeImsiRecurringFiveMinute)
		}
		// ModelOrObject: Object
		diags.Append(o.FiveMinute.CopyToPango(ctx, append(ancestors, o), &fiveMinute_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var hourly_entry *extdynlist.TypeImsiRecurringHourly
	if o.Hourly != nil {
		if *obj != nil && (*obj).Hourly != nil {
			hourly_entry = (*obj).Hourly
		} else {
			hourly_entry = new(extdynlist.TypeImsiRecurringHourly)
		}
		// ModelOrObject: Object
		diags.Append(o.Hourly.CopyToPango(ctx, append(ancestors, o), &hourly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var monthly_entry *extdynlist.TypeImsiRecurringMonthly
	if o.Monthly != nil {
		if *obj != nil && (*obj).Monthly != nil {
			monthly_entry = (*obj).Monthly
		} else {
			monthly_entry = new(extdynlist.TypeImsiRecurringMonthly)
		}
		// ModelOrObject: Object
		diags.Append(o.Monthly.CopyToPango(ctx, append(ancestors, o), &monthly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var weekly_entry *extdynlist.TypeImsiRecurringWeekly
	if o.Weekly != nil {
		if *obj != nil && (*obj).Weekly != nil {
			weekly_entry = (*obj).Weekly
		} else {
			weekly_entry = new(extdynlist.TypeImsiRecurringWeekly)
		}
		// ModelOrObject: Object
		diags.Append(o.Weekly.CopyToPango(ctx, append(ancestors, o), &weekly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImsiRecurring)
	}
	(*obj).Daily = daily_entry
	(*obj).FiveMinute = fiveMinute_entry
	(*obj).Hourly = hourly_entry
	(*obj).Monthly = monthly_entry
	(*obj).Weekly = weekly_entry

	return diags
}
func (o *ExternalDynamicListDataSourceTypeImsiRecurringDailyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImsiRecurringDaily, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImsiRecurringDaily)
	}
	(*obj).At = at_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeImsiRecurringFiveMinuteObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImsiRecurringFiveMinute, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImsiRecurringFiveMinute)
	}

	return diags
}
func (o *ExternalDynamicListDataSourceTypeImsiRecurringHourlyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImsiRecurringHourly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImsiRecurringHourly)
	}

	return diags
}
func (o *ExternalDynamicListDataSourceTypeImsiRecurringMonthlyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImsiRecurringMonthly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()
	dayOfMonth_value := o.DayOfMonth.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImsiRecurringMonthly)
	}
	(*obj).At = at_value
	(*obj).DayOfMonth = dayOfMonth_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeImsiRecurringWeeklyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImsiRecurringWeekly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()
	dayOfWeek_value := o.DayOfWeek.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImsiRecurringWeekly)
	}
	(*obj).At = at_value
	(*obj).DayOfWeek = dayOfWeek_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeIpObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeIp, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var auth_entry *extdynlist.TypeIpAuth
	if o.Auth != nil {
		if *obj != nil && (*obj).Auth != nil {
			auth_entry = (*obj).Auth
		} else {
			auth_entry = new(extdynlist.TypeIpAuth)
		}
		// ModelOrObject: Object
		diags.Append(o.Auth.CopyToPango(ctx, append(ancestors, o), &auth_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	certificateProfile_value := o.CertificateProfile.ValueStringPointer()
	description_value := o.Description.ValueStringPointer()
	exceptionList_pango_entries := make([]string, 0)
	diags.Append(o.ExceptionList.ElementsAs(ctx, &exceptionList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var recurring_entry *extdynlist.TypeIpRecurring
	if o.Recurring != nil {
		if *obj != nil && (*obj).Recurring != nil {
			recurring_entry = (*obj).Recurring
		} else {
			recurring_entry = new(extdynlist.TypeIpRecurring)
		}
		// ModelOrObject: Object
		diags.Append(o.Recurring.CopyToPango(ctx, append(ancestors, o), &recurring_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	url_value := o.Url.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeIp)
	}
	(*obj).Auth = auth_entry
	(*obj).CertificateProfile = certificateProfile_value
	(*obj).Description = description_value
	(*obj).ExceptionList = exceptionList_pango_entries
	(*obj).Recurring = recurring_entry
	(*obj).Url = url_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeIpAuthObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeIpAuth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
	if err != nil {
		diags.AddError("Failed to create encrypted values state key", err.Error())
		return diags
	}

	var password_value *string
	err = ev.StorePlaintextValue(valueKey, "solo", o.Password.ValueString())
	if err != nil {
		diags.AddError("Failed to manage encrypted values state", err.Error())
		return diags
	}
	password_value = o.Password.ValueStringPointer()
	username_value := o.Username.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeIpAuth)
	}
	(*obj).Password = password_value
	(*obj).Username = username_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeIpRecurringObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeIpRecurring, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var daily_entry *extdynlist.TypeIpRecurringDaily
	if o.Daily != nil {
		if *obj != nil && (*obj).Daily != nil {
			daily_entry = (*obj).Daily
		} else {
			daily_entry = new(extdynlist.TypeIpRecurringDaily)
		}
		// ModelOrObject: Object
		diags.Append(o.Daily.CopyToPango(ctx, append(ancestors, o), &daily_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var fiveMinute_entry *extdynlist.TypeIpRecurringFiveMinute
	if o.FiveMinute != nil {
		if *obj != nil && (*obj).FiveMinute != nil {
			fiveMinute_entry = (*obj).FiveMinute
		} else {
			fiveMinute_entry = new(extdynlist.TypeIpRecurringFiveMinute)
		}
		// ModelOrObject: Object
		diags.Append(o.FiveMinute.CopyToPango(ctx, append(ancestors, o), &fiveMinute_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var hourly_entry *extdynlist.TypeIpRecurringHourly
	if o.Hourly != nil {
		if *obj != nil && (*obj).Hourly != nil {
			hourly_entry = (*obj).Hourly
		} else {
			hourly_entry = new(extdynlist.TypeIpRecurringHourly)
		}
		// ModelOrObject: Object
		diags.Append(o.Hourly.CopyToPango(ctx, append(ancestors, o), &hourly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var monthly_entry *extdynlist.TypeIpRecurringMonthly
	if o.Monthly != nil {
		if *obj != nil && (*obj).Monthly != nil {
			monthly_entry = (*obj).Monthly
		} else {
			monthly_entry = new(extdynlist.TypeIpRecurringMonthly)
		}
		// ModelOrObject: Object
		diags.Append(o.Monthly.CopyToPango(ctx, append(ancestors, o), &monthly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var weekly_entry *extdynlist.TypeIpRecurringWeekly
	if o.Weekly != nil {
		if *obj != nil && (*obj).Weekly != nil {
			weekly_entry = (*obj).Weekly
		} else {
			weekly_entry = new(extdynlist.TypeIpRecurringWeekly)
		}
		// ModelOrObject: Object
		diags.Append(o.Weekly.CopyToPango(ctx, append(ancestors, o), &weekly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(extdynlist.TypeIpRecurring)
	}
	(*obj).Daily = daily_entry
	(*obj).FiveMinute = fiveMinute_entry
	(*obj).Hourly = hourly_entry
	(*obj).Monthly = monthly_entry
	(*obj).Weekly = weekly_entry

	return diags
}
func (o *ExternalDynamicListDataSourceTypeIpRecurringDailyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeIpRecurringDaily, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeIpRecurringDaily)
	}
	(*obj).At = at_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeIpRecurringFiveMinuteObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeIpRecurringFiveMinute, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(extdynlist.TypeIpRecurringFiveMinute)
	}

	return diags
}
func (o *ExternalDynamicListDataSourceTypeIpRecurringHourlyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeIpRecurringHourly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(extdynlist.TypeIpRecurringHourly)
	}

	return diags
}
func (o *ExternalDynamicListDataSourceTypeIpRecurringMonthlyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeIpRecurringMonthly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()
	dayOfMonth_value := o.DayOfMonth.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeIpRecurringMonthly)
	}
	(*obj).At = at_value
	(*obj).DayOfMonth = dayOfMonth_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeIpRecurringWeeklyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeIpRecurringWeekly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()
	dayOfWeek_value := o.DayOfWeek.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeIpRecurringWeekly)
	}
	(*obj).At = at_value
	(*obj).DayOfWeek = dayOfWeek_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypePredefinedIpObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypePredefinedIp, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	description_value := o.Description.ValueStringPointer()
	exceptionList_pango_entries := make([]string, 0)
	diags.Append(o.ExceptionList.ElementsAs(ctx, &exceptionList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	url_value := o.Url.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypePredefinedIp)
	}
	(*obj).Description = description_value
	(*obj).ExceptionList = exceptionList_pango_entries
	(*obj).Url = url_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypePredefinedUrlObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypePredefinedUrl, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	description_value := o.Description.ValueStringPointer()
	exceptionList_pango_entries := make([]string, 0)
	diags.Append(o.ExceptionList.ElementsAs(ctx, &exceptionList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	url_value := o.Url.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypePredefinedUrl)
	}
	(*obj).Description = description_value
	(*obj).ExceptionList = exceptionList_pango_entries
	(*obj).Url = url_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeUrlObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeUrl, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var auth_entry *extdynlist.TypeUrlAuth
	if o.Auth != nil {
		if *obj != nil && (*obj).Auth != nil {
			auth_entry = (*obj).Auth
		} else {
			auth_entry = new(extdynlist.TypeUrlAuth)
		}
		// ModelOrObject: Object
		diags.Append(o.Auth.CopyToPango(ctx, append(ancestors, o), &auth_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	certificateProfile_value := o.CertificateProfile.ValueStringPointer()
	description_value := o.Description.ValueStringPointer()
	exceptionList_pango_entries := make([]string, 0)
	diags.Append(o.ExceptionList.ElementsAs(ctx, &exceptionList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var recurring_entry *extdynlist.TypeUrlRecurring
	if o.Recurring != nil {
		if *obj != nil && (*obj).Recurring != nil {
			recurring_entry = (*obj).Recurring
		} else {
			recurring_entry = new(extdynlist.TypeUrlRecurring)
		}
		// ModelOrObject: Object
		diags.Append(o.Recurring.CopyToPango(ctx, append(ancestors, o), &recurring_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	url_value := o.Url.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeUrl)
	}
	(*obj).Auth = auth_entry
	(*obj).CertificateProfile = certificateProfile_value
	(*obj).Description = description_value
	(*obj).ExceptionList = exceptionList_pango_entries
	(*obj).Recurring = recurring_entry
	(*obj).Url = url_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeUrlAuthObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeUrlAuth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
	if err != nil {
		diags.AddError("Failed to create encrypted values state key", err.Error())
		return diags
	}

	var password_value *string
	err = ev.StorePlaintextValue(valueKey, "solo", o.Password.ValueString())
	if err != nil {
		diags.AddError("Failed to manage encrypted values state", err.Error())
		return diags
	}
	password_value = o.Password.ValueStringPointer()
	username_value := o.Username.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeUrlAuth)
	}
	(*obj).Password = password_value
	(*obj).Username = username_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeUrlRecurringObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeUrlRecurring, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var daily_entry *extdynlist.TypeUrlRecurringDaily
	if o.Daily != nil {
		if *obj != nil && (*obj).Daily != nil {
			daily_entry = (*obj).Daily
		} else {
			daily_entry = new(extdynlist.TypeUrlRecurringDaily)
		}
		// ModelOrObject: Object
		diags.Append(o.Daily.CopyToPango(ctx, append(ancestors, o), &daily_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var fiveMinute_entry *extdynlist.TypeUrlRecurringFiveMinute
	if o.FiveMinute != nil {
		if *obj != nil && (*obj).FiveMinute != nil {
			fiveMinute_entry = (*obj).FiveMinute
		} else {
			fiveMinute_entry = new(extdynlist.TypeUrlRecurringFiveMinute)
		}
		// ModelOrObject: Object
		diags.Append(o.FiveMinute.CopyToPango(ctx, append(ancestors, o), &fiveMinute_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var hourly_entry *extdynlist.TypeUrlRecurringHourly
	if o.Hourly != nil {
		if *obj != nil && (*obj).Hourly != nil {
			hourly_entry = (*obj).Hourly
		} else {
			hourly_entry = new(extdynlist.TypeUrlRecurringHourly)
		}
		// ModelOrObject: Object
		diags.Append(o.Hourly.CopyToPango(ctx, append(ancestors, o), &hourly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var monthly_entry *extdynlist.TypeUrlRecurringMonthly
	if o.Monthly != nil {
		if *obj != nil && (*obj).Monthly != nil {
			monthly_entry = (*obj).Monthly
		} else {
			monthly_entry = new(extdynlist.TypeUrlRecurringMonthly)
		}
		// ModelOrObject: Object
		diags.Append(o.Monthly.CopyToPango(ctx, append(ancestors, o), &monthly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var weekly_entry *extdynlist.TypeUrlRecurringWeekly
	if o.Weekly != nil {
		if *obj != nil && (*obj).Weekly != nil {
			weekly_entry = (*obj).Weekly
		} else {
			weekly_entry = new(extdynlist.TypeUrlRecurringWeekly)
		}
		// ModelOrObject: Object
		diags.Append(o.Weekly.CopyToPango(ctx, append(ancestors, o), &weekly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(extdynlist.TypeUrlRecurring)
	}
	(*obj).Daily = daily_entry
	(*obj).FiveMinute = fiveMinute_entry
	(*obj).Hourly = hourly_entry
	(*obj).Monthly = monthly_entry
	(*obj).Weekly = weekly_entry

	return diags
}
func (o *ExternalDynamicListDataSourceTypeUrlRecurringDailyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeUrlRecurringDaily, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeUrlRecurringDaily)
	}
	(*obj).At = at_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeUrlRecurringFiveMinuteObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeUrlRecurringFiveMinute, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(extdynlist.TypeUrlRecurringFiveMinute)
	}

	return diags
}
func (o *ExternalDynamicListDataSourceTypeUrlRecurringHourlyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeUrlRecurringHourly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(extdynlist.TypeUrlRecurringHourly)
	}

	return diags
}
func (o *ExternalDynamicListDataSourceTypeUrlRecurringMonthlyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeUrlRecurringMonthly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()
	dayOfMonth_value := o.DayOfMonth.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeUrlRecurringMonthly)
	}
	(*obj).At = at_value
	(*obj).DayOfMonth = dayOfMonth_value

	return diags
}
func (o *ExternalDynamicListDataSourceTypeUrlRecurringWeeklyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeUrlRecurringWeekly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()
	dayOfWeek_value := o.DayOfWeek.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeUrlRecurringWeekly)
	}
	(*obj).At = at_value
	(*obj).DayOfWeek = dayOfWeek_value

	return diags
}

func (o *ExternalDynamicListDataSourceModel) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var type_object *ExternalDynamicListDataSourceTypeObject
	if obj.Type != nil {
		type_object = new(ExternalDynamicListDataSourceTypeObject)
		diags.Append(type_object.CopyFromPango(ctx, ancestors, obj.Type, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var disableOverride_value types.String
	if obj.DisableOverride != nil {
		disableOverride_value = types.StringValue(*obj.DisableOverride)
	}
	o.Name = types.StringValue(obj.Name)
	o.DisableOverride = disableOverride_value
	o.Type = type_object

	return diags
}

func (o *ExternalDynamicListDataSourceTypeObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.Type, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var domain_object *ExternalDynamicListDataSourceTypeDomainObject
	if obj.Domain != nil {
		domain_object = new(ExternalDynamicListDataSourceTypeDomainObject)
		diags.Append(domain_object.CopyFromPango(ctx, append(ancestors, o), obj.Domain, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var imei_object *ExternalDynamicListDataSourceTypeImeiObject
	if obj.Imei != nil {
		imei_object = new(ExternalDynamicListDataSourceTypeImeiObject)
		diags.Append(imei_object.CopyFromPango(ctx, append(ancestors, o), obj.Imei, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var imsi_object *ExternalDynamicListDataSourceTypeImsiObject
	if obj.Imsi != nil {
		imsi_object = new(ExternalDynamicListDataSourceTypeImsiObject)
		diags.Append(imsi_object.CopyFromPango(ctx, append(ancestors, o), obj.Imsi, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var ip_object *ExternalDynamicListDataSourceTypeIpObject
	if obj.Ip != nil {
		ip_object = new(ExternalDynamicListDataSourceTypeIpObject)
		diags.Append(ip_object.CopyFromPango(ctx, append(ancestors, o), obj.Ip, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var predefinedIp_object *ExternalDynamicListDataSourceTypePredefinedIpObject
	if obj.PredefinedIp != nil {
		predefinedIp_object = new(ExternalDynamicListDataSourceTypePredefinedIpObject)
		diags.Append(predefinedIp_object.CopyFromPango(ctx, append(ancestors, o), obj.PredefinedIp, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var predefinedUrl_object *ExternalDynamicListDataSourceTypePredefinedUrlObject
	if obj.PredefinedUrl != nil {
		predefinedUrl_object = new(ExternalDynamicListDataSourceTypePredefinedUrlObject)
		diags.Append(predefinedUrl_object.CopyFromPango(ctx, append(ancestors, o), obj.PredefinedUrl, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var url_object *ExternalDynamicListDataSourceTypeUrlObject
	if obj.Url != nil {
		url_object = new(ExternalDynamicListDataSourceTypeUrlObject)
		diags.Append(url_object.CopyFromPango(ctx, append(ancestors, o), obj.Url, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Domain = domain_object
	o.Imei = imei_object
	o.Imsi = imsi_object
	o.Ip = ip_object
	o.PredefinedIp = predefinedIp_object
	o.PredefinedUrl = predefinedUrl_object
	o.Url = url_object

	return diags
}

func (o *ExternalDynamicListDataSourceTypeDomainObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeDomain, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var exceptionList_list types.List
	{
		var list_diags diag.Diagnostics
		exceptionList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ExceptionList)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var auth_object *ExternalDynamicListDataSourceTypeDomainAuthObject
	if obj.Auth != nil {
		auth_object = new(ExternalDynamicListDataSourceTypeDomainAuthObject)
		diags.Append(auth_object.CopyFromPango(ctx, append(ancestors, o), obj.Auth, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var recurring_object *ExternalDynamicListDataSourceTypeDomainRecurringObject
	if obj.Recurring != nil {
		recurring_object = new(ExternalDynamicListDataSourceTypeDomainRecurringObject)
		diags.Append(recurring_object.CopyFromPango(ctx, append(ancestors, o), obj.Recurring, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var certificateProfile_value types.String
	if obj.CertificateProfile != nil {
		certificateProfile_value = types.StringValue(*obj.CertificateProfile)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var expandDomain_value types.Bool
	if obj.ExpandDomain != nil {
		expandDomain_value = types.BoolValue(*obj.ExpandDomain)
	}
	var url_value types.String
	if obj.Url != nil {
		url_value = types.StringValue(*obj.Url)
	}
	o.Auth = auth_object
	o.CertificateProfile = certificateProfile_value
	o.Description = description_value
	o.ExceptionList = exceptionList_list
	o.ExpandDomain = expandDomain_value
	o.Recurring = recurring_object
	o.Url = url_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeDomainAuthObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeDomainAuth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var password_value types.String
	if obj.Password != nil {
		valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
		if err != nil {
			diags.AddError("Failed to create encrypted values state key", err.Error())
			return diags
		}

		if evFromState, found := ev.GetEncryptedValue(valueKey); found && ev.PreferServerState() && *obj.Password != evFromState {
			password_value = types.StringPointerValue(obj.Password)
		} else if value, found := ev.GetPlaintextValue(valueKey); found {
			password_value = types.StringValue(value)
		} else {
			diags.AddError("Failed to read encrypted values state", fmt.Sprintf("Missing plaintext value for %s", valueKey))
			return diags
		}

		if !ev.PreferServerState() {
			err = ev.StoreEncryptedValue(valueKey, "solo", *obj.Password)
			if err != nil {
				diags.AddError("Failed to store encrypted values state", err.Error())
				return diags
			}
		}
	}
	var username_value types.String
	if obj.Username != nil {
		username_value = types.StringValue(*obj.Username)
	}
	o.Password = password_value
	o.Username = username_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeDomainRecurringObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeDomainRecurring, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var daily_object *ExternalDynamicListDataSourceTypeDomainRecurringDailyObject
	if obj.Daily != nil {
		daily_object = new(ExternalDynamicListDataSourceTypeDomainRecurringDailyObject)
		diags.Append(daily_object.CopyFromPango(ctx, append(ancestors, o), obj.Daily, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var fiveMinute_object *ExternalDynamicListDataSourceTypeDomainRecurringFiveMinuteObject
	if obj.FiveMinute != nil {
		fiveMinute_object = new(ExternalDynamicListDataSourceTypeDomainRecurringFiveMinuteObject)
		diags.Append(fiveMinute_object.CopyFromPango(ctx, append(ancestors, o), obj.FiveMinute, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var hourly_object *ExternalDynamicListDataSourceTypeDomainRecurringHourlyObject
	if obj.Hourly != nil {
		hourly_object = new(ExternalDynamicListDataSourceTypeDomainRecurringHourlyObject)
		diags.Append(hourly_object.CopyFromPango(ctx, append(ancestors, o), obj.Hourly, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var monthly_object *ExternalDynamicListDataSourceTypeDomainRecurringMonthlyObject
	if obj.Monthly != nil {
		monthly_object = new(ExternalDynamicListDataSourceTypeDomainRecurringMonthlyObject)
		diags.Append(monthly_object.CopyFromPango(ctx, append(ancestors, o), obj.Monthly, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var weekly_object *ExternalDynamicListDataSourceTypeDomainRecurringWeeklyObject
	if obj.Weekly != nil {
		weekly_object = new(ExternalDynamicListDataSourceTypeDomainRecurringWeeklyObject)
		diags.Append(weekly_object.CopyFromPango(ctx, append(ancestors, o), obj.Weekly, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Daily = daily_object
	o.FiveMinute = fiveMinute_object
	o.Hourly = hourly_object
	o.Monthly = monthly_object
	o.Weekly = weekly_object

	return diags
}

func (o *ExternalDynamicListDataSourceTypeDomainRecurringDailyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeDomainRecurringDaily, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	o.At = at_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeDomainRecurringFiveMinuteObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeDomainRecurringFiveMinute, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *ExternalDynamicListDataSourceTypeDomainRecurringHourlyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeDomainRecurringHourly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *ExternalDynamicListDataSourceTypeDomainRecurringMonthlyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeDomainRecurringMonthly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	var dayOfMonth_value types.Int64
	if obj.DayOfMonth != nil {
		dayOfMonth_value = types.Int64Value(*obj.DayOfMonth)
	}
	o.At = at_value
	o.DayOfMonth = dayOfMonth_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeDomainRecurringWeeklyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeDomainRecurringWeekly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	var dayOfWeek_value types.String
	if obj.DayOfWeek != nil {
		dayOfWeek_value = types.StringValue(*obj.DayOfWeek)
	}
	o.At = at_value
	o.DayOfWeek = dayOfWeek_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeImeiObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImei, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var exceptionList_list types.List
	{
		var list_diags diag.Diagnostics
		exceptionList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ExceptionList)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var auth_object *ExternalDynamicListDataSourceTypeImeiAuthObject
	if obj.Auth != nil {
		auth_object = new(ExternalDynamicListDataSourceTypeImeiAuthObject)
		diags.Append(auth_object.CopyFromPango(ctx, append(ancestors, o), obj.Auth, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var recurring_object *ExternalDynamicListDataSourceTypeImeiRecurringObject
	if obj.Recurring != nil {
		recurring_object = new(ExternalDynamicListDataSourceTypeImeiRecurringObject)
		diags.Append(recurring_object.CopyFromPango(ctx, append(ancestors, o), obj.Recurring, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var certificateProfile_value types.String
	if obj.CertificateProfile != nil {
		certificateProfile_value = types.StringValue(*obj.CertificateProfile)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var url_value types.String
	if obj.Url != nil {
		url_value = types.StringValue(*obj.Url)
	}
	o.Auth = auth_object
	o.CertificateProfile = certificateProfile_value
	o.Description = description_value
	o.ExceptionList = exceptionList_list
	o.Recurring = recurring_object
	o.Url = url_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeImeiAuthObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImeiAuth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var password_value types.String
	if obj.Password != nil {
		valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
		if err != nil {
			diags.AddError("Failed to create encrypted values state key", err.Error())
			return diags
		}

		if evFromState, found := ev.GetEncryptedValue(valueKey); found && ev.PreferServerState() && *obj.Password != evFromState {
			password_value = types.StringPointerValue(obj.Password)
		} else if value, found := ev.GetPlaintextValue(valueKey); found {
			password_value = types.StringValue(value)
		} else {
			diags.AddError("Failed to read encrypted values state", fmt.Sprintf("Missing plaintext value for %s", valueKey))
			return diags
		}

		if !ev.PreferServerState() {
			err = ev.StoreEncryptedValue(valueKey, "solo", *obj.Password)
			if err != nil {
				diags.AddError("Failed to store encrypted values state", err.Error())
				return diags
			}
		}
	}
	var username_value types.String
	if obj.Username != nil {
		username_value = types.StringValue(*obj.Username)
	}
	o.Password = password_value
	o.Username = username_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeImeiRecurringObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImeiRecurring, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var daily_object *ExternalDynamicListDataSourceTypeImeiRecurringDailyObject
	if obj.Daily != nil {
		daily_object = new(ExternalDynamicListDataSourceTypeImeiRecurringDailyObject)
		diags.Append(daily_object.CopyFromPango(ctx, append(ancestors, o), obj.Daily, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var fiveMinute_object *ExternalDynamicListDataSourceTypeImeiRecurringFiveMinuteObject
	if obj.FiveMinute != nil {
		fiveMinute_object = new(ExternalDynamicListDataSourceTypeImeiRecurringFiveMinuteObject)
		diags.Append(fiveMinute_object.CopyFromPango(ctx, append(ancestors, o), obj.FiveMinute, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var hourly_object *ExternalDynamicListDataSourceTypeImeiRecurringHourlyObject
	if obj.Hourly != nil {
		hourly_object = new(ExternalDynamicListDataSourceTypeImeiRecurringHourlyObject)
		diags.Append(hourly_object.CopyFromPango(ctx, append(ancestors, o), obj.Hourly, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var monthly_object *ExternalDynamicListDataSourceTypeImeiRecurringMonthlyObject
	if obj.Monthly != nil {
		monthly_object = new(ExternalDynamicListDataSourceTypeImeiRecurringMonthlyObject)
		diags.Append(monthly_object.CopyFromPango(ctx, append(ancestors, o), obj.Monthly, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var weekly_object *ExternalDynamicListDataSourceTypeImeiRecurringWeeklyObject
	if obj.Weekly != nil {
		weekly_object = new(ExternalDynamicListDataSourceTypeImeiRecurringWeeklyObject)
		diags.Append(weekly_object.CopyFromPango(ctx, append(ancestors, o), obj.Weekly, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Daily = daily_object
	o.FiveMinute = fiveMinute_object
	o.Hourly = hourly_object
	o.Monthly = monthly_object
	o.Weekly = weekly_object

	return diags
}

func (o *ExternalDynamicListDataSourceTypeImeiRecurringDailyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImeiRecurringDaily, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	o.At = at_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeImeiRecurringFiveMinuteObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImeiRecurringFiveMinute, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *ExternalDynamicListDataSourceTypeImeiRecurringHourlyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImeiRecurringHourly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *ExternalDynamicListDataSourceTypeImeiRecurringMonthlyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImeiRecurringMonthly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	var dayOfMonth_value types.Int64
	if obj.DayOfMonth != nil {
		dayOfMonth_value = types.Int64Value(*obj.DayOfMonth)
	}
	o.At = at_value
	o.DayOfMonth = dayOfMonth_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeImeiRecurringWeeklyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImeiRecurringWeekly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	var dayOfWeek_value types.String
	if obj.DayOfWeek != nil {
		dayOfWeek_value = types.StringValue(*obj.DayOfWeek)
	}
	o.At = at_value
	o.DayOfWeek = dayOfWeek_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeImsiObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImsi, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var exceptionList_list types.List
	{
		var list_diags diag.Diagnostics
		exceptionList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ExceptionList)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var auth_object *ExternalDynamicListDataSourceTypeImsiAuthObject
	if obj.Auth != nil {
		auth_object = new(ExternalDynamicListDataSourceTypeImsiAuthObject)
		diags.Append(auth_object.CopyFromPango(ctx, append(ancestors, o), obj.Auth, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var recurring_object *ExternalDynamicListDataSourceTypeImsiRecurringObject
	if obj.Recurring != nil {
		recurring_object = new(ExternalDynamicListDataSourceTypeImsiRecurringObject)
		diags.Append(recurring_object.CopyFromPango(ctx, append(ancestors, o), obj.Recurring, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var certificateProfile_value types.String
	if obj.CertificateProfile != nil {
		certificateProfile_value = types.StringValue(*obj.CertificateProfile)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var url_value types.String
	if obj.Url != nil {
		url_value = types.StringValue(*obj.Url)
	}
	o.Auth = auth_object
	o.CertificateProfile = certificateProfile_value
	o.Description = description_value
	o.ExceptionList = exceptionList_list
	o.Recurring = recurring_object
	o.Url = url_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeImsiAuthObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImsiAuth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var password_value types.String
	if obj.Password != nil {
		valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
		if err != nil {
			diags.AddError("Failed to create encrypted values state key", err.Error())
			return diags
		}

		if evFromState, found := ev.GetEncryptedValue(valueKey); found && ev.PreferServerState() && *obj.Password != evFromState {
			password_value = types.StringPointerValue(obj.Password)
		} else if value, found := ev.GetPlaintextValue(valueKey); found {
			password_value = types.StringValue(value)
		} else {
			diags.AddError("Failed to read encrypted values state", fmt.Sprintf("Missing plaintext value for %s", valueKey))
			return diags
		}

		if !ev.PreferServerState() {
			err = ev.StoreEncryptedValue(valueKey, "solo", *obj.Password)
			if err != nil {
				diags.AddError("Failed to store encrypted values state", err.Error())
				return diags
			}
		}
	}
	var username_value types.String
	if obj.Username != nil {
		username_value = types.StringValue(*obj.Username)
	}
	o.Password = password_value
	o.Username = username_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeImsiRecurringObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImsiRecurring, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var daily_object *ExternalDynamicListDataSourceTypeImsiRecurringDailyObject
	if obj.Daily != nil {
		daily_object = new(ExternalDynamicListDataSourceTypeImsiRecurringDailyObject)
		diags.Append(daily_object.CopyFromPango(ctx, append(ancestors, o), obj.Daily, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var fiveMinute_object *ExternalDynamicListDataSourceTypeImsiRecurringFiveMinuteObject
	if obj.FiveMinute != nil {
		fiveMinute_object = new(ExternalDynamicListDataSourceTypeImsiRecurringFiveMinuteObject)
		diags.Append(fiveMinute_object.CopyFromPango(ctx, append(ancestors, o), obj.FiveMinute, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var hourly_object *ExternalDynamicListDataSourceTypeImsiRecurringHourlyObject
	if obj.Hourly != nil {
		hourly_object = new(ExternalDynamicListDataSourceTypeImsiRecurringHourlyObject)
		diags.Append(hourly_object.CopyFromPango(ctx, append(ancestors, o), obj.Hourly, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var monthly_object *ExternalDynamicListDataSourceTypeImsiRecurringMonthlyObject
	if obj.Monthly != nil {
		monthly_object = new(ExternalDynamicListDataSourceTypeImsiRecurringMonthlyObject)
		diags.Append(monthly_object.CopyFromPango(ctx, append(ancestors, o), obj.Monthly, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var weekly_object *ExternalDynamicListDataSourceTypeImsiRecurringWeeklyObject
	if obj.Weekly != nil {
		weekly_object = new(ExternalDynamicListDataSourceTypeImsiRecurringWeeklyObject)
		diags.Append(weekly_object.CopyFromPango(ctx, append(ancestors, o), obj.Weekly, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Daily = daily_object
	o.FiveMinute = fiveMinute_object
	o.Hourly = hourly_object
	o.Monthly = monthly_object
	o.Weekly = weekly_object

	return diags
}

func (o *ExternalDynamicListDataSourceTypeImsiRecurringDailyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImsiRecurringDaily, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	o.At = at_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeImsiRecurringFiveMinuteObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImsiRecurringFiveMinute, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *ExternalDynamicListDataSourceTypeImsiRecurringHourlyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImsiRecurringHourly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *ExternalDynamicListDataSourceTypeImsiRecurringMonthlyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImsiRecurringMonthly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	var dayOfMonth_value types.Int64
	if obj.DayOfMonth != nil {
		dayOfMonth_value = types.Int64Value(*obj.DayOfMonth)
	}
	o.At = at_value
	o.DayOfMonth = dayOfMonth_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeImsiRecurringWeeklyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImsiRecurringWeekly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	var dayOfWeek_value types.String
	if obj.DayOfWeek != nil {
		dayOfWeek_value = types.StringValue(*obj.DayOfWeek)
	}
	o.At = at_value
	o.DayOfWeek = dayOfWeek_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeIpObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeIp, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var exceptionList_list types.List
	{
		var list_diags diag.Diagnostics
		exceptionList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ExceptionList)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var auth_object *ExternalDynamicListDataSourceTypeIpAuthObject
	if obj.Auth != nil {
		auth_object = new(ExternalDynamicListDataSourceTypeIpAuthObject)
		diags.Append(auth_object.CopyFromPango(ctx, append(ancestors, o), obj.Auth, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var recurring_object *ExternalDynamicListDataSourceTypeIpRecurringObject
	if obj.Recurring != nil {
		recurring_object = new(ExternalDynamicListDataSourceTypeIpRecurringObject)
		diags.Append(recurring_object.CopyFromPango(ctx, append(ancestors, o), obj.Recurring, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var certificateProfile_value types.String
	if obj.CertificateProfile != nil {
		certificateProfile_value = types.StringValue(*obj.CertificateProfile)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var url_value types.String
	if obj.Url != nil {
		url_value = types.StringValue(*obj.Url)
	}
	o.Auth = auth_object
	o.CertificateProfile = certificateProfile_value
	o.Description = description_value
	o.ExceptionList = exceptionList_list
	o.Recurring = recurring_object
	o.Url = url_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeIpAuthObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeIpAuth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var password_value types.String
	if obj.Password != nil {
		valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
		if err != nil {
			diags.AddError("Failed to create encrypted values state key", err.Error())
			return diags
		}

		if evFromState, found := ev.GetEncryptedValue(valueKey); found && ev.PreferServerState() && *obj.Password != evFromState {
			password_value = types.StringPointerValue(obj.Password)
		} else if value, found := ev.GetPlaintextValue(valueKey); found {
			password_value = types.StringValue(value)
		} else {
			diags.AddError("Failed to read encrypted values state", fmt.Sprintf("Missing plaintext value for %s", valueKey))
			return diags
		}

		if !ev.PreferServerState() {
			err = ev.StoreEncryptedValue(valueKey, "solo", *obj.Password)
			if err != nil {
				diags.AddError("Failed to store encrypted values state", err.Error())
				return diags
			}
		}
	}
	var username_value types.String
	if obj.Username != nil {
		username_value = types.StringValue(*obj.Username)
	}
	o.Password = password_value
	o.Username = username_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeIpRecurringObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeIpRecurring, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var daily_object *ExternalDynamicListDataSourceTypeIpRecurringDailyObject
	if obj.Daily != nil {
		daily_object = new(ExternalDynamicListDataSourceTypeIpRecurringDailyObject)
		diags.Append(daily_object.CopyFromPango(ctx, append(ancestors, o), obj.Daily, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var fiveMinute_object *ExternalDynamicListDataSourceTypeIpRecurringFiveMinuteObject
	if obj.FiveMinute != nil {
		fiveMinute_object = new(ExternalDynamicListDataSourceTypeIpRecurringFiveMinuteObject)
		diags.Append(fiveMinute_object.CopyFromPango(ctx, append(ancestors, o), obj.FiveMinute, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var hourly_object *ExternalDynamicListDataSourceTypeIpRecurringHourlyObject
	if obj.Hourly != nil {
		hourly_object = new(ExternalDynamicListDataSourceTypeIpRecurringHourlyObject)
		diags.Append(hourly_object.CopyFromPango(ctx, append(ancestors, o), obj.Hourly, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var monthly_object *ExternalDynamicListDataSourceTypeIpRecurringMonthlyObject
	if obj.Monthly != nil {
		monthly_object = new(ExternalDynamicListDataSourceTypeIpRecurringMonthlyObject)
		diags.Append(monthly_object.CopyFromPango(ctx, append(ancestors, o), obj.Monthly, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var weekly_object *ExternalDynamicListDataSourceTypeIpRecurringWeeklyObject
	if obj.Weekly != nil {
		weekly_object = new(ExternalDynamicListDataSourceTypeIpRecurringWeeklyObject)
		diags.Append(weekly_object.CopyFromPango(ctx, append(ancestors, o), obj.Weekly, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Daily = daily_object
	o.FiveMinute = fiveMinute_object
	o.Hourly = hourly_object
	o.Monthly = monthly_object
	o.Weekly = weekly_object

	return diags
}

func (o *ExternalDynamicListDataSourceTypeIpRecurringDailyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeIpRecurringDaily, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	o.At = at_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeIpRecurringFiveMinuteObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeIpRecurringFiveMinute, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *ExternalDynamicListDataSourceTypeIpRecurringHourlyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeIpRecurringHourly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *ExternalDynamicListDataSourceTypeIpRecurringMonthlyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeIpRecurringMonthly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	var dayOfMonth_value types.Int64
	if obj.DayOfMonth != nil {
		dayOfMonth_value = types.Int64Value(*obj.DayOfMonth)
	}
	o.At = at_value
	o.DayOfMonth = dayOfMonth_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeIpRecurringWeeklyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeIpRecurringWeekly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	var dayOfWeek_value types.String
	if obj.DayOfWeek != nil {
		dayOfWeek_value = types.StringValue(*obj.DayOfWeek)
	}
	o.At = at_value
	o.DayOfWeek = dayOfWeek_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypePredefinedIpObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypePredefinedIp, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var exceptionList_list types.List
	{
		var list_diags diag.Diagnostics
		exceptionList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ExceptionList)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}

	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var url_value types.String
	if obj.Url != nil {
		url_value = types.StringValue(*obj.Url)
	}
	o.Description = description_value
	o.ExceptionList = exceptionList_list
	o.Url = url_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypePredefinedUrlObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypePredefinedUrl, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var exceptionList_list types.List
	{
		var list_diags diag.Diagnostics
		exceptionList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ExceptionList)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}

	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var url_value types.String
	if obj.Url != nil {
		url_value = types.StringValue(*obj.Url)
	}
	o.Description = description_value
	o.ExceptionList = exceptionList_list
	o.Url = url_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeUrlObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeUrl, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var exceptionList_list types.List
	{
		var list_diags diag.Diagnostics
		exceptionList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ExceptionList)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var auth_object *ExternalDynamicListDataSourceTypeUrlAuthObject
	if obj.Auth != nil {
		auth_object = new(ExternalDynamicListDataSourceTypeUrlAuthObject)
		diags.Append(auth_object.CopyFromPango(ctx, append(ancestors, o), obj.Auth, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var recurring_object *ExternalDynamicListDataSourceTypeUrlRecurringObject
	if obj.Recurring != nil {
		recurring_object = new(ExternalDynamicListDataSourceTypeUrlRecurringObject)
		diags.Append(recurring_object.CopyFromPango(ctx, append(ancestors, o), obj.Recurring, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var certificateProfile_value types.String
	if obj.CertificateProfile != nil {
		certificateProfile_value = types.StringValue(*obj.CertificateProfile)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var url_value types.String
	if obj.Url != nil {
		url_value = types.StringValue(*obj.Url)
	}
	o.Auth = auth_object
	o.CertificateProfile = certificateProfile_value
	o.Description = description_value
	o.ExceptionList = exceptionList_list
	o.Recurring = recurring_object
	o.Url = url_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeUrlAuthObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeUrlAuth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var password_value types.String
	if obj.Password != nil {
		valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
		if err != nil {
			diags.AddError("Failed to create encrypted values state key", err.Error())
			return diags
		}

		if evFromState, found := ev.GetEncryptedValue(valueKey); found && ev.PreferServerState() && *obj.Password != evFromState {
			password_value = types.StringPointerValue(obj.Password)
		} else if value, found := ev.GetPlaintextValue(valueKey); found {
			password_value = types.StringValue(value)
		} else {
			diags.AddError("Failed to read encrypted values state", fmt.Sprintf("Missing plaintext value for %s", valueKey))
			return diags
		}

		if !ev.PreferServerState() {
			err = ev.StoreEncryptedValue(valueKey, "solo", *obj.Password)
			if err != nil {
				diags.AddError("Failed to store encrypted values state", err.Error())
				return diags
			}
		}
	}
	var username_value types.String
	if obj.Username != nil {
		username_value = types.StringValue(*obj.Username)
	}
	o.Password = password_value
	o.Username = username_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeUrlRecurringObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeUrlRecurring, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var daily_object *ExternalDynamicListDataSourceTypeUrlRecurringDailyObject
	if obj.Daily != nil {
		daily_object = new(ExternalDynamicListDataSourceTypeUrlRecurringDailyObject)
		diags.Append(daily_object.CopyFromPango(ctx, append(ancestors, o), obj.Daily, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var fiveMinute_object *ExternalDynamicListDataSourceTypeUrlRecurringFiveMinuteObject
	if obj.FiveMinute != nil {
		fiveMinute_object = new(ExternalDynamicListDataSourceTypeUrlRecurringFiveMinuteObject)
		diags.Append(fiveMinute_object.CopyFromPango(ctx, append(ancestors, o), obj.FiveMinute, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var hourly_object *ExternalDynamicListDataSourceTypeUrlRecurringHourlyObject
	if obj.Hourly != nil {
		hourly_object = new(ExternalDynamicListDataSourceTypeUrlRecurringHourlyObject)
		diags.Append(hourly_object.CopyFromPango(ctx, append(ancestors, o), obj.Hourly, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var monthly_object *ExternalDynamicListDataSourceTypeUrlRecurringMonthlyObject
	if obj.Monthly != nil {
		monthly_object = new(ExternalDynamicListDataSourceTypeUrlRecurringMonthlyObject)
		diags.Append(monthly_object.CopyFromPango(ctx, append(ancestors, o), obj.Monthly, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var weekly_object *ExternalDynamicListDataSourceTypeUrlRecurringWeeklyObject
	if obj.Weekly != nil {
		weekly_object = new(ExternalDynamicListDataSourceTypeUrlRecurringWeeklyObject)
		diags.Append(weekly_object.CopyFromPango(ctx, append(ancestors, o), obj.Weekly, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Daily = daily_object
	o.FiveMinute = fiveMinute_object
	o.Hourly = hourly_object
	o.Monthly = monthly_object
	o.Weekly = weekly_object

	return diags
}

func (o *ExternalDynamicListDataSourceTypeUrlRecurringDailyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeUrlRecurringDaily, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	o.At = at_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeUrlRecurringFiveMinuteObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeUrlRecurringFiveMinute, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *ExternalDynamicListDataSourceTypeUrlRecurringHourlyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeUrlRecurringHourly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *ExternalDynamicListDataSourceTypeUrlRecurringMonthlyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeUrlRecurringMonthly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	var dayOfMonth_value types.Int64
	if obj.DayOfMonth != nil {
		dayOfMonth_value = types.Int64Value(*obj.DayOfMonth)
	}
	o.At = at_value
	o.DayOfMonth = dayOfMonth_value

	return diags
}

func (o *ExternalDynamicListDataSourceTypeUrlRecurringWeeklyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeUrlRecurringWeekly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	var dayOfWeek_value types.String
	if obj.DayOfWeek != nil {
		dayOfWeek_value = types.StringValue(*obj.DayOfWeek)
	}
	o.At = at_value
	o.DayOfWeek = dayOfWeek_value

	return diags
}

func (o *ExternalDynamicListDataSourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	return components, nil
}

func ExternalDynamicListDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": ExternalDynamicListDataSourceLocationSchema(),

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"disable_override": dsschema.StringAttribute{
				Description: "disable object override in child device groups",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"type": ExternalDynamicListDataSourceTypeSchema(),
		},
	}
}

func (o *ExternalDynamicListDataSourceModel) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"domain": ExternalDynamicListDataSourceTypeDomainSchema(),

			"imei": ExternalDynamicListDataSourceTypeImeiSchema(),

			"imsi": ExternalDynamicListDataSourceTypeImsiSchema(),

			"ip": ExternalDynamicListDataSourceTypeIpSchema(),

			"predefined_ip": ExternalDynamicListDataSourceTypePredefinedIpSchema(),

			"predefined_url": ExternalDynamicListDataSourceTypePredefinedUrlSchema(),

			"url": ExternalDynamicListDataSourceTypeUrlSchema(),
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeDomainSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("domain"),
				path.MatchRelative().AtParent().AtName("imei"),
				path.MatchRelative().AtParent().AtName("imsi"),
				path.MatchRelative().AtParent().AtName("ip"),
				path.MatchRelative().AtParent().AtName("predefined_ip"),
				path.MatchRelative().AtParent().AtName("predefined_url"),
				path.MatchRelative().AtParent().AtName("url"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"auth": ExternalDynamicListDataSourceTypeDomainAuthSchema(),

			"certificate_profile": dsschema.StringAttribute{
				Description: "Profile for authenticating client certificates",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"description": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"exception_list": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"expand_domain": dsschema.BoolAttribute{
				Description: "Enable/Disable expand domain",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"recurring": ExternalDynamicListDataSourceTypeDomainRecurringSchema(),

			"url": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeDomainObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeDomainSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeDomainAuthSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"password": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},

			"username": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeDomainAuthObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeDomainAuthSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeDomainRecurringSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"daily": ExternalDynamicListDataSourceTypeDomainRecurringDailySchema(),

			"five_minute": ExternalDynamicListDataSourceTypeDomainRecurringFiveMinuteSchema(),

			"hourly": ExternalDynamicListDataSourceTypeDomainRecurringHourlySchema(),

			"monthly": ExternalDynamicListDataSourceTypeDomainRecurringMonthlySchema(),

			"weekly": ExternalDynamicListDataSourceTypeDomainRecurringWeeklySchema(),
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeDomainRecurringObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeDomainRecurringSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeDomainRecurringDailySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"at": dsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeDomainRecurringDailyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeDomainRecurringDailySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeDomainRecurringFiveMinuteSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *ExternalDynamicListDataSourceTypeDomainRecurringFiveMinuteObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeDomainRecurringFiveMinuteSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeDomainRecurringHourlySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *ExternalDynamicListDataSourceTypeDomainRecurringHourlyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeDomainRecurringHourlySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeDomainRecurringMonthlySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"at": dsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"day_of_month": dsschema.Int64Attribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeDomainRecurringMonthlyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeDomainRecurringMonthlySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeDomainRecurringWeeklySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"at": dsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"day_of_week": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeDomainRecurringWeeklyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeDomainRecurringWeeklySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeImeiSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("domain"),
				path.MatchRelative().AtParent().AtName("imei"),
				path.MatchRelative().AtParent().AtName("imsi"),
				path.MatchRelative().AtParent().AtName("ip"),
				path.MatchRelative().AtParent().AtName("predefined_ip"),
				path.MatchRelative().AtParent().AtName("predefined_url"),
				path.MatchRelative().AtParent().AtName("url"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"auth": ExternalDynamicListDataSourceTypeImeiAuthSchema(),

			"certificate_profile": dsschema.StringAttribute{
				Description: "Profile for authenticating client certificates",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"description": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"exception_list": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"recurring": ExternalDynamicListDataSourceTypeImeiRecurringSchema(),

			"url": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeImeiObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeImeiSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeImeiAuthSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"password": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},

			"username": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeImeiAuthObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeImeiAuthSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeImeiRecurringSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"daily": ExternalDynamicListDataSourceTypeImeiRecurringDailySchema(),

			"five_minute": ExternalDynamicListDataSourceTypeImeiRecurringFiveMinuteSchema(),

			"hourly": ExternalDynamicListDataSourceTypeImeiRecurringHourlySchema(),

			"monthly": ExternalDynamicListDataSourceTypeImeiRecurringMonthlySchema(),

			"weekly": ExternalDynamicListDataSourceTypeImeiRecurringWeeklySchema(),
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeImeiRecurringObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeImeiRecurringSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeImeiRecurringDailySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"at": dsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeImeiRecurringDailyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeImeiRecurringDailySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeImeiRecurringFiveMinuteSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *ExternalDynamicListDataSourceTypeImeiRecurringFiveMinuteObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeImeiRecurringFiveMinuteSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeImeiRecurringHourlySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *ExternalDynamicListDataSourceTypeImeiRecurringHourlyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeImeiRecurringHourlySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeImeiRecurringMonthlySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"at": dsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"day_of_month": dsschema.Int64Attribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeImeiRecurringMonthlyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeImeiRecurringMonthlySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeImeiRecurringWeeklySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"at": dsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"day_of_week": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeImeiRecurringWeeklyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeImeiRecurringWeeklySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeImsiSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("domain"),
				path.MatchRelative().AtParent().AtName("imei"),
				path.MatchRelative().AtParent().AtName("imsi"),
				path.MatchRelative().AtParent().AtName("ip"),
				path.MatchRelative().AtParent().AtName("predefined_ip"),
				path.MatchRelative().AtParent().AtName("predefined_url"),
				path.MatchRelative().AtParent().AtName("url"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"auth": ExternalDynamicListDataSourceTypeImsiAuthSchema(),

			"certificate_profile": dsschema.StringAttribute{
				Description: "Profile for authenticating client certificates",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"description": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"exception_list": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"recurring": ExternalDynamicListDataSourceTypeImsiRecurringSchema(),

			"url": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeImsiObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeImsiSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeImsiAuthSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"password": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},

			"username": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeImsiAuthObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeImsiAuthSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeImsiRecurringSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"daily": ExternalDynamicListDataSourceTypeImsiRecurringDailySchema(),

			"five_minute": ExternalDynamicListDataSourceTypeImsiRecurringFiveMinuteSchema(),

			"hourly": ExternalDynamicListDataSourceTypeImsiRecurringHourlySchema(),

			"monthly": ExternalDynamicListDataSourceTypeImsiRecurringMonthlySchema(),

			"weekly": ExternalDynamicListDataSourceTypeImsiRecurringWeeklySchema(),
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeImsiRecurringObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeImsiRecurringSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeImsiRecurringDailySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"at": dsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeImsiRecurringDailyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeImsiRecurringDailySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeImsiRecurringFiveMinuteSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *ExternalDynamicListDataSourceTypeImsiRecurringFiveMinuteObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeImsiRecurringFiveMinuteSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeImsiRecurringHourlySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *ExternalDynamicListDataSourceTypeImsiRecurringHourlyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeImsiRecurringHourlySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeImsiRecurringMonthlySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"at": dsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"day_of_month": dsschema.Int64Attribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeImsiRecurringMonthlyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeImsiRecurringMonthlySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeImsiRecurringWeeklySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"at": dsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"day_of_week": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeImsiRecurringWeeklyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeImsiRecurringWeeklySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeIpSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("domain"),
				path.MatchRelative().AtParent().AtName("imei"),
				path.MatchRelative().AtParent().AtName("imsi"),
				path.MatchRelative().AtParent().AtName("ip"),
				path.MatchRelative().AtParent().AtName("predefined_ip"),
				path.MatchRelative().AtParent().AtName("predefined_url"),
				path.MatchRelative().AtParent().AtName("url"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"auth": ExternalDynamicListDataSourceTypeIpAuthSchema(),

			"certificate_profile": dsschema.StringAttribute{
				Description: "Profile for authenticating client certificates",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"description": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"exception_list": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"recurring": ExternalDynamicListDataSourceTypeIpRecurringSchema(),

			"url": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeIpObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeIpSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeIpAuthSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"password": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},

			"username": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeIpAuthObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeIpAuthSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeIpRecurringSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"daily": ExternalDynamicListDataSourceTypeIpRecurringDailySchema(),

			"five_minute": ExternalDynamicListDataSourceTypeIpRecurringFiveMinuteSchema(),

			"hourly": ExternalDynamicListDataSourceTypeIpRecurringHourlySchema(),

			"monthly": ExternalDynamicListDataSourceTypeIpRecurringMonthlySchema(),

			"weekly": ExternalDynamicListDataSourceTypeIpRecurringWeeklySchema(),
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeIpRecurringObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeIpRecurringSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeIpRecurringDailySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"at": dsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeIpRecurringDailyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeIpRecurringDailySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeIpRecurringFiveMinuteSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *ExternalDynamicListDataSourceTypeIpRecurringFiveMinuteObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeIpRecurringFiveMinuteSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeIpRecurringHourlySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *ExternalDynamicListDataSourceTypeIpRecurringHourlyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeIpRecurringHourlySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeIpRecurringMonthlySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"at": dsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"day_of_month": dsschema.Int64Attribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeIpRecurringMonthlyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeIpRecurringMonthlySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeIpRecurringWeeklySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"at": dsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"day_of_week": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeIpRecurringWeeklyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeIpRecurringWeeklySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypePredefinedIpSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("domain"),
				path.MatchRelative().AtParent().AtName("imei"),
				path.MatchRelative().AtParent().AtName("imsi"),
				path.MatchRelative().AtParent().AtName("ip"),
				path.MatchRelative().AtParent().AtName("predefined_ip"),
				path.MatchRelative().AtParent().AtName("predefined_url"),
				path.MatchRelative().AtParent().AtName("url"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"description": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"exception_list": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"url": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypePredefinedIpObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypePredefinedIpSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypePredefinedUrlSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("domain"),
				path.MatchRelative().AtParent().AtName("imei"),
				path.MatchRelative().AtParent().AtName("imsi"),
				path.MatchRelative().AtParent().AtName("ip"),
				path.MatchRelative().AtParent().AtName("predefined_ip"),
				path.MatchRelative().AtParent().AtName("predefined_url"),
				path.MatchRelative().AtParent().AtName("url"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"description": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"exception_list": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"url": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypePredefinedUrlObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypePredefinedUrlSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeUrlSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("domain"),
				path.MatchRelative().AtParent().AtName("imei"),
				path.MatchRelative().AtParent().AtName("imsi"),
				path.MatchRelative().AtParent().AtName("ip"),
				path.MatchRelative().AtParent().AtName("predefined_ip"),
				path.MatchRelative().AtParent().AtName("predefined_url"),
				path.MatchRelative().AtParent().AtName("url"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"auth": ExternalDynamicListDataSourceTypeUrlAuthSchema(),

			"certificate_profile": dsschema.StringAttribute{
				Description: "Profile for authenticating client certificates",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"description": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"exception_list": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"recurring": ExternalDynamicListDataSourceTypeUrlRecurringSchema(),

			"url": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeUrlObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeUrlSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeUrlAuthSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"password": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},

			"username": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeUrlAuthObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeUrlAuthSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeUrlRecurringSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"daily": ExternalDynamicListDataSourceTypeUrlRecurringDailySchema(),

			"five_minute": ExternalDynamicListDataSourceTypeUrlRecurringFiveMinuteSchema(),

			"hourly": ExternalDynamicListDataSourceTypeUrlRecurringHourlySchema(),

			"monthly": ExternalDynamicListDataSourceTypeUrlRecurringMonthlySchema(),

			"weekly": ExternalDynamicListDataSourceTypeUrlRecurringWeeklySchema(),
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeUrlRecurringObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeUrlRecurringSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeUrlRecurringDailySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"at": dsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeUrlRecurringDailyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeUrlRecurringDailySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeUrlRecurringFiveMinuteSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *ExternalDynamicListDataSourceTypeUrlRecurringFiveMinuteObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeUrlRecurringFiveMinuteSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeUrlRecurringHourlySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *ExternalDynamicListDataSourceTypeUrlRecurringHourlyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeUrlRecurringHourlySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeUrlRecurringMonthlySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"at": dsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"day_of_month": dsschema.Int64Attribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeUrlRecurringMonthlyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeUrlRecurringMonthlySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceTypeUrlRecurringWeeklySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"at": dsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"day_of_week": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListDataSourceTypeUrlRecurringWeeklyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListDataSourceTypeUrlRecurringWeeklySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListDataSourceLocationSchema() rsschema.Attribute {
	return ExternalDynamicListLocationSchema()
}

// Metadata returns the data source type name.
func (d *ExternalDynamicListDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_external_dynamic_list"
}

// Schema defines the schema for this data source.
func (d *ExternalDynamicListDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = ExternalDynamicListDataSourceSchema()
}

// Configure prepares the struct.
func (d *ExternalDynamicListDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	d.client = providerData.Client
	specifier, _, err := extdynlist.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	d.manager = sdkmanager.NewEntryObjectManager[*extdynlist.Entry, extdynlist.Location, *extdynlist.Service](d.client, extdynlist.NewService(d.client), batchSize, specifier, extdynlist.SpecMatches)
}
func (o *ExternalDynamicListDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state ExternalDynamicListDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location extdynlist.Location

	{
		var terraformLocation ExternalDynamicListLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &extdynlist.SharedLocation{}
			var innerLocation ExternalDynamicListSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &extdynlist.VsysLocation{}
			var innerLocation ExternalDynamicListVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &extdynlist.DeviceGroupLocation{}
			var innerLocation ExternalDynamicListDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_external_dynamic_list_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	components, err := savestate.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	object, err := o.manager.Read(ctx, location, components, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, nil, object, ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &ExternalDynamicListResource{}
	_ resource.ResourceWithConfigure   = &ExternalDynamicListResource{}
	_ resource.ResourceWithImportState = &ExternalDynamicListResource{}
)

func NewExternalDynamicListResource() resource.Resource {
	if _, found := resourceFuncMap["panos_external_dynamic_list"]; !found {
		resourceFuncMap["panos_external_dynamic_list"] = resourceFuncs{
			CreateImportId: ExternalDynamicListImportStateCreator,
		}
	}
	return &ExternalDynamicListResource{}
}

type ExternalDynamicListResource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*extdynlist.Entry, extdynlist.Location, *extdynlist.Service]
}

func ExternalDynamicListResourceLocationSchema() rsschema.Attribute {
	return ExternalDynamicListLocationSchema()
}

type ExternalDynamicListResourceModel struct {
	Location        types.Object                           `tfsdk:"location"`
	Name            types.String                           `tfsdk:"name"`
	DisableOverride types.String                           `tfsdk:"disable_override"`
	Type            *ExternalDynamicListResourceTypeObject `tfsdk:"type"`
}
type ExternalDynamicListResourceTypeObject struct {
	Domain        *ExternalDynamicListResourceTypeDomainObject        `tfsdk:"domain"`
	Imei          *ExternalDynamicListResourceTypeImeiObject          `tfsdk:"imei"`
	Imsi          *ExternalDynamicListResourceTypeImsiObject          `tfsdk:"imsi"`
	Ip            *ExternalDynamicListResourceTypeIpObject            `tfsdk:"ip"`
	PredefinedIp  *ExternalDynamicListResourceTypePredefinedIpObject  `tfsdk:"predefined_ip"`
	PredefinedUrl *ExternalDynamicListResourceTypePredefinedUrlObject `tfsdk:"predefined_url"`
	Url           *ExternalDynamicListResourceTypeUrlObject           `tfsdk:"url"`
}
type ExternalDynamicListResourceTypeDomainObject struct {
	Auth               *ExternalDynamicListResourceTypeDomainAuthObject      `tfsdk:"auth"`
	CertificateProfile types.String                                          `tfsdk:"certificate_profile"`
	Description        types.String                                          `tfsdk:"description"`
	ExceptionList      types.List                                            `tfsdk:"exception_list"`
	ExpandDomain       types.Bool                                            `tfsdk:"expand_domain"`
	Recurring          *ExternalDynamicListResourceTypeDomainRecurringObject `tfsdk:"recurring"`
	Url                types.String                                          `tfsdk:"url"`
}
type ExternalDynamicListResourceTypeDomainAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}
type ExternalDynamicListResourceTypeDomainRecurringObject struct {
	Daily      *ExternalDynamicListResourceTypeDomainRecurringDailyObject      `tfsdk:"daily"`
	FiveMinute *ExternalDynamicListResourceTypeDomainRecurringFiveMinuteObject `tfsdk:"five_minute"`
	Hourly     *ExternalDynamicListResourceTypeDomainRecurringHourlyObject     `tfsdk:"hourly"`
	Monthly    *ExternalDynamicListResourceTypeDomainRecurringMonthlyObject    `tfsdk:"monthly"`
	Weekly     *ExternalDynamicListResourceTypeDomainRecurringWeeklyObject     `tfsdk:"weekly"`
}
type ExternalDynamicListResourceTypeDomainRecurringDailyObject struct {
	At types.String `tfsdk:"at"`
}
type ExternalDynamicListResourceTypeDomainRecurringFiveMinuteObject struct {
}
type ExternalDynamicListResourceTypeDomainRecurringHourlyObject struct {
}
type ExternalDynamicListResourceTypeDomainRecurringMonthlyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}
type ExternalDynamicListResourceTypeDomainRecurringWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}
type ExternalDynamicListResourceTypeImeiObject struct {
	Auth               *ExternalDynamicListResourceTypeImeiAuthObject      `tfsdk:"auth"`
	CertificateProfile types.String                                        `tfsdk:"certificate_profile"`
	Description        types.String                                        `tfsdk:"description"`
	ExceptionList      types.List                                          `tfsdk:"exception_list"`
	Recurring          *ExternalDynamicListResourceTypeImeiRecurringObject `tfsdk:"recurring"`
	Url                types.String                                        `tfsdk:"url"`
}
type ExternalDynamicListResourceTypeImeiAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}
type ExternalDynamicListResourceTypeImeiRecurringObject struct {
	Daily      *ExternalDynamicListResourceTypeImeiRecurringDailyObject      `tfsdk:"daily"`
	FiveMinute *ExternalDynamicListResourceTypeImeiRecurringFiveMinuteObject `tfsdk:"five_minute"`
	Hourly     *ExternalDynamicListResourceTypeImeiRecurringHourlyObject     `tfsdk:"hourly"`
	Monthly    *ExternalDynamicListResourceTypeImeiRecurringMonthlyObject    `tfsdk:"monthly"`
	Weekly     *ExternalDynamicListResourceTypeImeiRecurringWeeklyObject     `tfsdk:"weekly"`
}
type ExternalDynamicListResourceTypeImeiRecurringDailyObject struct {
	At types.String `tfsdk:"at"`
}
type ExternalDynamicListResourceTypeImeiRecurringFiveMinuteObject struct {
}
type ExternalDynamicListResourceTypeImeiRecurringHourlyObject struct {
}
type ExternalDynamicListResourceTypeImeiRecurringMonthlyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}
type ExternalDynamicListResourceTypeImeiRecurringWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}
type ExternalDynamicListResourceTypeImsiObject struct {
	Auth               *ExternalDynamicListResourceTypeImsiAuthObject      `tfsdk:"auth"`
	CertificateProfile types.String                                        `tfsdk:"certificate_profile"`
	Description        types.String                                        `tfsdk:"description"`
	ExceptionList      types.List                                          `tfsdk:"exception_list"`
	Recurring          *ExternalDynamicListResourceTypeImsiRecurringObject `tfsdk:"recurring"`
	Url                types.String                                        `tfsdk:"url"`
}
type ExternalDynamicListResourceTypeImsiAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}
type ExternalDynamicListResourceTypeImsiRecurringObject struct {
	Daily      *ExternalDynamicListResourceTypeImsiRecurringDailyObject      `tfsdk:"daily"`
	FiveMinute *ExternalDynamicListResourceTypeImsiRecurringFiveMinuteObject `tfsdk:"five_minute"`
	Hourly     *ExternalDynamicListResourceTypeImsiRecurringHourlyObject     `tfsdk:"hourly"`
	Monthly    *ExternalDynamicListResourceTypeImsiRecurringMonthlyObject    `tfsdk:"monthly"`
	Weekly     *ExternalDynamicListResourceTypeImsiRecurringWeeklyObject     `tfsdk:"weekly"`
}
type ExternalDynamicListResourceTypeImsiRecurringDailyObject struct {
	At types.String `tfsdk:"at"`
}
type ExternalDynamicListResourceTypeImsiRecurringFiveMinuteObject struct {
}
type ExternalDynamicListResourceTypeImsiRecurringHourlyObject struct {
}
type ExternalDynamicListResourceTypeImsiRecurringMonthlyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}
type ExternalDynamicListResourceTypeImsiRecurringWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}
type ExternalDynamicListResourceTypeIpObject struct {
	Auth               *ExternalDynamicListResourceTypeIpAuthObject      `tfsdk:"auth"`
	CertificateProfile types.String                                      `tfsdk:"certificate_profile"`
	Description        types.String                                      `tfsdk:"description"`
	ExceptionList      types.List                                        `tfsdk:"exception_list"`
	Recurring          *ExternalDynamicListResourceTypeIpRecurringObject `tfsdk:"recurring"`
	Url                types.String                                      `tfsdk:"url"`
}
type ExternalDynamicListResourceTypeIpAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}
type ExternalDynamicListResourceTypeIpRecurringObject struct {
	Daily      *ExternalDynamicListResourceTypeIpRecurringDailyObject      `tfsdk:"daily"`
	FiveMinute *ExternalDynamicListResourceTypeIpRecurringFiveMinuteObject `tfsdk:"five_minute"`
	Hourly     *ExternalDynamicListResourceTypeIpRecurringHourlyObject     `tfsdk:"hourly"`
	Monthly    *ExternalDynamicListResourceTypeIpRecurringMonthlyObject    `tfsdk:"monthly"`
	Weekly     *ExternalDynamicListResourceTypeIpRecurringWeeklyObject     `tfsdk:"weekly"`
}
type ExternalDynamicListResourceTypeIpRecurringDailyObject struct {
	At types.String `tfsdk:"at"`
}
type ExternalDynamicListResourceTypeIpRecurringFiveMinuteObject struct {
}
type ExternalDynamicListResourceTypeIpRecurringHourlyObject struct {
}
type ExternalDynamicListResourceTypeIpRecurringMonthlyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}
type ExternalDynamicListResourceTypeIpRecurringWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}
type ExternalDynamicListResourceTypePredefinedIpObject struct {
	Description   types.String `tfsdk:"description"`
	ExceptionList types.List   `tfsdk:"exception_list"`
	Url           types.String `tfsdk:"url"`
}
type ExternalDynamicListResourceTypePredefinedUrlObject struct {
	Description   types.String `tfsdk:"description"`
	ExceptionList types.List   `tfsdk:"exception_list"`
	Url           types.String `tfsdk:"url"`
}
type ExternalDynamicListResourceTypeUrlObject struct {
	Auth               *ExternalDynamicListResourceTypeUrlAuthObject      `tfsdk:"auth"`
	CertificateProfile types.String                                       `tfsdk:"certificate_profile"`
	Description        types.String                                       `tfsdk:"description"`
	ExceptionList      types.List                                         `tfsdk:"exception_list"`
	Recurring          *ExternalDynamicListResourceTypeUrlRecurringObject `tfsdk:"recurring"`
	Url                types.String                                       `tfsdk:"url"`
}
type ExternalDynamicListResourceTypeUrlAuthObject struct {
	Password types.String `tfsdk:"password"`
	Username types.String `tfsdk:"username"`
}
type ExternalDynamicListResourceTypeUrlRecurringObject struct {
	Daily      *ExternalDynamicListResourceTypeUrlRecurringDailyObject      `tfsdk:"daily"`
	FiveMinute *ExternalDynamicListResourceTypeUrlRecurringFiveMinuteObject `tfsdk:"five_minute"`
	Hourly     *ExternalDynamicListResourceTypeUrlRecurringHourlyObject     `tfsdk:"hourly"`
	Monthly    *ExternalDynamicListResourceTypeUrlRecurringMonthlyObject    `tfsdk:"monthly"`
	Weekly     *ExternalDynamicListResourceTypeUrlRecurringWeeklyObject     `tfsdk:"weekly"`
}
type ExternalDynamicListResourceTypeUrlRecurringDailyObject struct {
	At types.String `tfsdk:"at"`
}
type ExternalDynamicListResourceTypeUrlRecurringFiveMinuteObject struct {
}
type ExternalDynamicListResourceTypeUrlRecurringHourlyObject struct {
}
type ExternalDynamicListResourceTypeUrlRecurringMonthlyObject struct {
	At         types.String `tfsdk:"at"`
	DayOfMonth types.Int64  `tfsdk:"day_of_month"`
}
type ExternalDynamicListResourceTypeUrlRecurringWeeklyObject struct {
	At        types.String `tfsdk:"at"`
	DayOfWeek types.String `tfsdk:"day_of_week"`
}

func (r *ExternalDynamicListResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func ExternalDynamicListResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": ExternalDynamicListResourceLocationSchema(),

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"disable_override": rsschema.StringAttribute{
				Description: "disable object override in child device groups",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,

				Validators: []validator.String{
					stringvalidator.OneOf([]string{
						"yes",
						"no",
					}...),
				},
			},

			"type": ExternalDynamicListResourceTypeSchema(),
		},
	}
}

func (o *ExternalDynamicListResourceModel) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"domain": ExternalDynamicListResourceTypeDomainSchema(),

			"imei": ExternalDynamicListResourceTypeImeiSchema(),

			"imsi": ExternalDynamicListResourceTypeImsiSchema(),

			"ip": ExternalDynamicListResourceTypeIpSchema(),

			"predefined_ip": ExternalDynamicListResourceTypePredefinedIpSchema(),

			"predefined_url": ExternalDynamicListResourceTypePredefinedUrlSchema(),

			"url": ExternalDynamicListResourceTypeUrlSchema(),
		},
	}
}

func (o *ExternalDynamicListResourceTypeObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeDomainSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("domain"),
				path.MatchRelative().AtParent().AtName("imei"),
				path.MatchRelative().AtParent().AtName("imsi"),
				path.MatchRelative().AtParent().AtName("ip"),
				path.MatchRelative().AtParent().AtName("predefined_ip"),
				path.MatchRelative().AtParent().AtName("predefined_url"),
				path.MatchRelative().AtParent().AtName("url"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"auth": ExternalDynamicListResourceTypeDomainAuthSchema(),

			"certificate_profile": rsschema.StringAttribute{
				Description: "Profile for authenticating client certificates",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("None"),
			},

			"description": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"exception_list": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"expand_domain": rsschema.BoolAttribute{
				Description: "Enable/Disable expand domain",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"recurring": ExternalDynamicListResourceTypeDomainRecurringSchema(),

			"url": rsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("http://"),
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeDomainObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeDomainSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeDomainAuthSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"password": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},

			"username": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeDomainAuthObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeDomainAuthSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeDomainRecurringSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"daily": ExternalDynamicListResourceTypeDomainRecurringDailySchema(),

			"five_minute": ExternalDynamicListResourceTypeDomainRecurringFiveMinuteSchema(),

			"hourly": ExternalDynamicListResourceTypeDomainRecurringHourlySchema(),

			"monthly": ExternalDynamicListResourceTypeDomainRecurringMonthlySchema(),

			"weekly": ExternalDynamicListResourceTypeDomainRecurringWeeklySchema(),
		},
	}
}

func (o *ExternalDynamicListResourceTypeDomainRecurringObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeDomainRecurringSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeDomainRecurringDailySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"at": rsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("00"),
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeDomainRecurringDailyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeDomainRecurringDailySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeDomainRecurringFiveMinuteSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *ExternalDynamicListResourceTypeDomainRecurringFiveMinuteObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeDomainRecurringFiveMinuteSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeDomainRecurringHourlySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *ExternalDynamicListResourceTypeDomainRecurringHourlyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeDomainRecurringHourlySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeDomainRecurringMonthlySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"at": rsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("00"),
			},

			"day_of_month": rsschema.Int64Attribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeDomainRecurringMonthlyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeDomainRecurringMonthlySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeDomainRecurringWeeklySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"at": rsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("00"),
			},

			"day_of_week": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeDomainRecurringWeeklyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeDomainRecurringWeeklySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeImeiSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("domain"),
				path.MatchRelative().AtParent().AtName("imei"),
				path.MatchRelative().AtParent().AtName("imsi"),
				path.MatchRelative().AtParent().AtName("ip"),
				path.MatchRelative().AtParent().AtName("predefined_ip"),
				path.MatchRelative().AtParent().AtName("predefined_url"),
				path.MatchRelative().AtParent().AtName("url"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"auth": ExternalDynamicListResourceTypeImeiAuthSchema(),

			"certificate_profile": rsschema.StringAttribute{
				Description: "Profile for authenticating client certificates",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("None"),
			},

			"description": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"exception_list": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"recurring": ExternalDynamicListResourceTypeImeiRecurringSchema(),

			"url": rsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("http://"),
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeImeiObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeImeiSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeImeiAuthSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"password": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},

			"username": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeImeiAuthObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeImeiAuthSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeImeiRecurringSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"daily": ExternalDynamicListResourceTypeImeiRecurringDailySchema(),

			"five_minute": ExternalDynamicListResourceTypeImeiRecurringFiveMinuteSchema(),

			"hourly": ExternalDynamicListResourceTypeImeiRecurringHourlySchema(),

			"monthly": ExternalDynamicListResourceTypeImeiRecurringMonthlySchema(),

			"weekly": ExternalDynamicListResourceTypeImeiRecurringWeeklySchema(),
		},
	}
}

func (o *ExternalDynamicListResourceTypeImeiRecurringObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeImeiRecurringSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeImeiRecurringDailySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"at": rsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("00"),
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeImeiRecurringDailyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeImeiRecurringDailySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeImeiRecurringFiveMinuteSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *ExternalDynamicListResourceTypeImeiRecurringFiveMinuteObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeImeiRecurringFiveMinuteSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeImeiRecurringHourlySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *ExternalDynamicListResourceTypeImeiRecurringHourlyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeImeiRecurringHourlySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeImeiRecurringMonthlySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"at": rsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("00"),
			},

			"day_of_month": rsschema.Int64Attribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeImeiRecurringMonthlyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeImeiRecurringMonthlySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeImeiRecurringWeeklySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"at": rsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("00"),
			},

			"day_of_week": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeImeiRecurringWeeklyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeImeiRecurringWeeklySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeImsiSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("domain"),
				path.MatchRelative().AtParent().AtName("imei"),
				path.MatchRelative().AtParent().AtName("imsi"),
				path.MatchRelative().AtParent().AtName("ip"),
				path.MatchRelative().AtParent().AtName("predefined_ip"),
				path.MatchRelative().AtParent().AtName("predefined_url"),
				path.MatchRelative().AtParent().AtName("url"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"auth": ExternalDynamicListResourceTypeImsiAuthSchema(),

			"certificate_profile": rsschema.StringAttribute{
				Description: "Profile for authenticating client certificates",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("None"),
			},

			"description": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"exception_list": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"recurring": ExternalDynamicListResourceTypeImsiRecurringSchema(),

			"url": rsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("http://"),
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeImsiObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeImsiSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeImsiAuthSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"password": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},

			"username": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeImsiAuthObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeImsiAuthSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeImsiRecurringSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"daily": ExternalDynamicListResourceTypeImsiRecurringDailySchema(),

			"five_minute": ExternalDynamicListResourceTypeImsiRecurringFiveMinuteSchema(),

			"hourly": ExternalDynamicListResourceTypeImsiRecurringHourlySchema(),

			"monthly": ExternalDynamicListResourceTypeImsiRecurringMonthlySchema(),

			"weekly": ExternalDynamicListResourceTypeImsiRecurringWeeklySchema(),
		},
	}
}

func (o *ExternalDynamicListResourceTypeImsiRecurringObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeImsiRecurringSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeImsiRecurringDailySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"at": rsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("00"),
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeImsiRecurringDailyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeImsiRecurringDailySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeImsiRecurringFiveMinuteSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *ExternalDynamicListResourceTypeImsiRecurringFiveMinuteObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeImsiRecurringFiveMinuteSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeImsiRecurringHourlySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *ExternalDynamicListResourceTypeImsiRecurringHourlyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeImsiRecurringHourlySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeImsiRecurringMonthlySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"at": rsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("00"),
			},

			"day_of_month": rsschema.Int64Attribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeImsiRecurringMonthlyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeImsiRecurringMonthlySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeImsiRecurringWeeklySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"at": rsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("00"),
			},

			"day_of_week": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeImsiRecurringWeeklyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeImsiRecurringWeeklySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeIpSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("domain"),
				path.MatchRelative().AtParent().AtName("imei"),
				path.MatchRelative().AtParent().AtName("imsi"),
				path.MatchRelative().AtParent().AtName("ip"),
				path.MatchRelative().AtParent().AtName("predefined_ip"),
				path.MatchRelative().AtParent().AtName("predefined_url"),
				path.MatchRelative().AtParent().AtName("url"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"auth": ExternalDynamicListResourceTypeIpAuthSchema(),

			"certificate_profile": rsschema.StringAttribute{
				Description: "Profile for authenticating client certificates",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("None"),
			},

			"description": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"exception_list": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"recurring": ExternalDynamicListResourceTypeIpRecurringSchema(),

			"url": rsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("http://"),
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeIpObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeIpSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeIpAuthSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"password": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},

			"username": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeIpAuthObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeIpAuthSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeIpRecurringSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"daily": ExternalDynamicListResourceTypeIpRecurringDailySchema(),

			"five_minute": ExternalDynamicListResourceTypeIpRecurringFiveMinuteSchema(),

			"hourly": ExternalDynamicListResourceTypeIpRecurringHourlySchema(),

			"monthly": ExternalDynamicListResourceTypeIpRecurringMonthlySchema(),

			"weekly": ExternalDynamicListResourceTypeIpRecurringWeeklySchema(),
		},
	}
}

func (o *ExternalDynamicListResourceTypeIpRecurringObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeIpRecurringSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeIpRecurringDailySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"at": rsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("00"),
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeIpRecurringDailyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeIpRecurringDailySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeIpRecurringFiveMinuteSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *ExternalDynamicListResourceTypeIpRecurringFiveMinuteObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeIpRecurringFiveMinuteSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeIpRecurringHourlySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *ExternalDynamicListResourceTypeIpRecurringHourlyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeIpRecurringHourlySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeIpRecurringMonthlySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"at": rsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("00"),
			},

			"day_of_month": rsschema.Int64Attribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeIpRecurringMonthlyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeIpRecurringMonthlySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeIpRecurringWeeklySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"at": rsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("00"),
			},

			"day_of_week": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeIpRecurringWeeklyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeIpRecurringWeeklySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypePredefinedIpSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("domain"),
				path.MatchRelative().AtParent().AtName("imei"),
				path.MatchRelative().AtParent().AtName("imsi"),
				path.MatchRelative().AtParent().AtName("ip"),
				path.MatchRelative().AtParent().AtName("predefined_ip"),
				path.MatchRelative().AtParent().AtName("predefined_url"),
				path.MatchRelative().AtParent().AtName("url"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"description": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"exception_list": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"url": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypePredefinedIpObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypePredefinedIpSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypePredefinedUrlSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("domain"),
				path.MatchRelative().AtParent().AtName("imei"),
				path.MatchRelative().AtParent().AtName("imsi"),
				path.MatchRelative().AtParent().AtName("ip"),
				path.MatchRelative().AtParent().AtName("predefined_ip"),
				path.MatchRelative().AtParent().AtName("predefined_url"),
				path.MatchRelative().AtParent().AtName("url"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"description": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"exception_list": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"url": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypePredefinedUrlObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypePredefinedUrlSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeUrlSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("domain"),
				path.MatchRelative().AtParent().AtName("imei"),
				path.MatchRelative().AtParent().AtName("imsi"),
				path.MatchRelative().AtParent().AtName("ip"),
				path.MatchRelative().AtParent().AtName("predefined_ip"),
				path.MatchRelative().AtParent().AtName("predefined_url"),
				path.MatchRelative().AtParent().AtName("url"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"auth": ExternalDynamicListResourceTypeUrlAuthSchema(),

			"certificate_profile": rsschema.StringAttribute{
				Description: "Profile for authenticating client certificates",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("None"),
			},

			"description": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"exception_list": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"recurring": ExternalDynamicListResourceTypeUrlRecurringSchema(),

			"url": rsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("http://"),
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeUrlObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeUrlSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeUrlAuthSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"password": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},

			"username": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeUrlAuthObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeUrlAuthSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeUrlRecurringSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"daily": ExternalDynamicListResourceTypeUrlRecurringDailySchema(),

			"five_minute": ExternalDynamicListResourceTypeUrlRecurringFiveMinuteSchema(),

			"hourly": ExternalDynamicListResourceTypeUrlRecurringHourlySchema(),

			"monthly": ExternalDynamicListResourceTypeUrlRecurringMonthlySchema(),

			"weekly": ExternalDynamicListResourceTypeUrlRecurringWeeklySchema(),
		},
	}
}

func (o *ExternalDynamicListResourceTypeUrlRecurringObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeUrlRecurringSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeUrlRecurringDailySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"at": rsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("00"),
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeUrlRecurringDailyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeUrlRecurringDailySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeUrlRecurringFiveMinuteSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *ExternalDynamicListResourceTypeUrlRecurringFiveMinuteObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeUrlRecurringFiveMinuteSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeUrlRecurringHourlySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *ExternalDynamicListResourceTypeUrlRecurringHourlyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeUrlRecurringHourlySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeUrlRecurringMonthlySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"at": rsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("00"),
			},

			"day_of_month": rsschema.Int64Attribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeUrlRecurringMonthlyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeUrlRecurringMonthlySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ExternalDynamicListResourceTypeUrlRecurringWeeklySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("daily"),
				path.MatchRelative().AtParent().AtName("five_minute"),
				path.MatchRelative().AtParent().AtName("hourly"),
				path.MatchRelative().AtParent().AtName("monthly"),
				path.MatchRelative().AtParent().AtName("weekly"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"at": rsschema.StringAttribute{
				Description: "Time specification hh (e.g. 20)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("00"),
			},

			"day_of_week": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ExternalDynamicListResourceTypeUrlRecurringWeeklyObject) getTypeFor(name string) attr.Type {
	schema := ExternalDynamicListResourceTypeUrlRecurringWeeklySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *ExternalDynamicListResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_external_dynamic_list"
}

func (r *ExternalDynamicListResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = ExternalDynamicListResourceSchema()
}

// </ResourceSchema>

func (r *ExternalDynamicListResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	r.client = providerData.Client
	specifier, _, err := extdynlist.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	r.manager = sdkmanager.NewEntryObjectManager[*extdynlist.Entry, extdynlist.Location, *extdynlist.Service](r.client, extdynlist.NewService(r.client), batchSize, specifier, extdynlist.SpecMatches)
}

func (o *ExternalDynamicListResourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj ExternalDynamicListLocation

	var typeObj *ExternalDynamicListResourceTypeObject
	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"name":             types.StringType,
		"disable_override": types.StringType,
		"type": types.ObjectType{
			AttrTypes: typeObj.AttributeTypes(),
		},
	}
}

func (o ExternalDynamicListResourceModel) AncestorName() string {
	return ""
}

func (o ExternalDynamicListResourceModel) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeObject) AttributeTypes() map[string]attr.Type {

	var domainObj *ExternalDynamicListResourceTypeDomainObject

	var imeiObj *ExternalDynamicListResourceTypeImeiObject

	var imsiObj *ExternalDynamicListResourceTypeImsiObject

	var ipObj *ExternalDynamicListResourceTypeIpObject

	var predefinedIpObj *ExternalDynamicListResourceTypePredefinedIpObject

	var predefinedUrlObj *ExternalDynamicListResourceTypePredefinedUrlObject

	var urlObj *ExternalDynamicListResourceTypeUrlObject
	return map[string]attr.Type{
		"domain": types.ObjectType{
			AttrTypes: domainObj.AttributeTypes(),
		},
		"imei": types.ObjectType{
			AttrTypes: imeiObj.AttributeTypes(),
		},
		"imsi": types.ObjectType{
			AttrTypes: imsiObj.AttributeTypes(),
		},
		"ip": types.ObjectType{
			AttrTypes: ipObj.AttributeTypes(),
		},
		"predefined_ip": types.ObjectType{
			AttrTypes: predefinedIpObj.AttributeTypes(),
		},
		"predefined_url": types.ObjectType{
			AttrTypes: predefinedUrlObj.AttributeTypes(),
		},
		"url": types.ObjectType{
			AttrTypes: urlObj.AttributeTypes(),
		},
	}
}

func (o ExternalDynamicListResourceTypeObject) AncestorName() string {
	return "type"
}

func (o ExternalDynamicListResourceTypeObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeDomainObject) AttributeTypes() map[string]attr.Type {

	var authObj *ExternalDynamicListResourceTypeDomainAuthObject

	var recurringObj *ExternalDynamicListResourceTypeDomainRecurringObject

	return map[string]attr.Type{
		"auth": types.ObjectType{
			AttrTypes: authObj.AttributeTypes(),
		},
		"certificate_profile": types.StringType,
		"description":         types.StringType,
		"exception_list":      types.ListType{},
		"expand_domain":       types.BoolType,
		"recurring": types.ObjectType{
			AttrTypes: recurringObj.AttributeTypes(),
		},
		"url": types.StringType,
	}
}

func (o ExternalDynamicListResourceTypeDomainObject) AncestorName() string {
	return "domain"
}

func (o ExternalDynamicListResourceTypeDomainObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeDomainAuthObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"password": types.StringType,
		"username": types.StringType,
	}
}

func (o ExternalDynamicListResourceTypeDomainAuthObject) AncestorName() string {
	return "auth"
}

func (o ExternalDynamicListResourceTypeDomainAuthObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeDomainRecurringObject) AttributeTypes() map[string]attr.Type {

	var dailyObj *ExternalDynamicListResourceTypeDomainRecurringDailyObject

	var fiveMinuteObj *ExternalDynamicListResourceTypeDomainRecurringFiveMinuteObject

	var hourlyObj *ExternalDynamicListResourceTypeDomainRecurringHourlyObject

	var monthlyObj *ExternalDynamicListResourceTypeDomainRecurringMonthlyObject

	var weeklyObj *ExternalDynamicListResourceTypeDomainRecurringWeeklyObject
	return map[string]attr.Type{
		"daily": types.ObjectType{
			AttrTypes: dailyObj.AttributeTypes(),
		},
		"five_minute": types.ObjectType{
			AttrTypes: fiveMinuteObj.AttributeTypes(),
		},
		"hourly": types.ObjectType{
			AttrTypes: hourlyObj.AttributeTypes(),
		},
		"monthly": types.ObjectType{
			AttrTypes: monthlyObj.AttributeTypes(),
		},
		"weekly": types.ObjectType{
			AttrTypes: weeklyObj.AttributeTypes(),
		},
	}
}

func (o ExternalDynamicListResourceTypeDomainRecurringObject) AncestorName() string {
	return "recurring"
}

func (o ExternalDynamicListResourceTypeDomainRecurringObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeDomainRecurringDailyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at": types.StringType,
	}
}

func (o ExternalDynamicListResourceTypeDomainRecurringDailyObject) AncestorName() string {
	return "daily"
}

func (o ExternalDynamicListResourceTypeDomainRecurringDailyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeDomainRecurringFiveMinuteObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o ExternalDynamicListResourceTypeDomainRecurringFiveMinuteObject) AncestorName() string {
	return "five-minute"
}

func (o ExternalDynamicListResourceTypeDomainRecurringFiveMinuteObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeDomainRecurringHourlyObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o ExternalDynamicListResourceTypeDomainRecurringHourlyObject) AncestorName() string {
	return "hourly"
}

func (o ExternalDynamicListResourceTypeDomainRecurringHourlyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeDomainRecurringMonthlyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at":           types.StringType,
		"day_of_month": types.Int64Type,
	}
}

func (o ExternalDynamicListResourceTypeDomainRecurringMonthlyObject) AncestorName() string {
	return "monthly"
}

func (o ExternalDynamicListResourceTypeDomainRecurringMonthlyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeDomainRecurringWeeklyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at":          types.StringType,
		"day_of_week": types.StringType,
	}
}

func (o ExternalDynamicListResourceTypeDomainRecurringWeeklyObject) AncestorName() string {
	return "weekly"
}

func (o ExternalDynamicListResourceTypeDomainRecurringWeeklyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeImeiObject) AttributeTypes() map[string]attr.Type {

	var authObj *ExternalDynamicListResourceTypeImeiAuthObject

	var recurringObj *ExternalDynamicListResourceTypeImeiRecurringObject

	return map[string]attr.Type{
		"auth": types.ObjectType{
			AttrTypes: authObj.AttributeTypes(),
		},
		"certificate_profile": types.StringType,
		"description":         types.StringType,
		"exception_list":      types.ListType{},
		"recurring": types.ObjectType{
			AttrTypes: recurringObj.AttributeTypes(),
		},
		"url": types.StringType,
	}
}

func (o ExternalDynamicListResourceTypeImeiObject) AncestorName() string {
	return "imei"
}

func (o ExternalDynamicListResourceTypeImeiObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeImeiAuthObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"password": types.StringType,
		"username": types.StringType,
	}
}

func (o ExternalDynamicListResourceTypeImeiAuthObject) AncestorName() string {
	return "auth"
}

func (o ExternalDynamicListResourceTypeImeiAuthObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeImeiRecurringObject) AttributeTypes() map[string]attr.Type {

	var dailyObj *ExternalDynamicListResourceTypeImeiRecurringDailyObject

	var fiveMinuteObj *ExternalDynamicListResourceTypeImeiRecurringFiveMinuteObject

	var hourlyObj *ExternalDynamicListResourceTypeImeiRecurringHourlyObject

	var monthlyObj *ExternalDynamicListResourceTypeImeiRecurringMonthlyObject

	var weeklyObj *ExternalDynamicListResourceTypeImeiRecurringWeeklyObject
	return map[string]attr.Type{
		"daily": types.ObjectType{
			AttrTypes: dailyObj.AttributeTypes(),
		},
		"five_minute": types.ObjectType{
			AttrTypes: fiveMinuteObj.AttributeTypes(),
		},
		"hourly": types.ObjectType{
			AttrTypes: hourlyObj.AttributeTypes(),
		},
		"monthly": types.ObjectType{
			AttrTypes: monthlyObj.AttributeTypes(),
		},
		"weekly": types.ObjectType{
			AttrTypes: weeklyObj.AttributeTypes(),
		},
	}
}

func (o ExternalDynamicListResourceTypeImeiRecurringObject) AncestorName() string {
	return "recurring"
}

func (o ExternalDynamicListResourceTypeImeiRecurringObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeImeiRecurringDailyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at": types.StringType,
	}
}

func (o ExternalDynamicListResourceTypeImeiRecurringDailyObject) AncestorName() string {
	return "daily"
}

func (o ExternalDynamicListResourceTypeImeiRecurringDailyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeImeiRecurringFiveMinuteObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o ExternalDynamicListResourceTypeImeiRecurringFiveMinuteObject) AncestorName() string {
	return "five-minute"
}

func (o ExternalDynamicListResourceTypeImeiRecurringFiveMinuteObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeImeiRecurringHourlyObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o ExternalDynamicListResourceTypeImeiRecurringHourlyObject) AncestorName() string {
	return "hourly"
}

func (o ExternalDynamicListResourceTypeImeiRecurringHourlyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeImeiRecurringMonthlyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at":           types.StringType,
		"day_of_month": types.Int64Type,
	}
}

func (o ExternalDynamicListResourceTypeImeiRecurringMonthlyObject) AncestorName() string {
	return "monthly"
}

func (o ExternalDynamicListResourceTypeImeiRecurringMonthlyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeImeiRecurringWeeklyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at":          types.StringType,
		"day_of_week": types.StringType,
	}
}

func (o ExternalDynamicListResourceTypeImeiRecurringWeeklyObject) AncestorName() string {
	return "weekly"
}

func (o ExternalDynamicListResourceTypeImeiRecurringWeeklyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeImsiObject) AttributeTypes() map[string]attr.Type {

	var authObj *ExternalDynamicListResourceTypeImsiAuthObject

	var recurringObj *ExternalDynamicListResourceTypeImsiRecurringObject

	return map[string]attr.Type{
		"auth": types.ObjectType{
			AttrTypes: authObj.AttributeTypes(),
		},
		"certificate_profile": types.StringType,
		"description":         types.StringType,
		"exception_list":      types.ListType{},
		"recurring": types.ObjectType{
			AttrTypes: recurringObj.AttributeTypes(),
		},
		"url": types.StringType,
	}
}

func (o ExternalDynamicListResourceTypeImsiObject) AncestorName() string {
	return "imsi"
}

func (o ExternalDynamicListResourceTypeImsiObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeImsiAuthObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"password": types.StringType,
		"username": types.StringType,
	}
}

func (o ExternalDynamicListResourceTypeImsiAuthObject) AncestorName() string {
	return "auth"
}

func (o ExternalDynamicListResourceTypeImsiAuthObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeImsiRecurringObject) AttributeTypes() map[string]attr.Type {

	var dailyObj *ExternalDynamicListResourceTypeImsiRecurringDailyObject

	var fiveMinuteObj *ExternalDynamicListResourceTypeImsiRecurringFiveMinuteObject

	var hourlyObj *ExternalDynamicListResourceTypeImsiRecurringHourlyObject

	var monthlyObj *ExternalDynamicListResourceTypeImsiRecurringMonthlyObject

	var weeklyObj *ExternalDynamicListResourceTypeImsiRecurringWeeklyObject
	return map[string]attr.Type{
		"daily": types.ObjectType{
			AttrTypes: dailyObj.AttributeTypes(),
		},
		"five_minute": types.ObjectType{
			AttrTypes: fiveMinuteObj.AttributeTypes(),
		},
		"hourly": types.ObjectType{
			AttrTypes: hourlyObj.AttributeTypes(),
		},
		"monthly": types.ObjectType{
			AttrTypes: monthlyObj.AttributeTypes(),
		},
		"weekly": types.ObjectType{
			AttrTypes: weeklyObj.AttributeTypes(),
		},
	}
}

func (o ExternalDynamicListResourceTypeImsiRecurringObject) AncestorName() string {
	return "recurring"
}

func (o ExternalDynamicListResourceTypeImsiRecurringObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeImsiRecurringDailyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at": types.StringType,
	}
}

func (o ExternalDynamicListResourceTypeImsiRecurringDailyObject) AncestorName() string {
	return "daily"
}

func (o ExternalDynamicListResourceTypeImsiRecurringDailyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeImsiRecurringFiveMinuteObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o ExternalDynamicListResourceTypeImsiRecurringFiveMinuteObject) AncestorName() string {
	return "five-minute"
}

func (o ExternalDynamicListResourceTypeImsiRecurringFiveMinuteObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeImsiRecurringHourlyObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o ExternalDynamicListResourceTypeImsiRecurringHourlyObject) AncestorName() string {
	return "hourly"
}

func (o ExternalDynamicListResourceTypeImsiRecurringHourlyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeImsiRecurringMonthlyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at":           types.StringType,
		"day_of_month": types.Int64Type,
	}
}

func (o ExternalDynamicListResourceTypeImsiRecurringMonthlyObject) AncestorName() string {
	return "monthly"
}

func (o ExternalDynamicListResourceTypeImsiRecurringMonthlyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeImsiRecurringWeeklyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at":          types.StringType,
		"day_of_week": types.StringType,
	}
}

func (o ExternalDynamicListResourceTypeImsiRecurringWeeklyObject) AncestorName() string {
	return "weekly"
}

func (o ExternalDynamicListResourceTypeImsiRecurringWeeklyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeIpObject) AttributeTypes() map[string]attr.Type {

	var authObj *ExternalDynamicListResourceTypeIpAuthObject

	var recurringObj *ExternalDynamicListResourceTypeIpRecurringObject

	return map[string]attr.Type{
		"auth": types.ObjectType{
			AttrTypes: authObj.AttributeTypes(),
		},
		"certificate_profile": types.StringType,
		"description":         types.StringType,
		"exception_list":      types.ListType{},
		"recurring": types.ObjectType{
			AttrTypes: recurringObj.AttributeTypes(),
		},
		"url": types.StringType,
	}
}

func (o ExternalDynamicListResourceTypeIpObject) AncestorName() string {
	return "ip"
}

func (o ExternalDynamicListResourceTypeIpObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeIpAuthObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"password": types.StringType,
		"username": types.StringType,
	}
}

func (o ExternalDynamicListResourceTypeIpAuthObject) AncestorName() string {
	return "auth"
}

func (o ExternalDynamicListResourceTypeIpAuthObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeIpRecurringObject) AttributeTypes() map[string]attr.Type {

	var dailyObj *ExternalDynamicListResourceTypeIpRecurringDailyObject

	var fiveMinuteObj *ExternalDynamicListResourceTypeIpRecurringFiveMinuteObject

	var hourlyObj *ExternalDynamicListResourceTypeIpRecurringHourlyObject

	var monthlyObj *ExternalDynamicListResourceTypeIpRecurringMonthlyObject

	var weeklyObj *ExternalDynamicListResourceTypeIpRecurringWeeklyObject
	return map[string]attr.Type{
		"daily": types.ObjectType{
			AttrTypes: dailyObj.AttributeTypes(),
		},
		"five_minute": types.ObjectType{
			AttrTypes: fiveMinuteObj.AttributeTypes(),
		},
		"hourly": types.ObjectType{
			AttrTypes: hourlyObj.AttributeTypes(),
		},
		"monthly": types.ObjectType{
			AttrTypes: monthlyObj.AttributeTypes(),
		},
		"weekly": types.ObjectType{
			AttrTypes: weeklyObj.AttributeTypes(),
		},
	}
}

func (o ExternalDynamicListResourceTypeIpRecurringObject) AncestorName() string {
	return "recurring"
}

func (o ExternalDynamicListResourceTypeIpRecurringObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeIpRecurringDailyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at": types.StringType,
	}
}

func (o ExternalDynamicListResourceTypeIpRecurringDailyObject) AncestorName() string {
	return "daily"
}

func (o ExternalDynamicListResourceTypeIpRecurringDailyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeIpRecurringFiveMinuteObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o ExternalDynamicListResourceTypeIpRecurringFiveMinuteObject) AncestorName() string {
	return "five-minute"
}

func (o ExternalDynamicListResourceTypeIpRecurringFiveMinuteObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeIpRecurringHourlyObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o ExternalDynamicListResourceTypeIpRecurringHourlyObject) AncestorName() string {
	return "hourly"
}

func (o ExternalDynamicListResourceTypeIpRecurringHourlyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeIpRecurringMonthlyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at":           types.StringType,
		"day_of_month": types.Int64Type,
	}
}

func (o ExternalDynamicListResourceTypeIpRecurringMonthlyObject) AncestorName() string {
	return "monthly"
}

func (o ExternalDynamicListResourceTypeIpRecurringMonthlyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeIpRecurringWeeklyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at":          types.StringType,
		"day_of_week": types.StringType,
	}
}

func (o ExternalDynamicListResourceTypeIpRecurringWeeklyObject) AncestorName() string {
	return "weekly"
}

func (o ExternalDynamicListResourceTypeIpRecurringWeeklyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypePredefinedIpObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"description":    types.StringType,
		"exception_list": types.ListType{},
		"url":            types.StringType,
	}
}

func (o ExternalDynamicListResourceTypePredefinedIpObject) AncestorName() string {
	return "predefined-ip"
}

func (o ExternalDynamicListResourceTypePredefinedIpObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypePredefinedUrlObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"description":    types.StringType,
		"exception_list": types.ListType{},
		"url":            types.StringType,
	}
}

func (o ExternalDynamicListResourceTypePredefinedUrlObject) AncestorName() string {
	return "predefined-url"
}

func (o ExternalDynamicListResourceTypePredefinedUrlObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeUrlObject) AttributeTypes() map[string]attr.Type {

	var authObj *ExternalDynamicListResourceTypeUrlAuthObject

	var recurringObj *ExternalDynamicListResourceTypeUrlRecurringObject

	return map[string]attr.Type{
		"auth": types.ObjectType{
			AttrTypes: authObj.AttributeTypes(),
		},
		"certificate_profile": types.StringType,
		"description":         types.StringType,
		"exception_list":      types.ListType{},
		"recurring": types.ObjectType{
			AttrTypes: recurringObj.AttributeTypes(),
		},
		"url": types.StringType,
	}
}

func (o ExternalDynamicListResourceTypeUrlObject) AncestorName() string {
	return "url"
}

func (o ExternalDynamicListResourceTypeUrlObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeUrlAuthObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"password": types.StringType,
		"username": types.StringType,
	}
}

func (o ExternalDynamicListResourceTypeUrlAuthObject) AncestorName() string {
	return "auth"
}

func (o ExternalDynamicListResourceTypeUrlAuthObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeUrlRecurringObject) AttributeTypes() map[string]attr.Type {

	var dailyObj *ExternalDynamicListResourceTypeUrlRecurringDailyObject

	var fiveMinuteObj *ExternalDynamicListResourceTypeUrlRecurringFiveMinuteObject

	var hourlyObj *ExternalDynamicListResourceTypeUrlRecurringHourlyObject

	var monthlyObj *ExternalDynamicListResourceTypeUrlRecurringMonthlyObject

	var weeklyObj *ExternalDynamicListResourceTypeUrlRecurringWeeklyObject
	return map[string]attr.Type{
		"daily": types.ObjectType{
			AttrTypes: dailyObj.AttributeTypes(),
		},
		"five_minute": types.ObjectType{
			AttrTypes: fiveMinuteObj.AttributeTypes(),
		},
		"hourly": types.ObjectType{
			AttrTypes: hourlyObj.AttributeTypes(),
		},
		"monthly": types.ObjectType{
			AttrTypes: monthlyObj.AttributeTypes(),
		},
		"weekly": types.ObjectType{
			AttrTypes: weeklyObj.AttributeTypes(),
		},
	}
}

func (o ExternalDynamicListResourceTypeUrlRecurringObject) AncestorName() string {
	return "recurring"
}

func (o ExternalDynamicListResourceTypeUrlRecurringObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeUrlRecurringDailyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at": types.StringType,
	}
}

func (o ExternalDynamicListResourceTypeUrlRecurringDailyObject) AncestorName() string {
	return "daily"
}

func (o ExternalDynamicListResourceTypeUrlRecurringDailyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeUrlRecurringFiveMinuteObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o ExternalDynamicListResourceTypeUrlRecurringFiveMinuteObject) AncestorName() string {
	return "five-minute"
}

func (o ExternalDynamicListResourceTypeUrlRecurringFiveMinuteObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeUrlRecurringHourlyObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o ExternalDynamicListResourceTypeUrlRecurringHourlyObject) AncestorName() string {
	return "hourly"
}

func (o ExternalDynamicListResourceTypeUrlRecurringHourlyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeUrlRecurringMonthlyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at":           types.StringType,
		"day_of_month": types.Int64Type,
	}
}

func (o ExternalDynamicListResourceTypeUrlRecurringMonthlyObject) AncestorName() string {
	return "monthly"
}

func (o ExternalDynamicListResourceTypeUrlRecurringMonthlyObject) EntryName() *string {
	return nil
}
func (o *ExternalDynamicListResourceTypeUrlRecurringWeeklyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"at":          types.StringType,
		"day_of_week": types.StringType,
	}
}

func (o ExternalDynamicListResourceTypeUrlRecurringWeeklyObject) AncestorName() string {
	return "weekly"
}

func (o ExternalDynamicListResourceTypeUrlRecurringWeeklyObject) EntryName() *string {
	return nil
}

func (o *ExternalDynamicListResourceModel) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	disableOverride_value := o.DisableOverride.ValueStringPointer()
	var type_entry *extdynlist.Type
	if o.Type != nil {
		if *obj != nil && (*obj).Type != nil {
			type_entry = (*obj).Type
		} else {
			type_entry = new(extdynlist.Type)
		}
		// ModelOrObject: Model
		diags.Append(o.Type.CopyToPango(ctx, ancestors, &type_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(extdynlist.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).DisableOverride = disableOverride_value
	(*obj).Type = type_entry

	return diags
}
func (o *ExternalDynamicListResourceTypeObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.Type, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var domain_entry *extdynlist.TypeDomain
	if o.Domain != nil {
		if *obj != nil && (*obj).Domain != nil {
			domain_entry = (*obj).Domain
		} else {
			domain_entry = new(extdynlist.TypeDomain)
		}
		// ModelOrObject: Object
		diags.Append(o.Domain.CopyToPango(ctx, append(ancestors, o), &domain_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var imei_entry *extdynlist.TypeImei
	if o.Imei != nil {
		if *obj != nil && (*obj).Imei != nil {
			imei_entry = (*obj).Imei
		} else {
			imei_entry = new(extdynlist.TypeImei)
		}
		// ModelOrObject: Object
		diags.Append(o.Imei.CopyToPango(ctx, append(ancestors, o), &imei_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var imsi_entry *extdynlist.TypeImsi
	if o.Imsi != nil {
		if *obj != nil && (*obj).Imsi != nil {
			imsi_entry = (*obj).Imsi
		} else {
			imsi_entry = new(extdynlist.TypeImsi)
		}
		// ModelOrObject: Object
		diags.Append(o.Imsi.CopyToPango(ctx, append(ancestors, o), &imsi_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var ip_entry *extdynlist.TypeIp
	if o.Ip != nil {
		if *obj != nil && (*obj).Ip != nil {
			ip_entry = (*obj).Ip
		} else {
			ip_entry = new(extdynlist.TypeIp)
		}
		// ModelOrObject: Object
		diags.Append(o.Ip.CopyToPango(ctx, append(ancestors, o), &ip_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var predefinedIp_entry *extdynlist.TypePredefinedIp
	if o.PredefinedIp != nil {
		if *obj != nil && (*obj).PredefinedIp != nil {
			predefinedIp_entry = (*obj).PredefinedIp
		} else {
			predefinedIp_entry = new(extdynlist.TypePredefinedIp)
		}
		// ModelOrObject: Object
		diags.Append(o.PredefinedIp.CopyToPango(ctx, append(ancestors, o), &predefinedIp_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var predefinedUrl_entry *extdynlist.TypePredefinedUrl
	if o.PredefinedUrl != nil {
		if *obj != nil && (*obj).PredefinedUrl != nil {
			predefinedUrl_entry = (*obj).PredefinedUrl
		} else {
			predefinedUrl_entry = new(extdynlist.TypePredefinedUrl)
		}
		// ModelOrObject: Object
		diags.Append(o.PredefinedUrl.CopyToPango(ctx, append(ancestors, o), &predefinedUrl_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var url_entry *extdynlist.TypeUrl
	if o.Url != nil {
		if *obj != nil && (*obj).Url != nil {
			url_entry = (*obj).Url
		} else {
			url_entry = new(extdynlist.TypeUrl)
		}
		// ModelOrObject: Object
		diags.Append(o.Url.CopyToPango(ctx, append(ancestors, o), &url_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(extdynlist.Type)
	}
	(*obj).Domain = domain_entry
	(*obj).Imei = imei_entry
	(*obj).Imsi = imsi_entry
	(*obj).Ip = ip_entry
	(*obj).PredefinedIp = predefinedIp_entry
	(*obj).PredefinedUrl = predefinedUrl_entry
	(*obj).Url = url_entry

	return diags
}
func (o *ExternalDynamicListResourceTypeDomainObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeDomain, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var auth_entry *extdynlist.TypeDomainAuth
	if o.Auth != nil {
		if *obj != nil && (*obj).Auth != nil {
			auth_entry = (*obj).Auth
		} else {
			auth_entry = new(extdynlist.TypeDomainAuth)
		}
		// ModelOrObject: Object
		diags.Append(o.Auth.CopyToPango(ctx, append(ancestors, o), &auth_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	certificateProfile_value := o.CertificateProfile.ValueStringPointer()
	description_value := o.Description.ValueStringPointer()
	exceptionList_pango_entries := make([]string, 0)
	diags.Append(o.ExceptionList.ElementsAs(ctx, &exceptionList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	expandDomain_value := o.ExpandDomain.ValueBoolPointer()
	var recurring_entry *extdynlist.TypeDomainRecurring
	if o.Recurring != nil {
		if *obj != nil && (*obj).Recurring != nil {
			recurring_entry = (*obj).Recurring
		} else {
			recurring_entry = new(extdynlist.TypeDomainRecurring)
		}
		// ModelOrObject: Object
		diags.Append(o.Recurring.CopyToPango(ctx, append(ancestors, o), &recurring_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	url_value := o.Url.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeDomain)
	}
	(*obj).Auth = auth_entry
	(*obj).CertificateProfile = certificateProfile_value
	(*obj).Description = description_value
	(*obj).ExceptionList = exceptionList_pango_entries
	(*obj).ExpandDomain = expandDomain_value
	(*obj).Recurring = recurring_entry
	(*obj).Url = url_value

	return diags
}
func (o *ExternalDynamicListResourceTypeDomainAuthObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeDomainAuth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
	if err != nil {
		diags.AddError("Failed to create encrypted values state key", err.Error())
		return diags
	}

	var password_value *string
	err = ev.StorePlaintextValue(valueKey, "solo", o.Password.ValueString())
	if err != nil {
		diags.AddError("Failed to manage encrypted values state", err.Error())
		return diags
	}
	password_value = o.Password.ValueStringPointer()
	username_value := o.Username.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeDomainAuth)
	}
	(*obj).Password = password_value
	(*obj).Username = username_value

	return diags
}
func (o *ExternalDynamicListResourceTypeDomainRecurringObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeDomainRecurring, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var daily_entry *extdynlist.TypeDomainRecurringDaily
	if o.Daily != nil {
		if *obj != nil && (*obj).Daily != nil {
			daily_entry = (*obj).Daily
		} else {
			daily_entry = new(extdynlist.TypeDomainRecurringDaily)
		}
		// ModelOrObject: Object
		diags.Append(o.Daily.CopyToPango(ctx, append(ancestors, o), &daily_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var fiveMinute_entry *extdynlist.TypeDomainRecurringFiveMinute
	if o.FiveMinute != nil {
		if *obj != nil && (*obj).FiveMinute != nil {
			fiveMinute_entry = (*obj).FiveMinute
		} else {
			fiveMinute_entry = new(extdynlist.TypeDomainRecurringFiveMinute)
		}
		// ModelOrObject: Object
		diags.Append(o.FiveMinute.CopyToPango(ctx, append(ancestors, o), &fiveMinute_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var hourly_entry *extdynlist.TypeDomainRecurringHourly
	if o.Hourly != nil {
		if *obj != nil && (*obj).Hourly != nil {
			hourly_entry = (*obj).Hourly
		} else {
			hourly_entry = new(extdynlist.TypeDomainRecurringHourly)
		}
		// ModelOrObject: Object
		diags.Append(o.Hourly.CopyToPango(ctx, append(ancestors, o), &hourly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var monthly_entry *extdynlist.TypeDomainRecurringMonthly
	if o.Monthly != nil {
		if *obj != nil && (*obj).Monthly != nil {
			monthly_entry = (*obj).Monthly
		} else {
			monthly_entry = new(extdynlist.TypeDomainRecurringMonthly)
		}
		// ModelOrObject: Object
		diags.Append(o.Monthly.CopyToPango(ctx, append(ancestors, o), &monthly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var weekly_entry *extdynlist.TypeDomainRecurringWeekly
	if o.Weekly != nil {
		if *obj != nil && (*obj).Weekly != nil {
			weekly_entry = (*obj).Weekly
		} else {
			weekly_entry = new(extdynlist.TypeDomainRecurringWeekly)
		}
		// ModelOrObject: Object
		diags.Append(o.Weekly.CopyToPango(ctx, append(ancestors, o), &weekly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(extdynlist.TypeDomainRecurring)
	}
	(*obj).Daily = daily_entry
	(*obj).FiveMinute = fiveMinute_entry
	(*obj).Hourly = hourly_entry
	(*obj).Monthly = monthly_entry
	(*obj).Weekly = weekly_entry

	return diags
}
func (o *ExternalDynamicListResourceTypeDomainRecurringDailyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeDomainRecurringDaily, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeDomainRecurringDaily)
	}
	(*obj).At = at_value

	return diags
}
func (o *ExternalDynamicListResourceTypeDomainRecurringFiveMinuteObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeDomainRecurringFiveMinute, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(extdynlist.TypeDomainRecurringFiveMinute)
	}

	return diags
}
func (o *ExternalDynamicListResourceTypeDomainRecurringHourlyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeDomainRecurringHourly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(extdynlist.TypeDomainRecurringHourly)
	}

	return diags
}
func (o *ExternalDynamicListResourceTypeDomainRecurringMonthlyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeDomainRecurringMonthly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()
	dayOfMonth_value := o.DayOfMonth.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeDomainRecurringMonthly)
	}
	(*obj).At = at_value
	(*obj).DayOfMonth = dayOfMonth_value

	return diags
}
func (o *ExternalDynamicListResourceTypeDomainRecurringWeeklyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeDomainRecurringWeekly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()
	dayOfWeek_value := o.DayOfWeek.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeDomainRecurringWeekly)
	}
	(*obj).At = at_value
	(*obj).DayOfWeek = dayOfWeek_value

	return diags
}
func (o *ExternalDynamicListResourceTypeImeiObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImei, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var auth_entry *extdynlist.TypeImeiAuth
	if o.Auth != nil {
		if *obj != nil && (*obj).Auth != nil {
			auth_entry = (*obj).Auth
		} else {
			auth_entry = new(extdynlist.TypeImeiAuth)
		}
		// ModelOrObject: Object
		diags.Append(o.Auth.CopyToPango(ctx, append(ancestors, o), &auth_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	certificateProfile_value := o.CertificateProfile.ValueStringPointer()
	description_value := o.Description.ValueStringPointer()
	exceptionList_pango_entries := make([]string, 0)
	diags.Append(o.ExceptionList.ElementsAs(ctx, &exceptionList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var recurring_entry *extdynlist.TypeImeiRecurring
	if o.Recurring != nil {
		if *obj != nil && (*obj).Recurring != nil {
			recurring_entry = (*obj).Recurring
		} else {
			recurring_entry = new(extdynlist.TypeImeiRecurring)
		}
		// ModelOrObject: Object
		diags.Append(o.Recurring.CopyToPango(ctx, append(ancestors, o), &recurring_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	url_value := o.Url.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImei)
	}
	(*obj).Auth = auth_entry
	(*obj).CertificateProfile = certificateProfile_value
	(*obj).Description = description_value
	(*obj).ExceptionList = exceptionList_pango_entries
	(*obj).Recurring = recurring_entry
	(*obj).Url = url_value

	return diags
}
func (o *ExternalDynamicListResourceTypeImeiAuthObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImeiAuth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
	if err != nil {
		diags.AddError("Failed to create encrypted values state key", err.Error())
		return diags
	}

	var password_value *string
	err = ev.StorePlaintextValue(valueKey, "solo", o.Password.ValueString())
	if err != nil {
		diags.AddError("Failed to manage encrypted values state", err.Error())
		return diags
	}
	password_value = o.Password.ValueStringPointer()
	username_value := o.Username.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImeiAuth)
	}
	(*obj).Password = password_value
	(*obj).Username = username_value

	return diags
}
func (o *ExternalDynamicListResourceTypeImeiRecurringObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImeiRecurring, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var daily_entry *extdynlist.TypeImeiRecurringDaily
	if o.Daily != nil {
		if *obj != nil && (*obj).Daily != nil {
			daily_entry = (*obj).Daily
		} else {
			daily_entry = new(extdynlist.TypeImeiRecurringDaily)
		}
		// ModelOrObject: Object
		diags.Append(o.Daily.CopyToPango(ctx, append(ancestors, o), &daily_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var fiveMinute_entry *extdynlist.TypeImeiRecurringFiveMinute
	if o.FiveMinute != nil {
		if *obj != nil && (*obj).FiveMinute != nil {
			fiveMinute_entry = (*obj).FiveMinute
		} else {
			fiveMinute_entry = new(extdynlist.TypeImeiRecurringFiveMinute)
		}
		// ModelOrObject: Object
		diags.Append(o.FiveMinute.CopyToPango(ctx, append(ancestors, o), &fiveMinute_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var hourly_entry *extdynlist.TypeImeiRecurringHourly
	if o.Hourly != nil {
		if *obj != nil && (*obj).Hourly != nil {
			hourly_entry = (*obj).Hourly
		} else {
			hourly_entry = new(extdynlist.TypeImeiRecurringHourly)
		}
		// ModelOrObject: Object
		diags.Append(o.Hourly.CopyToPango(ctx, append(ancestors, o), &hourly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var monthly_entry *extdynlist.TypeImeiRecurringMonthly
	if o.Monthly != nil {
		if *obj != nil && (*obj).Monthly != nil {
			monthly_entry = (*obj).Monthly
		} else {
			monthly_entry = new(extdynlist.TypeImeiRecurringMonthly)
		}
		// ModelOrObject: Object
		diags.Append(o.Monthly.CopyToPango(ctx, append(ancestors, o), &monthly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var weekly_entry *extdynlist.TypeImeiRecurringWeekly
	if o.Weekly != nil {
		if *obj != nil && (*obj).Weekly != nil {
			weekly_entry = (*obj).Weekly
		} else {
			weekly_entry = new(extdynlist.TypeImeiRecurringWeekly)
		}
		// ModelOrObject: Object
		diags.Append(o.Weekly.CopyToPango(ctx, append(ancestors, o), &weekly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImeiRecurring)
	}
	(*obj).Daily = daily_entry
	(*obj).FiveMinute = fiveMinute_entry
	(*obj).Hourly = hourly_entry
	(*obj).Monthly = monthly_entry
	(*obj).Weekly = weekly_entry

	return diags
}
func (o *ExternalDynamicListResourceTypeImeiRecurringDailyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImeiRecurringDaily, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImeiRecurringDaily)
	}
	(*obj).At = at_value

	return diags
}
func (o *ExternalDynamicListResourceTypeImeiRecurringFiveMinuteObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImeiRecurringFiveMinute, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImeiRecurringFiveMinute)
	}

	return diags
}
func (o *ExternalDynamicListResourceTypeImeiRecurringHourlyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImeiRecurringHourly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImeiRecurringHourly)
	}

	return diags
}
func (o *ExternalDynamicListResourceTypeImeiRecurringMonthlyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImeiRecurringMonthly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()
	dayOfMonth_value := o.DayOfMonth.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImeiRecurringMonthly)
	}
	(*obj).At = at_value
	(*obj).DayOfMonth = dayOfMonth_value

	return diags
}
func (o *ExternalDynamicListResourceTypeImeiRecurringWeeklyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImeiRecurringWeekly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()
	dayOfWeek_value := o.DayOfWeek.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImeiRecurringWeekly)
	}
	(*obj).At = at_value
	(*obj).DayOfWeek = dayOfWeek_value

	return diags
}
func (o *ExternalDynamicListResourceTypeImsiObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImsi, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var auth_entry *extdynlist.TypeImsiAuth
	if o.Auth != nil {
		if *obj != nil && (*obj).Auth != nil {
			auth_entry = (*obj).Auth
		} else {
			auth_entry = new(extdynlist.TypeImsiAuth)
		}
		// ModelOrObject: Object
		diags.Append(o.Auth.CopyToPango(ctx, append(ancestors, o), &auth_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	certificateProfile_value := o.CertificateProfile.ValueStringPointer()
	description_value := o.Description.ValueStringPointer()
	exceptionList_pango_entries := make([]string, 0)
	diags.Append(o.ExceptionList.ElementsAs(ctx, &exceptionList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var recurring_entry *extdynlist.TypeImsiRecurring
	if o.Recurring != nil {
		if *obj != nil && (*obj).Recurring != nil {
			recurring_entry = (*obj).Recurring
		} else {
			recurring_entry = new(extdynlist.TypeImsiRecurring)
		}
		// ModelOrObject: Object
		diags.Append(o.Recurring.CopyToPango(ctx, append(ancestors, o), &recurring_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	url_value := o.Url.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImsi)
	}
	(*obj).Auth = auth_entry
	(*obj).CertificateProfile = certificateProfile_value
	(*obj).Description = description_value
	(*obj).ExceptionList = exceptionList_pango_entries
	(*obj).Recurring = recurring_entry
	(*obj).Url = url_value

	return diags
}
func (o *ExternalDynamicListResourceTypeImsiAuthObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImsiAuth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
	if err != nil {
		diags.AddError("Failed to create encrypted values state key", err.Error())
		return diags
	}

	var password_value *string
	err = ev.StorePlaintextValue(valueKey, "solo", o.Password.ValueString())
	if err != nil {
		diags.AddError("Failed to manage encrypted values state", err.Error())
		return diags
	}
	password_value = o.Password.ValueStringPointer()
	username_value := o.Username.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImsiAuth)
	}
	(*obj).Password = password_value
	(*obj).Username = username_value

	return diags
}
func (o *ExternalDynamicListResourceTypeImsiRecurringObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImsiRecurring, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var daily_entry *extdynlist.TypeImsiRecurringDaily
	if o.Daily != nil {
		if *obj != nil && (*obj).Daily != nil {
			daily_entry = (*obj).Daily
		} else {
			daily_entry = new(extdynlist.TypeImsiRecurringDaily)
		}
		// ModelOrObject: Object
		diags.Append(o.Daily.CopyToPango(ctx, append(ancestors, o), &daily_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var fiveMinute_entry *extdynlist.TypeImsiRecurringFiveMinute
	if o.FiveMinute != nil {
		if *obj != nil && (*obj).FiveMinute != nil {
			fiveMinute_entry = (*obj).FiveMinute
		} else {
			fiveMinute_entry = new(extdynlist.TypeImsiRecurringFiveMinute)
		}
		// ModelOrObject: Object
		diags.Append(o.FiveMinute.CopyToPango(ctx, append(ancestors, o), &fiveMinute_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var hourly_entry *extdynlist.TypeImsiRecurringHourly
	if o.Hourly != nil {
		if *obj != nil && (*obj).Hourly != nil {
			hourly_entry = (*obj).Hourly
		} else {
			hourly_entry = new(extdynlist.TypeImsiRecurringHourly)
		}
		// ModelOrObject: Object
		diags.Append(o.Hourly.CopyToPango(ctx, append(ancestors, o), &hourly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var monthly_entry *extdynlist.TypeImsiRecurringMonthly
	if o.Monthly != nil {
		if *obj != nil && (*obj).Monthly != nil {
			monthly_entry = (*obj).Monthly
		} else {
			monthly_entry = new(extdynlist.TypeImsiRecurringMonthly)
		}
		// ModelOrObject: Object
		diags.Append(o.Monthly.CopyToPango(ctx, append(ancestors, o), &monthly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var weekly_entry *extdynlist.TypeImsiRecurringWeekly
	if o.Weekly != nil {
		if *obj != nil && (*obj).Weekly != nil {
			weekly_entry = (*obj).Weekly
		} else {
			weekly_entry = new(extdynlist.TypeImsiRecurringWeekly)
		}
		// ModelOrObject: Object
		diags.Append(o.Weekly.CopyToPango(ctx, append(ancestors, o), &weekly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImsiRecurring)
	}
	(*obj).Daily = daily_entry
	(*obj).FiveMinute = fiveMinute_entry
	(*obj).Hourly = hourly_entry
	(*obj).Monthly = monthly_entry
	(*obj).Weekly = weekly_entry

	return diags
}
func (o *ExternalDynamicListResourceTypeImsiRecurringDailyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImsiRecurringDaily, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImsiRecurringDaily)
	}
	(*obj).At = at_value

	return diags
}
func (o *ExternalDynamicListResourceTypeImsiRecurringFiveMinuteObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImsiRecurringFiveMinute, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImsiRecurringFiveMinute)
	}

	return diags
}
func (o *ExternalDynamicListResourceTypeImsiRecurringHourlyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImsiRecurringHourly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImsiRecurringHourly)
	}

	return diags
}
func (o *ExternalDynamicListResourceTypeImsiRecurringMonthlyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImsiRecurringMonthly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()
	dayOfMonth_value := o.DayOfMonth.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImsiRecurringMonthly)
	}
	(*obj).At = at_value
	(*obj).DayOfMonth = dayOfMonth_value

	return diags
}
func (o *ExternalDynamicListResourceTypeImsiRecurringWeeklyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeImsiRecurringWeekly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()
	dayOfWeek_value := o.DayOfWeek.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeImsiRecurringWeekly)
	}
	(*obj).At = at_value
	(*obj).DayOfWeek = dayOfWeek_value

	return diags
}
func (o *ExternalDynamicListResourceTypeIpObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeIp, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var auth_entry *extdynlist.TypeIpAuth
	if o.Auth != nil {
		if *obj != nil && (*obj).Auth != nil {
			auth_entry = (*obj).Auth
		} else {
			auth_entry = new(extdynlist.TypeIpAuth)
		}
		// ModelOrObject: Object
		diags.Append(o.Auth.CopyToPango(ctx, append(ancestors, o), &auth_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	certificateProfile_value := o.CertificateProfile.ValueStringPointer()
	description_value := o.Description.ValueStringPointer()
	exceptionList_pango_entries := make([]string, 0)
	diags.Append(o.ExceptionList.ElementsAs(ctx, &exceptionList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var recurring_entry *extdynlist.TypeIpRecurring
	if o.Recurring != nil {
		if *obj != nil && (*obj).Recurring != nil {
			recurring_entry = (*obj).Recurring
		} else {
			recurring_entry = new(extdynlist.TypeIpRecurring)
		}
		// ModelOrObject: Object
		diags.Append(o.Recurring.CopyToPango(ctx, append(ancestors, o), &recurring_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	url_value := o.Url.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeIp)
	}
	(*obj).Auth = auth_entry
	(*obj).CertificateProfile = certificateProfile_value
	(*obj).Description = description_value
	(*obj).ExceptionList = exceptionList_pango_entries
	(*obj).Recurring = recurring_entry
	(*obj).Url = url_value

	return diags
}
func (o *ExternalDynamicListResourceTypeIpAuthObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeIpAuth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
	if err != nil {
		diags.AddError("Failed to create encrypted values state key", err.Error())
		return diags
	}

	var password_value *string
	err = ev.StorePlaintextValue(valueKey, "solo", o.Password.ValueString())
	if err != nil {
		diags.AddError("Failed to manage encrypted values state", err.Error())
		return diags
	}
	password_value = o.Password.ValueStringPointer()
	username_value := o.Username.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeIpAuth)
	}
	(*obj).Password = password_value
	(*obj).Username = username_value

	return diags
}
func (o *ExternalDynamicListResourceTypeIpRecurringObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeIpRecurring, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var daily_entry *extdynlist.TypeIpRecurringDaily
	if o.Daily != nil {
		if *obj != nil && (*obj).Daily != nil {
			daily_entry = (*obj).Daily
		} else {
			daily_entry = new(extdynlist.TypeIpRecurringDaily)
		}
		// ModelOrObject: Object
		diags.Append(o.Daily.CopyToPango(ctx, append(ancestors, o), &daily_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var fiveMinute_entry *extdynlist.TypeIpRecurringFiveMinute
	if o.FiveMinute != nil {
		if *obj != nil && (*obj).FiveMinute != nil {
			fiveMinute_entry = (*obj).FiveMinute
		} else {
			fiveMinute_entry = new(extdynlist.TypeIpRecurringFiveMinute)
		}
		// ModelOrObject: Object
		diags.Append(o.FiveMinute.CopyToPango(ctx, append(ancestors, o), &fiveMinute_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var hourly_entry *extdynlist.TypeIpRecurringHourly
	if o.Hourly != nil {
		if *obj != nil && (*obj).Hourly != nil {
			hourly_entry = (*obj).Hourly
		} else {
			hourly_entry = new(extdynlist.TypeIpRecurringHourly)
		}
		// ModelOrObject: Object
		diags.Append(o.Hourly.CopyToPango(ctx, append(ancestors, o), &hourly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var monthly_entry *extdynlist.TypeIpRecurringMonthly
	if o.Monthly != nil {
		if *obj != nil && (*obj).Monthly != nil {
			monthly_entry = (*obj).Monthly
		} else {
			monthly_entry = new(extdynlist.TypeIpRecurringMonthly)
		}
		// ModelOrObject: Object
		diags.Append(o.Monthly.CopyToPango(ctx, append(ancestors, o), &monthly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var weekly_entry *extdynlist.TypeIpRecurringWeekly
	if o.Weekly != nil {
		if *obj != nil && (*obj).Weekly != nil {
			weekly_entry = (*obj).Weekly
		} else {
			weekly_entry = new(extdynlist.TypeIpRecurringWeekly)
		}
		// ModelOrObject: Object
		diags.Append(o.Weekly.CopyToPango(ctx, append(ancestors, o), &weekly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(extdynlist.TypeIpRecurring)
	}
	(*obj).Daily = daily_entry
	(*obj).FiveMinute = fiveMinute_entry
	(*obj).Hourly = hourly_entry
	(*obj).Monthly = monthly_entry
	(*obj).Weekly = weekly_entry

	return diags
}
func (o *ExternalDynamicListResourceTypeIpRecurringDailyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeIpRecurringDaily, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeIpRecurringDaily)
	}
	(*obj).At = at_value

	return diags
}
func (o *ExternalDynamicListResourceTypeIpRecurringFiveMinuteObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeIpRecurringFiveMinute, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(extdynlist.TypeIpRecurringFiveMinute)
	}

	return diags
}
func (o *ExternalDynamicListResourceTypeIpRecurringHourlyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeIpRecurringHourly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(extdynlist.TypeIpRecurringHourly)
	}

	return diags
}
func (o *ExternalDynamicListResourceTypeIpRecurringMonthlyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeIpRecurringMonthly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()
	dayOfMonth_value := o.DayOfMonth.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeIpRecurringMonthly)
	}
	(*obj).At = at_value
	(*obj).DayOfMonth = dayOfMonth_value

	return diags
}
func (o *ExternalDynamicListResourceTypeIpRecurringWeeklyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeIpRecurringWeekly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()
	dayOfWeek_value := o.DayOfWeek.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeIpRecurringWeekly)
	}
	(*obj).At = at_value
	(*obj).DayOfWeek = dayOfWeek_value

	return diags
}
func (o *ExternalDynamicListResourceTypePredefinedIpObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypePredefinedIp, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	description_value := o.Description.ValueStringPointer()
	exceptionList_pango_entries := make([]string, 0)
	diags.Append(o.ExceptionList.ElementsAs(ctx, &exceptionList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	url_value := o.Url.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypePredefinedIp)
	}
	(*obj).Description = description_value
	(*obj).ExceptionList = exceptionList_pango_entries
	(*obj).Url = url_value

	return diags
}
func (o *ExternalDynamicListResourceTypePredefinedUrlObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypePredefinedUrl, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	description_value := o.Description.ValueStringPointer()
	exceptionList_pango_entries := make([]string, 0)
	diags.Append(o.ExceptionList.ElementsAs(ctx, &exceptionList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	url_value := o.Url.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypePredefinedUrl)
	}
	(*obj).Description = description_value
	(*obj).ExceptionList = exceptionList_pango_entries
	(*obj).Url = url_value

	return diags
}
func (o *ExternalDynamicListResourceTypeUrlObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeUrl, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var auth_entry *extdynlist.TypeUrlAuth
	if o.Auth != nil {
		if *obj != nil && (*obj).Auth != nil {
			auth_entry = (*obj).Auth
		} else {
			auth_entry = new(extdynlist.TypeUrlAuth)
		}
		// ModelOrObject: Object
		diags.Append(o.Auth.CopyToPango(ctx, append(ancestors, o), &auth_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	certificateProfile_value := o.CertificateProfile.ValueStringPointer()
	description_value := o.Description.ValueStringPointer()
	exceptionList_pango_entries := make([]string, 0)
	diags.Append(o.ExceptionList.ElementsAs(ctx, &exceptionList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var recurring_entry *extdynlist.TypeUrlRecurring
	if o.Recurring != nil {
		if *obj != nil && (*obj).Recurring != nil {
			recurring_entry = (*obj).Recurring
		} else {
			recurring_entry = new(extdynlist.TypeUrlRecurring)
		}
		// ModelOrObject: Object
		diags.Append(o.Recurring.CopyToPango(ctx, append(ancestors, o), &recurring_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	url_value := o.Url.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeUrl)
	}
	(*obj).Auth = auth_entry
	(*obj).CertificateProfile = certificateProfile_value
	(*obj).Description = description_value
	(*obj).ExceptionList = exceptionList_pango_entries
	(*obj).Recurring = recurring_entry
	(*obj).Url = url_value

	return diags
}
func (o *ExternalDynamicListResourceTypeUrlAuthObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeUrlAuth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
	if err != nil {
		diags.AddError("Failed to create encrypted values state key", err.Error())
		return diags
	}

	var password_value *string
	err = ev.StorePlaintextValue(valueKey, "solo", o.Password.ValueString())
	if err != nil {
		diags.AddError("Failed to manage encrypted values state", err.Error())
		return diags
	}
	password_value = o.Password.ValueStringPointer()
	username_value := o.Username.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeUrlAuth)
	}
	(*obj).Password = password_value
	(*obj).Username = username_value

	return diags
}
func (o *ExternalDynamicListResourceTypeUrlRecurringObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeUrlRecurring, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var daily_entry *extdynlist.TypeUrlRecurringDaily
	if o.Daily != nil {
		if *obj != nil && (*obj).Daily != nil {
			daily_entry = (*obj).Daily
		} else {
			daily_entry = new(extdynlist.TypeUrlRecurringDaily)
		}
		// ModelOrObject: Object
		diags.Append(o.Daily.CopyToPango(ctx, append(ancestors, o), &daily_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var fiveMinute_entry *extdynlist.TypeUrlRecurringFiveMinute
	if o.FiveMinute != nil {
		if *obj != nil && (*obj).FiveMinute != nil {
			fiveMinute_entry = (*obj).FiveMinute
		} else {
			fiveMinute_entry = new(extdynlist.TypeUrlRecurringFiveMinute)
		}
		// ModelOrObject: Object
		diags.Append(o.FiveMinute.CopyToPango(ctx, append(ancestors, o), &fiveMinute_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var hourly_entry *extdynlist.TypeUrlRecurringHourly
	if o.Hourly != nil {
		if *obj != nil && (*obj).Hourly != nil {
			hourly_entry = (*obj).Hourly
		} else {
			hourly_entry = new(extdynlist.TypeUrlRecurringHourly)
		}
		// ModelOrObject: Object
		diags.Append(o.Hourly.CopyToPango(ctx, append(ancestors, o), &hourly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var monthly_entry *extdynlist.TypeUrlRecurringMonthly
	if o.Monthly != nil {
		if *obj != nil && (*obj).Monthly != nil {
			monthly_entry = (*obj).Monthly
		} else {
			monthly_entry = new(extdynlist.TypeUrlRecurringMonthly)
		}
		// ModelOrObject: Object
		diags.Append(o.Monthly.CopyToPango(ctx, append(ancestors, o), &monthly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var weekly_entry *extdynlist.TypeUrlRecurringWeekly
	if o.Weekly != nil {
		if *obj != nil && (*obj).Weekly != nil {
			weekly_entry = (*obj).Weekly
		} else {
			weekly_entry = new(extdynlist.TypeUrlRecurringWeekly)
		}
		// ModelOrObject: Object
		diags.Append(o.Weekly.CopyToPango(ctx, append(ancestors, o), &weekly_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(extdynlist.TypeUrlRecurring)
	}
	(*obj).Daily = daily_entry
	(*obj).FiveMinute = fiveMinute_entry
	(*obj).Hourly = hourly_entry
	(*obj).Monthly = monthly_entry
	(*obj).Weekly = weekly_entry

	return diags
}
func (o *ExternalDynamicListResourceTypeUrlRecurringDailyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeUrlRecurringDaily, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeUrlRecurringDaily)
	}
	(*obj).At = at_value

	return diags
}
func (o *ExternalDynamicListResourceTypeUrlRecurringFiveMinuteObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeUrlRecurringFiveMinute, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(extdynlist.TypeUrlRecurringFiveMinute)
	}

	return diags
}
func (o *ExternalDynamicListResourceTypeUrlRecurringHourlyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeUrlRecurringHourly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(extdynlist.TypeUrlRecurringHourly)
	}

	return diags
}
func (o *ExternalDynamicListResourceTypeUrlRecurringMonthlyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeUrlRecurringMonthly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()
	dayOfMonth_value := o.DayOfMonth.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeUrlRecurringMonthly)
	}
	(*obj).At = at_value
	(*obj).DayOfMonth = dayOfMonth_value

	return diags
}
func (o *ExternalDynamicListResourceTypeUrlRecurringWeeklyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **extdynlist.TypeUrlRecurringWeekly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	at_value := o.At.ValueStringPointer()
	dayOfWeek_value := o.DayOfWeek.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(extdynlist.TypeUrlRecurringWeekly)
	}
	(*obj).At = at_value
	(*obj).DayOfWeek = dayOfWeek_value

	return diags
}

func (o *ExternalDynamicListResourceModel) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var type_object *ExternalDynamicListResourceTypeObject
	if obj.Type != nil {
		type_object = new(ExternalDynamicListResourceTypeObject)
		diags.Append(type_object.CopyFromPango(ctx, ancestors, obj.Type, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var disableOverride_value types.String
	if obj.DisableOverride != nil {
		disableOverride_value = types.StringValue(*obj.DisableOverride)
	}
	o.Name = types.StringValue(obj.Name)
	o.DisableOverride = disableOverride_value
	o.Type = type_object

	return diags
}

func (o *ExternalDynamicListResourceTypeObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.Type, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var domain_object *ExternalDynamicListResourceTypeDomainObject
	if obj.Domain != nil {
		domain_object = new(ExternalDynamicListResourceTypeDomainObject)
		diags.Append(domain_object.CopyFromPango(ctx, append(ancestors, o), obj.Domain, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var imei_object *ExternalDynamicListResourceTypeImeiObject
	if obj.Imei != nil {
		imei_object = new(ExternalDynamicListResourceTypeImeiObject)
		diags.Append(imei_object.CopyFromPango(ctx, append(ancestors, o), obj.Imei, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var imsi_object *ExternalDynamicListResourceTypeImsiObject
	if obj.Imsi != nil {
		imsi_object = new(ExternalDynamicListResourceTypeImsiObject)
		diags.Append(imsi_object.CopyFromPango(ctx, append(ancestors, o), obj.Imsi, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var ip_object *ExternalDynamicListResourceTypeIpObject
	if obj.Ip != nil {
		ip_object = new(ExternalDynamicListResourceTypeIpObject)
		diags.Append(ip_object.CopyFromPango(ctx, append(ancestors, o), obj.Ip, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var predefinedIp_object *ExternalDynamicListResourceTypePredefinedIpObject
	if obj.PredefinedIp != nil {
		predefinedIp_object = new(ExternalDynamicListResourceTypePredefinedIpObject)
		diags.Append(predefinedIp_object.CopyFromPango(ctx, append(ancestors, o), obj.PredefinedIp, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var predefinedUrl_object *ExternalDynamicListResourceTypePredefinedUrlObject
	if obj.PredefinedUrl != nil {
		predefinedUrl_object = new(ExternalDynamicListResourceTypePredefinedUrlObject)
		diags.Append(predefinedUrl_object.CopyFromPango(ctx, append(ancestors, o), obj.PredefinedUrl, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var url_object *ExternalDynamicListResourceTypeUrlObject
	if obj.Url != nil {
		url_object = new(ExternalDynamicListResourceTypeUrlObject)
		diags.Append(url_object.CopyFromPango(ctx, append(ancestors, o), obj.Url, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Domain = domain_object
	o.Imei = imei_object
	o.Imsi = imsi_object
	o.Ip = ip_object
	o.PredefinedIp = predefinedIp_object
	o.PredefinedUrl = predefinedUrl_object
	o.Url = url_object

	return diags
}

func (o *ExternalDynamicListResourceTypeDomainObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeDomain, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var exceptionList_list types.List
	{
		var list_diags diag.Diagnostics
		exceptionList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ExceptionList)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var auth_object *ExternalDynamicListResourceTypeDomainAuthObject
	if obj.Auth != nil {
		auth_object = new(ExternalDynamicListResourceTypeDomainAuthObject)
		diags.Append(auth_object.CopyFromPango(ctx, append(ancestors, o), obj.Auth, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var recurring_object *ExternalDynamicListResourceTypeDomainRecurringObject
	if obj.Recurring != nil {
		recurring_object = new(ExternalDynamicListResourceTypeDomainRecurringObject)
		diags.Append(recurring_object.CopyFromPango(ctx, append(ancestors, o), obj.Recurring, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var certificateProfile_value types.String
	if obj.CertificateProfile != nil {
		certificateProfile_value = types.StringValue(*obj.CertificateProfile)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var expandDomain_value types.Bool
	if obj.ExpandDomain != nil {
		expandDomain_value = types.BoolValue(*obj.ExpandDomain)
	}
	var url_value types.String
	if obj.Url != nil {
		url_value = types.StringValue(*obj.Url)
	}
	o.Auth = auth_object
	o.CertificateProfile = certificateProfile_value
	o.Description = description_value
	o.ExceptionList = exceptionList_list
	o.ExpandDomain = expandDomain_value
	o.Recurring = recurring_object
	o.Url = url_value

	return diags
}

func (o *ExternalDynamicListResourceTypeDomainAuthObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeDomainAuth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var password_value types.String
	if obj.Password != nil {
		valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
		if err != nil {
			diags.AddError("Failed to create encrypted values state key", err.Error())
			return diags
		}

		if evFromState, found := ev.GetEncryptedValue(valueKey); found && ev.PreferServerState() && *obj.Password != evFromState {
			password_value = types.StringPointerValue(obj.Password)
		} else if value, found := ev.GetPlaintextValue(valueKey); found {
			password_value = types.StringValue(value)
		} else {
			diags.AddError("Failed to read encrypted values state", fmt.Sprintf("Missing plaintext value for %s", valueKey))
			return diags
		}

		if !ev.PreferServerState() {
			err = ev.StoreEncryptedValue(valueKey, "solo", *obj.Password)
			if err != nil {
				diags.AddError("Failed to store encrypted values state", err.Error())
				return diags
			}
		}
	}
	var username_value types.String
	if obj.Username != nil {
		username_value = types.StringValue(*obj.Username)
	}
	o.Password = password_value
	o.Username = username_value

	return diags
}

func (o *ExternalDynamicListResourceTypeDomainRecurringObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeDomainRecurring, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var daily_object *ExternalDynamicListResourceTypeDomainRecurringDailyObject
	if obj.Daily != nil {
		daily_object = new(ExternalDynamicListResourceTypeDomainRecurringDailyObject)
		diags.Append(daily_object.CopyFromPango(ctx, append(ancestors, o), obj.Daily, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var fiveMinute_object *ExternalDynamicListResourceTypeDomainRecurringFiveMinuteObject
	if obj.FiveMinute != nil {
		fiveMinute_object = new(ExternalDynamicListResourceTypeDomainRecurringFiveMinuteObject)
		diags.Append(fiveMinute_object.CopyFromPango(ctx, append(ancestors, o), obj.FiveMinute, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var hourly_object *ExternalDynamicListResourceTypeDomainRecurringHourlyObject
	if obj.Hourly != nil {
		hourly_object = new(ExternalDynamicListResourceTypeDomainRecurringHourlyObject)
		diags.Append(hourly_object.CopyFromPango(ctx, append(ancestors, o), obj.Hourly, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var monthly_object *ExternalDynamicListResourceTypeDomainRecurringMonthlyObject
	if obj.Monthly != nil {
		monthly_object = new(ExternalDynamicListResourceTypeDomainRecurringMonthlyObject)
		diags.Append(monthly_object.CopyFromPango(ctx, append(ancestors, o), obj.Monthly, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var weekly_object *ExternalDynamicListResourceTypeDomainRecurringWeeklyObject
	if obj.Weekly != nil {
		weekly_object = new(ExternalDynamicListResourceTypeDomainRecurringWeeklyObject)
		diags.Append(weekly_object.CopyFromPango(ctx, append(ancestors, o), obj.Weekly, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Daily = daily_object
	o.FiveMinute = fiveMinute_object
	o.Hourly = hourly_object
	o.Monthly = monthly_object
	o.Weekly = weekly_object

	return diags
}

func (o *ExternalDynamicListResourceTypeDomainRecurringDailyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeDomainRecurringDaily, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	o.At = at_value

	return diags
}

func (o *ExternalDynamicListResourceTypeDomainRecurringFiveMinuteObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeDomainRecurringFiveMinute, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *ExternalDynamicListResourceTypeDomainRecurringHourlyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeDomainRecurringHourly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *ExternalDynamicListResourceTypeDomainRecurringMonthlyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeDomainRecurringMonthly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	var dayOfMonth_value types.Int64
	if obj.DayOfMonth != nil {
		dayOfMonth_value = types.Int64Value(*obj.DayOfMonth)
	}
	o.At = at_value
	o.DayOfMonth = dayOfMonth_value

	return diags
}

func (o *ExternalDynamicListResourceTypeDomainRecurringWeeklyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeDomainRecurringWeekly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	var dayOfWeek_value types.String
	if obj.DayOfWeek != nil {
		dayOfWeek_value = types.StringValue(*obj.DayOfWeek)
	}
	o.At = at_value
	o.DayOfWeek = dayOfWeek_value

	return diags
}

func (o *ExternalDynamicListResourceTypeImeiObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImei, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var exceptionList_list types.List
	{
		var list_diags diag.Diagnostics
		exceptionList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ExceptionList)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var auth_object *ExternalDynamicListResourceTypeImeiAuthObject
	if obj.Auth != nil {
		auth_object = new(ExternalDynamicListResourceTypeImeiAuthObject)
		diags.Append(auth_object.CopyFromPango(ctx, append(ancestors, o), obj.Auth, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var recurring_object *ExternalDynamicListResourceTypeImeiRecurringObject
	if obj.Recurring != nil {
		recurring_object = new(ExternalDynamicListResourceTypeImeiRecurringObject)
		diags.Append(recurring_object.CopyFromPango(ctx, append(ancestors, o), obj.Recurring, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var certificateProfile_value types.String
	if obj.CertificateProfile != nil {
		certificateProfile_value = types.StringValue(*obj.CertificateProfile)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var url_value types.String
	if obj.Url != nil {
		url_value = types.StringValue(*obj.Url)
	}
	o.Auth = auth_object
	o.CertificateProfile = certificateProfile_value
	o.Description = description_value
	o.ExceptionList = exceptionList_list
	o.Recurring = recurring_object
	o.Url = url_value

	return diags
}

func (o *ExternalDynamicListResourceTypeImeiAuthObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImeiAuth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var password_value types.String
	if obj.Password != nil {
		valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
		if err != nil {
			diags.AddError("Failed to create encrypted values state key", err.Error())
			return diags
		}

		if evFromState, found := ev.GetEncryptedValue(valueKey); found && ev.PreferServerState() && *obj.Password != evFromState {
			password_value = types.StringPointerValue(obj.Password)
		} else if value, found := ev.GetPlaintextValue(valueKey); found {
			password_value = types.StringValue(value)
		} else {
			diags.AddError("Failed to read encrypted values state", fmt.Sprintf("Missing plaintext value for %s", valueKey))
			return diags
		}

		if !ev.PreferServerState() {
			err = ev.StoreEncryptedValue(valueKey, "solo", *obj.Password)
			if err != nil {
				diags.AddError("Failed to store encrypted values state", err.Error())
				return diags
			}
		}
	}
	var username_value types.String
	if obj.Username != nil {
		username_value = types.StringValue(*obj.Username)
	}
	o.Password = password_value
	o.Username = username_value

	return diags
}

func (o *ExternalDynamicListResourceTypeImeiRecurringObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImeiRecurring, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var daily_object *ExternalDynamicListResourceTypeImeiRecurringDailyObject
	if obj.Daily != nil {
		daily_object = new(ExternalDynamicListResourceTypeImeiRecurringDailyObject)
		diags.Append(daily_object.CopyFromPango(ctx, append(ancestors, o), obj.Daily, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var fiveMinute_object *ExternalDynamicListResourceTypeImeiRecurringFiveMinuteObject
	if obj.FiveMinute != nil {
		fiveMinute_object = new(ExternalDynamicListResourceTypeImeiRecurringFiveMinuteObject)
		diags.Append(fiveMinute_object.CopyFromPango(ctx, append(ancestors, o), obj.FiveMinute, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var hourly_object *ExternalDynamicListResourceTypeImeiRecurringHourlyObject
	if obj.Hourly != nil {
		hourly_object = new(ExternalDynamicListResourceTypeImeiRecurringHourlyObject)
		diags.Append(hourly_object.CopyFromPango(ctx, append(ancestors, o), obj.Hourly, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var monthly_object *ExternalDynamicListResourceTypeImeiRecurringMonthlyObject
	if obj.Monthly != nil {
		monthly_object = new(ExternalDynamicListResourceTypeImeiRecurringMonthlyObject)
		diags.Append(monthly_object.CopyFromPango(ctx, append(ancestors, o), obj.Monthly, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var weekly_object *ExternalDynamicListResourceTypeImeiRecurringWeeklyObject
	if obj.Weekly != nil {
		weekly_object = new(ExternalDynamicListResourceTypeImeiRecurringWeeklyObject)
		diags.Append(weekly_object.CopyFromPango(ctx, append(ancestors, o), obj.Weekly, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Daily = daily_object
	o.FiveMinute = fiveMinute_object
	o.Hourly = hourly_object
	o.Monthly = monthly_object
	o.Weekly = weekly_object

	return diags
}

func (o *ExternalDynamicListResourceTypeImeiRecurringDailyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImeiRecurringDaily, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	o.At = at_value

	return diags
}

func (o *ExternalDynamicListResourceTypeImeiRecurringFiveMinuteObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImeiRecurringFiveMinute, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *ExternalDynamicListResourceTypeImeiRecurringHourlyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImeiRecurringHourly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *ExternalDynamicListResourceTypeImeiRecurringMonthlyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImeiRecurringMonthly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	var dayOfMonth_value types.Int64
	if obj.DayOfMonth != nil {
		dayOfMonth_value = types.Int64Value(*obj.DayOfMonth)
	}
	o.At = at_value
	o.DayOfMonth = dayOfMonth_value

	return diags
}

func (o *ExternalDynamicListResourceTypeImeiRecurringWeeklyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImeiRecurringWeekly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	var dayOfWeek_value types.String
	if obj.DayOfWeek != nil {
		dayOfWeek_value = types.StringValue(*obj.DayOfWeek)
	}
	o.At = at_value
	o.DayOfWeek = dayOfWeek_value

	return diags
}

func (o *ExternalDynamicListResourceTypeImsiObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImsi, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var exceptionList_list types.List
	{
		var list_diags diag.Diagnostics
		exceptionList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ExceptionList)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var auth_object *ExternalDynamicListResourceTypeImsiAuthObject
	if obj.Auth != nil {
		auth_object = new(ExternalDynamicListResourceTypeImsiAuthObject)
		diags.Append(auth_object.CopyFromPango(ctx, append(ancestors, o), obj.Auth, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var recurring_object *ExternalDynamicListResourceTypeImsiRecurringObject
	if obj.Recurring != nil {
		recurring_object = new(ExternalDynamicListResourceTypeImsiRecurringObject)
		diags.Append(recurring_object.CopyFromPango(ctx, append(ancestors, o), obj.Recurring, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var certificateProfile_value types.String
	if obj.CertificateProfile != nil {
		certificateProfile_value = types.StringValue(*obj.CertificateProfile)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var url_value types.String
	if obj.Url != nil {
		url_value = types.StringValue(*obj.Url)
	}
	o.Auth = auth_object
	o.CertificateProfile = certificateProfile_value
	o.Description = description_value
	o.ExceptionList = exceptionList_list
	o.Recurring = recurring_object
	o.Url = url_value

	return diags
}

func (o *ExternalDynamicListResourceTypeImsiAuthObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImsiAuth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var password_value types.String
	if obj.Password != nil {
		valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
		if err != nil {
			diags.AddError("Failed to create encrypted values state key", err.Error())
			return diags
		}

		if evFromState, found := ev.GetEncryptedValue(valueKey); found && ev.PreferServerState() && *obj.Password != evFromState {
			password_value = types.StringPointerValue(obj.Password)
		} else if value, found := ev.GetPlaintextValue(valueKey); found {
			password_value = types.StringValue(value)
		} else {
			diags.AddError("Failed to read encrypted values state", fmt.Sprintf("Missing plaintext value for %s", valueKey))
			return diags
		}

		if !ev.PreferServerState() {
			err = ev.StoreEncryptedValue(valueKey, "solo", *obj.Password)
			if err != nil {
				diags.AddError("Failed to store encrypted values state", err.Error())
				return diags
			}
		}
	}
	var username_value types.String
	if obj.Username != nil {
		username_value = types.StringValue(*obj.Username)
	}
	o.Password = password_value
	o.Username = username_value

	return diags
}

func (o *ExternalDynamicListResourceTypeImsiRecurringObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImsiRecurring, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var daily_object *ExternalDynamicListResourceTypeImsiRecurringDailyObject
	if obj.Daily != nil {
		daily_object = new(ExternalDynamicListResourceTypeImsiRecurringDailyObject)
		diags.Append(daily_object.CopyFromPango(ctx, append(ancestors, o), obj.Daily, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var fiveMinute_object *ExternalDynamicListResourceTypeImsiRecurringFiveMinuteObject
	if obj.FiveMinute != nil {
		fiveMinute_object = new(ExternalDynamicListResourceTypeImsiRecurringFiveMinuteObject)
		diags.Append(fiveMinute_object.CopyFromPango(ctx, append(ancestors, o), obj.FiveMinute, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var hourly_object *ExternalDynamicListResourceTypeImsiRecurringHourlyObject
	if obj.Hourly != nil {
		hourly_object = new(ExternalDynamicListResourceTypeImsiRecurringHourlyObject)
		diags.Append(hourly_object.CopyFromPango(ctx, append(ancestors, o), obj.Hourly, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var monthly_object *ExternalDynamicListResourceTypeImsiRecurringMonthlyObject
	if obj.Monthly != nil {
		monthly_object = new(ExternalDynamicListResourceTypeImsiRecurringMonthlyObject)
		diags.Append(monthly_object.CopyFromPango(ctx, append(ancestors, o), obj.Monthly, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var weekly_object *ExternalDynamicListResourceTypeImsiRecurringWeeklyObject
	if obj.Weekly != nil {
		weekly_object = new(ExternalDynamicListResourceTypeImsiRecurringWeeklyObject)
		diags.Append(weekly_object.CopyFromPango(ctx, append(ancestors, o), obj.Weekly, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Daily = daily_object
	o.FiveMinute = fiveMinute_object
	o.Hourly = hourly_object
	o.Monthly = monthly_object
	o.Weekly = weekly_object

	return diags
}

func (o *ExternalDynamicListResourceTypeImsiRecurringDailyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImsiRecurringDaily, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	o.At = at_value

	return diags
}

func (o *ExternalDynamicListResourceTypeImsiRecurringFiveMinuteObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImsiRecurringFiveMinute, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *ExternalDynamicListResourceTypeImsiRecurringHourlyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImsiRecurringHourly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *ExternalDynamicListResourceTypeImsiRecurringMonthlyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImsiRecurringMonthly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	var dayOfMonth_value types.Int64
	if obj.DayOfMonth != nil {
		dayOfMonth_value = types.Int64Value(*obj.DayOfMonth)
	}
	o.At = at_value
	o.DayOfMonth = dayOfMonth_value

	return diags
}

func (o *ExternalDynamicListResourceTypeImsiRecurringWeeklyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeImsiRecurringWeekly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	var dayOfWeek_value types.String
	if obj.DayOfWeek != nil {
		dayOfWeek_value = types.StringValue(*obj.DayOfWeek)
	}
	o.At = at_value
	o.DayOfWeek = dayOfWeek_value

	return diags
}

func (o *ExternalDynamicListResourceTypeIpObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeIp, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var exceptionList_list types.List
	{
		var list_diags diag.Diagnostics
		exceptionList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ExceptionList)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var auth_object *ExternalDynamicListResourceTypeIpAuthObject
	if obj.Auth != nil {
		auth_object = new(ExternalDynamicListResourceTypeIpAuthObject)
		diags.Append(auth_object.CopyFromPango(ctx, append(ancestors, o), obj.Auth, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var recurring_object *ExternalDynamicListResourceTypeIpRecurringObject
	if obj.Recurring != nil {
		recurring_object = new(ExternalDynamicListResourceTypeIpRecurringObject)
		diags.Append(recurring_object.CopyFromPango(ctx, append(ancestors, o), obj.Recurring, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var certificateProfile_value types.String
	if obj.CertificateProfile != nil {
		certificateProfile_value = types.StringValue(*obj.CertificateProfile)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var url_value types.String
	if obj.Url != nil {
		url_value = types.StringValue(*obj.Url)
	}
	o.Auth = auth_object
	o.CertificateProfile = certificateProfile_value
	o.Description = description_value
	o.ExceptionList = exceptionList_list
	o.Recurring = recurring_object
	o.Url = url_value

	return diags
}

func (o *ExternalDynamicListResourceTypeIpAuthObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeIpAuth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var password_value types.String
	if obj.Password != nil {
		valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
		if err != nil {
			diags.AddError("Failed to create encrypted values state key", err.Error())
			return diags
		}

		if evFromState, found := ev.GetEncryptedValue(valueKey); found && ev.PreferServerState() && *obj.Password != evFromState {
			password_value = types.StringPointerValue(obj.Password)
		} else if value, found := ev.GetPlaintextValue(valueKey); found {
			password_value = types.StringValue(value)
		} else {
			diags.AddError("Failed to read encrypted values state", fmt.Sprintf("Missing plaintext value for %s", valueKey))
			return diags
		}

		if !ev.PreferServerState() {
			err = ev.StoreEncryptedValue(valueKey, "solo", *obj.Password)
			if err != nil {
				diags.AddError("Failed to store encrypted values state", err.Error())
				return diags
			}
		}
	}
	var username_value types.String
	if obj.Username != nil {
		username_value = types.StringValue(*obj.Username)
	}
	o.Password = password_value
	o.Username = username_value

	return diags
}

func (o *ExternalDynamicListResourceTypeIpRecurringObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeIpRecurring, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var daily_object *ExternalDynamicListResourceTypeIpRecurringDailyObject
	if obj.Daily != nil {
		daily_object = new(ExternalDynamicListResourceTypeIpRecurringDailyObject)
		diags.Append(daily_object.CopyFromPango(ctx, append(ancestors, o), obj.Daily, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var fiveMinute_object *ExternalDynamicListResourceTypeIpRecurringFiveMinuteObject
	if obj.FiveMinute != nil {
		fiveMinute_object = new(ExternalDynamicListResourceTypeIpRecurringFiveMinuteObject)
		diags.Append(fiveMinute_object.CopyFromPango(ctx, append(ancestors, o), obj.FiveMinute, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var hourly_object *ExternalDynamicListResourceTypeIpRecurringHourlyObject
	if obj.Hourly != nil {
		hourly_object = new(ExternalDynamicListResourceTypeIpRecurringHourlyObject)
		diags.Append(hourly_object.CopyFromPango(ctx, append(ancestors, o), obj.Hourly, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var monthly_object *ExternalDynamicListResourceTypeIpRecurringMonthlyObject
	if obj.Monthly != nil {
		monthly_object = new(ExternalDynamicListResourceTypeIpRecurringMonthlyObject)
		diags.Append(monthly_object.CopyFromPango(ctx, append(ancestors, o), obj.Monthly, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var weekly_object *ExternalDynamicListResourceTypeIpRecurringWeeklyObject
	if obj.Weekly != nil {
		weekly_object = new(ExternalDynamicListResourceTypeIpRecurringWeeklyObject)
		diags.Append(weekly_object.CopyFromPango(ctx, append(ancestors, o), obj.Weekly, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Daily = daily_object
	o.FiveMinute = fiveMinute_object
	o.Hourly = hourly_object
	o.Monthly = monthly_object
	o.Weekly = weekly_object

	return diags
}

func (o *ExternalDynamicListResourceTypeIpRecurringDailyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeIpRecurringDaily, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	o.At = at_value

	return diags
}

func (o *ExternalDynamicListResourceTypeIpRecurringFiveMinuteObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeIpRecurringFiveMinute, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *ExternalDynamicListResourceTypeIpRecurringHourlyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeIpRecurringHourly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *ExternalDynamicListResourceTypeIpRecurringMonthlyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeIpRecurringMonthly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	var dayOfMonth_value types.Int64
	if obj.DayOfMonth != nil {
		dayOfMonth_value = types.Int64Value(*obj.DayOfMonth)
	}
	o.At = at_value
	o.DayOfMonth = dayOfMonth_value

	return diags
}

func (o *ExternalDynamicListResourceTypeIpRecurringWeeklyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeIpRecurringWeekly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	var dayOfWeek_value types.String
	if obj.DayOfWeek != nil {
		dayOfWeek_value = types.StringValue(*obj.DayOfWeek)
	}
	o.At = at_value
	o.DayOfWeek = dayOfWeek_value

	return diags
}

func (o *ExternalDynamicListResourceTypePredefinedIpObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypePredefinedIp, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var exceptionList_list types.List
	{
		var list_diags diag.Diagnostics
		exceptionList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ExceptionList)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}

	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var url_value types.String
	if obj.Url != nil {
		url_value = types.StringValue(*obj.Url)
	}
	o.Description = description_value
	o.ExceptionList = exceptionList_list
	o.Url = url_value

	return diags
}

func (o *ExternalDynamicListResourceTypePredefinedUrlObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypePredefinedUrl, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var exceptionList_list types.List
	{
		var list_diags diag.Diagnostics
		exceptionList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ExceptionList)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}

	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var url_value types.String
	if obj.Url != nil {
		url_value = types.StringValue(*obj.Url)
	}
	o.Description = description_value
	o.ExceptionList = exceptionList_list
	o.Url = url_value

	return diags
}

func (o *ExternalDynamicListResourceTypeUrlObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeUrl, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var exceptionList_list types.List
	{
		var list_diags diag.Diagnostics
		exceptionList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ExceptionList)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var auth_object *ExternalDynamicListResourceTypeUrlAuthObject
	if obj.Auth != nil {
		auth_object = new(ExternalDynamicListResourceTypeUrlAuthObject)
		diags.Append(auth_object.CopyFromPango(ctx, append(ancestors, o), obj.Auth, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var recurring_object *ExternalDynamicListResourceTypeUrlRecurringObject
	if obj.Recurring != nil {
		recurring_object = new(ExternalDynamicListResourceTypeUrlRecurringObject)
		diags.Append(recurring_object.CopyFromPango(ctx, append(ancestors, o), obj.Recurring, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var certificateProfile_value types.String
	if obj.CertificateProfile != nil {
		certificateProfile_value = types.StringValue(*obj.CertificateProfile)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var url_value types.String
	if obj.Url != nil {
		url_value = types.StringValue(*obj.Url)
	}
	o.Auth = auth_object
	o.CertificateProfile = certificateProfile_value
	o.Description = description_value
	o.ExceptionList = exceptionList_list
	o.Recurring = recurring_object
	o.Url = url_value

	return diags
}

func (o *ExternalDynamicListResourceTypeUrlAuthObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeUrlAuth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var password_value types.String
	if obj.Password != nil {
		valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
		if err != nil {
			diags.AddError("Failed to create encrypted values state key", err.Error())
			return diags
		}

		if evFromState, found := ev.GetEncryptedValue(valueKey); found && ev.PreferServerState() && *obj.Password != evFromState {
			password_value = types.StringPointerValue(obj.Password)
		} else if value, found := ev.GetPlaintextValue(valueKey); found {
			password_value = types.StringValue(value)
		} else {
			diags.AddError("Failed to read encrypted values state", fmt.Sprintf("Missing plaintext value for %s", valueKey))
			return diags
		}

		if !ev.PreferServerState() {
			err = ev.StoreEncryptedValue(valueKey, "solo", *obj.Password)
			if err != nil {
				diags.AddError("Failed to store encrypted values state", err.Error())
				return diags
			}
		}
	}
	var username_value types.String
	if obj.Username != nil {
		username_value = types.StringValue(*obj.Username)
	}
	o.Password = password_value
	o.Username = username_value

	return diags
}

func (o *ExternalDynamicListResourceTypeUrlRecurringObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeUrlRecurring, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var daily_object *ExternalDynamicListResourceTypeUrlRecurringDailyObject
	if obj.Daily != nil {
		daily_object = new(ExternalDynamicListResourceTypeUrlRecurringDailyObject)
		diags.Append(daily_object.CopyFromPango(ctx, append(ancestors, o), obj.Daily, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var fiveMinute_object *ExternalDynamicListResourceTypeUrlRecurringFiveMinuteObject
	if obj.FiveMinute != nil {
		fiveMinute_object = new(ExternalDynamicListResourceTypeUrlRecurringFiveMinuteObject)
		diags.Append(fiveMinute_object.CopyFromPango(ctx, append(ancestors, o), obj.FiveMinute, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var hourly_object *ExternalDynamicListResourceTypeUrlRecurringHourlyObject
	if obj.Hourly != nil {
		hourly_object = new(ExternalDynamicListResourceTypeUrlRecurringHourlyObject)
		diags.Append(hourly_object.CopyFromPango(ctx, append(ancestors, o), obj.Hourly, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var monthly_object *ExternalDynamicListResourceTypeUrlRecurringMonthlyObject
	if obj.Monthly != nil {
		monthly_object = new(ExternalDynamicListResourceTypeUrlRecurringMonthlyObject)
		diags.Append(monthly_object.CopyFromPango(ctx, append(ancestors, o), obj.Monthly, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var weekly_object *ExternalDynamicListResourceTypeUrlRecurringWeeklyObject
	if obj.Weekly != nil {
		weekly_object = new(ExternalDynamicListResourceTypeUrlRecurringWeeklyObject)
		diags.Append(weekly_object.CopyFromPango(ctx, append(ancestors, o), obj.Weekly, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Daily = daily_object
	o.FiveMinute = fiveMinute_object
	o.Hourly = hourly_object
	o.Monthly = monthly_object
	o.Weekly = weekly_object

	return diags
}

func (o *ExternalDynamicListResourceTypeUrlRecurringDailyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeUrlRecurringDaily, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	o.At = at_value

	return diags
}

func (o *ExternalDynamicListResourceTypeUrlRecurringFiveMinuteObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeUrlRecurringFiveMinute, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *ExternalDynamicListResourceTypeUrlRecurringHourlyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeUrlRecurringHourly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *ExternalDynamicListResourceTypeUrlRecurringMonthlyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeUrlRecurringMonthly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	var dayOfMonth_value types.Int64
	if obj.DayOfMonth != nil {
		dayOfMonth_value = types.Int64Value(*obj.DayOfMonth)
	}
	o.At = at_value
	o.DayOfMonth = dayOfMonth_value

	return diags
}

func (o *ExternalDynamicListResourceTypeUrlRecurringWeeklyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *extdynlist.TypeUrlRecurringWeekly, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var at_value types.String
	if obj.At != nil {
		at_value = types.StringValue(*obj.At)
	}
	var dayOfWeek_value types.String
	if obj.DayOfWeek != nil {
		dayOfWeek_value = types.StringValue(*obj.DayOfWeek)
	}
	o.At = at_value
	o.DayOfWeek = dayOfWeek_value

	return diags
}

func (o *ExternalDynamicListResourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	return components, nil
}

func (r *ExternalDynamicListResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state ExternalDynamicListResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_external_dynamic_list_resource",
		"function":      "Create",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	// Determine the location.

	var location extdynlist.Location

	{
		var terraformLocation ExternalDynamicListLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &extdynlist.SharedLocation{}
			var innerLocation ExternalDynamicListSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &extdynlist.VsysLocation{}
			var innerLocation ExternalDynamicListVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &extdynlist.DeviceGroupLocation{}
			var innerLocation ExternalDynamicListDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
		}
	}

	if err := location.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *extdynlist.Entry
	resp.Diagnostics.Append(state.CopyToPango(ctx, nil, &obj, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	created, err := r.manager.Create(ctx, location, components, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	resp.Diagnostics.Append(state.CopyFromPango(ctx, nil, created, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
func (o *ExternalDynamicListResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state ExternalDynamicListResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	encryptedValues, diags := req.Private.GetKey(ctx, "encrypted_values")
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location extdynlist.Location

	{
		var terraformLocation ExternalDynamicListLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &extdynlist.SharedLocation{}
			var innerLocation ExternalDynamicListSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &extdynlist.VsysLocation{}
			var innerLocation ExternalDynamicListVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &extdynlist.DeviceGroupLocation{}
			var innerLocation ExternalDynamicListDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_external_dynamic_list_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	components, err := savestate.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	object, err := o.manager.Read(ctx, location, components, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, nil, object, ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *ExternalDynamicListResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state ExternalDynamicListResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	encryptedValues, diags := req.Private.GetKey(ctx, "encrypted_values")
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location extdynlist.Location

	{
		var terraformLocation ExternalDynamicListLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &extdynlist.SharedLocation{}
			var innerLocation ExternalDynamicListSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &extdynlist.VsysLocation{}
			var innerLocation ExternalDynamicListVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &extdynlist.DeviceGroupLocation{}
			var innerLocation ExternalDynamicListDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_external_dynamic_list_resource",
		"function":      "Update",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	obj, err := r.manager.Read(ctx, location, components, plan.Name.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, nil, &obj, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	components, err = plan.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}

	updated, err := r.manager.Update(ctx, location, components, obj, obj.Name)

	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	copy_diags := state.CopyFromPango(ctx, nil, updated, ev)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *ExternalDynamicListResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state ExternalDynamicListResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_external_dynamic_list_resource",
		"function":      "Delete",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var location extdynlist.Location

	{
		var terraformLocation ExternalDynamicListLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &extdynlist.SharedLocation{}
			var innerLocation ExternalDynamicListSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &extdynlist.VsysLocation{}
			var innerLocation ExternalDynamicListVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &extdynlist.DeviceGroupLocation{}
			var innerLocation ExternalDynamicListDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
		}
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	err = r.manager.Delete(ctx, location, components, []string{state.Name.ValueString()})
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
		return
	}

}

type ExternalDynamicListImportState struct {
	Location types.Object `json:"location"`
	Name     types.String `json:"name"`
}

func (o ExternalDynamicListImportState) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Location *ExternalDynamicListLocation `json:"location"`
		Name     *string                      `json:"name"`
	}
	var location_object *ExternalDynamicListLocation
	{
		diags := o.Location.As(context.TODO(), &location_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal location into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Location: location_object,
		Name:     o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *ExternalDynamicListImportState) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Location *ExternalDynamicListLocation `json:"location"`
		Name     *string                      `json:"name"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var location_object types.Object
	{
		var diags_tmp diag.Diagnostics
		location_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Location.AttributeTypes(), shadow.Location)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into location", diags_tmp.Errors())
		}
	}
	o.Location = location_object
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}

func ExternalDynamicListImportStateCreator(ctx context.Context, resource types.Object) ([]byte, error) {
	attrs := resource.Attributes()
	if attrs == nil {
		return nil, fmt.Errorf("Object has no attributes")
	}

	locationAttr, ok := attrs["location"]
	if !ok {
		return nil, fmt.Errorf("location attribute missing")
	}

	var location types.Object
	switch value := locationAttr.(type) {
	case types.Object:
		location = value
	default:
		return nil, fmt.Errorf("location attribute expected to be an object")
	}
	nameAttr, ok := attrs["name"]
	if !ok {
		return nil, fmt.Errorf("name attribute missing")
	}

	var name types.String
	switch value := nameAttr.(type) {
	case types.String:
		name = value
	default:
		return nil, fmt.Errorf("name attribute expected to be a string")
	}

	importStruct := ExternalDynamicListImportState{
		Location: location,
		Name:     name,
	}

	return json.Marshal(importStruct)
}

func (r *ExternalDynamicListResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	var obj ExternalDynamicListImportState
	data, err := base64.StdEncoding.DecodeString(req.ID)
	if err != nil {
		resp.Diagnostics.AddError("Failed to decode Import ID", err.Error())
		return
	}

	err = json.Unmarshal(data, &obj)
	if err != nil {
		var diagsErr *DiagnosticsError
		if errors.As(err, &diagsErr) {
			resp.Diagnostics.Append(diagsErr.Diagnostics()...)
		} else {
			resp.Diagnostics.AddError("Failed to unmarshal Import ID", err.Error())
		}
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("location"), obj.Location)...)
	if resp.Diagnostics.HasError() {
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("name"), obj.Name)...)
}

type ExternalDynamicListSharedLocation struct {
}
type ExternalDynamicListVsysLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
	Name       types.String `tfsdk:"name"`
}
type ExternalDynamicListDeviceGroupLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
}
type ExternalDynamicListLocation struct {
	Shared      types.Object `tfsdk:"shared"`
	Vsys        types.Object `tfsdk:"vsys"`
	DeviceGroup types.Object `tfsdk:"device_group"`
}

func ExternalDynamicListLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"shared": rsschema.SingleNestedAttribute{
				Description: "Panorama shared object",
				Optional:    true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("shared"),
						path.MatchRelative().AtParent().AtName("vsys"),
						path.MatchRelative().AtParent().AtName("device_group"),
					}...),
				},
			},
			"vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific Virtual System",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The Virtual System name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"device_group": rsschema.SingleNestedAttribute{
				Description: "Located in a specific Device Group",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Panorama device name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Device Group name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o ExternalDynamicListSharedLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
	}

	obj := shadow{}

	return json.Marshal(obj)
}

func (o *ExternalDynamicListSharedLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}

	return nil
}
func (o ExternalDynamicListVsysLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
		Name       *string `json:"name,omitempty"`
	}

	obj := shadow{
		NgfwDevice: o.NgfwDevice.ValueStringPointer(),
		Name:       o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *ExternalDynamicListVsysLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
		Name       *string `json:"name,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o ExternalDynamicListDeviceGroupLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *ExternalDynamicListDeviceGroupLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o ExternalDynamicListLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Shared      *ExternalDynamicListSharedLocation      `json:"shared,omitempty"`
		Vsys        *ExternalDynamicListVsysLocation        `json:"vsys,omitempty"`
		DeviceGroup *ExternalDynamicListDeviceGroupLocation `json:"device_group,omitempty"`
	}
	var shared_object *ExternalDynamicListSharedLocation
	{
		diags := o.Shared.As(context.TODO(), &shared_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal shared into JSON document", diags.Errors())
		}
	}
	var vsys_object *ExternalDynamicListVsysLocation
	{
		diags := o.Vsys.As(context.TODO(), &vsys_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal vsys into JSON document", diags.Errors())
		}
	}
	var deviceGroup_object *ExternalDynamicListDeviceGroupLocation
	{
		diags := o.DeviceGroup.As(context.TODO(), &deviceGroup_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal device_group into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Shared:      shared_object,
		Vsys:        vsys_object,
		DeviceGroup: deviceGroup_object,
	}

	return json.Marshal(obj)
}

func (o *ExternalDynamicListLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Shared      *ExternalDynamicListSharedLocation      `json:"shared,omitempty"`
		Vsys        *ExternalDynamicListVsysLocation        `json:"vsys,omitempty"`
		DeviceGroup *ExternalDynamicListDeviceGroupLocation `json:"device_group,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var shared_object types.Object
	{
		var diags_tmp diag.Diagnostics
		shared_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Shared.AttributeTypes(), shadow.Shared)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into shared", diags_tmp.Errors())
		}
	}
	var vsys_object types.Object
	{
		var diags_tmp diag.Diagnostics
		vsys_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Vsys.AttributeTypes(), shadow.Vsys)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into vsys", diags_tmp.Errors())
		}
	}
	var deviceGroup_object types.Object
	{
		var diags_tmp diag.Diagnostics
		deviceGroup_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.DeviceGroup.AttributeTypes(), shadow.DeviceGroup)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into device_group", diags_tmp.Errors())
		}
	}
	o.Shared = shared_object
	o.Vsys = vsys_object
	o.DeviceGroup = deviceGroup_object

	return nil
}

func (o *ExternalDynamicListSharedLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}
func (o *ExternalDynamicListVsysLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"ngfw_device": types.StringType,
		"name":        types.StringType,
	}
}
func (o *ExternalDynamicListDeviceGroupLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
	}
}
func (o *ExternalDynamicListLocation) AttributeTypes() map[string]attr.Type {
	var sharedObj ExternalDynamicListSharedLocation
	var vsysObj ExternalDynamicListVsysLocation
	var deviceGroupObj ExternalDynamicListDeviceGroupLocation
	return map[string]attr.Type{
		"shared": types.ObjectType{
			AttrTypes: sharedObj.AttributeTypes(),
		},
		"vsys": types.ObjectType{
			AttrTypes: vsysObj.AttributeTypes(),
		},
		"device_group": types.ObjectType{
			AttrTypes: deviceGroupObj.AttributeTypes(),
		},
	}
}
