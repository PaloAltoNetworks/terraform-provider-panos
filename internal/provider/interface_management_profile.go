package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/network/profiles/interface_management"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &InterfaceManagementProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &InterfaceManagementProfileDataSource{}
)

func NewInterfaceManagementProfileDataSource() datasource.DataSource {
	return &InterfaceManagementProfileDataSource{}
}

type InterfaceManagementProfileDataSource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*interface_management.Entry, interface_management.Location, *interface_management.Service]
}

type InterfaceManagementProfileDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type InterfaceManagementProfileDataSourceModel struct {
	Location                types.Object `tfsdk:"location"`
	Name                    types.String `tfsdk:"name"`
	Http                    types.Bool   `tfsdk:"http"`
	HttpOcsp                types.Bool   `tfsdk:"http_ocsp"`
	Https                   types.Bool   `tfsdk:"https"`
	PermittedIps            types.List   `tfsdk:"permitted_ips"`
	Ping                    types.Bool   `tfsdk:"ping"`
	ResponsePages           types.Bool   `tfsdk:"response_pages"`
	Snmp                    types.Bool   `tfsdk:"snmp"`
	Ssh                     types.Bool   `tfsdk:"ssh"`
	Telnet                  types.Bool   `tfsdk:"telnet"`
	UseridService           types.Bool   `tfsdk:"userid_service"`
	UseridSyslogListenerSsl types.Bool   `tfsdk:"userid_syslog_listener_ssl"`
	UseridSyslogListenerUdp types.Bool   `tfsdk:"userid_syslog_listener_udp"`
}
type InterfaceManagementProfileDataSourcePermittedIpsObject struct {
	Name types.String `tfsdk:"name"`
}

func (o *InterfaceManagementProfileDataSourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj InterfaceManagementProfileLocation

	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"name":                       types.StringType,
		"http":                       types.BoolType,
		"http_ocsp":                  types.BoolType,
		"https":                      types.BoolType,
		"permitted_ips":              types.ListType{},
		"ping":                       types.BoolType,
		"response_pages":             types.BoolType,
		"snmp":                       types.BoolType,
		"ssh":                        types.BoolType,
		"telnet":                     types.BoolType,
		"userid_service":             types.BoolType,
		"userid_syslog_listener_ssl": types.BoolType,
		"userid_syslog_listener_udp": types.BoolType,
	}
}

func (o InterfaceManagementProfileDataSourceModel) AncestorName() string {
	return ""
}

func (o InterfaceManagementProfileDataSourceModel) EntryName() *string {
	return nil
}
func (o *InterfaceManagementProfileDataSourcePermittedIpsObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name": types.StringType,
	}
}

func (o InterfaceManagementProfileDataSourcePermittedIpsObject) AncestorName() string {
	return "permitted-ips"
}

func (o InterfaceManagementProfileDataSourcePermittedIpsObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}

func (o *InterfaceManagementProfileDataSourceModel) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **interface_management.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	http_value := o.Http.ValueBoolPointer()
	httpOcsp_value := o.HttpOcsp.ValueBoolPointer()
	https_value := o.Https.ValueBoolPointer()
	var permittedIps_tf_entries []InterfaceManagementProfileDataSourcePermittedIpsObject
	var permittedIps_pango_entries []interface_management.PermittedIp
	{
		d := o.PermittedIps.ElementsAs(ctx, &permittedIps_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range permittedIps_tf_entries {
			var entry *interface_management.PermittedIp
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			permittedIps_pango_entries = append(permittedIps_pango_entries, *entry)
		}
	}
	ping_value := o.Ping.ValueBoolPointer()
	responsePages_value := o.ResponsePages.ValueBoolPointer()
	snmp_value := o.Snmp.ValueBoolPointer()
	ssh_value := o.Ssh.ValueBoolPointer()
	telnet_value := o.Telnet.ValueBoolPointer()
	useridService_value := o.UseridService.ValueBoolPointer()
	useridSyslogListenerSsl_value := o.UseridSyslogListenerSsl.ValueBoolPointer()
	useridSyslogListenerUdp_value := o.UseridSyslogListenerUdp.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(interface_management.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Http = http_value
	(*obj).HttpOcsp = httpOcsp_value
	(*obj).Https = https_value
	(*obj).PermittedIp = permittedIps_pango_entries
	(*obj).Ping = ping_value
	(*obj).ResponsePages = responsePages_value
	(*obj).Snmp = snmp_value
	(*obj).Ssh = ssh_value
	(*obj).Telnet = telnet_value
	(*obj).UseridService = useridService_value
	(*obj).UseridSyslogListenerSsl = useridSyslogListenerSsl_value
	(*obj).UseridSyslogListenerUdp = useridSyslogListenerUdp_value

	return diags
}
func (o *InterfaceManagementProfileDataSourcePermittedIpsObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **interface_management.PermittedIp, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(interface_management.PermittedIp)
	}
	(*obj).Name = o.Name.ValueString()

	return diags
}

func (o *InterfaceManagementProfileDataSourceModel) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *interface_management.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var permittedIps_list types.List
	{
		var permittedIps_tf_entries []InterfaceManagementProfileDataSourcePermittedIpsObject
		for _, elt := range obj.PermittedIp {
			entry := InterfaceManagementProfileDataSourcePermittedIpsObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			permittedIps_tf_entries = append(permittedIps_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("permitted_ips")
		permittedIps_list, list_diags = types.ListValueFrom(ctx, schemaType, permittedIps_tf_entries)
		diags.Append(list_diags...)
	}

	var http_value types.Bool
	if obj.Http != nil {
		http_value = types.BoolValue(*obj.Http)
	}
	var httpOcsp_value types.Bool
	if obj.HttpOcsp != nil {
		httpOcsp_value = types.BoolValue(*obj.HttpOcsp)
	}
	var https_value types.Bool
	if obj.Https != nil {
		https_value = types.BoolValue(*obj.Https)
	}
	var ping_value types.Bool
	if obj.Ping != nil {
		ping_value = types.BoolValue(*obj.Ping)
	}
	var responsePages_value types.Bool
	if obj.ResponsePages != nil {
		responsePages_value = types.BoolValue(*obj.ResponsePages)
	}
	var snmp_value types.Bool
	if obj.Snmp != nil {
		snmp_value = types.BoolValue(*obj.Snmp)
	}
	var ssh_value types.Bool
	if obj.Ssh != nil {
		ssh_value = types.BoolValue(*obj.Ssh)
	}
	var telnet_value types.Bool
	if obj.Telnet != nil {
		telnet_value = types.BoolValue(*obj.Telnet)
	}
	var useridService_value types.Bool
	if obj.UseridService != nil {
		useridService_value = types.BoolValue(*obj.UseridService)
	}
	var useridSyslogListenerSsl_value types.Bool
	if obj.UseridSyslogListenerSsl != nil {
		useridSyslogListenerSsl_value = types.BoolValue(*obj.UseridSyslogListenerSsl)
	}
	var useridSyslogListenerUdp_value types.Bool
	if obj.UseridSyslogListenerUdp != nil {
		useridSyslogListenerUdp_value = types.BoolValue(*obj.UseridSyslogListenerUdp)
	}
	o.Name = types.StringValue(obj.Name)
	o.Http = http_value
	o.HttpOcsp = httpOcsp_value
	o.Https = https_value
	o.PermittedIps = permittedIps_list
	o.Ping = ping_value
	o.ResponsePages = responsePages_value
	o.Snmp = snmp_value
	o.Ssh = ssh_value
	o.Telnet = telnet_value
	o.UseridService = useridService_value
	o.UseridSyslogListenerSsl = useridSyslogListenerSsl_value
	o.UseridSyslogListenerUdp = useridSyslogListenerUdp_value

	return diags
}

func (o *InterfaceManagementProfileDataSourcePermittedIpsObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *interface_management.PermittedIp, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	o.Name = types.StringValue(obj.Name)

	return diags
}

func (o *InterfaceManagementProfileDataSourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	return components, nil
}

func InterfaceManagementProfileDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": InterfaceManagementProfileDataSourceLocationSchema(),

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"http": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"http_ocsp": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"https": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"permitted_ips": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: InterfaceManagementProfileDataSourcePermittedIpsSchema(),
			},

			"ping": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"response_pages": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"snmp": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ssh": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"telnet": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"userid_service": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"userid_syslog_listener_ssl": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"userid_syslog_listener_udp": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *InterfaceManagementProfileDataSourceModel) getTypeFor(name string) attr.Type {
	schema := InterfaceManagementProfileDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func InterfaceManagementProfileDataSourcePermittedIpsSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},
		},
	}
}

func (o *InterfaceManagementProfileDataSourcePermittedIpsObject) getTypeFor(name string) attr.Type {
	schema := InterfaceManagementProfileDataSourcePermittedIpsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func InterfaceManagementProfileDataSourceLocationSchema() rsschema.Attribute {
	return InterfaceManagementProfileLocationSchema()
}

// Metadata returns the data source type name.
func (d *InterfaceManagementProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_interface_management_profile"
}

// Schema defines the schema for this data source.
func (d *InterfaceManagementProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = InterfaceManagementProfileDataSourceSchema()
}

// Configure prepares the struct.
func (d *InterfaceManagementProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	d.client = providerData.Client
	specifier, _, err := interface_management.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	d.manager = sdkmanager.NewEntryObjectManager[*interface_management.Entry, interface_management.Location, *interface_management.Service](d.client, interface_management.NewService(d.client), batchSize, specifier, interface_management.SpecMatches)
}
func (o *InterfaceManagementProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state InterfaceManagementProfileDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location interface_management.Location

	{
		var terraformLocation InterfaceManagementProfileLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &interface_management.NgfwLocation{}
			var innerLocation InterfaceManagementProfileNgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &interface_management.TemplateLocation{}
			var innerLocation InterfaceManagementProfileTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &interface_management.TemplateStackLocation{}
			var innerLocation InterfaceManagementProfileTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_interface_management_profile_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	components, err := savestate.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	object, err := o.manager.Read(ctx, location, components, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, nil, object, ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &InterfaceManagementProfileResource{}
	_ resource.ResourceWithConfigure   = &InterfaceManagementProfileResource{}
	_ resource.ResourceWithImportState = &InterfaceManagementProfileResource{}
)

func NewInterfaceManagementProfileResource() resource.Resource {
	if _, found := resourceFuncMap["panos_interface_management_profile"]; !found {
		resourceFuncMap["panos_interface_management_profile"] = resourceFuncs{
			CreateImportId: InterfaceManagementProfileImportStateCreator,
		}
	}
	return &InterfaceManagementProfileResource{}
}

type InterfaceManagementProfileResource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*interface_management.Entry, interface_management.Location, *interface_management.Service]
}

func InterfaceManagementProfileResourceLocationSchema() rsschema.Attribute {
	return InterfaceManagementProfileLocationSchema()
}

type InterfaceManagementProfileResourceModel struct {
	Location                types.Object `tfsdk:"location"`
	Name                    types.String `tfsdk:"name"`
	Http                    types.Bool   `tfsdk:"http"`
	HttpOcsp                types.Bool   `tfsdk:"http_ocsp"`
	Https                   types.Bool   `tfsdk:"https"`
	PermittedIps            types.List   `tfsdk:"permitted_ips"`
	Ping                    types.Bool   `tfsdk:"ping"`
	ResponsePages           types.Bool   `tfsdk:"response_pages"`
	Snmp                    types.Bool   `tfsdk:"snmp"`
	Ssh                     types.Bool   `tfsdk:"ssh"`
	Telnet                  types.Bool   `tfsdk:"telnet"`
	UseridService           types.Bool   `tfsdk:"userid_service"`
	UseridSyslogListenerSsl types.Bool   `tfsdk:"userid_syslog_listener_ssl"`
	UseridSyslogListenerUdp types.Bool   `tfsdk:"userid_syslog_listener_udp"`
}
type InterfaceManagementProfileResourcePermittedIpsObject struct {
	Name types.String `tfsdk:"name"`
}

func (r *InterfaceManagementProfileResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func InterfaceManagementProfileResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": InterfaceManagementProfileResourceLocationSchema(),

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"http": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"http_ocsp": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"https": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"permitted_ips": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: InterfaceManagementProfileResourcePermittedIpsSchema(),
			},

			"ping": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"response_pages": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"snmp": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ssh": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"telnet": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"userid_service": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"userid_syslog_listener_ssl": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"userid_syslog_listener_udp": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *InterfaceManagementProfileResourceModel) getTypeFor(name string) attr.Type {
	schema := InterfaceManagementProfileResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func InterfaceManagementProfileResourcePermittedIpsSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},
		},
	}
}

func (o *InterfaceManagementProfileResourcePermittedIpsObject) getTypeFor(name string) attr.Type {
	schema := InterfaceManagementProfileResourcePermittedIpsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *InterfaceManagementProfileResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_interface_management_profile"
}

func (r *InterfaceManagementProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = InterfaceManagementProfileResourceSchema()
}

// </ResourceSchema>

func (r *InterfaceManagementProfileResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	r.client = providerData.Client
	specifier, _, err := interface_management.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	r.manager = sdkmanager.NewEntryObjectManager[*interface_management.Entry, interface_management.Location, *interface_management.Service](r.client, interface_management.NewService(r.client), batchSize, specifier, interface_management.SpecMatches)
}

func (o *InterfaceManagementProfileResourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj InterfaceManagementProfileLocation

	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"name":                       types.StringType,
		"http":                       types.BoolType,
		"http_ocsp":                  types.BoolType,
		"https":                      types.BoolType,
		"permitted_ips":              types.ListType{},
		"ping":                       types.BoolType,
		"response_pages":             types.BoolType,
		"snmp":                       types.BoolType,
		"ssh":                        types.BoolType,
		"telnet":                     types.BoolType,
		"userid_service":             types.BoolType,
		"userid_syslog_listener_ssl": types.BoolType,
		"userid_syslog_listener_udp": types.BoolType,
	}
}

func (o InterfaceManagementProfileResourceModel) AncestorName() string {
	return ""
}

func (o InterfaceManagementProfileResourceModel) EntryName() *string {
	return nil
}
func (o *InterfaceManagementProfileResourcePermittedIpsObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name": types.StringType,
	}
}

func (o InterfaceManagementProfileResourcePermittedIpsObject) AncestorName() string {
	return "permitted-ips"
}

func (o InterfaceManagementProfileResourcePermittedIpsObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}

func (o *InterfaceManagementProfileResourceModel) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **interface_management.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	http_value := o.Http.ValueBoolPointer()
	httpOcsp_value := o.HttpOcsp.ValueBoolPointer()
	https_value := o.Https.ValueBoolPointer()
	var permittedIps_tf_entries []InterfaceManagementProfileResourcePermittedIpsObject
	var permittedIps_pango_entries []interface_management.PermittedIp
	{
		d := o.PermittedIps.ElementsAs(ctx, &permittedIps_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range permittedIps_tf_entries {
			var entry *interface_management.PermittedIp
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			permittedIps_pango_entries = append(permittedIps_pango_entries, *entry)
		}
	}
	ping_value := o.Ping.ValueBoolPointer()
	responsePages_value := o.ResponsePages.ValueBoolPointer()
	snmp_value := o.Snmp.ValueBoolPointer()
	ssh_value := o.Ssh.ValueBoolPointer()
	telnet_value := o.Telnet.ValueBoolPointer()
	useridService_value := o.UseridService.ValueBoolPointer()
	useridSyslogListenerSsl_value := o.UseridSyslogListenerSsl.ValueBoolPointer()
	useridSyslogListenerUdp_value := o.UseridSyslogListenerUdp.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(interface_management.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Http = http_value
	(*obj).HttpOcsp = httpOcsp_value
	(*obj).Https = https_value
	(*obj).PermittedIp = permittedIps_pango_entries
	(*obj).Ping = ping_value
	(*obj).ResponsePages = responsePages_value
	(*obj).Snmp = snmp_value
	(*obj).Ssh = ssh_value
	(*obj).Telnet = telnet_value
	(*obj).UseridService = useridService_value
	(*obj).UseridSyslogListenerSsl = useridSyslogListenerSsl_value
	(*obj).UseridSyslogListenerUdp = useridSyslogListenerUdp_value

	return diags
}
func (o *InterfaceManagementProfileResourcePermittedIpsObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **interface_management.PermittedIp, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(interface_management.PermittedIp)
	}
	(*obj).Name = o.Name.ValueString()

	return diags
}

func (o *InterfaceManagementProfileResourceModel) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *interface_management.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var permittedIps_list types.List
	{
		var permittedIps_tf_entries []InterfaceManagementProfileResourcePermittedIpsObject
		for _, elt := range obj.PermittedIp {
			entry := InterfaceManagementProfileResourcePermittedIpsObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			permittedIps_tf_entries = append(permittedIps_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("permitted_ips")
		permittedIps_list, list_diags = types.ListValueFrom(ctx, schemaType, permittedIps_tf_entries)
		diags.Append(list_diags...)
	}

	var http_value types.Bool
	if obj.Http != nil {
		http_value = types.BoolValue(*obj.Http)
	}
	var httpOcsp_value types.Bool
	if obj.HttpOcsp != nil {
		httpOcsp_value = types.BoolValue(*obj.HttpOcsp)
	}
	var https_value types.Bool
	if obj.Https != nil {
		https_value = types.BoolValue(*obj.Https)
	}
	var ping_value types.Bool
	if obj.Ping != nil {
		ping_value = types.BoolValue(*obj.Ping)
	}
	var responsePages_value types.Bool
	if obj.ResponsePages != nil {
		responsePages_value = types.BoolValue(*obj.ResponsePages)
	}
	var snmp_value types.Bool
	if obj.Snmp != nil {
		snmp_value = types.BoolValue(*obj.Snmp)
	}
	var ssh_value types.Bool
	if obj.Ssh != nil {
		ssh_value = types.BoolValue(*obj.Ssh)
	}
	var telnet_value types.Bool
	if obj.Telnet != nil {
		telnet_value = types.BoolValue(*obj.Telnet)
	}
	var useridService_value types.Bool
	if obj.UseridService != nil {
		useridService_value = types.BoolValue(*obj.UseridService)
	}
	var useridSyslogListenerSsl_value types.Bool
	if obj.UseridSyslogListenerSsl != nil {
		useridSyslogListenerSsl_value = types.BoolValue(*obj.UseridSyslogListenerSsl)
	}
	var useridSyslogListenerUdp_value types.Bool
	if obj.UseridSyslogListenerUdp != nil {
		useridSyslogListenerUdp_value = types.BoolValue(*obj.UseridSyslogListenerUdp)
	}
	o.Name = types.StringValue(obj.Name)
	o.Http = http_value
	o.HttpOcsp = httpOcsp_value
	o.Https = https_value
	o.PermittedIps = permittedIps_list
	o.Ping = ping_value
	o.ResponsePages = responsePages_value
	o.Snmp = snmp_value
	o.Ssh = ssh_value
	o.Telnet = telnet_value
	o.UseridService = useridService_value
	o.UseridSyslogListenerSsl = useridSyslogListenerSsl_value
	o.UseridSyslogListenerUdp = useridSyslogListenerUdp_value

	return diags
}

func (o *InterfaceManagementProfileResourcePermittedIpsObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *interface_management.PermittedIp, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	o.Name = types.StringValue(obj.Name)

	return diags
}

func (o *InterfaceManagementProfileResourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	return components, nil
}

func (r *InterfaceManagementProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state InterfaceManagementProfileResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_interface_management_profile_resource",
		"function":      "Create",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	// Determine the location.

	var location interface_management.Location

	{
		var terraformLocation InterfaceManagementProfileLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &interface_management.NgfwLocation{}
			var innerLocation InterfaceManagementProfileNgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &interface_management.TemplateLocation{}
			var innerLocation InterfaceManagementProfileTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &interface_management.TemplateStackLocation{}
			var innerLocation InterfaceManagementProfileTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	if err := location.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *interface_management.Entry
	resp.Diagnostics.Append(state.CopyToPango(ctx, nil, &obj, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	created, err := r.manager.Create(ctx, location, components, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	resp.Diagnostics.Append(state.CopyFromPango(ctx, nil, created, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
func (o *InterfaceManagementProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state InterfaceManagementProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	encryptedValues, diags := req.Private.GetKey(ctx, "encrypted_values")
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location interface_management.Location

	{
		var terraformLocation InterfaceManagementProfileLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &interface_management.NgfwLocation{}
			var innerLocation InterfaceManagementProfileNgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &interface_management.TemplateLocation{}
			var innerLocation InterfaceManagementProfileTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &interface_management.TemplateStackLocation{}
			var innerLocation InterfaceManagementProfileTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_interface_management_profile_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	components, err := savestate.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	object, err := o.manager.Read(ctx, location, components, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, nil, object, ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *InterfaceManagementProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state InterfaceManagementProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	encryptedValues, diags := req.Private.GetKey(ctx, "encrypted_values")
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location interface_management.Location

	{
		var terraformLocation InterfaceManagementProfileLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &interface_management.NgfwLocation{}
			var innerLocation InterfaceManagementProfileNgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &interface_management.TemplateLocation{}
			var innerLocation InterfaceManagementProfileTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &interface_management.TemplateStackLocation{}
			var innerLocation InterfaceManagementProfileTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_interface_management_profile_resource",
		"function":      "Update",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	obj, err := r.manager.Read(ctx, location, components, plan.Name.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, nil, &obj, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	components, err = plan.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}

	updated, err := r.manager.Update(ctx, location, components, obj, obj.Name)

	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	copy_diags := state.CopyFromPango(ctx, nil, updated, ev)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *InterfaceManagementProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state InterfaceManagementProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_interface_management_profile_resource",
		"function":      "Delete",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var location interface_management.Location

	{
		var terraformLocation InterfaceManagementProfileLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &interface_management.NgfwLocation{}
			var innerLocation InterfaceManagementProfileNgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &interface_management.TemplateLocation{}
			var innerLocation InterfaceManagementProfileTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &interface_management.TemplateStackLocation{}
			var innerLocation InterfaceManagementProfileTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	err = r.manager.Delete(ctx, location, components, []string{state.Name.ValueString()})
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
		return
	}

}

type InterfaceManagementProfileImportState struct {
	Location types.Object `json:"location"`
	Name     types.String `json:"name"`
}

func (o InterfaceManagementProfileImportState) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Location *InterfaceManagementProfileLocation `json:"location"`
		Name     *string                             `json:"name"`
	}
	var location_object *InterfaceManagementProfileLocation
	{
		diags := o.Location.As(context.TODO(), &location_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal location into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Location: location_object,
		Name:     o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *InterfaceManagementProfileImportState) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Location *InterfaceManagementProfileLocation `json:"location"`
		Name     *string                             `json:"name"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var location_object types.Object
	{
		var diags_tmp diag.Diagnostics
		location_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Location.AttributeTypes(), shadow.Location)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into location", diags_tmp.Errors())
		}
	}
	o.Location = location_object
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}

func InterfaceManagementProfileImportStateCreator(ctx context.Context, resource types.Object) ([]byte, error) {
	attrs := resource.Attributes()
	if attrs == nil {
		return nil, fmt.Errorf("Object has no attributes")
	}

	locationAttr, ok := attrs["location"]
	if !ok {
		return nil, fmt.Errorf("location attribute missing")
	}

	var location types.Object
	switch value := locationAttr.(type) {
	case types.Object:
		location = value
	default:
		return nil, fmt.Errorf("location attribute expected to be an object")
	}
	nameAttr, ok := attrs["name"]
	if !ok {
		return nil, fmt.Errorf("name attribute missing")
	}

	var name types.String
	switch value := nameAttr.(type) {
	case types.String:
		name = value
	default:
		return nil, fmt.Errorf("name attribute expected to be a string")
	}

	importStruct := InterfaceManagementProfileImportState{
		Location: location,
		Name:     name,
	}

	return json.Marshal(importStruct)
}

func (r *InterfaceManagementProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	var obj InterfaceManagementProfileImportState
	data, err := base64.StdEncoding.DecodeString(req.ID)
	if err != nil {
		resp.Diagnostics.AddError("Failed to decode Import ID", err.Error())
		return
	}

	err = json.Unmarshal(data, &obj)
	if err != nil {
		var diagsErr *DiagnosticsError
		if errors.As(err, &diagsErr) {
			resp.Diagnostics.Append(diagsErr.Diagnostics()...)
		} else {
			resp.Diagnostics.AddError("Failed to unmarshal Import ID", err.Error())
		}
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("location"), obj.Location)...)
	if resp.Diagnostics.HasError() {
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("name"), obj.Name)...)
}

type InterfaceManagementProfileNgfwLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
}
type InterfaceManagementProfileTemplateLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type InterfaceManagementProfileTemplateStackLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type InterfaceManagementProfileLocation struct {
	Ngfw          types.Object `tfsdk:"ngfw"`
	Template      types.Object `tfsdk:"template"`
	TemplateStack types.Object `tfsdk:"template_stack"`
}

func InterfaceManagementProfileLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"ngfw": rsschema.SingleNestedAttribute{
				Description: "Located in a specific NGFW device",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("ngfw"),
						path.MatchRelative().AtParent().AtName("template"),
						path.MatchRelative().AtParent().AtName("template_stack"),
					}...),
				},
			},
			"template": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Specific Panorama template",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_stack": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template stack",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Specific Panorama template stack",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o InterfaceManagementProfileNgfwLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
	}

	obj := shadow{
		NgfwDevice: o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *InterfaceManagementProfileNgfwLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o InterfaceManagementProfileTemplateLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *InterfaceManagementProfileTemplateLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o InterfaceManagementProfileTemplateStackLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *InterfaceManagementProfileTemplateStackLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o InterfaceManagementProfileLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Ngfw          *InterfaceManagementProfileNgfwLocation          `json:"ngfw,omitempty"`
		Template      *InterfaceManagementProfileTemplateLocation      `json:"template,omitempty"`
		TemplateStack *InterfaceManagementProfileTemplateStackLocation `json:"template_stack,omitempty"`
	}
	var ngfw_object *InterfaceManagementProfileNgfwLocation
	{
		diags := o.Ngfw.As(context.TODO(), &ngfw_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal ngfw into JSON document", diags.Errors())
		}
	}
	var template_object *InterfaceManagementProfileTemplateLocation
	{
		diags := o.Template.As(context.TODO(), &template_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template into JSON document", diags.Errors())
		}
	}
	var templateStack_object *InterfaceManagementProfileTemplateStackLocation
	{
		diags := o.TemplateStack.As(context.TODO(), &templateStack_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template_stack into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Ngfw:          ngfw_object,
		Template:      template_object,
		TemplateStack: templateStack_object,
	}

	return json.Marshal(obj)
}

func (o *InterfaceManagementProfileLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Ngfw          *InterfaceManagementProfileNgfwLocation          `json:"ngfw,omitempty"`
		Template      *InterfaceManagementProfileTemplateLocation      `json:"template,omitempty"`
		TemplateStack *InterfaceManagementProfileTemplateStackLocation `json:"template_stack,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var ngfw_object types.Object
	{
		var diags_tmp diag.Diagnostics
		ngfw_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Ngfw.AttributeTypes(), shadow.Ngfw)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into ngfw", diags_tmp.Errors())
		}
	}
	var template_object types.Object
	{
		var diags_tmp diag.Diagnostics
		template_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Template.AttributeTypes(), shadow.Template)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template", diags_tmp.Errors())
		}
	}
	var templateStack_object types.Object
	{
		var diags_tmp diag.Diagnostics
		templateStack_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.TemplateStack.AttributeTypes(), shadow.TemplateStack)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template_stack", diags_tmp.Errors())
		}
	}
	o.Ngfw = ngfw_object
	o.Template = template_object
	o.TemplateStack = templateStack_object

	return nil
}

func (o *InterfaceManagementProfileNgfwLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"ngfw_device": types.StringType,
	}
}
func (o *InterfaceManagementProfileTemplateLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
		"ngfw_device":     types.StringType,
	}
}
func (o *InterfaceManagementProfileTemplateStackLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
		"ngfw_device":     types.StringType,
	}
}
func (o *InterfaceManagementProfileLocation) AttributeTypes() map[string]attr.Type {
	var ngfwObj InterfaceManagementProfileNgfwLocation
	var templateObj InterfaceManagementProfileTemplateLocation
	var templateStackObj InterfaceManagementProfileTemplateStackLocation
	return map[string]attr.Type{
		"ngfw": types.ObjectType{
			AttrTypes: ngfwObj.AttributeTypes(),
		},
		"template": types.ObjectType{
			AttrTypes: templateObj.AttributeTypes(),
		},
		"template_stack": types.ObjectType{
			AttrTypes: templateStackObj.AttributeTypes(),
		},
	}
}
