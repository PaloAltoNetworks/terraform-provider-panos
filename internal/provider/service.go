package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/objects/service"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &ServiceDataSource{}
	_ datasource.DataSourceWithConfigure = &ServiceDataSource{}
)

func NewServiceDataSource() datasource.DataSource {
	return &ServiceDataSource{}
}

type ServiceDataSource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*service.Entry, service.Location, *service.Service]
}

type ServiceDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type ServiceDataSourceModel struct {
	Location        types.Object                     `tfsdk:"location"`
	Name            types.String                     `tfsdk:"name"`
	Description     types.String                     `tfsdk:"description"`
	DisableOverride types.String                     `tfsdk:"disable_override"`
	Protocol        *ServiceDataSourceProtocolObject `tfsdk:"protocol"`
	Tags            types.List                       `tfsdk:"tags"`
}
type ServiceDataSourceProtocolObject struct {
	Tcp *ServiceDataSourceProtocolTcpObject `tfsdk:"tcp"`
	Udp *ServiceDataSourceProtocolUdpObject `tfsdk:"udp"`
}
type ServiceDataSourceProtocolTcpObject struct {
	DestinationPort types.String                                `tfsdk:"destination_port"`
	SourcePort      types.String                                `tfsdk:"source_port"`
	Override        *ServiceDataSourceProtocolTcpOverrideObject `tfsdk:"override"`
}
type ServiceDataSourceProtocolTcpOverrideObject struct {
	HalfcloseTimeout types.Int64 `tfsdk:"halfclose_timeout"`
	Timeout          types.Int64 `tfsdk:"timeout"`
	TimewaitTimeout  types.Int64 `tfsdk:"timewait_timeout"`
}
type ServiceDataSourceProtocolUdpObject struct {
	DestinationPort types.String                                `tfsdk:"destination_port"`
	SourcePort      types.String                                `tfsdk:"source_port"`
	Override        *ServiceDataSourceProtocolUdpOverrideObject `tfsdk:"override"`
}
type ServiceDataSourceProtocolUdpOverrideObject struct {
	Timeout types.Int64 `tfsdk:"timeout"`
}

func (o *ServiceDataSourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj ServiceLocation

	var protocolObj *ServiceDataSourceProtocolObject

	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"name":             types.StringType,
		"description":      types.StringType,
		"disable_override": types.StringType,
		"protocol": types.ObjectType{
			AttrTypes: protocolObj.AttributeTypes(),
		},
		"tags": types.ListType{},
	}
}
func (o *ServiceDataSourceProtocolObject) AttributeTypes() map[string]attr.Type {

	var tcpObj *ServiceDataSourceProtocolTcpObject

	var udpObj *ServiceDataSourceProtocolUdpObject
	return map[string]attr.Type{
		"tcp": types.ObjectType{
			AttrTypes: tcpObj.AttributeTypes(),
		},
		"udp": types.ObjectType{
			AttrTypes: udpObj.AttributeTypes(),
		},
	}
}
func (o *ServiceDataSourceProtocolTcpObject) AttributeTypes() map[string]attr.Type {

	var overrideObj *ServiceDataSourceProtocolTcpOverrideObject
	return map[string]attr.Type{
		"destination_port": types.StringType,
		"source_port":      types.StringType,
		"override": types.ObjectType{
			AttrTypes: overrideObj.AttributeTypes(),
		},
	}
}
func (o *ServiceDataSourceProtocolTcpOverrideObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"halfclose_timeout": types.Int64Type,
		"timeout":           types.Int64Type,
		"timewait_timeout":  types.Int64Type,
	}
}
func (o *ServiceDataSourceProtocolUdpObject) AttributeTypes() map[string]attr.Type {

	var overrideObj *ServiceDataSourceProtocolUdpOverrideObject
	return map[string]attr.Type{
		"destination_port": types.StringType,
		"source_port":      types.StringType,
		"override": types.ObjectType{
			AttrTypes: overrideObj.AttributeTypes(),
		},
	}
}
func (o *ServiceDataSourceProtocolUdpOverrideObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"timeout": types.Int64Type,
	}
}

func (o *ServiceDataSourceModel) CopyToPango(ctx context.Context, obj **service.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	description_value := o.Description.ValueStringPointer()
	disableOverride_value := o.DisableOverride.ValueStringPointer()
	var protocol_entry *service.Protocol
	if o.Protocol != nil {
		if *obj != nil && (*obj).Protocol != nil {
			protocol_entry = (*obj).Protocol
		} else {
			protocol_entry = new(service.Protocol)
		}

		diags.Append(o.Protocol.CopyToPango(ctx, &protocol_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	tags_pango_entries := make([]string, 0)
	diags.Append(o.Tags.ElementsAs(ctx, &tags_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(service.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Description = description_value
	(*obj).DisableOverride = disableOverride_value
	(*obj).Protocol = protocol_entry
	(*obj).Tag = tags_pango_entries

	return diags
}
func (o *ServiceDataSourceProtocolObject) CopyToPango(ctx context.Context, obj **service.Protocol, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var tcp_entry *service.ProtocolTcp
	if o.Tcp != nil {
		if *obj != nil && (*obj).Tcp != nil {
			tcp_entry = (*obj).Tcp
		} else {
			tcp_entry = new(service.ProtocolTcp)
		}

		diags.Append(o.Tcp.CopyToPango(ctx, &tcp_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var udp_entry *service.ProtocolUdp
	if o.Udp != nil {
		if *obj != nil && (*obj).Udp != nil {
			udp_entry = (*obj).Udp
		} else {
			udp_entry = new(service.ProtocolUdp)
		}

		diags.Append(o.Udp.CopyToPango(ctx, &udp_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(service.Protocol)
	}
	(*obj).Tcp = tcp_entry
	(*obj).Udp = udp_entry

	return diags
}
func (o *ServiceDataSourceProtocolTcpObject) CopyToPango(ctx context.Context, obj **service.ProtocolTcp, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	destinationPort_value := o.DestinationPort.ValueStringPointer()
	sourcePort_value := o.SourcePort.ValueStringPointer()
	var override_entry *service.ProtocolTcpOverride
	if o.Override != nil {
		if *obj != nil && (*obj).Override != nil {
			override_entry = (*obj).Override
		} else {
			override_entry = new(service.ProtocolTcpOverride)
		}

		diags.Append(o.Override.CopyToPango(ctx, &override_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(service.ProtocolTcp)
	}
	(*obj).Port = destinationPort_value
	(*obj).SourcePort = sourcePort_value
	(*obj).Override = override_entry

	return diags
}
func (o *ServiceDataSourceProtocolTcpOverrideObject) CopyToPango(ctx context.Context, obj **service.ProtocolTcpOverride, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	halfcloseTimeout_value := o.HalfcloseTimeout.ValueInt64Pointer()
	timeout_value := o.Timeout.ValueInt64Pointer()
	timewaitTimeout_value := o.TimewaitTimeout.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(service.ProtocolTcpOverride)
	}
	(*obj).HalfcloseTimeout = halfcloseTimeout_value
	(*obj).Timeout = timeout_value
	(*obj).TimewaitTimeout = timewaitTimeout_value

	return diags
}
func (o *ServiceDataSourceProtocolUdpObject) CopyToPango(ctx context.Context, obj **service.ProtocolUdp, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	destinationPort_value := o.DestinationPort.ValueStringPointer()
	sourcePort_value := o.SourcePort.ValueStringPointer()
	var override_entry *service.ProtocolUdpOverride
	if o.Override != nil {
		if *obj != nil && (*obj).Override != nil {
			override_entry = (*obj).Override
		} else {
			override_entry = new(service.ProtocolUdpOverride)
		}

		diags.Append(o.Override.CopyToPango(ctx, &override_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(service.ProtocolUdp)
	}
	(*obj).Port = destinationPort_value
	(*obj).SourcePort = sourcePort_value
	(*obj).Override = override_entry

	return diags
}
func (o *ServiceDataSourceProtocolUdpOverrideObject) CopyToPango(ctx context.Context, obj **service.ProtocolUdpOverride, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	timeout_value := o.Timeout.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(service.ProtocolUdpOverride)
	}
	(*obj).Timeout = timeout_value

	return diags
}

func (o *ServiceDataSourceModel) CopyFromPango(ctx context.Context, obj *service.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var tags_list types.List
	{
		var list_diags diag.Diagnostics
		tags_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tag)
		diags.Append(list_diags...)
	}
	var protocol_object *ServiceDataSourceProtocolObject
	if obj.Protocol != nil {
		protocol_object = new(ServiceDataSourceProtocolObject)

		diags.Append(protocol_object.CopyFromPango(ctx, obj.Protocol, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var disableOverride_value types.String
	if obj.DisableOverride != nil {
		disableOverride_value = types.StringValue(*obj.DisableOverride)
	}
	o.Name = types.StringValue(obj.Name)
	o.Description = description_value
	o.DisableOverride = disableOverride_value
	o.Protocol = protocol_object
	o.Tags = tags_list

	return diags
}

func (o *ServiceDataSourceProtocolObject) CopyFromPango(ctx context.Context, obj *service.Protocol, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var tcp_object *ServiceDataSourceProtocolTcpObject
	if obj.Tcp != nil {
		tcp_object = new(ServiceDataSourceProtocolTcpObject)

		diags.Append(tcp_object.CopyFromPango(ctx, obj.Tcp, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var udp_object *ServiceDataSourceProtocolUdpObject
	if obj.Udp != nil {
		udp_object = new(ServiceDataSourceProtocolUdpObject)

		diags.Append(udp_object.CopyFromPango(ctx, obj.Udp, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Tcp = tcp_object
	o.Udp = udp_object

	return diags
}

func (o *ServiceDataSourceProtocolTcpObject) CopyFromPango(ctx context.Context, obj *service.ProtocolTcp, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var override_object *ServiceDataSourceProtocolTcpOverrideObject
	if obj.Override != nil {
		override_object = new(ServiceDataSourceProtocolTcpOverrideObject)

		diags.Append(override_object.CopyFromPango(ctx, obj.Override, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var destinationPort_value types.String
	if obj.Port != nil {
		destinationPort_value = types.StringValue(*obj.Port)
	}
	var sourcePort_value types.String
	if obj.SourcePort != nil {
		sourcePort_value = types.StringValue(*obj.SourcePort)
	}
	o.DestinationPort = destinationPort_value
	o.SourcePort = sourcePort_value
	o.Override = override_object

	return diags
}

func (o *ServiceDataSourceProtocolTcpOverrideObject) CopyFromPango(ctx context.Context, obj *service.ProtocolTcpOverride, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var halfcloseTimeout_value types.Int64
	if obj.HalfcloseTimeout != nil {
		halfcloseTimeout_value = types.Int64Value(*obj.HalfcloseTimeout)
	}
	var timeout_value types.Int64
	if obj.Timeout != nil {
		timeout_value = types.Int64Value(*obj.Timeout)
	}
	var timewaitTimeout_value types.Int64
	if obj.TimewaitTimeout != nil {
		timewaitTimeout_value = types.Int64Value(*obj.TimewaitTimeout)
	}
	o.HalfcloseTimeout = halfcloseTimeout_value
	o.Timeout = timeout_value
	o.TimewaitTimeout = timewaitTimeout_value

	return diags
}

func (o *ServiceDataSourceProtocolUdpObject) CopyFromPango(ctx context.Context, obj *service.ProtocolUdp, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var override_object *ServiceDataSourceProtocolUdpOverrideObject
	if obj.Override != nil {
		override_object = new(ServiceDataSourceProtocolUdpOverrideObject)

		diags.Append(override_object.CopyFromPango(ctx, obj.Override, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var destinationPort_value types.String
	if obj.Port != nil {
		destinationPort_value = types.StringValue(*obj.Port)
	}
	var sourcePort_value types.String
	if obj.SourcePort != nil {
		sourcePort_value = types.StringValue(*obj.SourcePort)
	}
	o.DestinationPort = destinationPort_value
	o.SourcePort = sourcePort_value
	o.Override = override_object

	return diags
}

func (o *ServiceDataSourceProtocolUdpOverrideObject) CopyFromPango(ctx context.Context, obj *service.ProtocolUdpOverride, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var timeout_value types.Int64
	if obj.Timeout != nil {
		timeout_value = types.Int64Value(*obj.Timeout)
	}
	o.Timeout = timeout_value

	return diags
}

func ServiceDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": ServiceDataSourceLocationSchema(),

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"description": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"disable_override": dsschema.StringAttribute{
				Description: "disable object override in child device groups",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"protocol": ServiceDataSourceProtocolSchema(),

			"tags": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *ServiceDataSourceModel) getTypeFor(name string) attr.Type {
	schema := ServiceDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceDataSourceProtocolSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"tcp": ServiceDataSourceProtocolTcpSchema(),

			"udp": ServiceDataSourceProtocolUdpSchema(),
		},
	}
}

func (o *ServiceDataSourceProtocolObject) getTypeFor(name string) attr.Type {
	schema := ServiceDataSourceProtocolSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceDataSourceProtocolTcpSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("tcp"),
				path.MatchRelative().AtParent().AtName("udp"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"destination_port": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source_port": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"override": ServiceDataSourceProtocolTcpOverrideSchema(),
		},
	}
}

func (o *ServiceDataSourceProtocolTcpObject) getTypeFor(name string) attr.Type {
	schema := ServiceDataSourceProtocolTcpSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceDataSourceProtocolTcpOverrideSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"halfclose_timeout": dsschema.Int64Attribute{
				Description: "tcp session half-close timeout value (in second)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"timeout": dsschema.Int64Attribute{
				Description: "tcp session timeout value (in second)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"timewait_timeout": dsschema.Int64Attribute{
				Description: "tcp session time-wait timeout value (in second)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ServiceDataSourceProtocolTcpOverrideObject) getTypeFor(name string) attr.Type {
	schema := ServiceDataSourceProtocolTcpOverrideSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceDataSourceProtocolUdpSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("tcp"),
				path.MatchRelative().AtParent().AtName("udp"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"destination_port": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source_port": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"override": ServiceDataSourceProtocolUdpOverrideSchema(),
		},
	}
}

func (o *ServiceDataSourceProtocolUdpObject) getTypeFor(name string) attr.Type {
	schema := ServiceDataSourceProtocolUdpSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceDataSourceProtocolUdpOverrideSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"timeout": dsschema.Int64Attribute{
				Description: "udp session timeout value (in second)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ServiceDataSourceProtocolUdpOverrideObject) getTypeFor(name string) attr.Type {
	schema := ServiceDataSourceProtocolUdpOverrideSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceDataSourceLocationSchema() rsschema.Attribute {
	return ServiceLocationSchema()
}

// Metadata returns the data source type name.
func (d *ServiceDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_service"
}

// Schema defines the schema for this data source.
func (d *ServiceDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = ServiceDataSourceSchema()
}

// Configure prepares the struct.
func (d *ServiceDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	d.client = providerData.Client
	specifier, _, err := service.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	d.manager = sdkmanager.NewEntryObjectManager(d.client, service.NewService(d.client), batchSize, specifier, service.SpecMatches)
}
func (o *ServiceDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state ServiceDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location service.Location

	{
		var terraformLocation ServiceLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &service.SharedLocation{}
			var innerLocation ServiceSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &service.VsysLocation{}
			var innerLocation ServiceVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &service.DeviceGroupLocation{}
			var innerLocation ServiceDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_service_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, location, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &ServiceResource{}
	_ resource.ResourceWithConfigure   = &ServiceResource{}
	_ resource.ResourceWithImportState = &ServiceResource{}
)

func NewServiceResource() resource.Resource {
	if _, found := resourceFuncMap["panos_service"]; !found {
		resourceFuncMap["panos_service"] = resourceFuncs{
			CreateImportId: ServiceImportStateCreator,
		}
	}
	return &ServiceResource{}
}

type ServiceResource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*service.Entry, service.Location, *service.Service]
}

func ServiceResourceLocationSchema() rsschema.Attribute {
	return ServiceLocationSchema()
}

type ServiceResourceModel struct {
	Location        types.Object                   `tfsdk:"location"`
	Name            types.String                   `tfsdk:"name"`
	Description     types.String                   `tfsdk:"description"`
	DisableOverride types.String                   `tfsdk:"disable_override"`
	Protocol        *ServiceResourceProtocolObject `tfsdk:"protocol"`
	Tags            types.List                     `tfsdk:"tags"`
}
type ServiceResourceProtocolObject struct {
	Tcp *ServiceResourceProtocolTcpObject `tfsdk:"tcp"`
	Udp *ServiceResourceProtocolUdpObject `tfsdk:"udp"`
}
type ServiceResourceProtocolTcpObject struct {
	DestinationPort types.String                              `tfsdk:"destination_port"`
	SourcePort      types.String                              `tfsdk:"source_port"`
	Override        *ServiceResourceProtocolTcpOverrideObject `tfsdk:"override"`
}
type ServiceResourceProtocolTcpOverrideObject struct {
	HalfcloseTimeout types.Int64 `tfsdk:"halfclose_timeout"`
	Timeout          types.Int64 `tfsdk:"timeout"`
	TimewaitTimeout  types.Int64 `tfsdk:"timewait_timeout"`
}
type ServiceResourceProtocolUdpObject struct {
	DestinationPort types.String                              `tfsdk:"destination_port"`
	SourcePort      types.String                              `tfsdk:"source_port"`
	Override        *ServiceResourceProtocolUdpOverrideObject `tfsdk:"override"`
}
type ServiceResourceProtocolUdpOverrideObject struct {
	Timeout types.Int64 `tfsdk:"timeout"`
}

func (r *ServiceResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func ServiceResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": ServiceResourceLocationSchema(),

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"description": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"disable_override": rsschema.StringAttribute{
				Description: "disable object override in child device groups",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,

				Validators: []validator.String{
					stringvalidator.OneOf([]string{
						"no",
					}...),
				},
			},

			"protocol": ServiceResourceProtocolSchema(),

			"tags": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *ServiceResourceModel) getTypeFor(name string) attr.Type {
	schema := ServiceResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceResourceProtocolSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"tcp": ServiceResourceProtocolTcpSchema(),

			"udp": ServiceResourceProtocolUdpSchema(),
		},
	}
}

func (o *ServiceResourceProtocolObject) getTypeFor(name string) attr.Type {
	schema := ServiceResourceProtocolSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceResourceProtocolTcpSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("tcp"),
				path.MatchRelative().AtParent().AtName("udp"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"destination_port": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source_port": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"override": ServiceResourceProtocolTcpOverrideSchema(),
		},
	}
}

func (o *ServiceResourceProtocolTcpObject) getTypeFor(name string) attr.Type {
	schema := ServiceResourceProtocolTcpSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceResourceProtocolTcpOverrideSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"halfclose_timeout": rsschema.Int64Attribute{
				Description: "tcp session half-close timeout value (in second)",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"timeout": rsschema.Int64Attribute{
				Description: "tcp session timeout value (in second)",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"timewait_timeout": rsschema.Int64Attribute{
				Description: "tcp session time-wait timeout value (in second)",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *ServiceResourceProtocolTcpOverrideObject) getTypeFor(name string) attr.Type {
	schema := ServiceResourceProtocolTcpOverrideSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceResourceProtocolUdpSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("tcp"),
				path.MatchRelative().AtParent().AtName("udp"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"destination_port": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source_port": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"override": ServiceResourceProtocolUdpOverrideSchema(),
		},
	}
}

func (o *ServiceResourceProtocolUdpObject) getTypeFor(name string) attr.Type {
	schema := ServiceResourceProtocolUdpSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ServiceResourceProtocolUdpOverrideSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"timeout": rsschema.Int64Attribute{
				Description: "udp session timeout value (in second)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(30),
			},
		},
	}
}

func (o *ServiceResourceProtocolUdpOverrideObject) getTypeFor(name string) attr.Type {
	schema := ServiceResourceProtocolUdpOverrideSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *ServiceResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_service"
}

func (r *ServiceResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = ServiceResourceSchema()
}

// </ResourceSchema>

func (r *ServiceResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	r.client = providerData.Client
	specifier, _, err := service.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	r.manager = sdkmanager.NewEntryObjectManager(r.client, service.NewService(r.client), batchSize, specifier, service.SpecMatches)
}

func (o *ServiceResourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj ServiceLocation

	var protocolObj *ServiceResourceProtocolObject

	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"name":             types.StringType,
		"description":      types.StringType,
		"disable_override": types.StringType,
		"protocol": types.ObjectType{
			AttrTypes: protocolObj.AttributeTypes(),
		},
		"tags": types.ListType{},
	}
}
func (o *ServiceResourceProtocolObject) AttributeTypes() map[string]attr.Type {

	var tcpObj *ServiceResourceProtocolTcpObject

	var udpObj *ServiceResourceProtocolUdpObject
	return map[string]attr.Type{
		"tcp": types.ObjectType{
			AttrTypes: tcpObj.AttributeTypes(),
		},
		"udp": types.ObjectType{
			AttrTypes: udpObj.AttributeTypes(),
		},
	}
}
func (o *ServiceResourceProtocolTcpObject) AttributeTypes() map[string]attr.Type {

	var overrideObj *ServiceResourceProtocolTcpOverrideObject
	return map[string]attr.Type{
		"destination_port": types.StringType,
		"source_port":      types.StringType,
		"override": types.ObjectType{
			AttrTypes: overrideObj.AttributeTypes(),
		},
	}
}
func (o *ServiceResourceProtocolTcpOverrideObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"halfclose_timeout": types.Int64Type,
		"timeout":           types.Int64Type,
		"timewait_timeout":  types.Int64Type,
	}
}
func (o *ServiceResourceProtocolUdpObject) AttributeTypes() map[string]attr.Type {

	var overrideObj *ServiceResourceProtocolUdpOverrideObject
	return map[string]attr.Type{
		"destination_port": types.StringType,
		"source_port":      types.StringType,
		"override": types.ObjectType{
			AttrTypes: overrideObj.AttributeTypes(),
		},
	}
}
func (o *ServiceResourceProtocolUdpOverrideObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"timeout": types.Int64Type,
	}
}

func (o *ServiceResourceModel) CopyToPango(ctx context.Context, obj **service.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	description_value := o.Description.ValueStringPointer()
	disableOverride_value := o.DisableOverride.ValueStringPointer()
	var protocol_entry *service.Protocol
	if o.Protocol != nil {
		if *obj != nil && (*obj).Protocol != nil {
			protocol_entry = (*obj).Protocol
		} else {
			protocol_entry = new(service.Protocol)
		}

		diags.Append(o.Protocol.CopyToPango(ctx, &protocol_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	tags_pango_entries := make([]string, 0)
	diags.Append(o.Tags.ElementsAs(ctx, &tags_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(service.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Description = description_value
	(*obj).DisableOverride = disableOverride_value
	(*obj).Protocol = protocol_entry
	(*obj).Tag = tags_pango_entries

	return diags
}
func (o *ServiceResourceProtocolObject) CopyToPango(ctx context.Context, obj **service.Protocol, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var tcp_entry *service.ProtocolTcp
	if o.Tcp != nil {
		if *obj != nil && (*obj).Tcp != nil {
			tcp_entry = (*obj).Tcp
		} else {
			tcp_entry = new(service.ProtocolTcp)
		}

		diags.Append(o.Tcp.CopyToPango(ctx, &tcp_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var udp_entry *service.ProtocolUdp
	if o.Udp != nil {
		if *obj != nil && (*obj).Udp != nil {
			udp_entry = (*obj).Udp
		} else {
			udp_entry = new(service.ProtocolUdp)
		}

		diags.Append(o.Udp.CopyToPango(ctx, &udp_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(service.Protocol)
	}
	(*obj).Tcp = tcp_entry
	(*obj).Udp = udp_entry

	return diags
}
func (o *ServiceResourceProtocolTcpObject) CopyToPango(ctx context.Context, obj **service.ProtocolTcp, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	destinationPort_value := o.DestinationPort.ValueStringPointer()
	sourcePort_value := o.SourcePort.ValueStringPointer()
	var override_entry *service.ProtocolTcpOverride
	if o.Override != nil {
		if *obj != nil && (*obj).Override != nil {
			override_entry = (*obj).Override
		} else {
			override_entry = new(service.ProtocolTcpOverride)
		}

		diags.Append(o.Override.CopyToPango(ctx, &override_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(service.ProtocolTcp)
	}
	(*obj).Port = destinationPort_value
	(*obj).SourcePort = sourcePort_value
	(*obj).Override = override_entry

	return diags
}
func (o *ServiceResourceProtocolTcpOverrideObject) CopyToPango(ctx context.Context, obj **service.ProtocolTcpOverride, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	halfcloseTimeout_value := o.HalfcloseTimeout.ValueInt64Pointer()
	timeout_value := o.Timeout.ValueInt64Pointer()
	timewaitTimeout_value := o.TimewaitTimeout.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(service.ProtocolTcpOverride)
	}
	(*obj).HalfcloseTimeout = halfcloseTimeout_value
	(*obj).Timeout = timeout_value
	(*obj).TimewaitTimeout = timewaitTimeout_value

	return diags
}
func (o *ServiceResourceProtocolUdpObject) CopyToPango(ctx context.Context, obj **service.ProtocolUdp, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	destinationPort_value := o.DestinationPort.ValueStringPointer()
	sourcePort_value := o.SourcePort.ValueStringPointer()
	var override_entry *service.ProtocolUdpOverride
	if o.Override != nil {
		if *obj != nil && (*obj).Override != nil {
			override_entry = (*obj).Override
		} else {
			override_entry = new(service.ProtocolUdpOverride)
		}

		diags.Append(o.Override.CopyToPango(ctx, &override_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(service.ProtocolUdp)
	}
	(*obj).Port = destinationPort_value
	(*obj).SourcePort = sourcePort_value
	(*obj).Override = override_entry

	return diags
}
func (o *ServiceResourceProtocolUdpOverrideObject) CopyToPango(ctx context.Context, obj **service.ProtocolUdpOverride, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	timeout_value := o.Timeout.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(service.ProtocolUdpOverride)
	}
	(*obj).Timeout = timeout_value

	return diags
}

func (o *ServiceResourceModel) CopyFromPango(ctx context.Context, obj *service.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var tags_list types.List
	{
		var list_diags diag.Diagnostics
		tags_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tag)
		diags.Append(list_diags...)
	}
	var protocol_object *ServiceResourceProtocolObject
	if obj.Protocol != nil {
		protocol_object = new(ServiceResourceProtocolObject)

		diags.Append(protocol_object.CopyFromPango(ctx, obj.Protocol, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var disableOverride_value types.String
	if obj.DisableOverride != nil {
		disableOverride_value = types.StringValue(*obj.DisableOverride)
	}
	o.Name = types.StringValue(obj.Name)
	o.Description = description_value
	o.DisableOverride = disableOverride_value
	o.Protocol = protocol_object
	o.Tags = tags_list

	return diags
}

func (o *ServiceResourceProtocolObject) CopyFromPango(ctx context.Context, obj *service.Protocol, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var tcp_object *ServiceResourceProtocolTcpObject
	if obj.Tcp != nil {
		tcp_object = new(ServiceResourceProtocolTcpObject)

		diags.Append(tcp_object.CopyFromPango(ctx, obj.Tcp, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var udp_object *ServiceResourceProtocolUdpObject
	if obj.Udp != nil {
		udp_object = new(ServiceResourceProtocolUdpObject)

		diags.Append(udp_object.CopyFromPango(ctx, obj.Udp, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Tcp = tcp_object
	o.Udp = udp_object

	return diags
}

func (o *ServiceResourceProtocolTcpObject) CopyFromPango(ctx context.Context, obj *service.ProtocolTcp, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var override_object *ServiceResourceProtocolTcpOverrideObject
	if obj.Override != nil {
		override_object = new(ServiceResourceProtocolTcpOverrideObject)

		diags.Append(override_object.CopyFromPango(ctx, obj.Override, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var destinationPort_value types.String
	if obj.Port != nil {
		destinationPort_value = types.StringValue(*obj.Port)
	}
	var sourcePort_value types.String
	if obj.SourcePort != nil {
		sourcePort_value = types.StringValue(*obj.SourcePort)
	}
	o.DestinationPort = destinationPort_value
	o.SourcePort = sourcePort_value
	o.Override = override_object

	return diags
}

func (o *ServiceResourceProtocolTcpOverrideObject) CopyFromPango(ctx context.Context, obj *service.ProtocolTcpOverride, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var halfcloseTimeout_value types.Int64
	if obj.HalfcloseTimeout != nil {
		halfcloseTimeout_value = types.Int64Value(*obj.HalfcloseTimeout)
	}
	var timeout_value types.Int64
	if obj.Timeout != nil {
		timeout_value = types.Int64Value(*obj.Timeout)
	}
	var timewaitTimeout_value types.Int64
	if obj.TimewaitTimeout != nil {
		timewaitTimeout_value = types.Int64Value(*obj.TimewaitTimeout)
	}
	o.HalfcloseTimeout = halfcloseTimeout_value
	o.Timeout = timeout_value
	o.TimewaitTimeout = timewaitTimeout_value

	return diags
}

func (o *ServiceResourceProtocolUdpObject) CopyFromPango(ctx context.Context, obj *service.ProtocolUdp, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var override_object *ServiceResourceProtocolUdpOverrideObject
	if obj.Override != nil {
		override_object = new(ServiceResourceProtocolUdpOverrideObject)

		diags.Append(override_object.CopyFromPango(ctx, obj.Override, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var destinationPort_value types.String
	if obj.Port != nil {
		destinationPort_value = types.StringValue(*obj.Port)
	}
	var sourcePort_value types.String
	if obj.SourcePort != nil {
		sourcePort_value = types.StringValue(*obj.SourcePort)
	}
	o.DestinationPort = destinationPort_value
	o.SourcePort = sourcePort_value
	o.Override = override_object

	return diags
}

func (o *ServiceResourceProtocolUdpOverrideObject) CopyFromPango(ctx context.Context, obj *service.ProtocolUdpOverride, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var timeout_value types.Int64
	if obj.Timeout != nil {
		timeout_value = types.Int64Value(*obj.Timeout)
	}
	o.Timeout = timeout_value

	return diags
}

func (r *ServiceResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state ServiceResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_service_resource",
		"function":      "Create",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	// Determine the location.

	var location service.Location

	{
		var terraformLocation ServiceLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &service.SharedLocation{}
			var innerLocation ServiceSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &service.VsysLocation{}
			var innerLocation ServiceVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &service.DeviceGroupLocation{}
			var innerLocation ServiceDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
		}
	}

	if err := location.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *service.Entry

	resp.Diagnostics.Append(state.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.
	created, err := r.manager.Create(ctx, location, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	resp.Diagnostics.Append(state.CopyFromPango(ctx, created, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}
	state.Name = types.StringValue(created.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
func (o *ServiceResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state ServiceResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location service.Location

	{
		var terraformLocation ServiceLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &service.SharedLocation{}
			var innerLocation ServiceSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &service.VsysLocation{}
			var innerLocation ServiceVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &service.DeviceGroupLocation{}
			var innerLocation ServiceDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_service_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, location, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *ServiceResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state ServiceResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location service.Location

	{
		var terraformLocation ServiceLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &service.SharedLocation{}
			var innerLocation ServiceSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &service.VsysLocation{}
			var innerLocation ServiceVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &service.DeviceGroupLocation{}
			var innerLocation ServiceDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_service_resource",
		"function":      "Update",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}
	obj, err := r.manager.Read(ctx, location, plan.Name.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Perform the operation.
	updated, err := r.manager.Update(ctx, location, obj, obj.Name)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	copy_diags := state.CopyFromPango(ctx, updated, nil)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *ServiceResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state ServiceResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_service_resource",
		"function":      "Delete",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var location service.Location

	{
		var terraformLocation ServiceLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &service.SharedLocation{}
			var innerLocation ServiceSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &service.VsysLocation{}
			var innerLocation ServiceVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &service.DeviceGroupLocation{}
			var innerLocation ServiceDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
		}
	}

	err := r.manager.Delete(ctx, location, []string{state.Name.ValueString()})
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}

}

type ServiceImportState struct {
	Location types.Object `json:"location"`
	Name     types.String `json:"name"`
}

func (o ServiceImportState) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Location *ServiceLocation `json:"location"`
		Name     *string          `json:"name"`
	}
	var location_object *ServiceLocation
	{
		diags := o.Location.As(context.TODO(), &location_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal location into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Location: location_object,
		Name:     o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *ServiceImportState) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Location *ServiceLocation `json:"location"`
		Name     *string          `json:"name"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var location_object types.Object
	{
		var diags_tmp diag.Diagnostics
		location_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Location.AttributeTypes(), shadow.Location)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into location", diags_tmp.Errors())
		}
	}
	o.Location = location_object
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}

func ServiceImportStateCreator(ctx context.Context, resource types.Object) ([]byte, error) {
	attrs := resource.Attributes()
	if attrs == nil {
		return nil, fmt.Errorf("Object has no attributes")
	}

	locationAttr, ok := attrs["location"]
	if !ok {
		return nil, fmt.Errorf("location attribute missing")
	}

	var location types.Object
	switch value := locationAttr.(type) {
	case types.Object:
		location = value
	default:
		return nil, fmt.Errorf("location attribute expected to be an object")
	}
	nameAttr, ok := attrs["name"]
	if !ok {
		return nil, fmt.Errorf("name attribute missing")
	}

	var name types.String
	switch value := nameAttr.(type) {
	case types.String:
		name = value
	default:
		return nil, fmt.Errorf("name attribute expected to be a string")
	}

	importStruct := ServiceImportState{
		Location: location,
		Name:     name,
	}

	return json.Marshal(importStruct)
}

func (r *ServiceResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	var obj ServiceImportState
	data, err := base64.StdEncoding.DecodeString(req.ID)
	if err != nil {
		resp.Diagnostics.AddError("Failed to decode Import ID", err.Error())
		return
	}

	err = json.Unmarshal(data, &obj)
	if err != nil {
		var diagsErr *DiagnosticsError
		if errors.As(err, &diagsErr) {
			resp.Diagnostics.Append(diagsErr.Diagnostics()...)
		} else {
			resp.Diagnostics.AddError("Failed to unmarshal Import ID", err.Error())
		}
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("location"), obj.Location)...)
	if resp.Diagnostics.HasError() {
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("name"), obj.Name)...)
}

type ServiceSharedLocation struct {
}
type ServiceVsysLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
	Name       types.String `tfsdk:"name"`
}
type ServiceDeviceGroupLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
}
type ServiceLocation struct {
	Shared      types.Object `tfsdk:"shared"`
	Vsys        types.Object `tfsdk:"vsys"`
	DeviceGroup types.Object `tfsdk:"device_group"`
}

func ServiceLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"shared": rsschema.SingleNestedAttribute{
				Description: "Panorama shared object",
				Optional:    true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("shared"),
						path.MatchRelative().AtParent().AtName("vsys"),
						path.MatchRelative().AtParent().AtName("device_group"),
					}...),
				},
			},
			"vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific Virtual System",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The Virtual System name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"device_group": rsschema.SingleNestedAttribute{
				Description: "Located in a specific Device Group",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Panorama device name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Device Group name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o ServiceSharedLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
	}

	obj := shadow{}

	return json.Marshal(obj)
}

func (o *ServiceSharedLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}

	return nil
}
func (o ServiceVsysLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
		Name       *string `json:"name,omitempty"`
	}

	obj := shadow{
		NgfwDevice: o.NgfwDevice.ValueStringPointer(),
		Name:       o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *ServiceVsysLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
		Name       *string `json:"name,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o ServiceDeviceGroupLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *ServiceDeviceGroupLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o ServiceLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Shared      *ServiceSharedLocation      `json:"shared,omitempty"`
		Vsys        *ServiceVsysLocation        `json:"vsys,omitempty"`
		DeviceGroup *ServiceDeviceGroupLocation `json:"device_group,omitempty"`
	}
	var shared_object *ServiceSharedLocation
	{
		diags := o.Shared.As(context.TODO(), &shared_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal shared into JSON document", diags.Errors())
		}
	}
	var vsys_object *ServiceVsysLocation
	{
		diags := o.Vsys.As(context.TODO(), &vsys_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal vsys into JSON document", diags.Errors())
		}
	}
	var deviceGroup_object *ServiceDeviceGroupLocation
	{
		diags := o.DeviceGroup.As(context.TODO(), &deviceGroup_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal device_group into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Shared:      shared_object,
		Vsys:        vsys_object,
		DeviceGroup: deviceGroup_object,
	}

	return json.Marshal(obj)
}

func (o *ServiceLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Shared      *ServiceSharedLocation      `json:"shared,omitempty"`
		Vsys        *ServiceVsysLocation        `json:"vsys,omitempty"`
		DeviceGroup *ServiceDeviceGroupLocation `json:"device_group,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var shared_object types.Object
	{
		var diags_tmp diag.Diagnostics
		shared_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Shared.AttributeTypes(), shadow.Shared)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into shared", diags_tmp.Errors())
		}
	}
	var vsys_object types.Object
	{
		var diags_tmp diag.Diagnostics
		vsys_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Vsys.AttributeTypes(), shadow.Vsys)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into vsys", diags_tmp.Errors())
		}
	}
	var deviceGroup_object types.Object
	{
		var diags_tmp diag.Diagnostics
		deviceGroup_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.DeviceGroup.AttributeTypes(), shadow.DeviceGroup)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into device_group", diags_tmp.Errors())
		}
	}
	o.Shared = shared_object
	o.Vsys = vsys_object
	o.DeviceGroup = deviceGroup_object

	return nil
}

func (o *ServiceSharedLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}
func (o *ServiceVsysLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"ngfw_device": types.StringType,
		"name":        types.StringType,
	}
}
func (o *ServiceDeviceGroupLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
	}
}
func (o *ServiceLocation) AttributeTypes() map[string]attr.Type {
	var sharedObj ServiceSharedLocation
	var vsysObj ServiceVsysLocation
	var deviceGroupObj ServiceDeviceGroupLocation
	return map[string]attr.Type{
		"shared": types.ObjectType{
			AttrTypes: sharedObj.AttributeTypes(),
		},
		"vsys": types.ObjectType{
			AttrTypes: vsysObj.AttributeTypes(),
		},
		"device_group": types.ObjectType{
			AttrTypes: deviceGroupObj.AttributeTypes(),
		},
	}
}
