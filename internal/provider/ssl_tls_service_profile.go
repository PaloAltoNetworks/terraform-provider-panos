package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/device/profile/ssltls"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &SslTlsServiceProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &SslTlsServiceProfileDataSource{}
)

func NewSslTlsServiceProfileDataSource() datasource.DataSource {
	return &SslTlsServiceProfileDataSource{}
}

type SslTlsServiceProfileDataSource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*ssltls.Entry, ssltls.Location, *ssltls.Service]
}

type SslTlsServiceProfileDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type SslTlsServiceProfileDataSourceModel struct {
	Location         SslTlsServiceProfileLocation                          `tfsdk:"location"`
	Name             types.String                                          `tfsdk:"name"`
	Certificate      types.String                                          `tfsdk:"certificate"`
	ProtocolSettings *SslTlsServiceProfileDataSourceProtocolSettingsObject `tfsdk:"protocol_settings"`
}
type SslTlsServiceProfileDataSourceProtocolSettingsObject struct {
	AllowAuthenticationSha1   types.Bool   `tfsdk:"allow_authentication_sha1"`
	AllowAuthenticationSha256 types.Bool   `tfsdk:"allow_authentication_sha256"`
	AllowAuthenticationSha384 types.Bool   `tfsdk:"allow_authentication_sha384"`
	AllowAlgorithm3des        types.Bool   `tfsdk:"allow_algorithm_3des"`
	AllowAlgorithmAes128Cbc   types.Bool   `tfsdk:"allow_algorithm_aes_128_cbc"`
	AllowAlgorithmAes128Gcm   types.Bool   `tfsdk:"allow_algorithm_aes_128_gcm"`
	AllowAlgorithmAes256Cbc   types.Bool   `tfsdk:"allow_algorithm_aes_256_cbc"`
	AllowAlgorithmAes256Gcm   types.Bool   `tfsdk:"allow_algorithm_aes_256_gcm"`
	AllowAlgorithmRc4         types.Bool   `tfsdk:"allow_algorithm_rc4"`
	AllowAlgorithmDhe         types.Bool   `tfsdk:"allow_algorithm_dhe"`
	AllowAlgorithmEcdhe       types.Bool   `tfsdk:"allow_algorithm_ecdhe"`
	AllowAlgorithmRsa         types.Bool   `tfsdk:"allow_algorithm_rsa"`
	MaxVersion                types.String `tfsdk:"max_version"`
	MinVersion                types.String `tfsdk:"min_version"`
}

func (o *SslTlsServiceProfileDataSourceModel) CopyToPango(ctx context.Context, obj **ssltls.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	certificate_value := o.Certificate.ValueStringPointer()
	var protocolSettings_entry *ssltls.ProtocolSettings
	if o.ProtocolSettings != nil {
		if *obj != nil && (*obj).ProtocolSettings != nil {
			protocolSettings_entry = (*obj).ProtocolSettings
		} else {
			protocolSettings_entry = new(ssltls.ProtocolSettings)
		}

		diags.Append(o.ProtocolSettings.CopyToPango(ctx, &protocolSettings_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ssltls.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Certificate = certificate_value
	(*obj).ProtocolSettings = protocolSettings_entry

	return diags
}
func (o *SslTlsServiceProfileDataSourceProtocolSettingsObject) CopyToPango(ctx context.Context, obj **ssltls.ProtocolSettings, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	allowAuthenticationSha1_value := o.AllowAuthenticationSha1.ValueBoolPointer()
	allowAuthenticationSha256_value := o.AllowAuthenticationSha256.ValueBoolPointer()
	allowAuthenticationSha384_value := o.AllowAuthenticationSha384.ValueBoolPointer()
	allowAlgorithm3des_value := o.AllowAlgorithm3des.ValueBoolPointer()
	allowAlgorithmAes128Cbc_value := o.AllowAlgorithmAes128Cbc.ValueBoolPointer()
	allowAlgorithmAes128Gcm_value := o.AllowAlgorithmAes128Gcm.ValueBoolPointer()
	allowAlgorithmAes256Cbc_value := o.AllowAlgorithmAes256Cbc.ValueBoolPointer()
	allowAlgorithmAes256Gcm_value := o.AllowAlgorithmAes256Gcm.ValueBoolPointer()
	allowAlgorithmRc4_value := o.AllowAlgorithmRc4.ValueBoolPointer()
	allowAlgorithmDhe_value := o.AllowAlgorithmDhe.ValueBoolPointer()
	allowAlgorithmEcdhe_value := o.AllowAlgorithmEcdhe.ValueBoolPointer()
	allowAlgorithmRsa_value := o.AllowAlgorithmRsa.ValueBoolPointer()
	maxVersion_value := o.MaxVersion.ValueStringPointer()
	minVersion_value := o.MinVersion.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ssltls.ProtocolSettings)
	}
	(*obj).AllowAuthenticationSha1 = allowAuthenticationSha1_value
	(*obj).AllowAuthenticationSha256 = allowAuthenticationSha256_value
	(*obj).AllowAuthenticationSha384 = allowAuthenticationSha384_value
	(*obj).AllowAlgorithm3des = allowAlgorithm3des_value
	(*obj).AllowAlgorithmAes128Cbc = allowAlgorithmAes128Cbc_value
	(*obj).AllowAlgorithmAes128Gcm = allowAlgorithmAes128Gcm_value
	(*obj).AllowAlgorithmAes256Cbc = allowAlgorithmAes256Cbc_value
	(*obj).AllowAlgorithmAes256Gcm = allowAlgorithmAes256Gcm_value
	(*obj).AllowAlgorithmRc4 = allowAlgorithmRc4_value
	(*obj).AllowAlgorithmDhe = allowAlgorithmDhe_value
	(*obj).AllowAlgorithmEcdhe = allowAlgorithmEcdhe_value
	(*obj).AllowAlgorithmRsa = allowAlgorithmRsa_value
	(*obj).MaxVersion = maxVersion_value
	(*obj).MinVersion = minVersion_value

	return diags
}

func (o *SslTlsServiceProfileDataSourceModel) CopyFromPango(ctx context.Context, obj *ssltls.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var protocolSettings_object *SslTlsServiceProfileDataSourceProtocolSettingsObject
	if obj.ProtocolSettings != nil {
		protocolSettings_object = new(SslTlsServiceProfileDataSourceProtocolSettingsObject)

		diags.Append(protocolSettings_object.CopyFromPango(ctx, obj.ProtocolSettings, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var certificate_value types.String
	if obj.Certificate != nil {
		certificate_value = types.StringValue(*obj.Certificate)
	}
	o.Name = types.StringValue(obj.Name)
	o.Certificate = certificate_value
	o.ProtocolSettings = protocolSettings_object

	return diags
}

func (o *SslTlsServiceProfileDataSourceProtocolSettingsObject) CopyFromPango(ctx context.Context, obj *ssltls.ProtocolSettings, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var allowAuthenticationSha1_value types.Bool
	if obj.AllowAuthenticationSha1 != nil {
		allowAuthenticationSha1_value = types.BoolValue(*obj.AllowAuthenticationSha1)
	}
	var allowAuthenticationSha256_value types.Bool
	if obj.AllowAuthenticationSha256 != nil {
		allowAuthenticationSha256_value = types.BoolValue(*obj.AllowAuthenticationSha256)
	}
	var allowAuthenticationSha384_value types.Bool
	if obj.AllowAuthenticationSha384 != nil {
		allowAuthenticationSha384_value = types.BoolValue(*obj.AllowAuthenticationSha384)
	}
	var allowAlgorithm3des_value types.Bool
	if obj.AllowAlgorithm3des != nil {
		allowAlgorithm3des_value = types.BoolValue(*obj.AllowAlgorithm3des)
	}
	var allowAlgorithmAes128Cbc_value types.Bool
	if obj.AllowAlgorithmAes128Cbc != nil {
		allowAlgorithmAes128Cbc_value = types.BoolValue(*obj.AllowAlgorithmAes128Cbc)
	}
	var allowAlgorithmAes128Gcm_value types.Bool
	if obj.AllowAlgorithmAes128Gcm != nil {
		allowAlgorithmAes128Gcm_value = types.BoolValue(*obj.AllowAlgorithmAes128Gcm)
	}
	var allowAlgorithmAes256Cbc_value types.Bool
	if obj.AllowAlgorithmAes256Cbc != nil {
		allowAlgorithmAes256Cbc_value = types.BoolValue(*obj.AllowAlgorithmAes256Cbc)
	}
	var allowAlgorithmAes256Gcm_value types.Bool
	if obj.AllowAlgorithmAes256Gcm != nil {
		allowAlgorithmAes256Gcm_value = types.BoolValue(*obj.AllowAlgorithmAes256Gcm)
	}
	var allowAlgorithmRc4_value types.Bool
	if obj.AllowAlgorithmRc4 != nil {
		allowAlgorithmRc4_value = types.BoolValue(*obj.AllowAlgorithmRc4)
	}
	var allowAlgorithmDhe_value types.Bool
	if obj.AllowAlgorithmDhe != nil {
		allowAlgorithmDhe_value = types.BoolValue(*obj.AllowAlgorithmDhe)
	}
	var allowAlgorithmEcdhe_value types.Bool
	if obj.AllowAlgorithmEcdhe != nil {
		allowAlgorithmEcdhe_value = types.BoolValue(*obj.AllowAlgorithmEcdhe)
	}
	var allowAlgorithmRsa_value types.Bool
	if obj.AllowAlgorithmRsa != nil {
		allowAlgorithmRsa_value = types.BoolValue(*obj.AllowAlgorithmRsa)
	}
	var maxVersion_value types.String
	if obj.MaxVersion != nil {
		maxVersion_value = types.StringValue(*obj.MaxVersion)
	}
	var minVersion_value types.String
	if obj.MinVersion != nil {
		minVersion_value = types.StringValue(*obj.MinVersion)
	}
	o.AllowAuthenticationSha1 = allowAuthenticationSha1_value
	o.AllowAuthenticationSha256 = allowAuthenticationSha256_value
	o.AllowAuthenticationSha384 = allowAuthenticationSha384_value
	o.AllowAlgorithm3des = allowAlgorithm3des_value
	o.AllowAlgorithmAes128Cbc = allowAlgorithmAes128Cbc_value
	o.AllowAlgorithmAes128Gcm = allowAlgorithmAes128Gcm_value
	o.AllowAlgorithmAes256Cbc = allowAlgorithmAes256Cbc_value
	o.AllowAlgorithmAes256Gcm = allowAlgorithmAes256Gcm_value
	o.AllowAlgorithmRc4 = allowAlgorithmRc4_value
	o.AllowAlgorithmDhe = allowAlgorithmDhe_value
	o.AllowAlgorithmEcdhe = allowAlgorithmEcdhe_value
	o.AllowAlgorithmRsa = allowAlgorithmRsa_value
	o.MaxVersion = maxVersion_value
	o.MinVersion = minVersion_value

	return diags
}

func SslTlsServiceProfileDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": SslTlsServiceProfileDataSourceLocationSchema(),

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"certificate": dsschema.StringAttribute{
				Description: "SSL certificate file name",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"protocol_settings": SslTlsServiceProfileDataSourceProtocolSettingsSchema(),
		},
	}
}

func (o *SslTlsServiceProfileDataSourceModel) getTypeFor(name string) attr.Type {
	schema := SslTlsServiceProfileDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SslTlsServiceProfileDataSourceProtocolSettingsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"allow_authentication_sha1": dsschema.BoolAttribute{
				Description: "Allow authentication SHA1",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"allow_authentication_sha256": dsschema.BoolAttribute{
				Description: "Allow authentication SHA256",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"allow_authentication_sha384": dsschema.BoolAttribute{
				Description: "Allow authentication SHA384",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"allow_algorithm_3des": dsschema.BoolAttribute{
				Description: "Allow algorithm 3DES",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"allow_algorithm_aes_128_cbc": dsschema.BoolAttribute{
				Description: "Allow algorithm AES-128-CBC",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"allow_algorithm_aes_128_gcm": dsschema.BoolAttribute{
				Description: "Allow algorithm AES-128-GCM",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"allow_algorithm_aes_256_cbc": dsschema.BoolAttribute{
				Description: "Allow algorithm AES-256-CBC",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"allow_algorithm_aes_256_gcm": dsschema.BoolAttribute{
				Description: "Allow algorithm AES-256-GCM",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"allow_algorithm_rc4": dsschema.BoolAttribute{
				Description: "Allow algorithm RC4",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"allow_algorithm_dhe": dsschema.BoolAttribute{
				Description: "Allow algorithm DHE",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"allow_algorithm_ecdhe": dsschema.BoolAttribute{
				Description: "Allow algorithm ECDHE",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"allow_algorithm_rsa": dsschema.BoolAttribute{
				Description: "Allow algorithm RSA",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"max_version": dsschema.StringAttribute{
				Description: "Maximum TLS protocol version. Valid values are 'tls1-0', 'tls1-1', 'tls1-2', and max (default).",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"min_version": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *SslTlsServiceProfileDataSourceProtocolSettingsObject) getTypeFor(name string) attr.Type {
	schema := SslTlsServiceProfileDataSourceProtocolSettingsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SslTlsServiceProfileDataSourceLocationSchema() rsschema.Attribute {
	return SslTlsServiceProfileLocationSchema()
}

// Metadata returns the data source type name.
func (d *SslTlsServiceProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ssl_tls_service_profile"
}

// Schema defines the schema for this data source.
func (d *SslTlsServiceProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = SslTlsServiceProfileDataSourceSchema()
}

// Configure prepares the struct.
func (d *SslTlsServiceProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	d.client = providerData.Client
	specifier, _, err := ssltls.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	d.manager = sdkmanager.NewEntryObjectManager(d.client, ssltls.NewService(d.client), batchSize, specifier, ssltls.SpecMatches)
}
func (o *SslTlsServiceProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state SslTlsServiceProfileDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location ssltls.Location

	if savestate.Location.Shared != nil {
		location.Shared = &ssltls.SharedLocation{}
	}
	if savestate.Location.Panorama != nil {
		location.Panorama = &ssltls.PanoramaLocation{}
	}
	if savestate.Location.Template != nil {
		location.Template = &ssltls.TemplateLocation{

			PanoramaDevice: savestate.Location.Template.PanoramaDevice.ValueString(),
			Template:       savestate.Location.Template.Name.ValueString(),
		}
	}
	if savestate.Location.TemplateVsys != nil {
		location.TemplateVsys = &ssltls.TemplateVsysLocation{

			PanoramaDevice: savestate.Location.TemplateVsys.PanoramaDevice.ValueString(),
			Template:       savestate.Location.TemplateVsys.Template.ValueString(),
			NgfwDevice:     savestate.Location.TemplateVsys.NgfwDevice.ValueString(),
			Vsys:           savestate.Location.TemplateVsys.Vsys.ValueString(),
		}
	}
	if savestate.Location.TemplateStack != nil {
		location.TemplateStack = &ssltls.TemplateStackLocation{

			PanoramaDevice: savestate.Location.TemplateStack.PanoramaDevice.ValueString(),
			TemplateStack:  savestate.Location.TemplateStack.Name.ValueString(),
		}
	}
	if savestate.Location.TemplateStackVsys != nil {
		location.TemplateStackVsys = &ssltls.TemplateStackVsysLocation{

			PanoramaDevice: savestate.Location.TemplateStackVsys.PanoramaDevice.ValueString(),
			TemplateStack:  savestate.Location.TemplateStackVsys.TemplateStack.ValueString(),
			NgfwDevice:     savestate.Location.TemplateStackVsys.NgfwDevice.ValueString(),
			Vsys:           savestate.Location.TemplateStackVsys.Vsys.ValueString(),
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_ssl_tls_service_profile_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, location, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &SslTlsServiceProfileResource{}
	_ resource.ResourceWithConfigure   = &SslTlsServiceProfileResource{}
	_ resource.ResourceWithImportState = &SslTlsServiceProfileResource{}
)

func NewSslTlsServiceProfileResource() resource.Resource {
	if _, found := resourceFuncMap["panos_ssl_tls_service_profile"]; !found {
		resourceFuncMap["panos_ssl_tls_service_profile"] = resourceFuncs{
			CreateImportId: SslTlsServiceProfileImportStateCreator,
		}
	}
	return &SslTlsServiceProfileResource{}
}

type SslTlsServiceProfileResource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*ssltls.Entry, ssltls.Location, *ssltls.Service]
}

func SslTlsServiceProfileResourceLocationSchema() rsschema.Attribute {
	return SslTlsServiceProfileLocationSchema()
}

type SslTlsServiceProfileResourceModel struct {
	Location         SslTlsServiceProfileLocation                        `tfsdk:"location"`
	Name             types.String                                        `tfsdk:"name"`
	Certificate      types.String                                        `tfsdk:"certificate"`
	ProtocolSettings *SslTlsServiceProfileResourceProtocolSettingsObject `tfsdk:"protocol_settings"`
}
type SslTlsServiceProfileResourceProtocolSettingsObject struct {
	AllowAuthenticationSha1   types.Bool   `tfsdk:"allow_authentication_sha1"`
	AllowAuthenticationSha256 types.Bool   `tfsdk:"allow_authentication_sha256"`
	AllowAuthenticationSha384 types.Bool   `tfsdk:"allow_authentication_sha384"`
	AllowAlgorithm3des        types.Bool   `tfsdk:"allow_algorithm_3des"`
	AllowAlgorithmAes128Cbc   types.Bool   `tfsdk:"allow_algorithm_aes_128_cbc"`
	AllowAlgorithmAes128Gcm   types.Bool   `tfsdk:"allow_algorithm_aes_128_gcm"`
	AllowAlgorithmAes256Cbc   types.Bool   `tfsdk:"allow_algorithm_aes_256_cbc"`
	AllowAlgorithmAes256Gcm   types.Bool   `tfsdk:"allow_algorithm_aes_256_gcm"`
	AllowAlgorithmRc4         types.Bool   `tfsdk:"allow_algorithm_rc4"`
	AllowAlgorithmDhe         types.Bool   `tfsdk:"allow_algorithm_dhe"`
	AllowAlgorithmEcdhe       types.Bool   `tfsdk:"allow_algorithm_ecdhe"`
	AllowAlgorithmRsa         types.Bool   `tfsdk:"allow_algorithm_rsa"`
	MaxVersion                types.String `tfsdk:"max_version"`
	MinVersion                types.String `tfsdk:"min_version"`
}

func (r *SslTlsServiceProfileResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func SslTlsServiceProfileResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": SslTlsServiceProfileResourceLocationSchema(),

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"certificate": rsschema.StringAttribute{
				Description: "SSL certificate file name",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"protocol_settings": SslTlsServiceProfileResourceProtocolSettingsSchema(),
		},
	}
}

func (o *SslTlsServiceProfileResourceModel) getTypeFor(name string) attr.Type {
	schema := SslTlsServiceProfileResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SslTlsServiceProfileResourceProtocolSettingsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"allow_authentication_sha1": rsschema.BoolAttribute{
				Description: "Allow authentication SHA1",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"allow_authentication_sha256": rsschema.BoolAttribute{
				Description: "Allow authentication SHA256",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"allow_authentication_sha384": rsschema.BoolAttribute{
				Description: "Allow authentication SHA384",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"allow_algorithm_3des": rsschema.BoolAttribute{
				Description: "Allow algorithm 3DES",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"allow_algorithm_aes_128_cbc": rsschema.BoolAttribute{
				Description: "Allow algorithm AES-128-CBC",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"allow_algorithm_aes_128_gcm": rsschema.BoolAttribute{
				Description: "Allow algorithm AES-128-GCM",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"allow_algorithm_aes_256_cbc": rsschema.BoolAttribute{
				Description: "Allow algorithm AES-256-CBC",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"allow_algorithm_aes_256_gcm": rsschema.BoolAttribute{
				Description: "Allow algorithm AES-256-GCM",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"allow_algorithm_rc4": rsschema.BoolAttribute{
				Description: "Allow algorithm RC4",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"allow_algorithm_dhe": rsschema.BoolAttribute{
				Description: "Allow algorithm DHE",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"allow_algorithm_ecdhe": rsschema.BoolAttribute{
				Description: "Allow algorithm ECDHE",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"allow_algorithm_rsa": rsschema.BoolAttribute{
				Description: "Allow algorithm RSA",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"max_version": rsschema.StringAttribute{
				Description: "Maximum TLS protocol version. Valid values are 'tls1-0', 'tls1-1', 'tls1-2', and max (default).",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("max"),
			},

			"min_version": rsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("tls1-0"),
			},
		},
	}
}

func (o *SslTlsServiceProfileResourceProtocolSettingsObject) getTypeFor(name string) attr.Type {
	schema := SslTlsServiceProfileResourceProtocolSettingsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *SslTlsServiceProfileResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ssl_tls_service_profile"
}

func (r *SslTlsServiceProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = SslTlsServiceProfileResourceSchema()
}

// </ResourceSchema>

func (r *SslTlsServiceProfileResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	r.client = providerData.Client
	specifier, _, err := ssltls.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	r.manager = sdkmanager.NewEntryObjectManager(r.client, ssltls.NewService(r.client), batchSize, specifier, ssltls.SpecMatches)
}

func (o *SslTlsServiceProfileResourceModel) CopyToPango(ctx context.Context, obj **ssltls.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	certificate_value := o.Certificate.ValueStringPointer()
	var protocolSettings_entry *ssltls.ProtocolSettings
	if o.ProtocolSettings != nil {
		if *obj != nil && (*obj).ProtocolSettings != nil {
			protocolSettings_entry = (*obj).ProtocolSettings
		} else {
			protocolSettings_entry = new(ssltls.ProtocolSettings)
		}

		diags.Append(o.ProtocolSettings.CopyToPango(ctx, &protocolSettings_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ssltls.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Certificate = certificate_value
	(*obj).ProtocolSettings = protocolSettings_entry

	return diags
}
func (o *SslTlsServiceProfileResourceProtocolSettingsObject) CopyToPango(ctx context.Context, obj **ssltls.ProtocolSettings, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	allowAuthenticationSha1_value := o.AllowAuthenticationSha1.ValueBoolPointer()
	allowAuthenticationSha256_value := o.AllowAuthenticationSha256.ValueBoolPointer()
	allowAuthenticationSha384_value := o.AllowAuthenticationSha384.ValueBoolPointer()
	allowAlgorithm3des_value := o.AllowAlgorithm3des.ValueBoolPointer()
	allowAlgorithmAes128Cbc_value := o.AllowAlgorithmAes128Cbc.ValueBoolPointer()
	allowAlgorithmAes128Gcm_value := o.AllowAlgorithmAes128Gcm.ValueBoolPointer()
	allowAlgorithmAes256Cbc_value := o.AllowAlgorithmAes256Cbc.ValueBoolPointer()
	allowAlgorithmAes256Gcm_value := o.AllowAlgorithmAes256Gcm.ValueBoolPointer()
	allowAlgorithmRc4_value := o.AllowAlgorithmRc4.ValueBoolPointer()
	allowAlgorithmDhe_value := o.AllowAlgorithmDhe.ValueBoolPointer()
	allowAlgorithmEcdhe_value := o.AllowAlgorithmEcdhe.ValueBoolPointer()
	allowAlgorithmRsa_value := o.AllowAlgorithmRsa.ValueBoolPointer()
	maxVersion_value := o.MaxVersion.ValueStringPointer()
	minVersion_value := o.MinVersion.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ssltls.ProtocolSettings)
	}
	(*obj).AllowAuthenticationSha1 = allowAuthenticationSha1_value
	(*obj).AllowAuthenticationSha256 = allowAuthenticationSha256_value
	(*obj).AllowAuthenticationSha384 = allowAuthenticationSha384_value
	(*obj).AllowAlgorithm3des = allowAlgorithm3des_value
	(*obj).AllowAlgorithmAes128Cbc = allowAlgorithmAes128Cbc_value
	(*obj).AllowAlgorithmAes128Gcm = allowAlgorithmAes128Gcm_value
	(*obj).AllowAlgorithmAes256Cbc = allowAlgorithmAes256Cbc_value
	(*obj).AllowAlgorithmAes256Gcm = allowAlgorithmAes256Gcm_value
	(*obj).AllowAlgorithmRc4 = allowAlgorithmRc4_value
	(*obj).AllowAlgorithmDhe = allowAlgorithmDhe_value
	(*obj).AllowAlgorithmEcdhe = allowAlgorithmEcdhe_value
	(*obj).AllowAlgorithmRsa = allowAlgorithmRsa_value
	(*obj).MaxVersion = maxVersion_value
	(*obj).MinVersion = minVersion_value

	return diags
}

func (o *SslTlsServiceProfileResourceModel) CopyFromPango(ctx context.Context, obj *ssltls.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var protocolSettings_object *SslTlsServiceProfileResourceProtocolSettingsObject
	if obj.ProtocolSettings != nil {
		protocolSettings_object = new(SslTlsServiceProfileResourceProtocolSettingsObject)

		diags.Append(protocolSettings_object.CopyFromPango(ctx, obj.ProtocolSettings, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var certificate_value types.String
	if obj.Certificate != nil {
		certificate_value = types.StringValue(*obj.Certificate)
	}
	o.Name = types.StringValue(obj.Name)
	o.Certificate = certificate_value
	o.ProtocolSettings = protocolSettings_object

	return diags
}

func (o *SslTlsServiceProfileResourceProtocolSettingsObject) CopyFromPango(ctx context.Context, obj *ssltls.ProtocolSettings, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var allowAuthenticationSha1_value types.Bool
	if obj.AllowAuthenticationSha1 != nil {
		allowAuthenticationSha1_value = types.BoolValue(*obj.AllowAuthenticationSha1)
	}
	var allowAuthenticationSha256_value types.Bool
	if obj.AllowAuthenticationSha256 != nil {
		allowAuthenticationSha256_value = types.BoolValue(*obj.AllowAuthenticationSha256)
	}
	var allowAuthenticationSha384_value types.Bool
	if obj.AllowAuthenticationSha384 != nil {
		allowAuthenticationSha384_value = types.BoolValue(*obj.AllowAuthenticationSha384)
	}
	var allowAlgorithm3des_value types.Bool
	if obj.AllowAlgorithm3des != nil {
		allowAlgorithm3des_value = types.BoolValue(*obj.AllowAlgorithm3des)
	}
	var allowAlgorithmAes128Cbc_value types.Bool
	if obj.AllowAlgorithmAes128Cbc != nil {
		allowAlgorithmAes128Cbc_value = types.BoolValue(*obj.AllowAlgorithmAes128Cbc)
	}
	var allowAlgorithmAes128Gcm_value types.Bool
	if obj.AllowAlgorithmAes128Gcm != nil {
		allowAlgorithmAes128Gcm_value = types.BoolValue(*obj.AllowAlgorithmAes128Gcm)
	}
	var allowAlgorithmAes256Cbc_value types.Bool
	if obj.AllowAlgorithmAes256Cbc != nil {
		allowAlgorithmAes256Cbc_value = types.BoolValue(*obj.AllowAlgorithmAes256Cbc)
	}
	var allowAlgorithmAes256Gcm_value types.Bool
	if obj.AllowAlgorithmAes256Gcm != nil {
		allowAlgorithmAes256Gcm_value = types.BoolValue(*obj.AllowAlgorithmAes256Gcm)
	}
	var allowAlgorithmRc4_value types.Bool
	if obj.AllowAlgorithmRc4 != nil {
		allowAlgorithmRc4_value = types.BoolValue(*obj.AllowAlgorithmRc4)
	}
	var allowAlgorithmDhe_value types.Bool
	if obj.AllowAlgorithmDhe != nil {
		allowAlgorithmDhe_value = types.BoolValue(*obj.AllowAlgorithmDhe)
	}
	var allowAlgorithmEcdhe_value types.Bool
	if obj.AllowAlgorithmEcdhe != nil {
		allowAlgorithmEcdhe_value = types.BoolValue(*obj.AllowAlgorithmEcdhe)
	}
	var allowAlgorithmRsa_value types.Bool
	if obj.AllowAlgorithmRsa != nil {
		allowAlgorithmRsa_value = types.BoolValue(*obj.AllowAlgorithmRsa)
	}
	var maxVersion_value types.String
	if obj.MaxVersion != nil {
		maxVersion_value = types.StringValue(*obj.MaxVersion)
	}
	var minVersion_value types.String
	if obj.MinVersion != nil {
		minVersion_value = types.StringValue(*obj.MinVersion)
	}
	o.AllowAuthenticationSha1 = allowAuthenticationSha1_value
	o.AllowAuthenticationSha256 = allowAuthenticationSha256_value
	o.AllowAuthenticationSha384 = allowAuthenticationSha384_value
	o.AllowAlgorithm3des = allowAlgorithm3des_value
	o.AllowAlgorithmAes128Cbc = allowAlgorithmAes128Cbc_value
	o.AllowAlgorithmAes128Gcm = allowAlgorithmAes128Gcm_value
	o.AllowAlgorithmAes256Cbc = allowAlgorithmAes256Cbc_value
	o.AllowAlgorithmAes256Gcm = allowAlgorithmAes256Gcm_value
	o.AllowAlgorithmRc4 = allowAlgorithmRc4_value
	o.AllowAlgorithmDhe = allowAlgorithmDhe_value
	o.AllowAlgorithmEcdhe = allowAlgorithmEcdhe_value
	o.AllowAlgorithmRsa = allowAlgorithmRsa_value
	o.MaxVersion = maxVersion_value
	o.MinVersion = minVersion_value

	return diags
}

func (r *SslTlsServiceProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state SslTlsServiceProfileResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_ssl_tls_service_profile_resource",
		"function":      "Create",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	// Determine the location.

	var location ssltls.Location

	if state.Location.Shared != nil {
		location.Shared = &ssltls.SharedLocation{}
	}
	if state.Location.Panorama != nil {
		location.Panorama = &ssltls.PanoramaLocation{}
	}
	if state.Location.Template != nil {
		location.Template = &ssltls.TemplateLocation{

			PanoramaDevice: state.Location.Template.PanoramaDevice.ValueString(),
			Template:       state.Location.Template.Name.ValueString(),
		}
	}
	if state.Location.TemplateVsys != nil {
		location.TemplateVsys = &ssltls.TemplateVsysLocation{

			PanoramaDevice: state.Location.TemplateVsys.PanoramaDevice.ValueString(),
			Template:       state.Location.TemplateVsys.Template.ValueString(),
			NgfwDevice:     state.Location.TemplateVsys.NgfwDevice.ValueString(),
			Vsys:           state.Location.TemplateVsys.Vsys.ValueString(),
		}
	}
	if state.Location.TemplateStack != nil {
		location.TemplateStack = &ssltls.TemplateStackLocation{

			PanoramaDevice: state.Location.TemplateStack.PanoramaDevice.ValueString(),
			TemplateStack:  state.Location.TemplateStack.Name.ValueString(),
		}
	}
	if state.Location.TemplateStackVsys != nil {
		location.TemplateStackVsys = &ssltls.TemplateStackVsysLocation{

			PanoramaDevice: state.Location.TemplateStackVsys.PanoramaDevice.ValueString(),
			TemplateStack:  state.Location.TemplateStackVsys.TemplateStack.ValueString(),
			NgfwDevice:     state.Location.TemplateStackVsys.NgfwDevice.ValueString(),
			Vsys:           state.Location.TemplateStackVsys.Vsys.ValueString(),
		}
	}

	if err := location.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *ssltls.Entry

	resp.Diagnostics.Append(state.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.
	created, err := r.manager.Create(ctx, location, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	resp.Diagnostics.Append(state.CopyFromPango(ctx, created, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}
	state.Name = types.StringValue(created.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
func (o *SslTlsServiceProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state SslTlsServiceProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location ssltls.Location

	if savestate.Location.Shared != nil {
		location.Shared = &ssltls.SharedLocation{}
	}
	if savestate.Location.Panorama != nil {
		location.Panorama = &ssltls.PanoramaLocation{}
	}
	if savestate.Location.Template != nil {
		location.Template = &ssltls.TemplateLocation{

			PanoramaDevice: savestate.Location.Template.PanoramaDevice.ValueString(),
			Template:       savestate.Location.Template.Name.ValueString(),
		}
	}
	if savestate.Location.TemplateVsys != nil {
		location.TemplateVsys = &ssltls.TemplateVsysLocation{

			PanoramaDevice: savestate.Location.TemplateVsys.PanoramaDevice.ValueString(),
			Template:       savestate.Location.TemplateVsys.Template.ValueString(),
			NgfwDevice:     savestate.Location.TemplateVsys.NgfwDevice.ValueString(),
			Vsys:           savestate.Location.TemplateVsys.Vsys.ValueString(),
		}
	}
	if savestate.Location.TemplateStack != nil {
		location.TemplateStack = &ssltls.TemplateStackLocation{

			PanoramaDevice: savestate.Location.TemplateStack.PanoramaDevice.ValueString(),
			TemplateStack:  savestate.Location.TemplateStack.Name.ValueString(),
		}
	}
	if savestate.Location.TemplateStackVsys != nil {
		location.TemplateStackVsys = &ssltls.TemplateStackVsysLocation{

			PanoramaDevice: savestate.Location.TemplateStackVsys.PanoramaDevice.ValueString(),
			TemplateStack:  savestate.Location.TemplateStackVsys.TemplateStack.ValueString(),
			NgfwDevice:     savestate.Location.TemplateStackVsys.NgfwDevice.ValueString(),
			Vsys:           savestate.Location.TemplateStackVsys.Vsys.ValueString(),
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_ssl_tls_service_profile_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, location, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *SslTlsServiceProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state SslTlsServiceProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location ssltls.Location

	if state.Location.Shared != nil {
		location.Shared = &ssltls.SharedLocation{}
	}
	if state.Location.Panorama != nil {
		location.Panorama = &ssltls.PanoramaLocation{}
	}
	if state.Location.Template != nil {
		location.Template = &ssltls.TemplateLocation{

			PanoramaDevice: state.Location.Template.PanoramaDevice.ValueString(),
			Template:       state.Location.Template.Name.ValueString(),
		}
	}
	if state.Location.TemplateVsys != nil {
		location.TemplateVsys = &ssltls.TemplateVsysLocation{

			PanoramaDevice: state.Location.TemplateVsys.PanoramaDevice.ValueString(),
			Template:       state.Location.TemplateVsys.Template.ValueString(),
			NgfwDevice:     state.Location.TemplateVsys.NgfwDevice.ValueString(),
			Vsys:           state.Location.TemplateVsys.Vsys.ValueString(),
		}
	}
	if state.Location.TemplateStack != nil {
		location.TemplateStack = &ssltls.TemplateStackLocation{

			PanoramaDevice: state.Location.TemplateStack.PanoramaDevice.ValueString(),
			TemplateStack:  state.Location.TemplateStack.Name.ValueString(),
		}
	}
	if state.Location.TemplateStackVsys != nil {
		location.TemplateStackVsys = &ssltls.TemplateStackVsysLocation{

			PanoramaDevice: state.Location.TemplateStackVsys.PanoramaDevice.ValueString(),
			TemplateStack:  state.Location.TemplateStackVsys.TemplateStack.ValueString(),
			NgfwDevice:     state.Location.TemplateStackVsys.NgfwDevice.ValueString(),
			Vsys:           state.Location.TemplateStackVsys.Vsys.ValueString(),
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_ssl_tls_service_profile_resource",
		"function":      "Update",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}
	obj, err := r.manager.Read(ctx, location, plan.Name.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Perform the operation.
	updated, err := r.manager.Update(ctx, location, obj, obj.Name)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	copy_diags := state.CopyFromPango(ctx, updated, nil)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *SslTlsServiceProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state SslTlsServiceProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_ssl_tls_service_profile_resource",
		"function":      "Delete",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var location ssltls.Location

	if state.Location.Shared != nil {
		location.Shared = &ssltls.SharedLocation{}
	}
	if state.Location.Panorama != nil {
		location.Panorama = &ssltls.PanoramaLocation{}
	}
	if state.Location.Template != nil {
		location.Template = &ssltls.TemplateLocation{

			PanoramaDevice: state.Location.Template.PanoramaDevice.ValueString(),
			Template:       state.Location.Template.Name.ValueString(),
		}
	}
	if state.Location.TemplateVsys != nil {
		location.TemplateVsys = &ssltls.TemplateVsysLocation{

			PanoramaDevice: state.Location.TemplateVsys.PanoramaDevice.ValueString(),
			Template:       state.Location.TemplateVsys.Template.ValueString(),
			NgfwDevice:     state.Location.TemplateVsys.NgfwDevice.ValueString(),
			Vsys:           state.Location.TemplateVsys.Vsys.ValueString(),
		}
	}
	if state.Location.TemplateStack != nil {
		location.TemplateStack = &ssltls.TemplateStackLocation{

			PanoramaDevice: state.Location.TemplateStack.PanoramaDevice.ValueString(),
			TemplateStack:  state.Location.TemplateStack.Name.ValueString(),
		}
	}
	if state.Location.TemplateStackVsys != nil {
		location.TemplateStackVsys = &ssltls.TemplateStackVsysLocation{

			PanoramaDevice: state.Location.TemplateStackVsys.PanoramaDevice.ValueString(),
			TemplateStack:  state.Location.TemplateStackVsys.TemplateStack.ValueString(),
			NgfwDevice:     state.Location.TemplateStackVsys.NgfwDevice.ValueString(),
			Vsys:           state.Location.TemplateStackVsys.Vsys.ValueString(),
		}
	}

	err := r.manager.Delete(ctx, location, []string{state.Name.ValueString()})
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}

}

type SslTlsServiceProfileImportState struct {
	Location SslTlsServiceProfileLocation `json:"location"`
	Name     string                       `json:"name"`
}

func SslTlsServiceProfileImportStateCreator(ctx context.Context, resource types.Object) ([]byte, error) {
	attrs := resource.Attributes()
	if attrs == nil {
		return nil, fmt.Errorf("Object has no attributes")
	}

	locationAttr, ok := attrs["location"]
	if !ok {
		return nil, fmt.Errorf("location attribute missing")
	}

	var location SslTlsServiceProfileLocation
	switch value := locationAttr.(type) {
	case types.Object:
		value.As(ctx, &location, basetypes.ObjectAsOptions{})
	default:
		return nil, fmt.Errorf("location attribute expected to be an object")
	}
	nameAttr, ok := attrs["name"]
	if !ok {
		return nil, fmt.Errorf("name attribute missing")
	}

	var name string
	switch value := nameAttr.(type) {
	case types.String:
		name = value.ValueString()
	default:
		return nil, fmt.Errorf("name attribute expected to be a string")
	}

	importStruct := SslTlsServiceProfileImportState{
		Location: location,
		Name:     name,
	}

	return json.Marshal(importStruct)
}

func (r *SslTlsServiceProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	var obj SslTlsServiceProfileImportState
	data, err := base64.StdEncoding.DecodeString(req.ID)
	if err != nil {
		resp.Diagnostics.AddError("Failed to decode Import ID", err.Error())
		return
	}

	err = json.Unmarshal(data, &obj)
	if err != nil {
		resp.Diagnostics.AddError("Failed to unmarshal Import ID", err.Error())
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("location"), obj.Location)...)
	if resp.Diagnostics.HasError() {
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("name"), obj.Name)...)
}

type SslTlsServiceProfileSharedLocation struct {
}
type SslTlsServiceProfilePanoramaLocation struct {
}
type SslTlsServiceProfileTemplateLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
}
type SslTlsServiceProfileTemplateVsysLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Template       types.String `tfsdk:"template"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
	Vsys           types.String `tfsdk:"vsys"`
}
type SslTlsServiceProfileTemplateStackLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
}
type SslTlsServiceProfileTemplateStackVsysLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	TemplateStack  types.String `tfsdk:"template_stack"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
	Vsys           types.String `tfsdk:"vsys"`
}
type SslTlsServiceProfileLocation struct {
	Shared            *SslTlsServiceProfileSharedLocation            `tfsdk:"shared"`
	Panorama          *SslTlsServiceProfilePanoramaLocation          `tfsdk:"panorama"`
	Template          *SslTlsServiceProfileTemplateLocation          `tfsdk:"template"`
	TemplateVsys      *SslTlsServiceProfileTemplateVsysLocation      `tfsdk:"template_vsys"`
	TemplateStack     *SslTlsServiceProfileTemplateStackLocation     `tfsdk:"template_stack"`
	TemplateStackVsys *SslTlsServiceProfileTemplateStackVsysLocation `tfsdk:"template_stack_vsys"`
}

func SslTlsServiceProfileLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"shared": rsschema.SingleNestedAttribute{
				Description: "Panorama shared object",
				Optional:    true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("shared"),
						path.MatchRelative().AtParent().AtName("panorama"),
						path.MatchRelative().AtParent().AtName("template"),
						path.MatchRelative().AtParent().AtName("template_vsys"),
						path.MatchRelative().AtParent().AtName("template_stack"),
						path.MatchRelative().AtParent().AtName("template_stack_vsys"),
					}...),
				},
			},
			"panorama": rsschema.SingleNestedAttribute{
				Description: "Located in a panorama.",
				Optional:    true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Specific Panorama template",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template, device and vsys.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"template": rsschema.StringAttribute{
						Description: "Specific Panorama template",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"vsys": rsschema.StringAttribute{
						Description: "The vsys.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_stack": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The template stack",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_stack_vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template, device and vsys.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"template_stack": rsschema.StringAttribute{
						Description: "The template stack",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"vsys": rsschema.StringAttribute{
						Description: "The vsys.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o SslTlsServiceProfileSharedLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
	}{}

	return json.Marshal(obj)
}

func (o *SslTlsServiceProfileSharedLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}

	return nil
}
func (o SslTlsServiceProfilePanoramaLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
	}{}

	return json.Marshal(obj)
}

func (o *SslTlsServiceProfilePanoramaLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}

	return nil
}
func (o SslTlsServiceProfileTemplateLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		PanoramaDevice *string `json:"panorama_device"`
		Name           *string `json:"name"`
	}{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *SslTlsServiceProfileTemplateLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device"`
		Name           *string `json:"name"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o SslTlsServiceProfileTemplateVsysLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		PanoramaDevice *string `json:"panorama_device"`
		Template       *string `json:"template"`
		NgfwDevice     *string `json:"ngfw_device"`
		Vsys           *string `json:"vsys"`
	}{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Template:       o.Template.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
		Vsys:           o.Vsys.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *SslTlsServiceProfileTemplateVsysLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device"`
		Template       *string `json:"template"`
		NgfwDevice     *string `json:"ngfw_device"`
		Vsys           *string `json:"vsys"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Template = types.StringPointerValue(shadow.Template)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)
	o.Vsys = types.StringPointerValue(shadow.Vsys)

	return nil
}
func (o SslTlsServiceProfileTemplateStackLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		PanoramaDevice *string `json:"panorama_device"`
		Name           *string `json:"name"`
	}{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *SslTlsServiceProfileTemplateStackLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device"`
		Name           *string `json:"name"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o SslTlsServiceProfileTemplateStackVsysLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		PanoramaDevice *string `json:"panorama_device"`
		TemplateStack  *string `json:"template_stack"`
		NgfwDevice     *string `json:"ngfw_device"`
		Vsys           *string `json:"vsys"`
	}{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		TemplateStack:  o.TemplateStack.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
		Vsys:           o.Vsys.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *SslTlsServiceProfileTemplateStackVsysLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device"`
		TemplateStack  *string `json:"template_stack"`
		NgfwDevice     *string `json:"ngfw_device"`
		Vsys           *string `json:"vsys"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.TemplateStack = types.StringPointerValue(shadow.TemplateStack)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)
	o.Vsys = types.StringPointerValue(shadow.Vsys)

	return nil
}
func (o SslTlsServiceProfileLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		Shared            *SslTlsServiceProfileSharedLocation            `json:"shared"`
		Panorama          *SslTlsServiceProfilePanoramaLocation          `json:"panorama"`
		Template          *SslTlsServiceProfileTemplateLocation          `json:"template"`
		TemplateVsys      *SslTlsServiceProfileTemplateVsysLocation      `json:"template_vsys"`
		TemplateStack     *SslTlsServiceProfileTemplateStackLocation     `json:"template_stack"`
		TemplateStackVsys *SslTlsServiceProfileTemplateStackVsysLocation `json:"template_stack_vsys"`
	}{
		Shared:            o.Shared,
		Panorama:          o.Panorama,
		Template:          o.Template,
		TemplateVsys:      o.TemplateVsys,
		TemplateStack:     o.TemplateStack,
		TemplateStackVsys: o.TemplateStackVsys,
	}

	return json.Marshal(obj)
}

func (o *SslTlsServiceProfileLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Shared            *SslTlsServiceProfileSharedLocation            `json:"shared"`
		Panorama          *SslTlsServiceProfilePanoramaLocation          `json:"panorama"`
		Template          *SslTlsServiceProfileTemplateLocation          `json:"template"`
		TemplateVsys      *SslTlsServiceProfileTemplateVsysLocation      `json:"template_vsys"`
		TemplateStack     *SslTlsServiceProfileTemplateStackLocation     `json:"template_stack"`
		TemplateStackVsys *SslTlsServiceProfileTemplateStackVsysLocation `json:"template_stack_vsys"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.Shared = shadow.Shared
	o.Panorama = shadow.Panorama
	o.Template = shadow.Template
	o.TemplateVsys = shadow.TemplateVsys
	o.TemplateStack = shadow.TemplateStack
	o.TemplateStackVsys = shadow.TemplateStackVsys

	return nil
}
