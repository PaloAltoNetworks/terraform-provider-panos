package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/network/zone"

	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &ZoneDataSource{}
	_ datasource.DataSourceWithConfigure = &ZoneDataSource{}
)

func NewZoneDataSource() datasource.DataSource {
	return &ZoneDataSource{}
}

type ZoneDataSource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*zone.Entry, zone.Location, *zone.Service]
}

type ZoneDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type ZoneDataSourceModel struct {
	Location                   types.Object                   `tfsdk:"location"`
	Name                       types.String                   `tfsdk:"name"`
	DeviceAcl                  *ZoneDataSourceDeviceAclObject `tfsdk:"device_acl"`
	EnableDeviceIdentification types.Bool                     `tfsdk:"enable_device_identification"`
	EnableUserIdentification   types.Bool                     `tfsdk:"enable_user_identification"`
	Network                    *ZoneDataSourceNetworkObject   `tfsdk:"network"`
	UserAcl                    *ZoneDataSourceUserAclObject   `tfsdk:"user_acl"`
}
type ZoneDataSourceDeviceAclObject struct {
	ExcludeList types.List `tfsdk:"exclude_list"`
	IncludeList types.List `tfsdk:"include_list"`
}
type ZoneDataSourceNetworkObject struct {
	EnablePacketBufferProtection types.Bool                         `tfsdk:"enable_packet_buffer_protection"`
	LogSetting                   types.String                       `tfsdk:"log_setting"`
	NetInspection                types.Bool                         `tfsdk:"net_inspection"`
	ZoneProtectionProfile        types.String                       `tfsdk:"zone_protection_profile"`
	External                     types.List                         `tfsdk:"external"`
	Layer2                       types.List                         `tfsdk:"layer2"`
	Layer3                       types.List                         `tfsdk:"layer3"`
	Tap                          types.List                         `tfsdk:"tap"`
	Tunnel                       *ZoneDataSourceNetworkTunnelObject `tfsdk:"tunnel"`
	VirtualWire                  types.List                         `tfsdk:"virtual_wire"`
}
type ZoneDataSourceNetworkTunnelObject struct {
}
type ZoneDataSourceUserAclObject struct {
	ExcludeList types.List `tfsdk:"exclude_list"`
	IncludeList types.List `tfsdk:"include_list"`
}

func (o *ZoneDataSourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj ZoneLocation

	var deviceAclObj *ZoneDataSourceDeviceAclObject

	var networkObj *ZoneDataSourceNetworkObject

	var userAclObj *ZoneDataSourceUserAclObject
	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"name": types.StringType,
		"device_acl": types.ObjectType{
			AttrTypes: deviceAclObj.AttributeTypes(),
		},
		"enable_device_identification": types.BoolType,
		"enable_user_identification":   types.BoolType,
		"network": types.ObjectType{
			AttrTypes: networkObj.AttributeTypes(),
		},
		"user_acl": types.ObjectType{
			AttrTypes: userAclObj.AttributeTypes(),
		},
	}
}

func (o ZoneDataSourceModel) AncestorName() string {
	return ""
}

func (o ZoneDataSourceModel) EntryName() *string {
	return nil
}
func (o *ZoneDataSourceDeviceAclObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"exclude_list": types.ListType{},
		"include_list": types.ListType{},
	}
}

func (o ZoneDataSourceDeviceAclObject) AncestorName() string {
	return "device-acl"
}

func (o ZoneDataSourceDeviceAclObject) EntryName() *string {
	return nil
}
func (o *ZoneDataSourceNetworkObject) AttributeTypes() map[string]attr.Type {

	var tunnelObj *ZoneDataSourceNetworkTunnelObject

	return map[string]attr.Type{
		"enable_packet_buffer_protection": types.BoolType,
		"log_setting":                     types.StringType,
		"net_inspection":                  types.BoolType,
		"zone_protection_profile":         types.StringType,
		"external":                        types.ListType{},
		"layer2":                          types.ListType{},
		"layer3":                          types.ListType{},
		"tap":                             types.ListType{},
		"tunnel": types.ObjectType{
			AttrTypes: tunnelObj.AttributeTypes(),
		},
		"virtual_wire": types.ListType{},
	}
}

func (o ZoneDataSourceNetworkObject) AncestorName() string {
	return "network"
}

func (o ZoneDataSourceNetworkObject) EntryName() *string {
	return nil
}
func (o *ZoneDataSourceNetworkTunnelObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o ZoneDataSourceNetworkTunnelObject) AncestorName() string {
	return "tunnel"
}

func (o ZoneDataSourceNetworkTunnelObject) EntryName() *string {
	return nil
}
func (o *ZoneDataSourceUserAclObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"exclude_list": types.ListType{},
		"include_list": types.ListType{},
	}
}

func (o ZoneDataSourceUserAclObject) AncestorName() string {
	return "user-acl"
}

func (o ZoneDataSourceUserAclObject) EntryName() *string {
	return nil
}

func (o *ZoneDataSourceModel) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **zone.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var deviceAcl_entry *zone.DeviceAcl
	if o.DeviceAcl != nil {
		if *obj != nil && (*obj).DeviceAcl != nil {
			deviceAcl_entry = (*obj).DeviceAcl
		} else {
			deviceAcl_entry = new(zone.DeviceAcl)
		}
		// ModelOrObject: Model
		diags.Append(o.DeviceAcl.CopyToPango(ctx, ancestors, &deviceAcl_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	enableDeviceIdentification_value := o.EnableDeviceIdentification.ValueBoolPointer()
	enableUserIdentification_value := o.EnableUserIdentification.ValueBoolPointer()
	var network_entry *zone.Network
	if o.Network != nil {
		if *obj != nil && (*obj).Network != nil {
			network_entry = (*obj).Network
		} else {
			network_entry = new(zone.Network)
		}
		// ModelOrObject: Model
		diags.Append(o.Network.CopyToPango(ctx, ancestors, &network_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var userAcl_entry *zone.UserAcl
	if o.UserAcl != nil {
		if *obj != nil && (*obj).UserAcl != nil {
			userAcl_entry = (*obj).UserAcl
		} else {
			userAcl_entry = new(zone.UserAcl)
		}
		// ModelOrObject: Model
		diags.Append(o.UserAcl.CopyToPango(ctx, ancestors, &userAcl_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(zone.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).DeviceAcl = deviceAcl_entry
	(*obj).EnableDeviceIdentification = enableDeviceIdentification_value
	(*obj).EnableUserIdentification = enableUserIdentification_value
	(*obj).Network = network_entry
	(*obj).UserAcl = userAcl_entry

	return diags
}
func (o *ZoneDataSourceDeviceAclObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **zone.DeviceAcl, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	excludeList_pango_entries := make([]string, 0)
	diags.Append(o.ExcludeList.ElementsAs(ctx, &excludeList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	includeList_pango_entries := make([]string, 0)
	diags.Append(o.IncludeList.ElementsAs(ctx, &includeList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(zone.DeviceAcl)
	}
	(*obj).ExcludeList = excludeList_pango_entries
	(*obj).IncludeList = includeList_pango_entries

	return diags
}
func (o *ZoneDataSourceNetworkObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **zone.Network, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enablePacketBufferProtection_value := o.EnablePacketBufferProtection.ValueBoolPointer()
	logSetting_value := o.LogSetting.ValueStringPointer()
	netInspection_value := o.NetInspection.ValueBoolPointer()
	zoneProtectionProfile_value := o.ZoneProtectionProfile.ValueStringPointer()
	external_pango_entries := make([]string, 0)
	diags.Append(o.External.ElementsAs(ctx, &external_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	layer2_pango_entries := make([]string, 0)
	diags.Append(o.Layer2.ElementsAs(ctx, &layer2_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	layer3_pango_entries := make([]string, 0)
	diags.Append(o.Layer3.ElementsAs(ctx, &layer3_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	tap_pango_entries := make([]string, 0)
	diags.Append(o.Tap.ElementsAs(ctx, &tap_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var tunnel_entry *zone.NetworkTunnel
	if o.Tunnel != nil {
		if *obj != nil && (*obj).Tunnel != nil {
			tunnel_entry = (*obj).Tunnel
		} else {
			tunnel_entry = new(zone.NetworkTunnel)
		}
		// ModelOrObject: Object
		diags.Append(o.Tunnel.CopyToPango(ctx, append(ancestors, o), &tunnel_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	virtualWire_pango_entries := make([]string, 0)
	diags.Append(o.VirtualWire.ElementsAs(ctx, &virtualWire_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(zone.Network)
	}
	(*obj).EnablePacketBufferProtection = enablePacketBufferProtection_value
	(*obj).LogSetting = logSetting_value
	(*obj).NetInspection = netInspection_value
	(*obj).ZoneProtectionProfile = zoneProtectionProfile_value
	(*obj).External = external_pango_entries
	(*obj).Layer2 = layer2_pango_entries
	(*obj).Layer3 = layer3_pango_entries
	(*obj).Tap = tap_pango_entries
	(*obj).Tunnel = tunnel_entry
	(*obj).VirtualWire = virtualWire_pango_entries

	return diags
}
func (o *ZoneDataSourceNetworkTunnelObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **zone.NetworkTunnel, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(zone.NetworkTunnel)
	}

	return diags
}
func (o *ZoneDataSourceUserAclObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **zone.UserAcl, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	excludeList_pango_entries := make([]string, 0)
	diags.Append(o.ExcludeList.ElementsAs(ctx, &excludeList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	includeList_pango_entries := make([]string, 0)
	diags.Append(o.IncludeList.ElementsAs(ctx, &includeList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(zone.UserAcl)
	}
	(*obj).ExcludeList = excludeList_pango_entries
	(*obj).IncludeList = includeList_pango_entries

	return diags
}

func (o *ZoneDataSourceModel) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *zone.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var deviceAcl_object *ZoneDataSourceDeviceAclObject
	if obj.DeviceAcl != nil {
		deviceAcl_object = new(ZoneDataSourceDeviceAclObject)
		diags.Append(deviceAcl_object.CopyFromPango(ctx, ancestors, obj.DeviceAcl, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var network_object *ZoneDataSourceNetworkObject
	if obj.Network != nil {
		network_object = new(ZoneDataSourceNetworkObject)
		diags.Append(network_object.CopyFromPango(ctx, ancestors, obj.Network, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var userAcl_object *ZoneDataSourceUserAclObject
	if obj.UserAcl != nil {
		userAcl_object = new(ZoneDataSourceUserAclObject)
		diags.Append(userAcl_object.CopyFromPango(ctx, ancestors, obj.UserAcl, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enableDeviceIdentification_value types.Bool
	if obj.EnableDeviceIdentification != nil {
		enableDeviceIdentification_value = types.BoolValue(*obj.EnableDeviceIdentification)
	}
	var enableUserIdentification_value types.Bool
	if obj.EnableUserIdentification != nil {
		enableUserIdentification_value = types.BoolValue(*obj.EnableUserIdentification)
	}
	o.Name = types.StringValue(obj.Name)
	o.DeviceAcl = deviceAcl_object
	o.EnableDeviceIdentification = enableDeviceIdentification_value
	o.EnableUserIdentification = enableUserIdentification_value
	o.Network = network_object
	o.UserAcl = userAcl_object

	return diags
}

func (o *ZoneDataSourceDeviceAclObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *zone.DeviceAcl, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var excludeList_list types.List
	{
		var list_diags diag.Diagnostics
		excludeList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ExcludeList)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var includeList_list types.List
	{
		var list_diags diag.Diagnostics
		includeList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.IncludeList)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}

	o.ExcludeList = excludeList_list
	o.IncludeList = includeList_list

	return diags
}

func (o *ZoneDataSourceNetworkObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *zone.Network, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var external_list types.List
	{
		var list_diags diag.Diagnostics
		external_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.External)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var layer2_list types.List
	{
		var list_diags diag.Diagnostics
		layer2_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Layer2)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var layer3_list types.List
	{
		var list_diags diag.Diagnostics
		layer3_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Layer3)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var tap_list types.List
	{
		var list_diags diag.Diagnostics
		tap_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tap)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var virtualWire_list types.List
	{
		var list_diags diag.Diagnostics
		virtualWire_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.VirtualWire)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var tunnel_object *ZoneDataSourceNetworkTunnelObject
	if obj.Tunnel != nil {
		tunnel_object = new(ZoneDataSourceNetworkTunnelObject)
		diags.Append(tunnel_object.CopyFromPango(ctx, append(ancestors, o), obj.Tunnel, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enablePacketBufferProtection_value types.Bool
	if obj.EnablePacketBufferProtection != nil {
		enablePacketBufferProtection_value = types.BoolValue(*obj.EnablePacketBufferProtection)
	}
	var logSetting_value types.String
	if obj.LogSetting != nil {
		logSetting_value = types.StringValue(*obj.LogSetting)
	}
	var netInspection_value types.Bool
	if obj.NetInspection != nil {
		netInspection_value = types.BoolValue(*obj.NetInspection)
	}
	var zoneProtectionProfile_value types.String
	if obj.ZoneProtectionProfile != nil {
		zoneProtectionProfile_value = types.StringValue(*obj.ZoneProtectionProfile)
	}
	o.EnablePacketBufferProtection = enablePacketBufferProtection_value
	o.LogSetting = logSetting_value
	o.NetInspection = netInspection_value
	o.ZoneProtectionProfile = zoneProtectionProfile_value
	o.External = external_list
	o.Layer2 = layer2_list
	o.Layer3 = layer3_list
	o.Tap = tap_list
	o.Tunnel = tunnel_object
	o.VirtualWire = virtualWire_list

	return diags
}

func (o *ZoneDataSourceNetworkTunnelObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *zone.NetworkTunnel, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *ZoneDataSourceUserAclObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *zone.UserAcl, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var excludeList_list types.List
	{
		var list_diags diag.Diagnostics
		excludeList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ExcludeList)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var includeList_list types.List
	{
		var list_diags diag.Diagnostics
		includeList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.IncludeList)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}

	o.ExcludeList = excludeList_list
	o.IncludeList = includeList_list

	return diags
}

func (o *ZoneDataSourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	return components, nil
}

func ZoneDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": ZoneDataSourceLocationSchema(),

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"device_acl": ZoneDataSourceDeviceAclSchema(),

			"enable_device_identification": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"enable_user_identification": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"network": ZoneDataSourceNetworkSchema(),

			"user_acl": ZoneDataSourceUserAclSchema(),
		},
	}
}

func (o *ZoneDataSourceModel) getTypeFor(name string) attr.Type {
	schema := ZoneDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ZoneDataSourceDeviceAclSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"exclude_list": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"include_list": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *ZoneDataSourceDeviceAclObject) getTypeFor(name string) attr.Type {
	schema := ZoneDataSourceDeviceAclSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ZoneDataSourceNetworkSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"enable_packet_buffer_protection": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_setting": dsschema.StringAttribute{
				Description: "Log setting for forwarding scan logs",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"net_inspection": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"zone_protection_profile": dsschema.StringAttribute{
				Description: "Zone protection profile",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"external": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"layer2": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"layer3": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"tap": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"tunnel": ZoneDataSourceNetworkTunnelSchema(),

			"virtual_wire": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *ZoneDataSourceNetworkObject) getTypeFor(name string) attr.Type {
	schema := ZoneDataSourceNetworkSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ZoneDataSourceNetworkTunnelSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("external"),
				path.MatchRelative().AtParent().AtName("layer2"),
				path.MatchRelative().AtParent().AtName("layer3"),
				path.MatchRelative().AtParent().AtName("tap"),
				path.MatchRelative().AtParent().AtName("tunnel"),
				path.MatchRelative().AtParent().AtName("virtual_wire"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *ZoneDataSourceNetworkTunnelObject) getTypeFor(name string) attr.Type {
	schema := ZoneDataSourceNetworkTunnelSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ZoneDataSourceUserAclSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"exclude_list": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"include_list": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *ZoneDataSourceUserAclObject) getTypeFor(name string) attr.Type {
	schema := ZoneDataSourceUserAclSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ZoneDataSourceLocationSchema() rsschema.Attribute {
	return ZoneLocationSchema()
}

// Metadata returns the data source type name.
func (d *ZoneDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_zone"
}

// Schema defines the schema for this data source.
func (d *ZoneDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = ZoneDataSourceSchema()
}

// Configure prepares the struct.
func (d *ZoneDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	d.client = providerData.Client
	specifier, _, err := zone.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	d.manager = sdkmanager.NewEntryObjectManager[*zone.Entry, zone.Location, *zone.Service](d.client, zone.NewService(d.client), batchSize, specifier, zone.SpecMatches)
}
func (o *ZoneDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state ZoneDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location zone.Location

	{
		var terraformLocation ZoneLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &zone.VsysLocation{}
			var innerLocation ZoneVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &zone.TemplateLocation{}
			var innerLocation ZoneTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Template.Vsys = innerLocation.Vsys.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &zone.TemplateStackLocation{}
			var innerLocation ZoneTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_zone_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	components, err := savestate.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	object, err := o.manager.Read(ctx, location, components, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, nil, object, ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &ZoneResource{}
	_ resource.ResourceWithConfigure   = &ZoneResource{}
	_ resource.ResourceWithImportState = &ZoneResource{}
)

func NewZoneResource() resource.Resource {
	if _, found := resourceFuncMap["panos_zone"]; !found {
		resourceFuncMap["panos_zone"] = resourceFuncs{
			CreateImportId: ZoneImportStateCreator,
		}
	}
	return &ZoneResource{}
}

type ZoneResource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*zone.Entry, zone.Location, *zone.Service]
}

func ZoneResourceLocationSchema() rsschema.Attribute {
	return ZoneLocationSchema()
}

type ZoneResourceModel struct {
	Location                   types.Object                 `tfsdk:"location"`
	Name                       types.String                 `tfsdk:"name"`
	DeviceAcl                  *ZoneResourceDeviceAclObject `tfsdk:"device_acl"`
	EnableDeviceIdentification types.Bool                   `tfsdk:"enable_device_identification"`
	EnableUserIdentification   types.Bool                   `tfsdk:"enable_user_identification"`
	Network                    *ZoneResourceNetworkObject   `tfsdk:"network"`
	UserAcl                    *ZoneResourceUserAclObject   `tfsdk:"user_acl"`
}
type ZoneResourceDeviceAclObject struct {
	ExcludeList types.List `tfsdk:"exclude_list"`
	IncludeList types.List `tfsdk:"include_list"`
}
type ZoneResourceNetworkObject struct {
	EnablePacketBufferProtection types.Bool                       `tfsdk:"enable_packet_buffer_protection"`
	LogSetting                   types.String                     `tfsdk:"log_setting"`
	NetInspection                types.Bool                       `tfsdk:"net_inspection"`
	ZoneProtectionProfile        types.String                     `tfsdk:"zone_protection_profile"`
	External                     types.List                       `tfsdk:"external"`
	Layer2                       types.List                       `tfsdk:"layer2"`
	Layer3                       types.List                       `tfsdk:"layer3"`
	Tap                          types.List                       `tfsdk:"tap"`
	Tunnel                       *ZoneResourceNetworkTunnelObject `tfsdk:"tunnel"`
	VirtualWire                  types.List                       `tfsdk:"virtual_wire"`
}
type ZoneResourceNetworkTunnelObject struct {
}
type ZoneResourceUserAclObject struct {
	ExcludeList types.List `tfsdk:"exclude_list"`
	IncludeList types.List `tfsdk:"include_list"`
}

func (r *ZoneResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func ZoneResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": ZoneResourceLocationSchema(),

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"device_acl": ZoneResourceDeviceAclSchema(),

			"enable_device_identification": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"enable_user_identification": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"network": ZoneResourceNetworkSchema(),

			"user_acl": ZoneResourceUserAclSchema(),
		},
	}
}

func (o *ZoneResourceModel) getTypeFor(name string) attr.Type {
	schema := ZoneResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ZoneResourceDeviceAclSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"exclude_list": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"include_list": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *ZoneResourceDeviceAclObject) getTypeFor(name string) attr.Type {
	schema := ZoneResourceDeviceAclSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ZoneResourceNetworkSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"enable_packet_buffer_protection": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_setting": rsschema.StringAttribute{
				Description: "Log setting for forwarding scan logs",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"net_inspection": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"zone_protection_profile": rsschema.StringAttribute{
				Description: "Zone protection profile",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"external": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,

				Validators: []validator.List{
					listvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("external"),
						path.MatchRelative().AtParent().AtName("layer2"),
						path.MatchRelative().AtParent().AtName("layer3"),
						path.MatchRelative().AtParent().AtName("tap"),
						path.MatchRelative().AtParent().AtName("tunnel"),
						path.MatchRelative().AtParent().AtName("virtual_wire"),
					}...),
				},
			},

			"layer2": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"layer3": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"tap": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"tunnel": ZoneResourceNetworkTunnelSchema(),

			"virtual_wire": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *ZoneResourceNetworkObject) getTypeFor(name string) attr.Type {
	schema := ZoneResourceNetworkSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ZoneResourceNetworkTunnelSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("external"),
				path.MatchRelative().AtParent().AtName("layer2"),
				path.MatchRelative().AtParent().AtName("layer3"),
				path.MatchRelative().AtParent().AtName("tap"),
				path.MatchRelative().AtParent().AtName("tunnel"),
				path.MatchRelative().AtParent().AtName("virtual_wire"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *ZoneResourceNetworkTunnelObject) getTypeFor(name string) attr.Type {
	schema := ZoneResourceNetworkTunnelSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func ZoneResourceUserAclSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"exclude_list": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"include_list": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *ZoneResourceUserAclObject) getTypeFor(name string) attr.Type {
	schema := ZoneResourceUserAclSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *ZoneResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_zone"
}

func (r *ZoneResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = ZoneResourceSchema()
}

// </ResourceSchema>

func (r *ZoneResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	r.client = providerData.Client
	specifier, _, err := zone.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	r.manager = sdkmanager.NewEntryObjectManager[*zone.Entry, zone.Location, *zone.Service](r.client, zone.NewService(r.client), batchSize, specifier, zone.SpecMatches)
}

func (o *ZoneResourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj ZoneLocation

	var deviceAclObj *ZoneResourceDeviceAclObject

	var networkObj *ZoneResourceNetworkObject

	var userAclObj *ZoneResourceUserAclObject
	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"name": types.StringType,
		"device_acl": types.ObjectType{
			AttrTypes: deviceAclObj.AttributeTypes(),
		},
		"enable_device_identification": types.BoolType,
		"enable_user_identification":   types.BoolType,
		"network": types.ObjectType{
			AttrTypes: networkObj.AttributeTypes(),
		},
		"user_acl": types.ObjectType{
			AttrTypes: userAclObj.AttributeTypes(),
		},
	}
}

func (o ZoneResourceModel) AncestorName() string {
	return ""
}

func (o ZoneResourceModel) EntryName() *string {
	return nil
}
func (o *ZoneResourceDeviceAclObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"exclude_list": types.ListType{},
		"include_list": types.ListType{},
	}
}

func (o ZoneResourceDeviceAclObject) AncestorName() string {
	return "device-acl"
}

func (o ZoneResourceDeviceAclObject) EntryName() *string {
	return nil
}
func (o *ZoneResourceNetworkObject) AttributeTypes() map[string]attr.Type {

	var tunnelObj *ZoneResourceNetworkTunnelObject

	return map[string]attr.Type{
		"enable_packet_buffer_protection": types.BoolType,
		"log_setting":                     types.StringType,
		"net_inspection":                  types.BoolType,
		"zone_protection_profile":         types.StringType,
		"external":                        types.ListType{},
		"layer2":                          types.ListType{},
		"layer3":                          types.ListType{},
		"tap":                             types.ListType{},
		"tunnel": types.ObjectType{
			AttrTypes: tunnelObj.AttributeTypes(),
		},
		"virtual_wire": types.ListType{},
	}
}

func (o ZoneResourceNetworkObject) AncestorName() string {
	return "network"
}

func (o ZoneResourceNetworkObject) EntryName() *string {
	return nil
}
func (o *ZoneResourceNetworkTunnelObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o ZoneResourceNetworkTunnelObject) AncestorName() string {
	return "tunnel"
}

func (o ZoneResourceNetworkTunnelObject) EntryName() *string {
	return nil
}
func (o *ZoneResourceUserAclObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"exclude_list": types.ListType{},
		"include_list": types.ListType{},
	}
}

func (o ZoneResourceUserAclObject) AncestorName() string {
	return "user-acl"
}

func (o ZoneResourceUserAclObject) EntryName() *string {
	return nil
}

func (o *ZoneResourceModel) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **zone.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var deviceAcl_entry *zone.DeviceAcl
	if o.DeviceAcl != nil {
		if *obj != nil && (*obj).DeviceAcl != nil {
			deviceAcl_entry = (*obj).DeviceAcl
		} else {
			deviceAcl_entry = new(zone.DeviceAcl)
		}
		// ModelOrObject: Model
		diags.Append(o.DeviceAcl.CopyToPango(ctx, ancestors, &deviceAcl_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	enableDeviceIdentification_value := o.EnableDeviceIdentification.ValueBoolPointer()
	enableUserIdentification_value := o.EnableUserIdentification.ValueBoolPointer()
	var network_entry *zone.Network
	if o.Network != nil {
		if *obj != nil && (*obj).Network != nil {
			network_entry = (*obj).Network
		} else {
			network_entry = new(zone.Network)
		}
		// ModelOrObject: Model
		diags.Append(o.Network.CopyToPango(ctx, ancestors, &network_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var userAcl_entry *zone.UserAcl
	if o.UserAcl != nil {
		if *obj != nil && (*obj).UserAcl != nil {
			userAcl_entry = (*obj).UserAcl
		} else {
			userAcl_entry = new(zone.UserAcl)
		}
		// ModelOrObject: Model
		diags.Append(o.UserAcl.CopyToPango(ctx, ancestors, &userAcl_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(zone.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).DeviceAcl = deviceAcl_entry
	(*obj).EnableDeviceIdentification = enableDeviceIdentification_value
	(*obj).EnableUserIdentification = enableUserIdentification_value
	(*obj).Network = network_entry
	(*obj).UserAcl = userAcl_entry

	return diags
}
func (o *ZoneResourceDeviceAclObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **zone.DeviceAcl, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	excludeList_pango_entries := make([]string, 0)
	diags.Append(o.ExcludeList.ElementsAs(ctx, &excludeList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	includeList_pango_entries := make([]string, 0)
	diags.Append(o.IncludeList.ElementsAs(ctx, &includeList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(zone.DeviceAcl)
	}
	(*obj).ExcludeList = excludeList_pango_entries
	(*obj).IncludeList = includeList_pango_entries

	return diags
}
func (o *ZoneResourceNetworkObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **zone.Network, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enablePacketBufferProtection_value := o.EnablePacketBufferProtection.ValueBoolPointer()
	logSetting_value := o.LogSetting.ValueStringPointer()
	netInspection_value := o.NetInspection.ValueBoolPointer()
	zoneProtectionProfile_value := o.ZoneProtectionProfile.ValueStringPointer()
	external_pango_entries := make([]string, 0)
	diags.Append(o.External.ElementsAs(ctx, &external_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	layer2_pango_entries := make([]string, 0)
	diags.Append(o.Layer2.ElementsAs(ctx, &layer2_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	layer3_pango_entries := make([]string, 0)
	diags.Append(o.Layer3.ElementsAs(ctx, &layer3_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	tap_pango_entries := make([]string, 0)
	diags.Append(o.Tap.ElementsAs(ctx, &tap_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var tunnel_entry *zone.NetworkTunnel
	if o.Tunnel != nil {
		if *obj != nil && (*obj).Tunnel != nil {
			tunnel_entry = (*obj).Tunnel
		} else {
			tunnel_entry = new(zone.NetworkTunnel)
		}
		// ModelOrObject: Object
		diags.Append(o.Tunnel.CopyToPango(ctx, append(ancestors, o), &tunnel_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	virtualWire_pango_entries := make([]string, 0)
	diags.Append(o.VirtualWire.ElementsAs(ctx, &virtualWire_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(zone.Network)
	}
	(*obj).EnablePacketBufferProtection = enablePacketBufferProtection_value
	(*obj).LogSetting = logSetting_value
	(*obj).NetInspection = netInspection_value
	(*obj).ZoneProtectionProfile = zoneProtectionProfile_value
	(*obj).External = external_pango_entries
	(*obj).Layer2 = layer2_pango_entries
	(*obj).Layer3 = layer3_pango_entries
	(*obj).Tap = tap_pango_entries
	(*obj).Tunnel = tunnel_entry
	(*obj).VirtualWire = virtualWire_pango_entries

	return diags
}
func (o *ZoneResourceNetworkTunnelObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **zone.NetworkTunnel, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(zone.NetworkTunnel)
	}

	return diags
}
func (o *ZoneResourceUserAclObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **zone.UserAcl, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	excludeList_pango_entries := make([]string, 0)
	diags.Append(o.ExcludeList.ElementsAs(ctx, &excludeList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	includeList_pango_entries := make([]string, 0)
	diags.Append(o.IncludeList.ElementsAs(ctx, &includeList_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(zone.UserAcl)
	}
	(*obj).ExcludeList = excludeList_pango_entries
	(*obj).IncludeList = includeList_pango_entries

	return diags
}

func (o *ZoneResourceModel) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *zone.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var deviceAcl_object *ZoneResourceDeviceAclObject
	if obj.DeviceAcl != nil {
		deviceAcl_object = new(ZoneResourceDeviceAclObject)
		diags.Append(deviceAcl_object.CopyFromPango(ctx, ancestors, obj.DeviceAcl, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var network_object *ZoneResourceNetworkObject
	if obj.Network != nil {
		network_object = new(ZoneResourceNetworkObject)
		diags.Append(network_object.CopyFromPango(ctx, ancestors, obj.Network, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var userAcl_object *ZoneResourceUserAclObject
	if obj.UserAcl != nil {
		userAcl_object = new(ZoneResourceUserAclObject)
		diags.Append(userAcl_object.CopyFromPango(ctx, ancestors, obj.UserAcl, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enableDeviceIdentification_value types.Bool
	if obj.EnableDeviceIdentification != nil {
		enableDeviceIdentification_value = types.BoolValue(*obj.EnableDeviceIdentification)
	}
	var enableUserIdentification_value types.Bool
	if obj.EnableUserIdentification != nil {
		enableUserIdentification_value = types.BoolValue(*obj.EnableUserIdentification)
	}
	o.Name = types.StringValue(obj.Name)
	o.DeviceAcl = deviceAcl_object
	o.EnableDeviceIdentification = enableDeviceIdentification_value
	o.EnableUserIdentification = enableUserIdentification_value
	o.Network = network_object
	o.UserAcl = userAcl_object

	return diags
}

func (o *ZoneResourceDeviceAclObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *zone.DeviceAcl, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var excludeList_list types.List
	{
		var list_diags diag.Diagnostics
		excludeList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ExcludeList)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var includeList_list types.List
	{
		var list_diags diag.Diagnostics
		includeList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.IncludeList)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}

	o.ExcludeList = excludeList_list
	o.IncludeList = includeList_list

	return diags
}

func (o *ZoneResourceNetworkObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *zone.Network, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var external_list types.List
	{
		var list_diags diag.Diagnostics
		external_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.External)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var layer2_list types.List
	{
		var list_diags diag.Diagnostics
		layer2_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Layer2)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var layer3_list types.List
	{
		var list_diags diag.Diagnostics
		layer3_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Layer3)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var tap_list types.List
	{
		var list_diags diag.Diagnostics
		tap_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tap)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var virtualWire_list types.List
	{
		var list_diags diag.Diagnostics
		virtualWire_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.VirtualWire)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var tunnel_object *ZoneResourceNetworkTunnelObject
	if obj.Tunnel != nil {
		tunnel_object = new(ZoneResourceNetworkTunnelObject)
		diags.Append(tunnel_object.CopyFromPango(ctx, append(ancestors, o), obj.Tunnel, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enablePacketBufferProtection_value types.Bool
	if obj.EnablePacketBufferProtection != nil {
		enablePacketBufferProtection_value = types.BoolValue(*obj.EnablePacketBufferProtection)
	}
	var logSetting_value types.String
	if obj.LogSetting != nil {
		logSetting_value = types.StringValue(*obj.LogSetting)
	}
	var netInspection_value types.Bool
	if obj.NetInspection != nil {
		netInspection_value = types.BoolValue(*obj.NetInspection)
	}
	var zoneProtectionProfile_value types.String
	if obj.ZoneProtectionProfile != nil {
		zoneProtectionProfile_value = types.StringValue(*obj.ZoneProtectionProfile)
	}
	o.EnablePacketBufferProtection = enablePacketBufferProtection_value
	o.LogSetting = logSetting_value
	o.NetInspection = netInspection_value
	o.ZoneProtectionProfile = zoneProtectionProfile_value
	o.External = external_list
	o.Layer2 = layer2_list
	o.Layer3 = layer3_list
	o.Tap = tap_list
	o.Tunnel = tunnel_object
	o.VirtualWire = virtualWire_list

	return diags
}

func (o *ZoneResourceNetworkTunnelObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *zone.NetworkTunnel, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *ZoneResourceUserAclObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *zone.UserAcl, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var excludeList_list types.List
	{
		var list_diags diag.Diagnostics
		excludeList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.ExcludeList)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var includeList_list types.List
	{
		var list_diags diag.Diagnostics
		includeList_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.IncludeList)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}

	o.ExcludeList = excludeList_list
	o.IncludeList = includeList_list

	return diags
}

func (o *ZoneResourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	return components, nil
}

func (r *ZoneResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state ZoneResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_zone_resource",
		"function":      "Create",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	// Determine the location.

	var location zone.Location

	{
		var terraformLocation ZoneLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &zone.VsysLocation{}
			var innerLocation ZoneVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &zone.TemplateLocation{}
			var innerLocation ZoneTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Template.Vsys = innerLocation.Vsys.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &zone.TemplateStackLocation{}
			var innerLocation ZoneTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	if err := location.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *zone.Entry
	resp.Diagnostics.Append(state.CopyToPango(ctx, nil, &obj, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	created, err := r.manager.Create(ctx, location, components, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	resp.Diagnostics.Append(state.CopyFromPango(ctx, nil, created, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
func (o *ZoneResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state ZoneResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	encryptedValues, diags := req.Private.GetKey(ctx, "encrypted_values")
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location zone.Location

	{
		var terraformLocation ZoneLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &zone.VsysLocation{}
			var innerLocation ZoneVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &zone.TemplateLocation{}
			var innerLocation ZoneTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Template.Vsys = innerLocation.Vsys.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &zone.TemplateStackLocation{}
			var innerLocation ZoneTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_zone_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	components, err := savestate.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	object, err := o.manager.Read(ctx, location, components, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, nil, object, ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *ZoneResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state ZoneResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	encryptedValues, diags := req.Private.GetKey(ctx, "encrypted_values")
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location zone.Location

	{
		var terraformLocation ZoneLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &zone.VsysLocation{}
			var innerLocation ZoneVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &zone.TemplateLocation{}
			var innerLocation ZoneTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Template.Vsys = innerLocation.Vsys.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &zone.TemplateStackLocation{}
			var innerLocation ZoneTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_zone_resource",
		"function":      "Update",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	obj, err := r.manager.Read(ctx, location, components, plan.Name.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, nil, &obj, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	components, err = plan.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}

	updated, err := r.manager.Update(ctx, location, components, obj, obj.Name)

	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	copy_diags := state.CopyFromPango(ctx, nil, updated, ev)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *ZoneResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state ZoneResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_zone_resource",
		"function":      "Delete",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var location zone.Location

	{
		var terraformLocation ZoneLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &zone.VsysLocation{}
			var innerLocation ZoneVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &zone.TemplateLocation{}
			var innerLocation ZoneTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Template.Vsys = innerLocation.Vsys.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &zone.TemplateStackLocation{}
			var innerLocation ZoneTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	err = r.manager.Delete(ctx, location, components, []string{state.Name.ValueString()})
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
		return
	}

}

type ZoneImportState struct {
	Location types.Object `json:"location"`
	Name     types.String `json:"name"`
}

func (o ZoneImportState) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Location *ZoneLocation `json:"location"`
		Name     *string       `json:"name"`
	}
	var location_object *ZoneLocation
	{
		diags := o.Location.As(context.TODO(), &location_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal location into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Location: location_object,
		Name:     o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *ZoneImportState) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Location *ZoneLocation `json:"location"`
		Name     *string       `json:"name"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var location_object types.Object
	{
		var diags_tmp diag.Diagnostics
		location_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Location.AttributeTypes(), shadow.Location)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into location", diags_tmp.Errors())
		}
	}
	o.Location = location_object
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}

func ZoneImportStateCreator(ctx context.Context, resource types.Object) ([]byte, error) {
	attrs := resource.Attributes()
	if attrs == nil {
		return nil, fmt.Errorf("Object has no attributes")
	}

	locationAttr, ok := attrs["location"]
	if !ok {
		return nil, fmt.Errorf("location attribute missing")
	}

	var location types.Object
	switch value := locationAttr.(type) {
	case types.Object:
		location = value
	default:
		return nil, fmt.Errorf("location attribute expected to be an object")
	}
	nameAttr, ok := attrs["name"]
	if !ok {
		return nil, fmt.Errorf("name attribute missing")
	}

	var name types.String
	switch value := nameAttr.(type) {
	case types.String:
		name = value
	default:
		return nil, fmt.Errorf("name attribute expected to be a string")
	}

	importStruct := ZoneImportState{
		Location: location,
		Name:     name,
	}

	return json.Marshal(importStruct)
}

func (r *ZoneResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	var obj ZoneImportState
	data, err := base64.StdEncoding.DecodeString(req.ID)
	if err != nil {
		resp.Diagnostics.AddError("Failed to decode Import ID", err.Error())
		return
	}

	err = json.Unmarshal(data, &obj)
	if err != nil {
		var diagsErr *DiagnosticsError
		if errors.As(err, &diagsErr) {
			resp.Diagnostics.Append(diagsErr.Diagnostics()...)
		} else {
			resp.Diagnostics.AddError("Failed to unmarshal Import ID", err.Error())
		}
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("location"), obj.Location)...)
	if resp.Diagnostics.HasError() {
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("name"), obj.Name)...)
}

type ZoneVsysLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
	Name       types.String `tfsdk:"name"`
}
type ZoneTemplateLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
	Vsys           types.String `tfsdk:"vsys"`
}
type ZoneTemplateStackLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type ZoneLocation struct {
	Vsys          types.Object `tfsdk:"vsys"`
	Template      types.Object `tfsdk:"template"`
	TemplateStack types.Object `tfsdk:"template_stack"`
}

func ZoneLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific Virtual System",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The Virtual System name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("vsys"),
						path.MatchRelative().AtParent().AtName("template"),
						path.MatchRelative().AtParent().AtName("template_stack"),
					}...),
				},
			},
			"template": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Specific Panorama template",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"vsys": rsschema.StringAttribute{
						Description: "The vsys.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_stack": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template stack",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Specific Panorama template stack",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o ZoneVsysLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
		Name       *string `json:"name,omitempty"`
	}

	obj := shadow{
		NgfwDevice: o.NgfwDevice.ValueStringPointer(),
		Name:       o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *ZoneVsysLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
		Name       *string `json:"name,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o ZoneTemplateLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
		Vsys           *string `json:"vsys,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
		Vsys:           o.Vsys.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *ZoneTemplateLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
		Vsys           *string `json:"vsys,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)
	o.Vsys = types.StringPointerValue(shadow.Vsys)

	return nil
}
func (o ZoneTemplateStackLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *ZoneTemplateStackLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o ZoneLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Vsys          *ZoneVsysLocation          `json:"vsys,omitempty"`
		Template      *ZoneTemplateLocation      `json:"template,omitempty"`
		TemplateStack *ZoneTemplateStackLocation `json:"template_stack,omitempty"`
	}
	var vsys_object *ZoneVsysLocation
	{
		diags := o.Vsys.As(context.TODO(), &vsys_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal vsys into JSON document", diags.Errors())
		}
	}
	var template_object *ZoneTemplateLocation
	{
		diags := o.Template.As(context.TODO(), &template_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template into JSON document", diags.Errors())
		}
	}
	var templateStack_object *ZoneTemplateStackLocation
	{
		diags := o.TemplateStack.As(context.TODO(), &templateStack_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template_stack into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Vsys:          vsys_object,
		Template:      template_object,
		TemplateStack: templateStack_object,
	}

	return json.Marshal(obj)
}

func (o *ZoneLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Vsys          *ZoneVsysLocation          `json:"vsys,omitempty"`
		Template      *ZoneTemplateLocation      `json:"template,omitempty"`
		TemplateStack *ZoneTemplateStackLocation `json:"template_stack,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var vsys_object types.Object
	{
		var diags_tmp diag.Diagnostics
		vsys_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Vsys.AttributeTypes(), shadow.Vsys)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into vsys", diags_tmp.Errors())
		}
	}
	var template_object types.Object
	{
		var diags_tmp diag.Diagnostics
		template_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Template.AttributeTypes(), shadow.Template)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template", diags_tmp.Errors())
		}
	}
	var templateStack_object types.Object
	{
		var diags_tmp diag.Diagnostics
		templateStack_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.TemplateStack.AttributeTypes(), shadow.TemplateStack)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template_stack", diags_tmp.Errors())
		}
	}
	o.Vsys = vsys_object
	o.Template = template_object
	o.TemplateStack = templateStack_object

	return nil
}

func (o *ZoneVsysLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"ngfw_device": types.StringType,
		"name":        types.StringType,
	}
}
func (o *ZoneTemplateLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
		"ngfw_device":     types.StringType,
		"vsys":            types.StringType,
	}
}
func (o *ZoneTemplateStackLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
		"ngfw_device":     types.StringType,
	}
}
func (o *ZoneLocation) AttributeTypes() map[string]attr.Type {
	var vsysObj ZoneVsysLocation
	var templateObj ZoneTemplateLocation
	var templateStackObj ZoneTemplateStackLocation
	return map[string]attr.Type{
		"vsys": types.ObjectType{
			AttrTypes: vsysObj.AttributeTypes(),
		},
		"template": types.ObjectType{
			AttrTypes: templateObj.AttributeTypes(),
		},
		"template_stack": types.ObjectType{
			AttrTypes: templateStackObj.AttributeTypes(),
		},
	}
}
