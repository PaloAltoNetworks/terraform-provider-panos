package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"strings"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/network/virtual_router/ipv4/staticroute"
	pangoutil "github.com/PaloAltoNetworks/pango/util"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &VirtualRouterStaticRouteIpv4DataSource{}
	_ datasource.DataSourceWithConfigure = &VirtualRouterStaticRouteIpv4DataSource{}
)

func NewVirtualRouterStaticRouteIpv4DataSource() datasource.DataSource {
	return &VirtualRouterStaticRouteIpv4DataSource{}
}

type VirtualRouterStaticRouteIpv4DataSource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*staticroute.Entry, staticroute.Location, *staticroute.Service]
}

type VirtualRouterStaticRouteIpv4DataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type VirtualRouterStaticRouteIpv4DataSourceModel struct {
	Location      types.Object                                             `tfsdk:"location"`
	Name          types.String                                             `tfsdk:"name"`
	VirtualRouter types.String                                             `tfsdk:"virtual_router"`
	AdminDist     types.Int64                                              `tfsdk:"admin_dist"`
	Bfd           *VirtualRouterStaticRouteIpv4DataSourceBfdObject         `tfsdk:"bfd"`
	Destination   types.String                                             `tfsdk:"destination"`
	Interface     types.String                                             `tfsdk:"interface"`
	Metric        types.Int64                                              `tfsdk:"metric"`
	Nexthop       *VirtualRouterStaticRouteIpv4DataSourceNexthopObject     `tfsdk:"nexthop"`
	PathMonitor   *VirtualRouterStaticRouteIpv4DataSourcePathMonitorObject `tfsdk:"path_monitor"`
	RouteTable    *VirtualRouterStaticRouteIpv4DataSourceRouteTableObject  `tfsdk:"route_table"`
}
type VirtualRouterStaticRouteIpv4DataSourceBfdObject struct {
	Profile types.String `tfsdk:"profile"`
}
type VirtualRouterStaticRouteIpv4DataSourceNexthopObject struct {
	Discard   *VirtualRouterStaticRouteIpv4DataSourceNexthopDiscardObject `tfsdk:"discard"`
	Fqdn      types.String                                                `tfsdk:"fqdn"`
	IpAddress types.String                                                `tfsdk:"ip_address"`
	NextVr    types.String                                                `tfsdk:"next_vr"`
	Receive   *VirtualRouterStaticRouteIpv4DataSourceNexthopReceiveObject `tfsdk:"receive"`
}
type VirtualRouterStaticRouteIpv4DataSourceNexthopDiscardObject struct {
}
type VirtualRouterStaticRouteIpv4DataSourceNexthopReceiveObject struct {
}
type VirtualRouterStaticRouteIpv4DataSourcePathMonitorObject struct {
	Enable              types.Bool   `tfsdk:"enable"`
	FailureCondition    types.String `tfsdk:"failure_condition"`
	HoldTime            types.Int64  `tfsdk:"hold_time"`
	MonitorDestinations types.List   `tfsdk:"monitor_destinations"`
}
type VirtualRouterStaticRouteIpv4DataSourcePathMonitorMonitorDestinationsObject struct {
	Name        types.String `tfsdk:"name"`
	Enable      types.Bool   `tfsdk:"enable"`
	Source      types.String `tfsdk:"source"`
	Destination types.String `tfsdk:"destination"`
	Interval    types.Int64  `tfsdk:"interval"`
	Count       types.Int64  `tfsdk:"count"`
}
type VirtualRouterStaticRouteIpv4DataSourceRouteTableObject struct {
	Both      *VirtualRouterStaticRouteIpv4DataSourceRouteTableBothObject      `tfsdk:"both"`
	Multicast *VirtualRouterStaticRouteIpv4DataSourceRouteTableMulticastObject `tfsdk:"multicast"`
	NoInstall *VirtualRouterStaticRouteIpv4DataSourceRouteTableNoInstallObject `tfsdk:"no_install"`
	Unicast   *VirtualRouterStaticRouteIpv4DataSourceRouteTableUnicastObject   `tfsdk:"unicast"`
}
type VirtualRouterStaticRouteIpv4DataSourceRouteTableBothObject struct {
}
type VirtualRouterStaticRouteIpv4DataSourceRouteTableMulticastObject struct {
}
type VirtualRouterStaticRouteIpv4DataSourceRouteTableNoInstallObject struct {
}
type VirtualRouterStaticRouteIpv4DataSourceRouteTableUnicastObject struct {
}

func (o *VirtualRouterStaticRouteIpv4DataSourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj VirtualRouterStaticRouteIpv4Location

	var bfdObj *VirtualRouterStaticRouteIpv4DataSourceBfdObject

	var nexthopObj *VirtualRouterStaticRouteIpv4DataSourceNexthopObject

	var pathMonitorObj *VirtualRouterStaticRouteIpv4DataSourcePathMonitorObject

	var routeTableObj *VirtualRouterStaticRouteIpv4DataSourceRouteTableObject
	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"name":           types.StringType,
		"virtual_router": types.StringType,
		"admin_dist":     types.Int64Type,
		"bfd": types.ObjectType{
			AttrTypes: bfdObj.AttributeTypes(),
		},
		"destination": types.StringType,
		"interface":   types.StringType,
		"metric":      types.Int64Type,
		"nexthop": types.ObjectType{
			AttrTypes: nexthopObj.AttributeTypes(),
		},
		"path_monitor": types.ObjectType{
			AttrTypes: pathMonitorObj.AttributeTypes(),
		},
		"route_table": types.ObjectType{
			AttrTypes: routeTableObj.AttributeTypes(),
		},
	}
}

func (o VirtualRouterStaticRouteIpv4DataSourceModel) AncestorName() string {
	return ""
}

func (o VirtualRouterStaticRouteIpv4DataSourceModel) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRouteIpv4DataSourceBfdObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"profile": types.StringType,
	}
}

func (o VirtualRouterStaticRouteIpv4DataSourceBfdObject) AncestorName() string {
	return "bfd"
}

func (o VirtualRouterStaticRouteIpv4DataSourceBfdObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRouteIpv4DataSourceNexthopObject) AttributeTypes() map[string]attr.Type {

	var discardObj *VirtualRouterStaticRouteIpv4DataSourceNexthopDiscardObject

	var receiveObj *VirtualRouterStaticRouteIpv4DataSourceNexthopReceiveObject
	return map[string]attr.Type{
		"discard": types.ObjectType{
			AttrTypes: discardObj.AttributeTypes(),
		},
		"fqdn":       types.StringType,
		"ip_address": types.StringType,
		"next_vr":    types.StringType,
		"receive": types.ObjectType{
			AttrTypes: receiveObj.AttributeTypes(),
		},
	}
}

func (o VirtualRouterStaticRouteIpv4DataSourceNexthopObject) AncestorName() string {
	return "nexthop"
}

func (o VirtualRouterStaticRouteIpv4DataSourceNexthopObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRouteIpv4DataSourceNexthopDiscardObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o VirtualRouterStaticRouteIpv4DataSourceNexthopDiscardObject) AncestorName() string {
	return "discard"
}

func (o VirtualRouterStaticRouteIpv4DataSourceNexthopDiscardObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRouteIpv4DataSourceNexthopReceiveObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o VirtualRouterStaticRouteIpv4DataSourceNexthopReceiveObject) AncestorName() string {
	return "receive"
}

func (o VirtualRouterStaticRouteIpv4DataSourceNexthopReceiveObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRouteIpv4DataSourcePathMonitorObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"enable":               types.BoolType,
		"failure_condition":    types.StringType,
		"hold_time":            types.Int64Type,
		"monitor_destinations": types.ListType{},
	}
}

func (o VirtualRouterStaticRouteIpv4DataSourcePathMonitorObject) AncestorName() string {
	return "path-monitor"
}

func (o VirtualRouterStaticRouteIpv4DataSourcePathMonitorObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRouteIpv4DataSourcePathMonitorMonitorDestinationsObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":        types.StringType,
		"enable":      types.BoolType,
		"source":      types.StringType,
		"destination": types.StringType,
		"interval":    types.Int64Type,
		"count":       types.Int64Type,
	}
}

func (o VirtualRouterStaticRouteIpv4DataSourcePathMonitorMonitorDestinationsObject) AncestorName() string {
	return "monitor-destinations"
}

func (o VirtualRouterStaticRouteIpv4DataSourcePathMonitorMonitorDestinationsObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *VirtualRouterStaticRouteIpv4DataSourceRouteTableObject) AttributeTypes() map[string]attr.Type {

	var bothObj *VirtualRouterStaticRouteIpv4DataSourceRouteTableBothObject

	var multicastObj *VirtualRouterStaticRouteIpv4DataSourceRouteTableMulticastObject

	var noInstallObj *VirtualRouterStaticRouteIpv4DataSourceRouteTableNoInstallObject

	var unicastObj *VirtualRouterStaticRouteIpv4DataSourceRouteTableUnicastObject
	return map[string]attr.Type{
		"both": types.ObjectType{
			AttrTypes: bothObj.AttributeTypes(),
		},
		"multicast": types.ObjectType{
			AttrTypes: multicastObj.AttributeTypes(),
		},
		"no_install": types.ObjectType{
			AttrTypes: noInstallObj.AttributeTypes(),
		},
		"unicast": types.ObjectType{
			AttrTypes: unicastObj.AttributeTypes(),
		},
	}
}

func (o VirtualRouterStaticRouteIpv4DataSourceRouteTableObject) AncestorName() string {
	return "route-table"
}

func (o VirtualRouterStaticRouteIpv4DataSourceRouteTableObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRouteIpv4DataSourceRouteTableBothObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o VirtualRouterStaticRouteIpv4DataSourceRouteTableBothObject) AncestorName() string {
	return "both"
}

func (o VirtualRouterStaticRouteIpv4DataSourceRouteTableBothObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRouteIpv4DataSourceRouteTableMulticastObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o VirtualRouterStaticRouteIpv4DataSourceRouteTableMulticastObject) AncestorName() string {
	return "multicast"
}

func (o VirtualRouterStaticRouteIpv4DataSourceRouteTableMulticastObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRouteIpv4DataSourceRouteTableNoInstallObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o VirtualRouterStaticRouteIpv4DataSourceRouteTableNoInstallObject) AncestorName() string {
	return "no-install"
}

func (o VirtualRouterStaticRouteIpv4DataSourceRouteTableNoInstallObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRouteIpv4DataSourceRouteTableUnicastObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o VirtualRouterStaticRouteIpv4DataSourceRouteTableUnicastObject) AncestorName() string {
	return "unicast"
}

func (o VirtualRouterStaticRouteIpv4DataSourceRouteTableUnicastObject) EntryName() *string {
	return nil
}

func (o *VirtualRouterStaticRouteIpv4DataSourceModel) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	adminDist_value := o.AdminDist.ValueInt64Pointer()
	var bfd_entry *staticroute.Bfd
	if o.Bfd != nil {
		if *obj != nil && (*obj).Bfd != nil {
			bfd_entry = (*obj).Bfd
		} else {
			bfd_entry = new(staticroute.Bfd)
		}
		// ModelOrObject: Model
		diags.Append(o.Bfd.CopyToPango(ctx, ancestors, &bfd_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	destination_value := o.Destination.ValueStringPointer()
	interface_value := o.Interface.ValueStringPointer()
	metric_value := o.Metric.ValueInt64Pointer()
	var nexthop_entry *staticroute.Nexthop
	if o.Nexthop != nil {
		if *obj != nil && (*obj).Nexthop != nil {
			nexthop_entry = (*obj).Nexthop
		} else {
			nexthop_entry = new(staticroute.Nexthop)
		}
		// ModelOrObject: Model
		diags.Append(o.Nexthop.CopyToPango(ctx, ancestors, &nexthop_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var pathMonitor_entry *staticroute.PathMonitor
	if o.PathMonitor != nil {
		if *obj != nil && (*obj).PathMonitor != nil {
			pathMonitor_entry = (*obj).PathMonitor
		} else {
			pathMonitor_entry = new(staticroute.PathMonitor)
		}
		// ModelOrObject: Model
		diags.Append(o.PathMonitor.CopyToPango(ctx, ancestors, &pathMonitor_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var routeTable_entry *staticroute.RouteTable
	if o.RouteTable != nil {
		if *obj != nil && (*obj).RouteTable != nil {
			routeTable_entry = (*obj).RouteTable
		} else {
			routeTable_entry = new(staticroute.RouteTable)
		}
		// ModelOrObject: Model
		diags.Append(o.RouteTable.CopyToPango(ctx, ancestors, &routeTable_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(staticroute.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).AdminDist = adminDist_value
	(*obj).Bfd = bfd_entry
	(*obj).Destination = destination_value
	(*obj).Interface = interface_value
	(*obj).Metric = metric_value
	(*obj).Nexthop = nexthop_entry
	(*obj).PathMonitor = pathMonitor_entry
	(*obj).RouteTable = routeTable_entry

	return diags
}
func (o *VirtualRouterStaticRouteIpv4DataSourceBfdObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.Bfd, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	profile_value := o.Profile.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(staticroute.Bfd)
	}
	(*obj).Profile = profile_value

	return diags
}
func (o *VirtualRouterStaticRouteIpv4DataSourceNexthopObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.Nexthop, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var discard_entry *staticroute.NexthopDiscard
	if o.Discard != nil {
		if *obj != nil && (*obj).Discard != nil {
			discard_entry = (*obj).Discard
		} else {
			discard_entry = new(staticroute.NexthopDiscard)
		}
		// ModelOrObject: Object
		diags.Append(o.Discard.CopyToPango(ctx, append(ancestors, o), &discard_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	fqdn_value := o.Fqdn.ValueStringPointer()
	ipAddress_value := o.IpAddress.ValueStringPointer()
	nextVr_value := o.NextVr.ValueStringPointer()
	var receive_entry *staticroute.NexthopReceive
	if o.Receive != nil {
		if *obj != nil && (*obj).Receive != nil {
			receive_entry = (*obj).Receive
		} else {
			receive_entry = new(staticroute.NexthopReceive)
		}
		// ModelOrObject: Object
		diags.Append(o.Receive.CopyToPango(ctx, append(ancestors, o), &receive_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(staticroute.Nexthop)
	}
	(*obj).Discard = discard_entry
	(*obj).Fqdn = fqdn_value
	(*obj).IpAddress = ipAddress_value
	(*obj).NextVr = nextVr_value
	(*obj).Receive = receive_entry

	return diags
}
func (o *VirtualRouterStaticRouteIpv4DataSourceNexthopDiscardObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.NexthopDiscard, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(staticroute.NexthopDiscard)
	}

	return diags
}
func (o *VirtualRouterStaticRouteIpv4DataSourceNexthopReceiveObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.NexthopReceive, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(staticroute.NexthopReceive)
	}

	return diags
}
func (o *VirtualRouterStaticRouteIpv4DataSourcePathMonitorObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.PathMonitor, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	failureCondition_value := o.FailureCondition.ValueStringPointer()
	holdTime_value := o.HoldTime.ValueInt64Pointer()
	var monitorDestinations_tf_entries []VirtualRouterStaticRouteIpv4DataSourcePathMonitorMonitorDestinationsObject
	var monitorDestinations_pango_entries []staticroute.PathMonitorMonitorDestinations
	{
		d := o.MonitorDestinations.ElementsAs(ctx, &monitorDestinations_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range monitorDestinations_tf_entries {
			var entry *staticroute.PathMonitorMonitorDestinations
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			monitorDestinations_pango_entries = append(monitorDestinations_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(staticroute.PathMonitor)
	}
	(*obj).Enable = enable_value
	(*obj).FailureCondition = failureCondition_value
	(*obj).HoldTime = holdTime_value
	(*obj).MonitorDestinations = monitorDestinations_pango_entries

	return diags
}
func (o *VirtualRouterStaticRouteIpv4DataSourcePathMonitorMonitorDestinationsObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.PathMonitorMonitorDestinations, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	source_value := o.Source.ValueStringPointer()
	destination_value := o.Destination.ValueStringPointer()
	interval_value := o.Interval.ValueInt64Pointer()
	count_value := o.Count.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(staticroute.PathMonitorMonitorDestinations)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Enable = enable_value
	(*obj).Source = source_value
	(*obj).Destination = destination_value
	(*obj).Interval = interval_value
	(*obj).Count = count_value

	return diags
}
func (o *VirtualRouterStaticRouteIpv4DataSourceRouteTableObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.RouteTable, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var both_entry *staticroute.RouteTableBoth
	if o.Both != nil {
		if *obj != nil && (*obj).Both != nil {
			both_entry = (*obj).Both
		} else {
			both_entry = new(staticroute.RouteTableBoth)
		}
		// ModelOrObject: Object
		diags.Append(o.Both.CopyToPango(ctx, append(ancestors, o), &both_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var multicast_entry *staticroute.RouteTableMulticast
	if o.Multicast != nil {
		if *obj != nil && (*obj).Multicast != nil {
			multicast_entry = (*obj).Multicast
		} else {
			multicast_entry = new(staticroute.RouteTableMulticast)
		}
		// ModelOrObject: Object
		diags.Append(o.Multicast.CopyToPango(ctx, append(ancestors, o), &multicast_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var noInstall_entry *staticroute.RouteTableNoInstall
	if o.NoInstall != nil {
		if *obj != nil && (*obj).NoInstall != nil {
			noInstall_entry = (*obj).NoInstall
		} else {
			noInstall_entry = new(staticroute.RouteTableNoInstall)
		}
		// ModelOrObject: Object
		diags.Append(o.NoInstall.CopyToPango(ctx, append(ancestors, o), &noInstall_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var unicast_entry *staticroute.RouteTableUnicast
	if o.Unicast != nil {
		if *obj != nil && (*obj).Unicast != nil {
			unicast_entry = (*obj).Unicast
		} else {
			unicast_entry = new(staticroute.RouteTableUnicast)
		}
		// ModelOrObject: Object
		diags.Append(o.Unicast.CopyToPango(ctx, append(ancestors, o), &unicast_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(staticroute.RouteTable)
	}
	(*obj).Both = both_entry
	(*obj).Multicast = multicast_entry
	(*obj).NoInstall = noInstall_entry
	(*obj).Unicast = unicast_entry

	return diags
}
func (o *VirtualRouterStaticRouteIpv4DataSourceRouteTableBothObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.RouteTableBoth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(staticroute.RouteTableBoth)
	}

	return diags
}
func (o *VirtualRouterStaticRouteIpv4DataSourceRouteTableMulticastObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.RouteTableMulticast, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(staticroute.RouteTableMulticast)
	}

	return diags
}
func (o *VirtualRouterStaticRouteIpv4DataSourceRouteTableNoInstallObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.RouteTableNoInstall, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(staticroute.RouteTableNoInstall)
	}

	return diags
}
func (o *VirtualRouterStaticRouteIpv4DataSourceRouteTableUnicastObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.RouteTableUnicast, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(staticroute.RouteTableUnicast)
	}

	return diags
}

func (o *VirtualRouterStaticRouteIpv4DataSourceModel) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var bfd_object *VirtualRouterStaticRouteIpv4DataSourceBfdObject
	if obj.Bfd != nil {
		bfd_object = new(VirtualRouterStaticRouteIpv4DataSourceBfdObject)
		diags.Append(bfd_object.CopyFromPango(ctx, ancestors, obj.Bfd, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var nexthop_object *VirtualRouterStaticRouteIpv4DataSourceNexthopObject
	if obj.Nexthop != nil {
		nexthop_object = new(VirtualRouterStaticRouteIpv4DataSourceNexthopObject)
		diags.Append(nexthop_object.CopyFromPango(ctx, ancestors, obj.Nexthop, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var pathMonitor_object *VirtualRouterStaticRouteIpv4DataSourcePathMonitorObject
	if obj.PathMonitor != nil {
		pathMonitor_object = new(VirtualRouterStaticRouteIpv4DataSourcePathMonitorObject)
		diags.Append(pathMonitor_object.CopyFromPango(ctx, ancestors, obj.PathMonitor, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var routeTable_object *VirtualRouterStaticRouteIpv4DataSourceRouteTableObject
	if obj.RouteTable != nil {
		routeTable_object = new(VirtualRouterStaticRouteIpv4DataSourceRouteTableObject)
		diags.Append(routeTable_object.CopyFromPango(ctx, ancestors, obj.RouteTable, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var adminDist_value types.Int64
	if obj.AdminDist != nil {
		adminDist_value = types.Int64Value(*obj.AdminDist)
	}
	var destination_value types.String
	if obj.Destination != nil {
		destination_value = types.StringValue(*obj.Destination)
	}
	var interface_value types.String
	if obj.Interface != nil {
		interface_value = types.StringValue(*obj.Interface)
	}
	var metric_value types.Int64
	if obj.Metric != nil {
		metric_value = types.Int64Value(*obj.Metric)
	}
	o.Name = types.StringValue(obj.Name)
	o.AdminDist = adminDist_value
	o.Bfd = bfd_object
	o.Destination = destination_value
	o.Interface = interface_value
	o.Metric = metric_value
	o.Nexthop = nexthop_object
	o.PathMonitor = pathMonitor_object
	o.RouteTable = routeTable_object

	return diags
}

func (o *VirtualRouterStaticRouteIpv4DataSourceBfdObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.Bfd, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var profile_value types.String
	if obj.Profile != nil {
		profile_value = types.StringValue(*obj.Profile)
	}
	o.Profile = profile_value

	return diags
}

func (o *VirtualRouterStaticRouteIpv4DataSourceNexthopObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.Nexthop, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var discard_object *VirtualRouterStaticRouteIpv4DataSourceNexthopDiscardObject
	if obj.Discard != nil {
		discard_object = new(VirtualRouterStaticRouteIpv4DataSourceNexthopDiscardObject)
		diags.Append(discard_object.CopyFromPango(ctx, append(ancestors, o), obj.Discard, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var receive_object *VirtualRouterStaticRouteIpv4DataSourceNexthopReceiveObject
	if obj.Receive != nil {
		receive_object = new(VirtualRouterStaticRouteIpv4DataSourceNexthopReceiveObject)
		diags.Append(receive_object.CopyFromPango(ctx, append(ancestors, o), obj.Receive, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var fqdn_value types.String
	if obj.Fqdn != nil {
		fqdn_value = types.StringValue(*obj.Fqdn)
	}
	var ipAddress_value types.String
	if obj.IpAddress != nil {
		ipAddress_value = types.StringValue(*obj.IpAddress)
	}
	var nextVr_value types.String
	if obj.NextVr != nil {
		nextVr_value = types.StringValue(*obj.NextVr)
	}
	o.Discard = discard_object
	o.Fqdn = fqdn_value
	o.IpAddress = ipAddress_value
	o.NextVr = nextVr_value
	o.Receive = receive_object

	return diags
}

func (o *VirtualRouterStaticRouteIpv4DataSourceNexthopDiscardObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.NexthopDiscard, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *VirtualRouterStaticRouteIpv4DataSourceNexthopReceiveObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.NexthopReceive, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *VirtualRouterStaticRouteIpv4DataSourcePathMonitorObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.PathMonitor, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var monitorDestinations_list types.List
	{
		var monitorDestinations_tf_entries []VirtualRouterStaticRouteIpv4DataSourcePathMonitorMonitorDestinationsObject
		for _, elt := range obj.MonitorDestinations {
			entry := VirtualRouterStaticRouteIpv4DataSourcePathMonitorMonitorDestinationsObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			monitorDestinations_tf_entries = append(monitorDestinations_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("monitor_destinations")
		monitorDestinations_list, list_diags = types.ListValueFrom(ctx, schemaType, monitorDestinations_tf_entries)
		diags.Append(list_diags...)
	}

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var failureCondition_value types.String
	if obj.FailureCondition != nil {
		failureCondition_value = types.StringValue(*obj.FailureCondition)
	}
	var holdTime_value types.Int64
	if obj.HoldTime != nil {
		holdTime_value = types.Int64Value(*obj.HoldTime)
	}
	o.Enable = enable_value
	o.FailureCondition = failureCondition_value
	o.HoldTime = holdTime_value
	o.MonitorDestinations = monitorDestinations_list

	return diags
}

func (o *VirtualRouterStaticRouteIpv4DataSourcePathMonitorMonitorDestinationsObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.PathMonitorMonitorDestinations, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var source_value types.String
	if obj.Source != nil {
		source_value = types.StringValue(*obj.Source)
	}
	var destination_value types.String
	if obj.Destination != nil {
		destination_value = types.StringValue(*obj.Destination)
	}
	var interval_value types.Int64
	if obj.Interval != nil {
		interval_value = types.Int64Value(*obj.Interval)
	}
	var count_value types.Int64
	if obj.Count != nil {
		count_value = types.Int64Value(*obj.Count)
	}
	o.Name = types.StringValue(obj.Name)
	o.Enable = enable_value
	o.Source = source_value
	o.Destination = destination_value
	o.Interval = interval_value
	o.Count = count_value

	return diags
}

func (o *VirtualRouterStaticRouteIpv4DataSourceRouteTableObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.RouteTable, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var both_object *VirtualRouterStaticRouteIpv4DataSourceRouteTableBothObject
	if obj.Both != nil {
		both_object = new(VirtualRouterStaticRouteIpv4DataSourceRouteTableBothObject)
		diags.Append(both_object.CopyFromPango(ctx, append(ancestors, o), obj.Both, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var multicast_object *VirtualRouterStaticRouteIpv4DataSourceRouteTableMulticastObject
	if obj.Multicast != nil {
		multicast_object = new(VirtualRouterStaticRouteIpv4DataSourceRouteTableMulticastObject)
		diags.Append(multicast_object.CopyFromPango(ctx, append(ancestors, o), obj.Multicast, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var noInstall_object *VirtualRouterStaticRouteIpv4DataSourceRouteTableNoInstallObject
	if obj.NoInstall != nil {
		noInstall_object = new(VirtualRouterStaticRouteIpv4DataSourceRouteTableNoInstallObject)
		diags.Append(noInstall_object.CopyFromPango(ctx, append(ancestors, o), obj.NoInstall, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var unicast_object *VirtualRouterStaticRouteIpv4DataSourceRouteTableUnicastObject
	if obj.Unicast != nil {
		unicast_object = new(VirtualRouterStaticRouteIpv4DataSourceRouteTableUnicastObject)
		diags.Append(unicast_object.CopyFromPango(ctx, append(ancestors, o), obj.Unicast, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Both = both_object
	o.Multicast = multicast_object
	o.NoInstall = noInstall_object
	o.Unicast = unicast_object

	return diags
}

func (o *VirtualRouterStaticRouteIpv4DataSourceRouteTableBothObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.RouteTableBoth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *VirtualRouterStaticRouteIpv4DataSourceRouteTableMulticastObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.RouteTableMulticast, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *VirtualRouterStaticRouteIpv4DataSourceRouteTableNoInstallObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.RouteTableNoInstall, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *VirtualRouterStaticRouteIpv4DataSourceRouteTableUnicastObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.RouteTableUnicast, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *VirtualRouterStaticRouteIpv4DataSourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	components = append(components, pangoutil.AsEntryXpath(o.VirtualRouter.ValueString()))
	return components, nil
}

func VirtualRouterStaticRouteIpv4DataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": VirtualRouterStaticRouteIpv4DataSourceLocationSchema(),

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"virtual_router": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"admin_dist": dsschema.Int64Attribute{
				Description: "adminitrative distance",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"bfd": VirtualRouterStaticRouteIpv4DataSourceBfdSchema(),

			"destination": dsschema.StringAttribute{
				Description: "Destination IP address/prefix",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"interface": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"metric": dsschema.Int64Attribute{
				Description: "metric value (path cost)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"nexthop": VirtualRouterStaticRouteIpv4DataSourceNexthopSchema(),

			"path_monitor": VirtualRouterStaticRouteIpv4DataSourcePathMonitorSchema(),

			"route_table": VirtualRouterStaticRouteIpv4DataSourceRouteTableSchema(),
		},
	}
}

func (o *VirtualRouterStaticRouteIpv4DataSourceModel) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4DataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4DataSourceBfdSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"profile": dsschema.StringAttribute{
				Description: "BFD profile",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *VirtualRouterStaticRouteIpv4DataSourceBfdObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4DataSourceBfdSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4DataSourceNexthopSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"discard": VirtualRouterStaticRouteIpv4DataSourceNexthopDiscardSchema(),

			"fqdn": dsschema.StringAttribute{
				Description: "nexthop address FQDN address object configuration",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ip_address": dsschema.StringAttribute{
				Description: "Next hop IP address",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"next_vr": dsschema.StringAttribute{
				Description: "Next hop virtual router",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"receive": VirtualRouterStaticRouteIpv4DataSourceNexthopReceiveSchema(),
		},
	}
}

func (o *VirtualRouterStaticRouteIpv4DataSourceNexthopObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4DataSourceNexthopSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4DataSourceNexthopDiscardSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("discard"),
				path.MatchRelative().AtParent().AtName("fqdn"),
				path.MatchRelative().AtParent().AtName("ip_address"),
				path.MatchRelative().AtParent().AtName("next_vr"),
				path.MatchRelative().AtParent().AtName("receive"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *VirtualRouterStaticRouteIpv4DataSourceNexthopDiscardObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4DataSourceNexthopDiscardSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4DataSourceNexthopReceiveSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("discard"),
				path.MatchRelative().AtParent().AtName("fqdn"),
				path.MatchRelative().AtParent().AtName("ip_address"),
				path.MatchRelative().AtParent().AtName("next_vr"),
				path.MatchRelative().AtParent().AtName("receive"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *VirtualRouterStaticRouteIpv4DataSourceNexthopReceiveObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4DataSourceNexthopReceiveSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4DataSourcePathMonitorSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"enable": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"failure_condition": dsschema.StringAttribute{
				Description: "failure condition",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hold_time": dsschema.Int64Attribute{
				Description: "hold time (minutes)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"monitor_destinations": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: VirtualRouterStaticRouteIpv4DataSourcePathMonitorMonitorDestinationsSchema(),
			},
		},
	}
}

func (o *VirtualRouterStaticRouteIpv4DataSourcePathMonitorObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4DataSourcePathMonitorSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4DataSourcePathMonitorMonitorDestinationsSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"enable": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source": dsschema.StringAttribute{
				Description: "Source IP address",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"destination": dsschema.StringAttribute{
				Description: "Destination IP address",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"interval": dsschema.Int64Attribute{
				Description: "ping interval",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"count": dsschema.Int64Attribute{
				Description: "ping count",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *VirtualRouterStaticRouteIpv4DataSourcePathMonitorMonitorDestinationsObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4DataSourcePathMonitorMonitorDestinationsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4DataSourceRouteTableSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"both": VirtualRouterStaticRouteIpv4DataSourceRouteTableBothSchema(),

			"multicast": VirtualRouterStaticRouteIpv4DataSourceRouteTableMulticastSchema(),

			"no_install": VirtualRouterStaticRouteIpv4DataSourceRouteTableNoInstallSchema(),

			"unicast": VirtualRouterStaticRouteIpv4DataSourceRouteTableUnicastSchema(),
		},
	}
}

func (o *VirtualRouterStaticRouteIpv4DataSourceRouteTableObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4DataSourceRouteTableSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4DataSourceRouteTableBothSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("both"),
				path.MatchRelative().AtParent().AtName("multicast"),
				path.MatchRelative().AtParent().AtName("no_install"),
				path.MatchRelative().AtParent().AtName("unicast"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *VirtualRouterStaticRouteIpv4DataSourceRouteTableBothObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4DataSourceRouteTableBothSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4DataSourceRouteTableMulticastSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("both"),
				path.MatchRelative().AtParent().AtName("multicast"),
				path.MatchRelative().AtParent().AtName("no_install"),
				path.MatchRelative().AtParent().AtName("unicast"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *VirtualRouterStaticRouteIpv4DataSourceRouteTableMulticastObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4DataSourceRouteTableMulticastSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4DataSourceRouteTableNoInstallSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("both"),
				path.MatchRelative().AtParent().AtName("multicast"),
				path.MatchRelative().AtParent().AtName("no_install"),
				path.MatchRelative().AtParent().AtName("unicast"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *VirtualRouterStaticRouteIpv4DataSourceRouteTableNoInstallObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4DataSourceRouteTableNoInstallSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4DataSourceRouteTableUnicastSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("both"),
				path.MatchRelative().AtParent().AtName("multicast"),
				path.MatchRelative().AtParent().AtName("no_install"),
				path.MatchRelative().AtParent().AtName("unicast"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *VirtualRouterStaticRouteIpv4DataSourceRouteTableUnicastObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4DataSourceRouteTableUnicastSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4DataSourceLocationSchema() rsschema.Attribute {
	return VirtualRouterStaticRouteIpv4LocationSchema()
}

// Metadata returns the data source type name.
func (d *VirtualRouterStaticRouteIpv4DataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_virtual_router_static_route_ipv4"
}

// Schema defines the schema for this data source.
func (d *VirtualRouterStaticRouteIpv4DataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = VirtualRouterStaticRouteIpv4DataSourceSchema()
}

// Configure prepares the struct.
func (d *VirtualRouterStaticRouteIpv4DataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	d.client = providerData.Client
	specifier, _, err := staticroute.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	d.manager = sdkmanager.NewEntryObjectManager[*staticroute.Entry, staticroute.Location, *staticroute.Service](d.client, staticroute.NewService(d.client), batchSize, specifier, staticroute.SpecMatches)
}
func (o *VirtualRouterStaticRouteIpv4DataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state VirtualRouterStaticRouteIpv4DataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location staticroute.Location

	{
		var terraformLocation VirtualRouterStaticRouteIpv4Location
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &staticroute.NgfwLocation{}
			var innerLocation VirtualRouterStaticRouteIpv4NgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &staticroute.TemplateLocation{}
			var innerLocation VirtualRouterStaticRouteIpv4TemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &staticroute.TemplateStackLocation{}
			var innerLocation VirtualRouterStaticRouteIpv4TemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_virtual_router_static_route_ipv4_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	components, err := savestate.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	object, err := o.manager.Read(ctx, location, components, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, nil, object, ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	{
		component := components[0]
		component = strings.TrimPrefix(component, "entry[@name='")
		component = strings.TrimSuffix(component, "']")
		state.VirtualRouter = types.StringValue(component)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &VirtualRouterStaticRouteIpv4Resource{}
	_ resource.ResourceWithConfigure   = &VirtualRouterStaticRouteIpv4Resource{}
	_ resource.ResourceWithImportState = &VirtualRouterStaticRouteIpv4Resource{}
)

func NewVirtualRouterStaticRouteIpv4Resource() resource.Resource {
	if _, found := resourceFuncMap["panos_virtual_router_static_route_ipv4"]; !found {
		resourceFuncMap["panos_virtual_router_static_route_ipv4"] = resourceFuncs{
			CreateImportId: VirtualRouterStaticRouteIpv4ImportStateCreator,
		}
	}
	return &VirtualRouterStaticRouteIpv4Resource{}
}

type VirtualRouterStaticRouteIpv4Resource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*staticroute.Entry, staticroute.Location, *staticroute.Service]
}

func VirtualRouterStaticRouteIpv4ResourceLocationSchema() rsschema.Attribute {
	return VirtualRouterStaticRouteIpv4LocationSchema()
}

type VirtualRouterStaticRouteIpv4ResourceModel struct {
	Location      types.Object                                           `tfsdk:"location"`
	Name          types.String                                           `tfsdk:"name"`
	VirtualRouter types.String                                           `tfsdk:"virtual_router"`
	AdminDist     types.Int64                                            `tfsdk:"admin_dist"`
	Bfd           *VirtualRouterStaticRouteIpv4ResourceBfdObject         `tfsdk:"bfd"`
	Destination   types.String                                           `tfsdk:"destination"`
	Interface     types.String                                           `tfsdk:"interface"`
	Metric        types.Int64                                            `tfsdk:"metric"`
	Nexthop       *VirtualRouterStaticRouteIpv4ResourceNexthopObject     `tfsdk:"nexthop"`
	PathMonitor   *VirtualRouterStaticRouteIpv4ResourcePathMonitorObject `tfsdk:"path_monitor"`
	RouteTable    *VirtualRouterStaticRouteIpv4ResourceRouteTableObject  `tfsdk:"route_table"`
}
type VirtualRouterStaticRouteIpv4ResourceBfdObject struct {
	Profile types.String `tfsdk:"profile"`
}
type VirtualRouterStaticRouteIpv4ResourceNexthopObject struct {
	Discard   *VirtualRouterStaticRouteIpv4ResourceNexthopDiscardObject `tfsdk:"discard"`
	Fqdn      types.String                                              `tfsdk:"fqdn"`
	IpAddress types.String                                              `tfsdk:"ip_address"`
	NextVr    types.String                                              `tfsdk:"next_vr"`
	Receive   *VirtualRouterStaticRouteIpv4ResourceNexthopReceiveObject `tfsdk:"receive"`
}
type VirtualRouterStaticRouteIpv4ResourceNexthopDiscardObject struct {
}
type VirtualRouterStaticRouteIpv4ResourceNexthopReceiveObject struct {
}
type VirtualRouterStaticRouteIpv4ResourcePathMonitorObject struct {
	Enable              types.Bool   `tfsdk:"enable"`
	FailureCondition    types.String `tfsdk:"failure_condition"`
	HoldTime            types.Int64  `tfsdk:"hold_time"`
	MonitorDestinations types.List   `tfsdk:"monitor_destinations"`
}
type VirtualRouterStaticRouteIpv4ResourcePathMonitorMonitorDestinationsObject struct {
	Name        types.String `tfsdk:"name"`
	Enable      types.Bool   `tfsdk:"enable"`
	Source      types.String `tfsdk:"source"`
	Destination types.String `tfsdk:"destination"`
	Interval    types.Int64  `tfsdk:"interval"`
	Count       types.Int64  `tfsdk:"count"`
}
type VirtualRouterStaticRouteIpv4ResourceRouteTableObject struct {
	Both      *VirtualRouterStaticRouteIpv4ResourceRouteTableBothObject      `tfsdk:"both"`
	Multicast *VirtualRouterStaticRouteIpv4ResourceRouteTableMulticastObject `tfsdk:"multicast"`
	NoInstall *VirtualRouterStaticRouteIpv4ResourceRouteTableNoInstallObject `tfsdk:"no_install"`
	Unicast   *VirtualRouterStaticRouteIpv4ResourceRouteTableUnicastObject   `tfsdk:"unicast"`
}
type VirtualRouterStaticRouteIpv4ResourceRouteTableBothObject struct {
}
type VirtualRouterStaticRouteIpv4ResourceRouteTableMulticastObject struct {
}
type VirtualRouterStaticRouteIpv4ResourceRouteTableNoInstallObject struct {
}
type VirtualRouterStaticRouteIpv4ResourceRouteTableUnicastObject struct {
}

func (r *VirtualRouterStaticRouteIpv4Resource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func VirtualRouterStaticRouteIpv4ResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": VirtualRouterStaticRouteIpv4ResourceLocationSchema(),

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"virtual_router": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"admin_dist": rsschema.Int64Attribute{
				Description: "adminitrative distance",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"bfd": VirtualRouterStaticRouteIpv4ResourceBfdSchema(),

			"destination": rsschema.StringAttribute{
				Description: "Destination IP address/prefix",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"interface": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"metric": rsschema.Int64Attribute{
				Description: "metric value (path cost)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(10),
			},

			"nexthop": VirtualRouterStaticRouteIpv4ResourceNexthopSchema(),

			"path_monitor": VirtualRouterStaticRouteIpv4ResourcePathMonitorSchema(),

			"route_table": VirtualRouterStaticRouteIpv4ResourceRouteTableSchema(),
		},
	}
}

func (o *VirtualRouterStaticRouteIpv4ResourceModel) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4ResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4ResourceBfdSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"profile": rsschema.StringAttribute{
				Description: "BFD profile",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("None"),
			},
		},
	}
}

func (o *VirtualRouterStaticRouteIpv4ResourceBfdObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4ResourceBfdSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4ResourceNexthopSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"discard": VirtualRouterStaticRouteIpv4ResourceNexthopDiscardSchema(),

			"fqdn": rsschema.StringAttribute{
				Description: "nexthop address FQDN address object configuration",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ip_address": rsschema.StringAttribute{
				Description: "Next hop IP address",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"next_vr": rsschema.StringAttribute{
				Description: "Next hop virtual router",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"receive": VirtualRouterStaticRouteIpv4ResourceNexthopReceiveSchema(),
		},
	}
}

func (o *VirtualRouterStaticRouteIpv4ResourceNexthopObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4ResourceNexthopSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4ResourceNexthopDiscardSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("discard"),
				path.MatchRelative().AtParent().AtName("fqdn"),
				path.MatchRelative().AtParent().AtName("ip_address"),
				path.MatchRelative().AtParent().AtName("next_vr"),
				path.MatchRelative().AtParent().AtName("receive"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *VirtualRouterStaticRouteIpv4ResourceNexthopDiscardObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4ResourceNexthopDiscardSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4ResourceNexthopReceiveSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("discard"),
				path.MatchRelative().AtParent().AtName("fqdn"),
				path.MatchRelative().AtParent().AtName("ip_address"),
				path.MatchRelative().AtParent().AtName("next_vr"),
				path.MatchRelative().AtParent().AtName("receive"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *VirtualRouterStaticRouteIpv4ResourceNexthopReceiveObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4ResourceNexthopReceiveSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4ResourcePathMonitorSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"enable": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"failure_condition": rsschema.StringAttribute{
				Description: "failure condition",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("any"),
			},

			"hold_time": rsschema.Int64Attribute{
				Description: "hold time (minutes)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(2),
			},

			"monitor_destinations": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: VirtualRouterStaticRouteIpv4ResourcePathMonitorMonitorDestinationsSchema(),
			},
		},
	}
}

func (o *VirtualRouterStaticRouteIpv4ResourcePathMonitorObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4ResourcePathMonitorSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4ResourcePathMonitorMonitorDestinationsSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"enable": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source": rsschema.StringAttribute{
				Description: "Source IP address",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"destination": rsschema.StringAttribute{
				Description: "Destination IP address",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"interval": rsschema.Int64Attribute{
				Description: "ping interval",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(3),
			},

			"count": rsschema.Int64Attribute{
				Description: "ping count",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(5),
			},
		},
	}
}

func (o *VirtualRouterStaticRouteIpv4ResourcePathMonitorMonitorDestinationsObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4ResourcePathMonitorMonitorDestinationsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4ResourceRouteTableSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"both": VirtualRouterStaticRouteIpv4ResourceRouteTableBothSchema(),

			"multicast": VirtualRouterStaticRouteIpv4ResourceRouteTableMulticastSchema(),

			"no_install": VirtualRouterStaticRouteIpv4ResourceRouteTableNoInstallSchema(),

			"unicast": VirtualRouterStaticRouteIpv4ResourceRouteTableUnicastSchema(),
		},
	}
}

func (o *VirtualRouterStaticRouteIpv4ResourceRouteTableObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4ResourceRouteTableSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4ResourceRouteTableBothSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("both"),
				path.MatchRelative().AtParent().AtName("multicast"),
				path.MatchRelative().AtParent().AtName("no_install"),
				path.MatchRelative().AtParent().AtName("unicast"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *VirtualRouterStaticRouteIpv4ResourceRouteTableBothObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4ResourceRouteTableBothSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4ResourceRouteTableMulticastSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("both"),
				path.MatchRelative().AtParent().AtName("multicast"),
				path.MatchRelative().AtParent().AtName("no_install"),
				path.MatchRelative().AtParent().AtName("unicast"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *VirtualRouterStaticRouteIpv4ResourceRouteTableMulticastObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4ResourceRouteTableMulticastSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4ResourceRouteTableNoInstallSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("both"),
				path.MatchRelative().AtParent().AtName("multicast"),
				path.MatchRelative().AtParent().AtName("no_install"),
				path.MatchRelative().AtParent().AtName("unicast"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *VirtualRouterStaticRouteIpv4ResourceRouteTableNoInstallObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4ResourceRouteTableNoInstallSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRouteIpv4ResourceRouteTableUnicastSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("both"),
				path.MatchRelative().AtParent().AtName("multicast"),
				path.MatchRelative().AtParent().AtName("no_install"),
				path.MatchRelative().AtParent().AtName("unicast"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *VirtualRouterStaticRouteIpv4ResourceRouteTableUnicastObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRouteIpv4ResourceRouteTableUnicastSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *VirtualRouterStaticRouteIpv4Resource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_virtual_router_static_route_ipv4"
}

func (r *VirtualRouterStaticRouteIpv4Resource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = VirtualRouterStaticRouteIpv4ResourceSchema()
}

// </ResourceSchema>

func (r *VirtualRouterStaticRouteIpv4Resource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	r.client = providerData.Client
	specifier, _, err := staticroute.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	r.manager = sdkmanager.NewEntryObjectManager[*staticroute.Entry, staticroute.Location, *staticroute.Service](r.client, staticroute.NewService(r.client), batchSize, specifier, staticroute.SpecMatches)
}

func (o *VirtualRouterStaticRouteIpv4ResourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj VirtualRouterStaticRouteIpv4Location

	var bfdObj *VirtualRouterStaticRouteIpv4ResourceBfdObject

	var nexthopObj *VirtualRouterStaticRouteIpv4ResourceNexthopObject

	var pathMonitorObj *VirtualRouterStaticRouteIpv4ResourcePathMonitorObject

	var routeTableObj *VirtualRouterStaticRouteIpv4ResourceRouteTableObject
	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"name":           types.StringType,
		"virtual_router": types.StringType,
		"admin_dist":     types.Int64Type,
		"bfd": types.ObjectType{
			AttrTypes: bfdObj.AttributeTypes(),
		},
		"destination": types.StringType,
		"interface":   types.StringType,
		"metric":      types.Int64Type,
		"nexthop": types.ObjectType{
			AttrTypes: nexthopObj.AttributeTypes(),
		},
		"path_monitor": types.ObjectType{
			AttrTypes: pathMonitorObj.AttributeTypes(),
		},
		"route_table": types.ObjectType{
			AttrTypes: routeTableObj.AttributeTypes(),
		},
	}
}

func (o VirtualRouterStaticRouteIpv4ResourceModel) AncestorName() string {
	return ""
}

func (o VirtualRouterStaticRouteIpv4ResourceModel) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRouteIpv4ResourceBfdObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"profile": types.StringType,
	}
}

func (o VirtualRouterStaticRouteIpv4ResourceBfdObject) AncestorName() string {
	return "bfd"
}

func (o VirtualRouterStaticRouteIpv4ResourceBfdObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRouteIpv4ResourceNexthopObject) AttributeTypes() map[string]attr.Type {

	var discardObj *VirtualRouterStaticRouteIpv4ResourceNexthopDiscardObject

	var receiveObj *VirtualRouterStaticRouteIpv4ResourceNexthopReceiveObject
	return map[string]attr.Type{
		"discard": types.ObjectType{
			AttrTypes: discardObj.AttributeTypes(),
		},
		"fqdn":       types.StringType,
		"ip_address": types.StringType,
		"next_vr":    types.StringType,
		"receive": types.ObjectType{
			AttrTypes: receiveObj.AttributeTypes(),
		},
	}
}

func (o VirtualRouterStaticRouteIpv4ResourceNexthopObject) AncestorName() string {
	return "nexthop"
}

func (o VirtualRouterStaticRouteIpv4ResourceNexthopObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRouteIpv4ResourceNexthopDiscardObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o VirtualRouterStaticRouteIpv4ResourceNexthopDiscardObject) AncestorName() string {
	return "discard"
}

func (o VirtualRouterStaticRouteIpv4ResourceNexthopDiscardObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRouteIpv4ResourceNexthopReceiveObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o VirtualRouterStaticRouteIpv4ResourceNexthopReceiveObject) AncestorName() string {
	return "receive"
}

func (o VirtualRouterStaticRouteIpv4ResourceNexthopReceiveObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRouteIpv4ResourcePathMonitorObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"enable":               types.BoolType,
		"failure_condition":    types.StringType,
		"hold_time":            types.Int64Type,
		"monitor_destinations": types.ListType{},
	}
}

func (o VirtualRouterStaticRouteIpv4ResourcePathMonitorObject) AncestorName() string {
	return "path-monitor"
}

func (o VirtualRouterStaticRouteIpv4ResourcePathMonitorObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRouteIpv4ResourcePathMonitorMonitorDestinationsObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":        types.StringType,
		"enable":      types.BoolType,
		"source":      types.StringType,
		"destination": types.StringType,
		"interval":    types.Int64Type,
		"count":       types.Int64Type,
	}
}

func (o VirtualRouterStaticRouteIpv4ResourcePathMonitorMonitorDestinationsObject) AncestorName() string {
	return "monitor-destinations"
}

func (o VirtualRouterStaticRouteIpv4ResourcePathMonitorMonitorDestinationsObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *VirtualRouterStaticRouteIpv4ResourceRouteTableObject) AttributeTypes() map[string]attr.Type {

	var bothObj *VirtualRouterStaticRouteIpv4ResourceRouteTableBothObject

	var multicastObj *VirtualRouterStaticRouteIpv4ResourceRouteTableMulticastObject

	var noInstallObj *VirtualRouterStaticRouteIpv4ResourceRouteTableNoInstallObject

	var unicastObj *VirtualRouterStaticRouteIpv4ResourceRouteTableUnicastObject
	return map[string]attr.Type{
		"both": types.ObjectType{
			AttrTypes: bothObj.AttributeTypes(),
		},
		"multicast": types.ObjectType{
			AttrTypes: multicastObj.AttributeTypes(),
		},
		"no_install": types.ObjectType{
			AttrTypes: noInstallObj.AttributeTypes(),
		},
		"unicast": types.ObjectType{
			AttrTypes: unicastObj.AttributeTypes(),
		},
	}
}

func (o VirtualRouterStaticRouteIpv4ResourceRouteTableObject) AncestorName() string {
	return "route-table"
}

func (o VirtualRouterStaticRouteIpv4ResourceRouteTableObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRouteIpv4ResourceRouteTableBothObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o VirtualRouterStaticRouteIpv4ResourceRouteTableBothObject) AncestorName() string {
	return "both"
}

func (o VirtualRouterStaticRouteIpv4ResourceRouteTableBothObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRouteIpv4ResourceRouteTableMulticastObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o VirtualRouterStaticRouteIpv4ResourceRouteTableMulticastObject) AncestorName() string {
	return "multicast"
}

func (o VirtualRouterStaticRouteIpv4ResourceRouteTableMulticastObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRouteIpv4ResourceRouteTableNoInstallObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o VirtualRouterStaticRouteIpv4ResourceRouteTableNoInstallObject) AncestorName() string {
	return "no-install"
}

func (o VirtualRouterStaticRouteIpv4ResourceRouteTableNoInstallObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRouteIpv4ResourceRouteTableUnicastObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o VirtualRouterStaticRouteIpv4ResourceRouteTableUnicastObject) AncestorName() string {
	return "unicast"
}

func (o VirtualRouterStaticRouteIpv4ResourceRouteTableUnicastObject) EntryName() *string {
	return nil
}

func (o *VirtualRouterStaticRouteIpv4ResourceModel) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	adminDist_value := o.AdminDist.ValueInt64Pointer()
	var bfd_entry *staticroute.Bfd
	if o.Bfd != nil {
		if *obj != nil && (*obj).Bfd != nil {
			bfd_entry = (*obj).Bfd
		} else {
			bfd_entry = new(staticroute.Bfd)
		}
		// ModelOrObject: Model
		diags.Append(o.Bfd.CopyToPango(ctx, ancestors, &bfd_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	destination_value := o.Destination.ValueStringPointer()
	interface_value := o.Interface.ValueStringPointer()
	metric_value := o.Metric.ValueInt64Pointer()
	var nexthop_entry *staticroute.Nexthop
	if o.Nexthop != nil {
		if *obj != nil && (*obj).Nexthop != nil {
			nexthop_entry = (*obj).Nexthop
		} else {
			nexthop_entry = new(staticroute.Nexthop)
		}
		// ModelOrObject: Model
		diags.Append(o.Nexthop.CopyToPango(ctx, ancestors, &nexthop_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var pathMonitor_entry *staticroute.PathMonitor
	if o.PathMonitor != nil {
		if *obj != nil && (*obj).PathMonitor != nil {
			pathMonitor_entry = (*obj).PathMonitor
		} else {
			pathMonitor_entry = new(staticroute.PathMonitor)
		}
		// ModelOrObject: Model
		diags.Append(o.PathMonitor.CopyToPango(ctx, ancestors, &pathMonitor_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var routeTable_entry *staticroute.RouteTable
	if o.RouteTable != nil {
		if *obj != nil && (*obj).RouteTable != nil {
			routeTable_entry = (*obj).RouteTable
		} else {
			routeTable_entry = new(staticroute.RouteTable)
		}
		// ModelOrObject: Model
		diags.Append(o.RouteTable.CopyToPango(ctx, ancestors, &routeTable_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(staticroute.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).AdminDist = adminDist_value
	(*obj).Bfd = bfd_entry
	(*obj).Destination = destination_value
	(*obj).Interface = interface_value
	(*obj).Metric = metric_value
	(*obj).Nexthop = nexthop_entry
	(*obj).PathMonitor = pathMonitor_entry
	(*obj).RouteTable = routeTable_entry

	return diags
}
func (o *VirtualRouterStaticRouteIpv4ResourceBfdObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.Bfd, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	profile_value := o.Profile.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(staticroute.Bfd)
	}
	(*obj).Profile = profile_value

	return diags
}
func (o *VirtualRouterStaticRouteIpv4ResourceNexthopObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.Nexthop, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var discard_entry *staticroute.NexthopDiscard
	if o.Discard != nil {
		if *obj != nil && (*obj).Discard != nil {
			discard_entry = (*obj).Discard
		} else {
			discard_entry = new(staticroute.NexthopDiscard)
		}
		// ModelOrObject: Object
		diags.Append(o.Discard.CopyToPango(ctx, append(ancestors, o), &discard_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	fqdn_value := o.Fqdn.ValueStringPointer()
	ipAddress_value := o.IpAddress.ValueStringPointer()
	nextVr_value := o.NextVr.ValueStringPointer()
	var receive_entry *staticroute.NexthopReceive
	if o.Receive != nil {
		if *obj != nil && (*obj).Receive != nil {
			receive_entry = (*obj).Receive
		} else {
			receive_entry = new(staticroute.NexthopReceive)
		}
		// ModelOrObject: Object
		diags.Append(o.Receive.CopyToPango(ctx, append(ancestors, o), &receive_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(staticroute.Nexthop)
	}
	(*obj).Discard = discard_entry
	(*obj).Fqdn = fqdn_value
	(*obj).IpAddress = ipAddress_value
	(*obj).NextVr = nextVr_value
	(*obj).Receive = receive_entry

	return diags
}
func (o *VirtualRouterStaticRouteIpv4ResourceNexthopDiscardObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.NexthopDiscard, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(staticroute.NexthopDiscard)
	}

	return diags
}
func (o *VirtualRouterStaticRouteIpv4ResourceNexthopReceiveObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.NexthopReceive, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(staticroute.NexthopReceive)
	}

	return diags
}
func (o *VirtualRouterStaticRouteIpv4ResourcePathMonitorObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.PathMonitor, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	failureCondition_value := o.FailureCondition.ValueStringPointer()
	holdTime_value := o.HoldTime.ValueInt64Pointer()
	var monitorDestinations_tf_entries []VirtualRouterStaticRouteIpv4ResourcePathMonitorMonitorDestinationsObject
	var monitorDestinations_pango_entries []staticroute.PathMonitorMonitorDestinations
	{
		d := o.MonitorDestinations.ElementsAs(ctx, &monitorDestinations_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range monitorDestinations_tf_entries {
			var entry *staticroute.PathMonitorMonitorDestinations
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			monitorDestinations_pango_entries = append(monitorDestinations_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(staticroute.PathMonitor)
	}
	(*obj).Enable = enable_value
	(*obj).FailureCondition = failureCondition_value
	(*obj).HoldTime = holdTime_value
	(*obj).MonitorDestinations = monitorDestinations_pango_entries

	return diags
}
func (o *VirtualRouterStaticRouteIpv4ResourcePathMonitorMonitorDestinationsObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.PathMonitorMonitorDestinations, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	source_value := o.Source.ValueStringPointer()
	destination_value := o.Destination.ValueStringPointer()
	interval_value := o.Interval.ValueInt64Pointer()
	count_value := o.Count.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(staticroute.PathMonitorMonitorDestinations)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Enable = enable_value
	(*obj).Source = source_value
	(*obj).Destination = destination_value
	(*obj).Interval = interval_value
	(*obj).Count = count_value

	return diags
}
func (o *VirtualRouterStaticRouteIpv4ResourceRouteTableObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.RouteTable, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var both_entry *staticroute.RouteTableBoth
	if o.Both != nil {
		if *obj != nil && (*obj).Both != nil {
			both_entry = (*obj).Both
		} else {
			both_entry = new(staticroute.RouteTableBoth)
		}
		// ModelOrObject: Object
		diags.Append(o.Both.CopyToPango(ctx, append(ancestors, o), &both_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var multicast_entry *staticroute.RouteTableMulticast
	if o.Multicast != nil {
		if *obj != nil && (*obj).Multicast != nil {
			multicast_entry = (*obj).Multicast
		} else {
			multicast_entry = new(staticroute.RouteTableMulticast)
		}
		// ModelOrObject: Object
		diags.Append(o.Multicast.CopyToPango(ctx, append(ancestors, o), &multicast_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var noInstall_entry *staticroute.RouteTableNoInstall
	if o.NoInstall != nil {
		if *obj != nil && (*obj).NoInstall != nil {
			noInstall_entry = (*obj).NoInstall
		} else {
			noInstall_entry = new(staticroute.RouteTableNoInstall)
		}
		// ModelOrObject: Object
		diags.Append(o.NoInstall.CopyToPango(ctx, append(ancestors, o), &noInstall_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var unicast_entry *staticroute.RouteTableUnicast
	if o.Unicast != nil {
		if *obj != nil && (*obj).Unicast != nil {
			unicast_entry = (*obj).Unicast
		} else {
			unicast_entry = new(staticroute.RouteTableUnicast)
		}
		// ModelOrObject: Object
		diags.Append(o.Unicast.CopyToPango(ctx, append(ancestors, o), &unicast_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(staticroute.RouteTable)
	}
	(*obj).Both = both_entry
	(*obj).Multicast = multicast_entry
	(*obj).NoInstall = noInstall_entry
	(*obj).Unicast = unicast_entry

	return diags
}
func (o *VirtualRouterStaticRouteIpv4ResourceRouteTableBothObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.RouteTableBoth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(staticroute.RouteTableBoth)
	}

	return diags
}
func (o *VirtualRouterStaticRouteIpv4ResourceRouteTableMulticastObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.RouteTableMulticast, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(staticroute.RouteTableMulticast)
	}

	return diags
}
func (o *VirtualRouterStaticRouteIpv4ResourceRouteTableNoInstallObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.RouteTableNoInstall, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(staticroute.RouteTableNoInstall)
	}

	return diags
}
func (o *VirtualRouterStaticRouteIpv4ResourceRouteTableUnicastObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.RouteTableUnicast, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(staticroute.RouteTableUnicast)
	}

	return diags
}

func (o *VirtualRouterStaticRouteIpv4ResourceModel) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var bfd_object *VirtualRouterStaticRouteIpv4ResourceBfdObject
	if obj.Bfd != nil {
		bfd_object = new(VirtualRouterStaticRouteIpv4ResourceBfdObject)
		diags.Append(bfd_object.CopyFromPango(ctx, ancestors, obj.Bfd, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var nexthop_object *VirtualRouterStaticRouteIpv4ResourceNexthopObject
	if obj.Nexthop != nil {
		nexthop_object = new(VirtualRouterStaticRouteIpv4ResourceNexthopObject)
		diags.Append(nexthop_object.CopyFromPango(ctx, ancestors, obj.Nexthop, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var pathMonitor_object *VirtualRouterStaticRouteIpv4ResourcePathMonitorObject
	if obj.PathMonitor != nil {
		pathMonitor_object = new(VirtualRouterStaticRouteIpv4ResourcePathMonitorObject)
		diags.Append(pathMonitor_object.CopyFromPango(ctx, ancestors, obj.PathMonitor, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var routeTable_object *VirtualRouterStaticRouteIpv4ResourceRouteTableObject
	if obj.RouteTable != nil {
		routeTable_object = new(VirtualRouterStaticRouteIpv4ResourceRouteTableObject)
		diags.Append(routeTable_object.CopyFromPango(ctx, ancestors, obj.RouteTable, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var adminDist_value types.Int64
	if obj.AdminDist != nil {
		adminDist_value = types.Int64Value(*obj.AdminDist)
	}
	var destination_value types.String
	if obj.Destination != nil {
		destination_value = types.StringValue(*obj.Destination)
	}
	var interface_value types.String
	if obj.Interface != nil {
		interface_value = types.StringValue(*obj.Interface)
	}
	var metric_value types.Int64
	if obj.Metric != nil {
		metric_value = types.Int64Value(*obj.Metric)
	}
	o.Name = types.StringValue(obj.Name)
	o.AdminDist = adminDist_value
	o.Bfd = bfd_object
	o.Destination = destination_value
	o.Interface = interface_value
	o.Metric = metric_value
	o.Nexthop = nexthop_object
	o.PathMonitor = pathMonitor_object
	o.RouteTable = routeTable_object

	return diags
}

func (o *VirtualRouterStaticRouteIpv4ResourceBfdObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.Bfd, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var profile_value types.String
	if obj.Profile != nil {
		profile_value = types.StringValue(*obj.Profile)
	}
	o.Profile = profile_value

	return diags
}

func (o *VirtualRouterStaticRouteIpv4ResourceNexthopObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.Nexthop, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var discard_object *VirtualRouterStaticRouteIpv4ResourceNexthopDiscardObject
	if obj.Discard != nil {
		discard_object = new(VirtualRouterStaticRouteIpv4ResourceNexthopDiscardObject)
		diags.Append(discard_object.CopyFromPango(ctx, append(ancestors, o), obj.Discard, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var receive_object *VirtualRouterStaticRouteIpv4ResourceNexthopReceiveObject
	if obj.Receive != nil {
		receive_object = new(VirtualRouterStaticRouteIpv4ResourceNexthopReceiveObject)
		diags.Append(receive_object.CopyFromPango(ctx, append(ancestors, o), obj.Receive, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var fqdn_value types.String
	if obj.Fqdn != nil {
		fqdn_value = types.StringValue(*obj.Fqdn)
	}
	var ipAddress_value types.String
	if obj.IpAddress != nil {
		ipAddress_value = types.StringValue(*obj.IpAddress)
	}
	var nextVr_value types.String
	if obj.NextVr != nil {
		nextVr_value = types.StringValue(*obj.NextVr)
	}
	o.Discard = discard_object
	o.Fqdn = fqdn_value
	o.IpAddress = ipAddress_value
	o.NextVr = nextVr_value
	o.Receive = receive_object

	return diags
}

func (o *VirtualRouterStaticRouteIpv4ResourceNexthopDiscardObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.NexthopDiscard, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *VirtualRouterStaticRouteIpv4ResourceNexthopReceiveObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.NexthopReceive, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *VirtualRouterStaticRouteIpv4ResourcePathMonitorObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.PathMonitor, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var monitorDestinations_list types.List
	{
		var monitorDestinations_tf_entries []VirtualRouterStaticRouteIpv4ResourcePathMonitorMonitorDestinationsObject
		for _, elt := range obj.MonitorDestinations {
			entry := VirtualRouterStaticRouteIpv4ResourcePathMonitorMonitorDestinationsObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			monitorDestinations_tf_entries = append(monitorDestinations_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("monitor_destinations")
		monitorDestinations_list, list_diags = types.ListValueFrom(ctx, schemaType, monitorDestinations_tf_entries)
		diags.Append(list_diags...)
	}

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var failureCondition_value types.String
	if obj.FailureCondition != nil {
		failureCondition_value = types.StringValue(*obj.FailureCondition)
	}
	var holdTime_value types.Int64
	if obj.HoldTime != nil {
		holdTime_value = types.Int64Value(*obj.HoldTime)
	}
	o.Enable = enable_value
	o.FailureCondition = failureCondition_value
	o.HoldTime = holdTime_value
	o.MonitorDestinations = monitorDestinations_list

	return diags
}

func (o *VirtualRouterStaticRouteIpv4ResourcePathMonitorMonitorDestinationsObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.PathMonitorMonitorDestinations, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var source_value types.String
	if obj.Source != nil {
		source_value = types.StringValue(*obj.Source)
	}
	var destination_value types.String
	if obj.Destination != nil {
		destination_value = types.StringValue(*obj.Destination)
	}
	var interval_value types.Int64
	if obj.Interval != nil {
		interval_value = types.Int64Value(*obj.Interval)
	}
	var count_value types.Int64
	if obj.Count != nil {
		count_value = types.Int64Value(*obj.Count)
	}
	o.Name = types.StringValue(obj.Name)
	o.Enable = enable_value
	o.Source = source_value
	o.Destination = destination_value
	o.Interval = interval_value
	o.Count = count_value

	return diags
}

func (o *VirtualRouterStaticRouteIpv4ResourceRouteTableObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.RouteTable, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var both_object *VirtualRouterStaticRouteIpv4ResourceRouteTableBothObject
	if obj.Both != nil {
		both_object = new(VirtualRouterStaticRouteIpv4ResourceRouteTableBothObject)
		diags.Append(both_object.CopyFromPango(ctx, append(ancestors, o), obj.Both, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var multicast_object *VirtualRouterStaticRouteIpv4ResourceRouteTableMulticastObject
	if obj.Multicast != nil {
		multicast_object = new(VirtualRouterStaticRouteIpv4ResourceRouteTableMulticastObject)
		diags.Append(multicast_object.CopyFromPango(ctx, append(ancestors, o), obj.Multicast, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var noInstall_object *VirtualRouterStaticRouteIpv4ResourceRouteTableNoInstallObject
	if obj.NoInstall != nil {
		noInstall_object = new(VirtualRouterStaticRouteIpv4ResourceRouteTableNoInstallObject)
		diags.Append(noInstall_object.CopyFromPango(ctx, append(ancestors, o), obj.NoInstall, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var unicast_object *VirtualRouterStaticRouteIpv4ResourceRouteTableUnicastObject
	if obj.Unicast != nil {
		unicast_object = new(VirtualRouterStaticRouteIpv4ResourceRouteTableUnicastObject)
		diags.Append(unicast_object.CopyFromPango(ctx, append(ancestors, o), obj.Unicast, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Both = both_object
	o.Multicast = multicast_object
	o.NoInstall = noInstall_object
	o.Unicast = unicast_object

	return diags
}

func (o *VirtualRouterStaticRouteIpv4ResourceRouteTableBothObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.RouteTableBoth, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *VirtualRouterStaticRouteIpv4ResourceRouteTableMulticastObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.RouteTableMulticast, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *VirtualRouterStaticRouteIpv4ResourceRouteTableNoInstallObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.RouteTableNoInstall, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *VirtualRouterStaticRouteIpv4ResourceRouteTableUnicastObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.RouteTableUnicast, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *VirtualRouterStaticRouteIpv4ResourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	components = append(components, pangoutil.AsEntryXpath(o.VirtualRouter.ValueString()))
	return components, nil
}

func (r *VirtualRouterStaticRouteIpv4Resource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state VirtualRouterStaticRouteIpv4ResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_virtual_router_static_route_ipv4_resource",
		"function":      "Create",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	// Determine the location.

	var location staticroute.Location

	{
		var terraformLocation VirtualRouterStaticRouteIpv4Location
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &staticroute.NgfwLocation{}
			var innerLocation VirtualRouterStaticRouteIpv4NgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &staticroute.TemplateLocation{}
			var innerLocation VirtualRouterStaticRouteIpv4TemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &staticroute.TemplateStackLocation{}
			var innerLocation VirtualRouterStaticRouteIpv4TemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	if err := location.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *staticroute.Entry
	resp.Diagnostics.Append(state.CopyToPango(ctx, nil, &obj, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	created, err := r.manager.Create(ctx, location, components, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	resp.Diagnostics.Append(state.CopyFromPango(ctx, nil, created, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
func (o *VirtualRouterStaticRouteIpv4Resource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state VirtualRouterStaticRouteIpv4ResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	encryptedValues, diags := req.Private.GetKey(ctx, "encrypted_values")
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location staticroute.Location

	{
		var terraformLocation VirtualRouterStaticRouteIpv4Location
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &staticroute.NgfwLocation{}
			var innerLocation VirtualRouterStaticRouteIpv4NgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &staticroute.TemplateLocation{}
			var innerLocation VirtualRouterStaticRouteIpv4TemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &staticroute.TemplateStackLocation{}
			var innerLocation VirtualRouterStaticRouteIpv4TemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_virtual_router_static_route_ipv4_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	components, err := savestate.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	object, err := o.manager.Read(ctx, location, components, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, nil, object, ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	{
		component := components[0]
		component = strings.TrimPrefix(component, "entry[@name='")
		component = strings.TrimSuffix(component, "']")
		state.VirtualRouter = types.StringValue(component)
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *VirtualRouterStaticRouteIpv4Resource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state VirtualRouterStaticRouteIpv4ResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	encryptedValues, diags := req.Private.GetKey(ctx, "encrypted_values")
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location staticroute.Location

	{
		var terraformLocation VirtualRouterStaticRouteIpv4Location
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &staticroute.NgfwLocation{}
			var innerLocation VirtualRouterStaticRouteIpv4NgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &staticroute.TemplateLocation{}
			var innerLocation VirtualRouterStaticRouteIpv4TemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &staticroute.TemplateStackLocation{}
			var innerLocation VirtualRouterStaticRouteIpv4TemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_virtual_router_static_route_ipv4_resource",
		"function":      "Update",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	obj, err := r.manager.Read(ctx, location, components, plan.Name.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, nil, &obj, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	components, err = plan.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}

	updated, err := r.manager.Update(ctx, location, components, obj, obj.Name)

	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	copy_diags := state.CopyFromPango(ctx, nil, updated, ev)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *VirtualRouterStaticRouteIpv4Resource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state VirtualRouterStaticRouteIpv4ResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_virtual_router_static_route_ipv4_resource",
		"function":      "Delete",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var location staticroute.Location

	{
		var terraformLocation VirtualRouterStaticRouteIpv4Location
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &staticroute.NgfwLocation{}
			var innerLocation VirtualRouterStaticRouteIpv4NgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &staticroute.TemplateLocation{}
			var innerLocation VirtualRouterStaticRouteIpv4TemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &staticroute.TemplateStackLocation{}
			var innerLocation VirtualRouterStaticRouteIpv4TemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	err = r.manager.Delete(ctx, location, components, []string{state.Name.ValueString()})
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
		return
	}

}

type VirtualRouterStaticRouteIpv4ImportState struct {
	Location      types.Object `json:"location"`
	VirtualRouter types.String `json:"virtual_router"`
	Name          types.String `json:"name"`
}

func (o VirtualRouterStaticRouteIpv4ImportState) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Location      *VirtualRouterStaticRouteIpv4Location `json:"location"`
		VirtualRouter *string                               `json:"virtual_router"`
		Name          *string                               `json:"name"`
	}
	var location_object *VirtualRouterStaticRouteIpv4Location
	{
		diags := o.Location.As(context.TODO(), &location_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal location into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Location:      location_object,
		VirtualRouter: o.VirtualRouter.ValueStringPointer(),
		Name:          o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *VirtualRouterStaticRouteIpv4ImportState) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Location      *VirtualRouterStaticRouteIpv4Location `json:"location"`
		VirtualRouter *string                               `json:"virtual_router"`
		Name          *string                               `json:"name"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var location_object types.Object
	{
		var diags_tmp diag.Diagnostics
		location_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Location.AttributeTypes(), shadow.Location)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into location", diags_tmp.Errors())
		}
	}
	o.Location = location_object
	o.VirtualRouter = types.StringPointerValue(shadow.VirtualRouter)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}

func VirtualRouterStaticRouteIpv4ImportStateCreator(ctx context.Context, resource types.Object) ([]byte, error) {
	attrs := resource.Attributes()
	if attrs == nil {
		return nil, fmt.Errorf("Object has no attributes")
	}

	locationAttr, ok := attrs["location"]
	if !ok {
		return nil, fmt.Errorf("location attribute missing")
	}

	var location types.Object
	switch value := locationAttr.(type) {
	case types.Object:
		location = value
	default:
		return nil, fmt.Errorf("location attribute expected to be an object")
	}
	nameAttr, ok := attrs["name"]
	if !ok {
		return nil, fmt.Errorf("name attribute missing")
	}

	var name types.String
	switch value := nameAttr.(type) {
	case types.String:
		name = value
	default:
		return nil, fmt.Errorf("name attribute expected to be a string")
	}

	importStruct := VirtualRouterStaticRouteIpv4ImportState{
		Location: location,
		Name:     name,
	}

	return json.Marshal(importStruct)
}

func (r *VirtualRouterStaticRouteIpv4Resource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	var obj VirtualRouterStaticRouteIpv4ImportState
	data, err := base64.StdEncoding.DecodeString(req.ID)
	if err != nil {
		resp.Diagnostics.AddError("Failed to decode Import ID", err.Error())
		return
	}

	err = json.Unmarshal(data, &obj)
	if err != nil {
		var diagsErr *DiagnosticsError
		if errors.As(err, &diagsErr) {
			resp.Diagnostics.Append(diagsErr.Diagnostics()...)
		} else {
			resp.Diagnostics.AddError("Failed to unmarshal Import ID", err.Error())
		}
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("location"), obj.Location)...)
	if resp.Diagnostics.HasError() {
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("virtual_router"), obj.VirtualRouter)...)
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("name"), obj.Name)...)
}

type VirtualRouterStaticRouteIpv4NgfwLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
}
type VirtualRouterStaticRouteIpv4TemplateLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type VirtualRouterStaticRouteIpv4TemplateStackLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type VirtualRouterStaticRouteIpv4Location struct {
	Ngfw          types.Object `tfsdk:"ngfw"`
	Template      types.Object `tfsdk:"template"`
	TemplateStack types.Object `tfsdk:"template_stack"`
}

func VirtualRouterStaticRouteIpv4LocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"ngfw": rsschema.SingleNestedAttribute{
				Description: "Located in a specific NGFW device",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("ngfw"),
						path.MatchRelative().AtParent().AtName("template"),
						path.MatchRelative().AtParent().AtName("template_stack"),
					}...),
				},
			},
			"template": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Specific Panorama template",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_stack": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template stack",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Specific Panorama template stack",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o VirtualRouterStaticRouteIpv4NgfwLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
	}

	obj := shadow{
		NgfwDevice: o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *VirtualRouterStaticRouteIpv4NgfwLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o VirtualRouterStaticRouteIpv4TemplateLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *VirtualRouterStaticRouteIpv4TemplateLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o VirtualRouterStaticRouteIpv4TemplateStackLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *VirtualRouterStaticRouteIpv4TemplateStackLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o VirtualRouterStaticRouteIpv4Location) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Ngfw          *VirtualRouterStaticRouteIpv4NgfwLocation          `json:"ngfw,omitempty"`
		Template      *VirtualRouterStaticRouteIpv4TemplateLocation      `json:"template,omitempty"`
		TemplateStack *VirtualRouterStaticRouteIpv4TemplateStackLocation `json:"template_stack,omitempty"`
	}
	var ngfw_object *VirtualRouterStaticRouteIpv4NgfwLocation
	{
		diags := o.Ngfw.As(context.TODO(), &ngfw_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal ngfw into JSON document", diags.Errors())
		}
	}
	var template_object *VirtualRouterStaticRouteIpv4TemplateLocation
	{
		diags := o.Template.As(context.TODO(), &template_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template into JSON document", diags.Errors())
		}
	}
	var templateStack_object *VirtualRouterStaticRouteIpv4TemplateStackLocation
	{
		diags := o.TemplateStack.As(context.TODO(), &templateStack_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template_stack into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Ngfw:          ngfw_object,
		Template:      template_object,
		TemplateStack: templateStack_object,
	}

	return json.Marshal(obj)
}

func (o *VirtualRouterStaticRouteIpv4Location) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Ngfw          *VirtualRouterStaticRouteIpv4NgfwLocation          `json:"ngfw,omitempty"`
		Template      *VirtualRouterStaticRouteIpv4TemplateLocation      `json:"template,omitempty"`
		TemplateStack *VirtualRouterStaticRouteIpv4TemplateStackLocation `json:"template_stack,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var ngfw_object types.Object
	{
		var diags_tmp diag.Diagnostics
		ngfw_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Ngfw.AttributeTypes(), shadow.Ngfw)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into ngfw", diags_tmp.Errors())
		}
	}
	var template_object types.Object
	{
		var diags_tmp diag.Diagnostics
		template_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Template.AttributeTypes(), shadow.Template)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template", diags_tmp.Errors())
		}
	}
	var templateStack_object types.Object
	{
		var diags_tmp diag.Diagnostics
		templateStack_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.TemplateStack.AttributeTypes(), shadow.TemplateStack)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template_stack", diags_tmp.Errors())
		}
	}
	o.Ngfw = ngfw_object
	o.Template = template_object
	o.TemplateStack = templateStack_object

	return nil
}

func (o *VirtualRouterStaticRouteIpv4NgfwLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"ngfw_device": types.StringType,
	}
}
func (o *VirtualRouterStaticRouteIpv4TemplateLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
		"ngfw_device":     types.StringType,
	}
}
func (o *VirtualRouterStaticRouteIpv4TemplateStackLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
		"ngfw_device":     types.StringType,
	}
}
func (o *VirtualRouterStaticRouteIpv4Location) AttributeTypes() map[string]attr.Type {
	var ngfwObj VirtualRouterStaticRouteIpv4NgfwLocation
	var templateObj VirtualRouterStaticRouteIpv4TemplateLocation
	var templateStackObj VirtualRouterStaticRouteIpv4TemplateStackLocation
	return map[string]attr.Type{
		"ngfw": types.ObjectType{
			AttrTypes: ngfwObj.AttributeTypes(),
		},
		"template": types.ObjectType{
			AttrTypes: templateObj.AttributeTypes(),
		},
		"template_stack": types.ObjectType{
			AttrTypes: templateStackObj.AttributeTypes(),
		},
	}
}
