package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/objects/address"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &AddressesDataSource{}
	_ datasource.DataSourceWithConfigure = &AddressesDataSource{}
)

func NewAddressesDataSource() datasource.DataSource {
	return &AddressesDataSource{}
}

type AddressesDataSource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*address.Entry, address.Location, *address.Service]
}

type AddressesDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type AddressesDataSourceModel struct {
	Location  types.Object `tfsdk:"location"`
	Addresses types.Map    `tfsdk:"addresses"`
}
type AddressesDataSourceAddressesObject struct {
	Description     types.String `tfsdk:"description"`
	DisableOverride types.String `tfsdk:"disable_override"`
	Tags            types.List   `tfsdk:"tags"`
	Fqdn            types.String `tfsdk:"fqdn"`
	IpNetmask       types.String `tfsdk:"ip_netmask"`
	IpRange         types.String `tfsdk:"ip_range"`
	IpWildcard      types.String `tfsdk:"ip_wildcard"`
}

func (o *AddressesDataSourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj AddressesLocation

	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"addresses": types.MapType{},
	}
}
func (o *AddressesDataSourceAddressesObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"description":      types.StringType,
		"disable_override": types.StringType,
		"tags":             types.ListType{},
		"fqdn":             types.StringType,
		"ip_netmask":       types.StringType,
		"ip_range":         types.StringType,
		"ip_wildcard":      types.StringType,
	}
}

func (o *AddressesDataSourceAddressesObject) CopyToPango(ctx context.Context, obj **address.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	description_value := o.Description.ValueStringPointer()
	disableOverride_value := o.DisableOverride.ValueStringPointer()
	tags_pango_entries := make([]string, 0)
	diags.Append(o.Tags.ElementsAs(ctx, &tags_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	fqdn_value := o.Fqdn.ValueStringPointer()
	ipNetmask_value := o.IpNetmask.ValueStringPointer()
	ipRange_value := o.IpRange.ValueStringPointer()
	ipWildcard_value := o.IpWildcard.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(address.Entry)
	}
	(*obj).Description = description_value
	(*obj).DisableOverride = disableOverride_value
	(*obj).Tag = tags_pango_entries
	(*obj).Fqdn = fqdn_value
	(*obj).IpNetmask = ipNetmask_value
	(*obj).IpRange = ipRange_value
	(*obj).IpWildcard = ipWildcard_value

	return diags
}

func (o *AddressesDataSourceAddressesObject) CopyFromPango(ctx context.Context, obj *address.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var tags_list types.List
	{
		var list_diags diag.Diagnostics
		tags_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tag)
		diags.Append(list_diags...)
	}

	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var disableOverride_value types.String
	if obj.DisableOverride != nil {
		disableOverride_value = types.StringValue(*obj.DisableOverride)
	}
	var fqdn_value types.String
	if obj.Fqdn != nil {
		fqdn_value = types.StringValue(*obj.Fqdn)
	}
	var ipNetmask_value types.String
	if obj.IpNetmask != nil {
		ipNetmask_value = types.StringValue(*obj.IpNetmask)
	}
	var ipRange_value types.String
	if obj.IpRange != nil {
		ipRange_value = types.StringValue(*obj.IpRange)
	}
	var ipWildcard_value types.String
	if obj.IpWildcard != nil {
		ipWildcard_value = types.StringValue(*obj.IpWildcard)
	}
	o.Description = description_value
	o.DisableOverride = disableOverride_value
	o.Tags = tags_list
	o.Fqdn = fqdn_value
	o.IpNetmask = ipNetmask_value
	o.IpRange = ipRange_value
	o.IpWildcard = ipWildcard_value

	return diags
}

func AddressesDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": AddressesDataSourceLocationSchema(),

			"addresses": dsschema.MapNestedAttribute{
				Description:  "",
				Required:     true,
				Optional:     false,
				Computed:     false,
				Sensitive:    false,
				NestedObject: AddressesDataSourceAddressesSchema(),
			},
		},
	}
}

func (o *AddressesDataSourceModel) getTypeFor(name string) attr.Type {
	schema := AddressesDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AddressesDataSourceAddressesSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"description": dsschema.StringAttribute{
				Description: "The description.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"disable_override": dsschema.StringAttribute{
				Description: "disable object override in child device groups",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tags": dsschema.ListAttribute{
				Description: "The administrative tags.",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"fqdn": dsschema.StringAttribute{
				Description: "The FQDN value.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ip_netmask": dsschema.StringAttribute{
				Description: "The IP netmask value.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ip_range": dsschema.StringAttribute{
				Description: "The IP range value.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ip_wildcard": dsschema.StringAttribute{
				Description: "The IP wildcard value.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AddressesDataSourceAddressesObject) getTypeFor(name string) attr.Type {
	schema := AddressesDataSourceAddressesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AddressesDataSourceLocationSchema() rsschema.Attribute {
	return AddressesLocationSchema()
}

// Metadata returns the data source type name.
func (d *AddressesDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_addresses"
}

// Schema defines the schema for this data source.
func (d *AddressesDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = AddressesDataSourceSchema()
}

// Configure prepares the struct.
func (d *AddressesDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	d.client = providerData.Client
	specifier, _, err := address.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	d.manager = sdkmanager.NewEntryObjectManager(d.client, address.NewService(d.client), batchSize, specifier, address.SpecMatches)
}
func (o *AddressesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var state AddressesDataSourceModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_addresses",
		"function":      "Create",
	})

	var location address.Location

	{
		var terraformLocation AddressesLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &address.SharedLocation{}
			var innerLocation AddressesSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &address.VsysLocation{}
			var innerLocation AddressesVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &address.DeviceGroupLocation{}
			var innerLocation AddressesDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
		}
	}

	elements := make(map[string]AddressesDataSourceAddressesObject)
	resp.Diagnostics.Append(state.Addresses.ElementsAs(ctx, &elements, false)...)
	if len(elements) == 0 || resp.Diagnostics.HasError() {
		return
	}

	entries := make([]*address.Entry, 0, len(elements))
	for name, elt := range elements {
		var entry *address.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, &entry, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		entry.Name = name
		entries = append(entries, entry)
	}

	readEntries, err := o.manager.ReadMany(ctx, location, entries)
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Failed to read entries from the server", err.Error())
		}
		return
	}

	objects := make(map[string]AddressesDataSourceAddressesObject)
	for _, elt := range readEntries {
		var object AddressesDataSourceAddressesObject
		resp.Diagnostics.Append(object.CopyFromPango(ctx, elt, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		objects[elt.Name] = object
	}

	var map_diags diag.Diagnostics
	state.Addresses, map_diags = types.MapValueFrom(ctx, state.getTypeFor("addresses"), objects)
	resp.Diagnostics.Append(map_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &AddressesResource{}
	_ resource.ResourceWithConfigure   = &AddressesResource{}
	_ resource.ResourceWithImportState = &AddressesResource{}
)

func NewAddressesResource() resource.Resource {
	if _, found := resourceFuncMap["panos_addresses"]; !found {
		resourceFuncMap["panos_addresses"] = resourceFuncs{
			CreateImportId: AddressesImportStateCreator,
		}
	}
	return &AddressesResource{}
}

type AddressesResource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*address.Entry, address.Location, *address.Service]
}

func AddressesResourceLocationSchema() rsschema.Attribute {
	return AddressesLocationSchema()
}

type AddressesResourceModel struct {
	Location  types.Object `tfsdk:"location"`
	Addresses types.Map    `tfsdk:"addresses"`
}
type AddressesResourceAddressesObject struct {
	Description     types.String `tfsdk:"description"`
	DisableOverride types.String `tfsdk:"disable_override"`
	Tags            types.List   `tfsdk:"tags"`
	Fqdn            types.String `tfsdk:"fqdn"`
	IpNetmask       types.String `tfsdk:"ip_netmask"`
	IpRange         types.String `tfsdk:"ip_range"`
	IpWildcard      types.String `tfsdk:"ip_wildcard"`
}

func (r *AddressesResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func AddressesResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": AddressesResourceLocationSchema(),

			"addresses": rsschema.MapNestedAttribute{
				Description:  "",
				Required:     true,
				Optional:     false,
				Computed:     false,
				Sensitive:    false,
				NestedObject: AddressesResourceAddressesSchema(),
			},
		},
	}
}

func (o *AddressesResourceModel) getTypeFor(name string) attr.Type {
	schema := AddressesResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func AddressesResourceAddressesSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"description": rsschema.StringAttribute{
				Description: "The description.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"disable_override": rsschema.StringAttribute{
				Description: "disable object override in child device groups",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,

				Validators: []validator.String{
					stringvalidator.OneOf([]string{
						"yes",
						"no",
					}...),
				},
			},

			"tags": rsschema.ListAttribute{
				Description: "The administrative tags.",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"fqdn": rsschema.StringAttribute{
				Description: "The FQDN value.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,

				Validators: []validator.String{
					stringvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("fqdn"),
						path.MatchRelative().AtParent().AtName("ip_netmask"),
						path.MatchRelative().AtParent().AtName("ip_range"),
						path.MatchRelative().AtParent().AtName("ip_wildcard"),
					}...),
				},
			},

			"ip_netmask": rsschema.StringAttribute{
				Description: "The IP netmask value.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ip_range": rsschema.StringAttribute{
				Description: "The IP range value.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ip_wildcard": rsschema.StringAttribute{
				Description: "The IP wildcard value.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *AddressesResourceAddressesObject) getTypeFor(name string) attr.Type {
	schema := AddressesResourceAddressesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *AddressesResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_addresses"
}

func (r *AddressesResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = AddressesResourceSchema()
}

// </ResourceSchema>

func (r *AddressesResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	r.client = providerData.Client
	specifier, _, err := address.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	r.manager = sdkmanager.NewEntryObjectManager(r.client, address.NewService(r.client), batchSize, specifier, address.SpecMatches)
}

func (o *AddressesResourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj AddressesLocation

	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"addresses": types.MapType{},
	}
}
func (o *AddressesResourceAddressesObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"description":      types.StringType,
		"disable_override": types.StringType,
		"tags":             types.ListType{},
		"fqdn":             types.StringType,
		"ip_netmask":       types.StringType,
		"ip_range":         types.StringType,
		"ip_wildcard":      types.StringType,
	}
}

func (o *AddressesResourceAddressesObject) CopyToPango(ctx context.Context, obj **address.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	description_value := o.Description.ValueStringPointer()
	disableOverride_value := o.DisableOverride.ValueStringPointer()
	tags_pango_entries := make([]string, 0)
	diags.Append(o.Tags.ElementsAs(ctx, &tags_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	fqdn_value := o.Fqdn.ValueStringPointer()
	ipNetmask_value := o.IpNetmask.ValueStringPointer()
	ipRange_value := o.IpRange.ValueStringPointer()
	ipWildcard_value := o.IpWildcard.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(address.Entry)
	}
	(*obj).Description = description_value
	(*obj).DisableOverride = disableOverride_value
	(*obj).Tag = tags_pango_entries
	(*obj).Fqdn = fqdn_value
	(*obj).IpNetmask = ipNetmask_value
	(*obj).IpRange = ipRange_value
	(*obj).IpWildcard = ipWildcard_value

	return diags
}

func (o *AddressesResourceAddressesObject) CopyFromPango(ctx context.Context, obj *address.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var tags_list types.List
	{
		var list_diags diag.Diagnostics
		tags_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tag)
		diags.Append(list_diags...)
	}

	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var disableOverride_value types.String
	if obj.DisableOverride != nil {
		disableOverride_value = types.StringValue(*obj.DisableOverride)
	}
	var fqdn_value types.String
	if obj.Fqdn != nil {
		fqdn_value = types.StringValue(*obj.Fqdn)
	}
	var ipNetmask_value types.String
	if obj.IpNetmask != nil {
		ipNetmask_value = types.StringValue(*obj.IpNetmask)
	}
	var ipRange_value types.String
	if obj.IpRange != nil {
		ipRange_value = types.StringValue(*obj.IpRange)
	}
	var ipWildcard_value types.String
	if obj.IpWildcard != nil {
		ipWildcard_value = types.StringValue(*obj.IpWildcard)
	}
	o.Description = description_value
	o.DisableOverride = disableOverride_value
	o.Tags = tags_list
	o.Fqdn = fqdn_value
	o.IpNetmask = ipNetmask_value
	o.IpRange = ipRange_value
	o.IpWildcard = ipWildcard_value

	return diags
}

func (r *AddressesResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	var state AddressesResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_addresses_resource",
		"function":      "Create",
	})

	var location address.Location

	{
		var terraformLocation AddressesLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &address.SharedLocation{}
			var innerLocation AddressesSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &address.VsysLocation{}
			var innerLocation AddressesVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &address.DeviceGroupLocation{}
			var innerLocation AddressesDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
		}
	}

	type entryWithState struct {
		Entry    *address.Entry
		StateIdx int
	}

	var elements map[string]AddressesResourceAddressesObject
	resp.Diagnostics.Append(state.Addresses.ElementsAs(ctx, &elements, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	entries := make([]*address.Entry, len(elements))
	idx := 0
	for name, elt := range elements {
		var entry *address.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, &entry, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		entry.Name = name
		entries[idx] = entry
		idx++
	}

	created, err := r.manager.CreateMany(ctx, location, entries)
	if err != nil {
		resp.Diagnostics.AddError("Failed to create new entries", err.Error())
		return
	}

	for _, elt := range created {
		if _, found := elements[elt.Name]; !found {
			continue
		}
		var object AddressesResourceAddressesObject
		resp.Diagnostics.Append(object.CopyFromPango(ctx, elt, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		elements[elt.Name] = object
	}

	var map_diags diag.Diagnostics
	state.Addresses, map_diags = types.MapValueFrom(ctx, state.getTypeFor("addresses"), elements)
	resp.Diagnostics.Append(map_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (o *AddressesResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var state AddressesResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_addresses",
		"function":      "Create",
	})

	var location address.Location

	{
		var terraformLocation AddressesLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &address.SharedLocation{}
			var innerLocation AddressesSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &address.VsysLocation{}
			var innerLocation AddressesVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &address.DeviceGroupLocation{}
			var innerLocation AddressesDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
		}
	}

	elements := make(map[string]AddressesResourceAddressesObject)
	resp.Diagnostics.Append(state.Addresses.ElementsAs(ctx, &elements, false)...)
	if len(elements) == 0 || resp.Diagnostics.HasError() {
		return
	}

	entries := make([]*address.Entry, 0, len(elements))
	for name, elt := range elements {
		var entry *address.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, &entry, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		entry.Name = name
		entries = append(entries, entry)
	}

	readEntries, err := o.manager.ReadMany(ctx, location, entries)
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Failed to read entries from the server", err.Error())
		}
		return
	}

	objects := make(map[string]AddressesResourceAddressesObject)
	for _, elt := range readEntries {
		var object AddressesResourceAddressesObject
		resp.Diagnostics.Append(object.CopyFromPango(ctx, elt, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		objects[elt.Name] = object
	}

	var map_diags diag.Diagnostics
	state.Addresses, map_diags = types.MapValueFrom(ctx, state.getTypeFor("addresses"), objects)
	resp.Diagnostics.Append(map_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *AddressesResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var state, plan AddressesResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_addresses_resource",
		"function":      "Create",
	})

	var location address.Location

	{
		var terraformLocation AddressesLocation
		resp.Diagnostics.Append(plan.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &address.SharedLocation{}
			var innerLocation AddressesSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &address.VsysLocation{}
			var innerLocation AddressesVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &address.DeviceGroupLocation{}
			var innerLocation AddressesDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_addresses_resource",
		"function":      "Update",
	})

	var elements map[string]AddressesResourceAddressesObject
	resp.Diagnostics.Append(state.Addresses.ElementsAs(ctx, &elements, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	stateEntries := make([]*address.Entry, len(elements))
	idx := 0
	for name, elt := range elements {
		var entry *address.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, &entry, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		entry.Name = name
		stateEntries[idx] = entry
		idx++
	}

	existing, err := r.manager.ReadMany(ctx, location, stateEntries)
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error while reading entries from the server", err.Error())
		return
	}

	existingEntriesByName := make(map[string]*address.Entry, len(existing))
	for _, elt := range existing {
		existingEntriesByName[elt.Name] = elt
	}

	resp.Diagnostics.Append(plan.Addresses.ElementsAs(ctx, &elements, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	planEntries := make([]*address.Entry, len(elements))
	idx = 0
	for name, elt := range elements {
		entry, _ := existingEntriesByName[name]
		resp.Diagnostics.Append(elt.CopyToPango(ctx, &entry, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}

		entry.Name = name
		planEntries[idx] = entry
		idx++
	}

	processed, err := r.manager.UpdateMany(ctx, location, stateEntries, planEntries)
	if err != nil {
		resp.Diagnostics.AddError("Error while updating entries", err.Error())
		return
	}

	objects := make(map[string]*AddressesResourceAddressesObject, len(processed))
	for _, elt := range processed {
		var object AddressesResourceAddressesObject
		copy_diags := object.CopyFromPango(ctx, elt, nil)
		resp.Diagnostics.Append(copy_diags...)
		if resp.Diagnostics.HasError() {
			return
		}

		objects[elt.Name] = &object
	}

	var list_diags diag.Diagnostics
	plan.Addresses, list_diags = types.MapValueFrom(ctx, state.getTypeFor("addresses"), objects)
	resp.Diagnostics.Append(list_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &plan)...)

}
func (r *AddressesResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state AddressesResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_addresses_resource",
		"function":      "Delete",
	})
	elements := make(map[string]AddressesResourceAddressesObject, len(state.Addresses.Elements()))
	resp.Diagnostics.Append(state.Addresses.ElementsAs(ctx, &elements, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location address.Location

	{
		var terraformLocation AddressesLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &address.SharedLocation{}
			var innerLocation AddressesSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &address.VsysLocation{}
			var innerLocation AddressesVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &address.DeviceGroupLocation{}
			var innerLocation AddressesDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
		}
	}

	var names []string
	for name, _ := range elements {
		names = append(names, name)
	}
	err := r.manager.Delete(ctx, location, names)
	if err != nil {
		resp.Diagnostics.AddError("error while deleting entries", err.Error())
		return
	}

}

type AddressesImportState struct {
	Location types.Object `json:"location"`
	Names    types.List   `json:"names"`
}

func (o AddressesImportState) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Location *AddressesLocation `json:"location"`
		Names    []string           `json:"names"`
	}
	var location_object *AddressesLocation
	{
		diags := o.Location.As(context.TODO(), &location_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal location into JSON document", diags.Errors())
		}
	}
	var names_list []string
	{
		diags := o.Names.ElementsAs(context.TODO(), &names_list, false)
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal names into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Location: location_object,
		Names:    names_list,
	}

	return json.Marshal(obj)
}

func (o *AddressesImportState) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Location *AddressesLocation `json:"location"`
		Names    []string           `json:"names"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var location_object types.Object
	{
		var diags_tmp diag.Diagnostics
		location_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Location.AttributeTypes(), shadow.Location)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into location", diags_tmp.Errors())
		}
	}
	var names_list types.List
	{
		var diags_tmp diag.Diagnostics
		names_list, diags_tmp = types.ListValueFrom(context.TODO(), types.StringType, shadow.Names)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into names", diags_tmp.Errors())
		}
	}
	o.Location = location_object
	o.Names = names_list

	return nil
}

func AddressesImportStateCreator(ctx context.Context, resource types.Object) ([]byte, error) {
	attrs := resource.Attributes()
	if attrs == nil {
		return nil, fmt.Errorf("Object has no attributes")
	}

	locationAttr, ok := attrs["location"]
	if !ok {
		return nil, fmt.Errorf("location attribute missing")
	}

	var location types.Object
	switch value := locationAttr.(type) {
	case types.Object:
		location = value
	default:
		return nil, fmt.Errorf("location attribute expected to be an object")
	}
	itemsAttr, ok := attrs["addresses"]
	if !ok {
		return nil, fmt.Errorf("addresses attribute missing")
	}

	items := make(map[string]AddressesResourceAddressesObject)
	switch value := itemsAttr.(type) {
	case types.Map:
		diags := value.ElementsAs(ctx, &items, false)
		if diags.HasError() {
			return nil, fmt.Errorf("Failed to convert addresses into a valid map: %s", diags.Errors())
		}
	default:
		return nil, fmt.Errorf("addresses expected to be a map")
	}

	var names []string
	for key := range items {
		names = append(names, key)
	}

	var namesObj types.List
	{
		var diags_err diag.Diagnostics
		namesObj, diags_err = types.ListValueFrom(ctx, types.StringType, names)
		if diags_err.HasError() {
			return nil, NewDiagnosticsError("Failed to generate a list of names for the import ID", diags_err.Errors())
		}
	}

	importStruct := AddressesImportState{
		Location: location,
		Names:    namesObj,
	}

	return json.Marshal(importStruct)
}

func (r *AddressesResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	var obj AddressesImportState
	data, err := base64.StdEncoding.DecodeString(req.ID)
	if err != nil {
		resp.Diagnostics.AddError("Failed to decode Import ID", err.Error())
		return
	}

	err = json.Unmarshal(data, &obj)
	if err != nil {
		var diagsErr *DiagnosticsError
		if errors.As(err, &diagsErr) {
			resp.Diagnostics.Append(diagsErr.Diagnostics()...)
		} else {
			resp.Diagnostics.AddError("Failed to unmarshal Import ID", err.Error())
		}
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("location"), obj.Location)...)
	if resp.Diagnostics.HasError() {
		return
	}
	names := make(map[string]*AddressesResourceAddressesObject)

	var objectNames []string
	resp.Diagnostics.Append(obj.Names.ElementsAs(ctx, &objectNames, false)...)
	if resp.Diagnostics.HasError() {
		return
	}
	for _, elt := range objectNames {
		object := &AddressesResourceAddressesObject{}
		resp.Diagnostics.Append(object.CopyFromPango(ctx, &address.Entry{}, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		names[elt] = object
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("addresses"), names)...)
}

type AddressesSharedLocation struct {
}
type AddressesVsysLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
	Name       types.String `tfsdk:"name"`
}
type AddressesDeviceGroupLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
}
type AddressesLocation struct {
	Shared      types.Object `tfsdk:"shared"`
	Vsys        types.Object `tfsdk:"vsys"`
	DeviceGroup types.Object `tfsdk:"device_group"`
}

func AddressesLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"shared": rsschema.SingleNestedAttribute{
				Description: "Panorama shared object",
				Optional:    true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("shared"),
						path.MatchRelative().AtParent().AtName("vsys"),
						path.MatchRelative().AtParent().AtName("device_group"),
					}...),
				},
			},
			"vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific Virtual System",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The Virtual System name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"device_group": rsschema.SingleNestedAttribute{
				Description: "Located in a specific Device Group",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Panorama device name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Device Group name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o AddressesSharedLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
	}

	obj := shadow{}

	return json.Marshal(obj)
}

func (o *AddressesSharedLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}

	return nil
}
func (o AddressesVsysLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
		Name       *string `json:"name,omitempty"`
	}

	obj := shadow{
		NgfwDevice: o.NgfwDevice.ValueStringPointer(),
		Name:       o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *AddressesVsysLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
		Name       *string `json:"name,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o AddressesDeviceGroupLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *AddressesDeviceGroupLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o AddressesLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Shared      *AddressesSharedLocation      `json:"shared,omitempty"`
		Vsys        *AddressesVsysLocation        `json:"vsys,omitempty"`
		DeviceGroup *AddressesDeviceGroupLocation `json:"device_group,omitempty"`
	}
	var shared_object *AddressesSharedLocation
	{
		diags := o.Shared.As(context.TODO(), &shared_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal shared into JSON document", diags.Errors())
		}
	}
	var vsys_object *AddressesVsysLocation
	{
		diags := o.Vsys.As(context.TODO(), &vsys_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal vsys into JSON document", diags.Errors())
		}
	}
	var deviceGroup_object *AddressesDeviceGroupLocation
	{
		diags := o.DeviceGroup.As(context.TODO(), &deviceGroup_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal device_group into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Shared:      shared_object,
		Vsys:        vsys_object,
		DeviceGroup: deviceGroup_object,
	}

	return json.Marshal(obj)
}

func (o *AddressesLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Shared      *AddressesSharedLocation      `json:"shared,omitempty"`
		Vsys        *AddressesVsysLocation        `json:"vsys,omitempty"`
		DeviceGroup *AddressesDeviceGroupLocation `json:"device_group,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var shared_object types.Object
	{
		var diags_tmp diag.Diagnostics
		shared_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Shared.AttributeTypes(), shadow.Shared)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into shared", diags_tmp.Errors())
		}
	}
	var vsys_object types.Object
	{
		var diags_tmp diag.Diagnostics
		vsys_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Vsys.AttributeTypes(), shadow.Vsys)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into vsys", diags_tmp.Errors())
		}
	}
	var deviceGroup_object types.Object
	{
		var diags_tmp diag.Diagnostics
		deviceGroup_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.DeviceGroup.AttributeTypes(), shadow.DeviceGroup)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into device_group", diags_tmp.Errors())
		}
	}
	o.Shared = shared_object
	o.Vsys = vsys_object
	o.DeviceGroup = deviceGroup_object

	return nil
}

func (o *AddressesSharedLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}
func (o *AddressesVsysLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"ngfw_device": types.StringType,
		"name":        types.StringType,
	}
}
func (o *AddressesDeviceGroupLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
	}
}
func (o *AddressesLocation) AttributeTypes() map[string]attr.Type {
	var sharedObj AddressesSharedLocation
	var vsysObj AddressesVsysLocation
	var deviceGroupObj AddressesDeviceGroupLocation
	return map[string]attr.Type{
		"shared": types.ObjectType{
			AttrTypes: sharedObj.AttributeTypes(),
		},
		"vsys": types.ObjectType{
			AttrTypes: vsysObj.AttributeTypes(),
		},
		"device_group": types.ObjectType{
			AttrTypes: deviceGroupObj.AttributeTypes(),
		},
	}
}
