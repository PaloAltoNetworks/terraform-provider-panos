package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/device/services/ntp"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &NtpSettingsDataSource{}
	_ datasource.DataSourceWithConfigure = &NtpSettingsDataSource{}
)

func NewNtpSettingsDataSource() datasource.DataSource {
	return &NtpSettingsDataSource{}
}

type NtpSettingsDataSource struct {
	client  *pango.Client
	manager *sdkmanager.ConfigObjectManager[*ntp.Config, ntp.Location, *ntp.Service]
}

type NtpSettingsDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type NtpSettingsDataSourceModel struct {
	Location   types.Object                           `tfsdk:"location"`
	NtpServers *NtpSettingsDataSourceNtpServersObject `tfsdk:"ntp_servers"`
}
type NtpSettingsDataSourceNtpServersObject struct {
	PrimaryNtpServer   *NtpSettingsDataSourceNtpServersPrimaryNtpServerObject   `tfsdk:"primary_ntp_server"`
	SecondaryNtpServer *NtpSettingsDataSourceNtpServersSecondaryNtpServerObject `tfsdk:"secondary_ntp_server"`
}
type NtpSettingsDataSourceNtpServersPrimaryNtpServerObject struct {
	AuthenticationType *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject `tfsdk:"authentication_type"`
	NtpServerAddress   types.String                                                             `tfsdk:"ntp_server_address"`
}
type NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject struct {
	Autokey      *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject      `tfsdk:"autokey"`
	None         *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject         `tfsdk:"none"`
	SymmetricKey *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject `tfsdk:"symmetric_key"`
}
type NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject struct {
}
type NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject struct {
}
type NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject struct {
	Algorithm *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject `tfsdk:"algorithm"`
	KeyId     types.Int64                                                                                   `tfsdk:"key_id"`
}
type NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject struct {
	Md5  *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object  `tfsdk:"md5"`
	Sha1 *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object `tfsdk:"sha1"`
}
type NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}
type NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}
type NtpSettingsDataSourceNtpServersSecondaryNtpServerObject struct {
	AuthenticationType *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject `tfsdk:"authentication_type"`
	NtpServerAddress   types.String                                                               `tfsdk:"ntp_server_address"`
}
type NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject struct {
	Autokey      *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject      `tfsdk:"autokey"`
	None         *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject         `tfsdk:"none"`
	SymmetricKey *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject `tfsdk:"symmetric_key"`
}
type NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject struct {
}
type NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject struct {
}
type NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject struct {
	Algorithm *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject `tfsdk:"algorithm"`
	KeyId     types.Int64                                                                                     `tfsdk:"key_id"`
}
type NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject struct {
	Md5  *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object  `tfsdk:"md5"`
	Sha1 *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object `tfsdk:"sha1"`
}
type NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}
type NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}

func (o *NtpSettingsDataSourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj NtpSettingsLocation

	var ntpServersObj *NtpSettingsDataSourceNtpServersObject
	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"ntp_servers": types.ObjectType{
			AttrTypes: ntpServersObj.AttributeTypes(),
		},
	}
}

func (o NtpSettingsDataSourceModel) AncestorName() string {
	return ""
}

func (o NtpSettingsDataSourceModel) EntryName() *string {
	return nil
}
func (o *NtpSettingsDataSourceNtpServersObject) AttributeTypes() map[string]attr.Type {

	var primaryNtpServerObj *NtpSettingsDataSourceNtpServersPrimaryNtpServerObject

	var secondaryNtpServerObj *NtpSettingsDataSourceNtpServersSecondaryNtpServerObject
	return map[string]attr.Type{
		"primary_ntp_server": types.ObjectType{
			AttrTypes: primaryNtpServerObj.AttributeTypes(),
		},
		"secondary_ntp_server": types.ObjectType{
			AttrTypes: secondaryNtpServerObj.AttributeTypes(),
		},
	}
}

func (o NtpSettingsDataSourceNtpServersObject) AncestorName() string {
	return "ntp-servers"
}

func (o NtpSettingsDataSourceNtpServersObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerObject) AttributeTypes() map[string]attr.Type {

	var authenticationTypeObj *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject

	return map[string]attr.Type{
		"authentication_type": types.ObjectType{
			AttrTypes: authenticationTypeObj.AttributeTypes(),
		},
		"ntp_server_address": types.StringType,
	}
}

func (o NtpSettingsDataSourceNtpServersPrimaryNtpServerObject) AncestorName() string {
	return "primary-ntp-server"
}

func (o NtpSettingsDataSourceNtpServersPrimaryNtpServerObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject) AttributeTypes() map[string]attr.Type {

	var autokeyObj *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject

	var noneObj *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject

	var symmetricKeyObj *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject
	return map[string]attr.Type{
		"autokey": types.ObjectType{
			AttrTypes: autokeyObj.AttributeTypes(),
		},
		"none": types.ObjectType{
			AttrTypes: noneObj.AttributeTypes(),
		},
		"symmetric_key": types.ObjectType{
			AttrTypes: symmetricKeyObj.AttributeTypes(),
		},
	}
}

func (o NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject) AncestorName() string {
	return "authentication-type"
}

func (o NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject) AncestorName() string {
	return "autokey"
}

func (o NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject) AncestorName() string {
	return "none"
}

func (o NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) AttributeTypes() map[string]attr.Type {

	var algorithmObj *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject

	return map[string]attr.Type{
		"algorithm": types.ObjectType{
			AttrTypes: algorithmObj.AttributeTypes(),
		},
		"key_id": types.Int64Type,
	}
}

func (o NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) AncestorName() string {
	return "symmetric-key"
}

func (o NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) AttributeTypes() map[string]attr.Type {

	var md5Obj *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object

	var sha1Obj *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object
	return map[string]attr.Type{
		"md5": types.ObjectType{
			AttrTypes: md5Obj.AttributeTypes(),
		},
		"sha1": types.ObjectType{
			AttrTypes: sha1Obj.AttributeTypes(),
		},
	}
}

func (o NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) AncestorName() string {
	return "algorithm"
}

func (o NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"authentication_key": types.StringType,
	}
}

func (o NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) AncestorName() string {
	return "md5"
}

func (o NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) EntryName() *string {
	return nil
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"authentication_key": types.StringType,
	}
}

func (o NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) AncestorName() string {
	return "sha1"
}

func (o NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) EntryName() *string {
	return nil
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerObject) AttributeTypes() map[string]attr.Type {

	var authenticationTypeObj *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject

	return map[string]attr.Type{
		"authentication_type": types.ObjectType{
			AttrTypes: authenticationTypeObj.AttributeTypes(),
		},
		"ntp_server_address": types.StringType,
	}
}

func (o NtpSettingsDataSourceNtpServersSecondaryNtpServerObject) AncestorName() string {
	return "secondary-ntp-server"
}

func (o NtpSettingsDataSourceNtpServersSecondaryNtpServerObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject) AttributeTypes() map[string]attr.Type {

	var autokeyObj *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject

	var noneObj *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject

	var symmetricKeyObj *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject
	return map[string]attr.Type{
		"autokey": types.ObjectType{
			AttrTypes: autokeyObj.AttributeTypes(),
		},
		"none": types.ObjectType{
			AttrTypes: noneObj.AttributeTypes(),
		},
		"symmetric_key": types.ObjectType{
			AttrTypes: symmetricKeyObj.AttributeTypes(),
		},
	}
}

func (o NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject) AncestorName() string {
	return "authentication-type"
}

func (o NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject) AncestorName() string {
	return "autokey"
}

func (o NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject) AncestorName() string {
	return "none"
}

func (o NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) AttributeTypes() map[string]attr.Type {

	var algorithmObj *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject

	return map[string]attr.Type{
		"algorithm": types.ObjectType{
			AttrTypes: algorithmObj.AttributeTypes(),
		},
		"key_id": types.Int64Type,
	}
}

func (o NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) AncestorName() string {
	return "symmetric-key"
}

func (o NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) AttributeTypes() map[string]attr.Type {

	var md5Obj *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object

	var sha1Obj *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object
	return map[string]attr.Type{
		"md5": types.ObjectType{
			AttrTypes: md5Obj.AttributeTypes(),
		},
		"sha1": types.ObjectType{
			AttrTypes: sha1Obj.AttributeTypes(),
		},
	}
}

func (o NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) AncestorName() string {
	return "algorithm"
}

func (o NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"authentication_key": types.StringType,
	}
}

func (o NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) AncestorName() string {
	return "md5"
}

func (o NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) EntryName() *string {
	return nil
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"authentication_key": types.StringType,
	}
}

func (o NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) AncestorName() string {
	return "sha1"
}

func (o NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) EntryName() *string {
	return nil
}

func (o *NtpSettingsDataSourceModel) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.Config, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var ntpServers_entry *ntp.NtpServers
	if o.NtpServers != nil {
		if *obj != nil && (*obj).NtpServers != nil {
			ntpServers_entry = (*obj).NtpServers
		} else {
			ntpServers_entry = new(ntp.NtpServers)
		}
		// ModelOrObject: Model
		diags.Append(o.NtpServers.CopyToPango(ctx, ancestors, &ntpServers_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.Config)
	}
	(*obj).NtpServers = ntpServers_entry

	return diags
}
func (o *NtpSettingsDataSourceNtpServersObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServers, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var primaryNtpServer_entry *ntp.NtpServersPrimaryNtpServer
	if o.PrimaryNtpServer != nil {
		if *obj != nil && (*obj).PrimaryNtpServer != nil {
			primaryNtpServer_entry = (*obj).PrimaryNtpServer
		} else {
			primaryNtpServer_entry = new(ntp.NtpServersPrimaryNtpServer)
		}
		// ModelOrObject: Object
		diags.Append(o.PrimaryNtpServer.CopyToPango(ctx, append(ancestors, o), &primaryNtpServer_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var secondaryNtpServer_entry *ntp.NtpServersSecondaryNtpServer
	if o.SecondaryNtpServer != nil {
		if *obj != nil && (*obj).SecondaryNtpServer != nil {
			secondaryNtpServer_entry = (*obj).SecondaryNtpServer
		} else {
			secondaryNtpServer_entry = new(ntp.NtpServersSecondaryNtpServer)
		}
		// ModelOrObject: Object
		diags.Append(o.SecondaryNtpServer.CopyToPango(ctx, append(ancestors, o), &secondaryNtpServer_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServers)
	}
	(*obj).PrimaryNtpServer = primaryNtpServer_entry
	(*obj).SecondaryNtpServer = secondaryNtpServer_entry

	return diags
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersPrimaryNtpServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationType_entry *ntp.NtpServersPrimaryNtpServerAuthenticationType
	if o.AuthenticationType != nil {
		if *obj != nil && (*obj).AuthenticationType != nil {
			authenticationType_entry = (*obj).AuthenticationType
		} else {
			authenticationType_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationType)
		}
		// ModelOrObject: Object
		diags.Append(o.AuthenticationType.CopyToPango(ctx, append(ancestors, o), &authenticationType_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	ntpServerAddress_value := o.NtpServerAddress.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServer)
	}
	(*obj).AuthenticationType = authenticationType_entry
	(*obj).NtpServerAddress = ntpServerAddress_value

	return diags
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersPrimaryNtpServerAuthenticationType, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var autokey_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeAutokey
	if o.Autokey != nil {
		if *obj != nil && (*obj).Autokey != nil {
			autokey_entry = (*obj).Autokey
		} else {
			autokey_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeAutokey)
		}
		// ModelOrObject: Object
		diags.Append(o.Autokey.CopyToPango(ctx, append(ancestors, o), &autokey_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var none_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeNone
	if o.None != nil {
		if *obj != nil && (*obj).None != nil {
			none_entry = (*obj).None
		} else {
			none_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeNone)
		}
		// ModelOrObject: Object
		diags.Append(o.None.CopyToPango(ctx, append(ancestors, o), &none_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var symmetricKey_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey
	if o.SymmetricKey != nil {
		if *obj != nil && (*obj).SymmetricKey != nil {
			symmetricKey_entry = (*obj).SymmetricKey
		} else {
			symmetricKey_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey)
		}
		// ModelOrObject: Object
		diags.Append(o.SymmetricKey.CopyToPango(ctx, append(ancestors, o), &symmetricKey_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationType)
	}
	(*obj).Autokey = autokey_entry
	(*obj).None = none_entry
	(*obj).SymmetricKey = symmetricKey_entry

	return diags
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeAutokey, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeAutokey)
	}

	return diags
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeNone, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeNone)
	}

	return diags
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var algorithm_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm
	if o.Algorithm != nil {
		if *obj != nil && (*obj).Algorithm != nil {
			algorithm_entry = (*obj).Algorithm
		} else {
			algorithm_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm)
		}
		// ModelOrObject: Object
		diags.Append(o.Algorithm.CopyToPango(ctx, append(ancestors, o), &algorithm_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	keyId_value := o.KeyId.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey)
	}
	(*obj).Algorithm = algorithm_entry
	(*obj).KeyId = keyId_value

	return diags
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var md5_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5
	if o.Md5 != nil {
		if *obj != nil && (*obj).Md5 != nil {
			md5_entry = (*obj).Md5
		} else {
			md5_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5)
		}
		// ModelOrObject: Object
		diags.Append(o.Md5.CopyToPango(ctx, append(ancestors, o), &md5_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1
	if o.Sha1 != nil {
		if *obj != nil && (*obj).Sha1 != nil {
			sha1_entry = (*obj).Sha1
		} else {
			sha1_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1)
		}
		// ModelOrObject: Object
		diags.Append(o.Sha1.CopyToPango(ctx, append(ancestors, o), &sha1_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm)
	}
	(*obj).Md5 = md5_entry
	(*obj).Sha1 = sha1_entry

	return diags
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "authentication-key")
	if err != nil {
		diags.AddError("Failed to create encrypted values state key", err.Error())
		return diags
	}

	var authenticationKey_value *string
	err = ev.StorePlaintextValue(valueKey, "solo", o.AuthenticationKey.ValueString())
	if err != nil {
		diags.AddError("Failed to manage encrypted values state", err.Error())
		return diags
	}
	authenticationKey_value = o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "authentication-key")
	if err != nil {
		diags.AddError("Failed to create encrypted values state key", err.Error())
		return diags
	}

	var authenticationKey_value *string
	err = ev.StorePlaintextValue(valueKey, "solo", o.AuthenticationKey.ValueString())
	if err != nil {
		diags.AddError("Failed to manage encrypted values state", err.Error())
		return diags
	}
	authenticationKey_value = o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersSecondaryNtpServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationType_entry *ntp.NtpServersSecondaryNtpServerAuthenticationType
	if o.AuthenticationType != nil {
		if *obj != nil && (*obj).AuthenticationType != nil {
			authenticationType_entry = (*obj).AuthenticationType
		} else {
			authenticationType_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationType)
		}
		// ModelOrObject: Object
		diags.Append(o.AuthenticationType.CopyToPango(ctx, append(ancestors, o), &authenticationType_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	ntpServerAddress_value := o.NtpServerAddress.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServer)
	}
	(*obj).AuthenticationType = authenticationType_entry
	(*obj).NtpServerAddress = ntpServerAddress_value

	return diags
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersSecondaryNtpServerAuthenticationType, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var autokey_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeAutokey
	if o.Autokey != nil {
		if *obj != nil && (*obj).Autokey != nil {
			autokey_entry = (*obj).Autokey
		} else {
			autokey_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeAutokey)
		}
		// ModelOrObject: Object
		diags.Append(o.Autokey.CopyToPango(ctx, append(ancestors, o), &autokey_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var none_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeNone
	if o.None != nil {
		if *obj != nil && (*obj).None != nil {
			none_entry = (*obj).None
		} else {
			none_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeNone)
		}
		// ModelOrObject: Object
		diags.Append(o.None.CopyToPango(ctx, append(ancestors, o), &none_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var symmetricKey_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey
	if o.SymmetricKey != nil {
		if *obj != nil && (*obj).SymmetricKey != nil {
			symmetricKey_entry = (*obj).SymmetricKey
		} else {
			symmetricKey_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey)
		}
		// ModelOrObject: Object
		diags.Append(o.SymmetricKey.CopyToPango(ctx, append(ancestors, o), &symmetricKey_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationType)
	}
	(*obj).Autokey = autokey_entry
	(*obj).None = none_entry
	(*obj).SymmetricKey = symmetricKey_entry

	return diags
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeAutokey, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeAutokey)
	}

	return diags
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeNone, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeNone)
	}

	return diags
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var algorithm_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm
	if o.Algorithm != nil {
		if *obj != nil && (*obj).Algorithm != nil {
			algorithm_entry = (*obj).Algorithm
		} else {
			algorithm_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm)
		}
		// ModelOrObject: Object
		diags.Append(o.Algorithm.CopyToPango(ctx, append(ancestors, o), &algorithm_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	keyId_value := o.KeyId.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey)
	}
	(*obj).Algorithm = algorithm_entry
	(*obj).KeyId = keyId_value

	return diags
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var md5_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5
	if o.Md5 != nil {
		if *obj != nil && (*obj).Md5 != nil {
			md5_entry = (*obj).Md5
		} else {
			md5_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5)
		}
		// ModelOrObject: Object
		diags.Append(o.Md5.CopyToPango(ctx, append(ancestors, o), &md5_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1
	if o.Sha1 != nil {
		if *obj != nil && (*obj).Sha1 != nil {
			sha1_entry = (*obj).Sha1
		} else {
			sha1_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1)
		}
		// ModelOrObject: Object
		diags.Append(o.Sha1.CopyToPango(ctx, append(ancestors, o), &sha1_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm)
	}
	(*obj).Md5 = md5_entry
	(*obj).Sha1 = sha1_entry

	return diags
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "authentication-key")
	if err != nil {
		diags.AddError("Failed to create encrypted values state key", err.Error())
		return diags
	}

	var authenticationKey_value *string
	err = ev.StorePlaintextValue(valueKey, "solo", o.AuthenticationKey.ValueString())
	if err != nil {
		diags.AddError("Failed to manage encrypted values state", err.Error())
		return diags
	}
	authenticationKey_value = o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "authentication-key")
	if err != nil {
		diags.AddError("Failed to create encrypted values state key", err.Error())
		return diags
	}

	var authenticationKey_value *string
	err = ev.StorePlaintextValue(valueKey, "solo", o.AuthenticationKey.ValueString())
	if err != nil {
		diags.AddError("Failed to manage encrypted values state", err.Error())
		return diags
	}
	authenticationKey_value = o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsDataSourceModel) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.Config, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var ntpServers_object *NtpSettingsDataSourceNtpServersObject
	if obj.NtpServers != nil {
		ntpServers_object = new(NtpSettingsDataSourceNtpServersObject)
		diags.Append(ntpServers_object.CopyFromPango(ctx, ancestors, obj.NtpServers, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.NtpServers = ntpServers_object

	return diags
}

func (o *NtpSettingsDataSourceNtpServersObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServers, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var primaryNtpServer_object *NtpSettingsDataSourceNtpServersPrimaryNtpServerObject
	if obj.PrimaryNtpServer != nil {
		primaryNtpServer_object = new(NtpSettingsDataSourceNtpServersPrimaryNtpServerObject)
		diags.Append(primaryNtpServer_object.CopyFromPango(ctx, append(ancestors, o), obj.PrimaryNtpServer, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var secondaryNtpServer_object *NtpSettingsDataSourceNtpServersSecondaryNtpServerObject
	if obj.SecondaryNtpServer != nil {
		secondaryNtpServer_object = new(NtpSettingsDataSourceNtpServersSecondaryNtpServerObject)
		diags.Append(secondaryNtpServer_object.CopyFromPango(ctx, append(ancestors, o), obj.SecondaryNtpServer, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.PrimaryNtpServer = primaryNtpServer_object
	o.SecondaryNtpServer = secondaryNtpServer_object

	return diags
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersPrimaryNtpServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationType_object *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject
	if obj.AuthenticationType != nil {
		authenticationType_object = new(NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject)
		diags.Append(authenticationType_object.CopyFromPango(ctx, append(ancestors, o), obj.AuthenticationType, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var ntpServerAddress_value types.String
	if obj.NtpServerAddress != nil {
		ntpServerAddress_value = types.StringValue(*obj.NtpServerAddress)
	}
	o.AuthenticationType = authenticationType_object
	o.NtpServerAddress = ntpServerAddress_value

	return diags
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersPrimaryNtpServerAuthenticationType, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var autokey_object *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject
	if obj.Autokey != nil {
		autokey_object = new(NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject)
		diags.Append(autokey_object.CopyFromPango(ctx, append(ancestors, o), obj.Autokey, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var none_object *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject
	if obj.None != nil {
		none_object = new(NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject)
		diags.Append(none_object.CopyFromPango(ctx, append(ancestors, o), obj.None, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var symmetricKey_object *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject
	if obj.SymmetricKey != nil {
		symmetricKey_object = new(NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject)
		diags.Append(symmetricKey_object.CopyFromPango(ctx, append(ancestors, o), obj.SymmetricKey, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Autokey = autokey_object
	o.None = none_object
	o.SymmetricKey = symmetricKey_object

	return diags
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeAutokey, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeNone, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var algorithm_object *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject
	if obj.Algorithm != nil {
		algorithm_object = new(NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject)
		diags.Append(algorithm_object.CopyFromPango(ctx, append(ancestors, o), obj.Algorithm, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var keyId_value types.Int64
	if obj.KeyId != nil {
		keyId_value = types.Int64Value(*obj.KeyId)
	}
	o.Algorithm = algorithm_object
	o.KeyId = keyId_value

	return diags
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var md5_object *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object
	if obj.Md5 != nil {
		md5_object = new(NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object)
		diags.Append(md5_object.CopyFromPango(ctx, append(ancestors, o), obj.Md5, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_object *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object
	if obj.Sha1 != nil {
		sha1_object = new(NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object)
		diags.Append(sha1_object.CopyFromPango(ctx, append(ancestors, o), obj.Sha1, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Md5 = md5_object
	o.Sha1 = sha1_object

	return diags
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "authentication-key")
		if err != nil {
			diags.AddError("Failed to create encrypted values state key", err.Error())
			return diags
		}

		if evFromState, found := ev.GetEncryptedValue(valueKey); found && ev.PreferServerState() && *obj.AuthenticationKey != evFromState {
			authenticationKey_value = types.StringPointerValue(obj.AuthenticationKey)
		} else if value, found := ev.GetPlaintextValue(valueKey); found {
			authenticationKey_value = types.StringValue(value)
		} else {
			diags.AddError("Failed to read encrypted values state", fmt.Sprintf("Missing plaintext value for %s", valueKey))
			return diags
		}

		if !ev.PreferServerState() {
			err = ev.StoreEncryptedValue(valueKey, "solo", *obj.AuthenticationKey)
			if err != nil {
				diags.AddError("Failed to store encrypted values state", err.Error())
				return diags
			}
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "authentication-key")
		if err != nil {
			diags.AddError("Failed to create encrypted values state key", err.Error())
			return diags
		}

		if evFromState, found := ev.GetEncryptedValue(valueKey); found && ev.PreferServerState() && *obj.AuthenticationKey != evFromState {
			authenticationKey_value = types.StringPointerValue(obj.AuthenticationKey)
		} else if value, found := ev.GetPlaintextValue(valueKey); found {
			authenticationKey_value = types.StringValue(value)
		} else {
			diags.AddError("Failed to read encrypted values state", fmt.Sprintf("Missing plaintext value for %s", valueKey))
			return diags
		}

		if !ev.PreferServerState() {
			err = ev.StoreEncryptedValue(valueKey, "solo", *obj.AuthenticationKey)
			if err != nil {
				diags.AddError("Failed to store encrypted values state", err.Error())
				return diags
			}
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersSecondaryNtpServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationType_object *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject
	if obj.AuthenticationType != nil {
		authenticationType_object = new(NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject)
		diags.Append(authenticationType_object.CopyFromPango(ctx, append(ancestors, o), obj.AuthenticationType, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var ntpServerAddress_value types.String
	if obj.NtpServerAddress != nil {
		ntpServerAddress_value = types.StringValue(*obj.NtpServerAddress)
	}
	o.AuthenticationType = authenticationType_object
	o.NtpServerAddress = ntpServerAddress_value

	return diags
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersSecondaryNtpServerAuthenticationType, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var autokey_object *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject
	if obj.Autokey != nil {
		autokey_object = new(NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject)
		diags.Append(autokey_object.CopyFromPango(ctx, append(ancestors, o), obj.Autokey, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var none_object *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject
	if obj.None != nil {
		none_object = new(NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject)
		diags.Append(none_object.CopyFromPango(ctx, append(ancestors, o), obj.None, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var symmetricKey_object *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject
	if obj.SymmetricKey != nil {
		symmetricKey_object = new(NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject)
		diags.Append(symmetricKey_object.CopyFromPango(ctx, append(ancestors, o), obj.SymmetricKey, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Autokey = autokey_object
	o.None = none_object
	o.SymmetricKey = symmetricKey_object

	return diags
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeAutokey, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeNone, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var algorithm_object *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject
	if obj.Algorithm != nil {
		algorithm_object = new(NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject)
		diags.Append(algorithm_object.CopyFromPango(ctx, append(ancestors, o), obj.Algorithm, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var keyId_value types.Int64
	if obj.KeyId != nil {
		keyId_value = types.Int64Value(*obj.KeyId)
	}
	o.Algorithm = algorithm_object
	o.KeyId = keyId_value

	return diags
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var md5_object *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object
	if obj.Md5 != nil {
		md5_object = new(NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object)
		diags.Append(md5_object.CopyFromPango(ctx, append(ancestors, o), obj.Md5, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_object *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object
	if obj.Sha1 != nil {
		sha1_object = new(NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object)
		diags.Append(sha1_object.CopyFromPango(ctx, append(ancestors, o), obj.Sha1, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Md5 = md5_object
	o.Sha1 = sha1_object

	return diags
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "authentication-key")
		if err != nil {
			diags.AddError("Failed to create encrypted values state key", err.Error())
			return diags
		}

		if evFromState, found := ev.GetEncryptedValue(valueKey); found && ev.PreferServerState() && *obj.AuthenticationKey != evFromState {
			authenticationKey_value = types.StringPointerValue(obj.AuthenticationKey)
		} else if value, found := ev.GetPlaintextValue(valueKey); found {
			authenticationKey_value = types.StringValue(value)
		} else {
			diags.AddError("Failed to read encrypted values state", fmt.Sprintf("Missing plaintext value for %s", valueKey))
			return diags
		}

		if !ev.PreferServerState() {
			err = ev.StoreEncryptedValue(valueKey, "solo", *obj.AuthenticationKey)
			if err != nil {
				diags.AddError("Failed to store encrypted values state", err.Error())
				return diags
			}
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "authentication-key")
		if err != nil {
			diags.AddError("Failed to create encrypted values state key", err.Error())
			return diags
		}

		if evFromState, found := ev.GetEncryptedValue(valueKey); found && ev.PreferServerState() && *obj.AuthenticationKey != evFromState {
			authenticationKey_value = types.StringPointerValue(obj.AuthenticationKey)
		} else if value, found := ev.GetPlaintextValue(valueKey); found {
			authenticationKey_value = types.StringValue(value)
		} else {
			diags.AddError("Failed to read encrypted values state", fmt.Sprintf("Missing plaintext value for %s", valueKey))
			return diags
		}

		if !ev.PreferServerState() {
			err = ev.StoreEncryptedValue(valueKey, "solo", *obj.AuthenticationKey)
			if err != nil {
				diags.AddError("Failed to store encrypted values state", err.Error())
				return diags
			}
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsDataSourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	return components, nil
}

func NtpSettingsDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": NtpSettingsDataSourceLocationSchema(),

			"ntp_servers": NtpSettingsDataSourceNtpServersSchema(),
		},
	}
}

func (o *NtpSettingsDataSourceModel) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"primary_ntp_server": NtpSettingsDataSourceNtpServersPrimaryNtpServerSchema(),

			"secondary_ntp_server": NtpSettingsDataSourceNtpServersSecondaryNtpServerSchema(),
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersPrimaryNtpServerSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"authentication_type": NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSchema(),

			"ntp_server_address": dsschema.StringAttribute{
				Description: "NTP Server IP Address or Domain Name",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersPrimaryNtpServerSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    false,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"autokey": NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeySchema(),

			"none": NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneSchema(),

			"symmetric_key": NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySchema(),
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"algorithm": NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema(),

			"key_id": dsschema.Int64Attribute{
				Description: "Symmetric Key Number",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"md5": NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema(),

			"sha1": NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema(),
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"authentication_key": dsschema.StringAttribute{
				Description: "Symmetric Key MD5 String",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"authentication_key": dsschema.StringAttribute{
				Description: "Symmetric Key SHA1 Hexadecimal",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSecondaryNtpServerSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"authentication_type": NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSchema(),

			"ntp_server_address": dsschema.StringAttribute{
				Description: "NTP Server IP Address or Domain Name",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSecondaryNtpServerSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"autokey": NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeySchema(),

			"none": NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneSchema(),

			"symmetric_key": NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySchema(),
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"algorithm": NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema(),

			"key_id": dsschema.Int64Attribute{
				Description: "Symmetric Key Number",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"md5": NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema(),

			"sha1": NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema(),
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"authentication_key": dsschema.StringAttribute{
				Description: "Symmetric Key MD5 String",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"authentication_key": dsschema.StringAttribute{
				Description: "Symmetric Key SHA1 Hexadecimal",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceLocationSchema() rsschema.Attribute {
	return NtpSettingsLocationSchema()
}

// Metadata returns the data source type name.
func (d *NtpSettingsDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ntp_settings"
}

// Schema defines the schema for this data source.
func (d *NtpSettingsDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = NtpSettingsDataSourceSchema()
}

// Configure prepares the struct.
func (d *NtpSettingsDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	d.client = providerData.Client
	specifier, _, err := ntp.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	d.manager = sdkmanager.NewConfigObjectManager(d.client, ntp.NewService(d.client), specifier)
}
func (o *NtpSettingsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state NtpSettingsDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location ntp.Location

	{
		var terraformLocation NtpSettingsLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.System.IsNull() {
			location.System = &ntp.SystemLocation{}
			var innerLocation NtpSettingsSystemLocation
			resp.Diagnostics.Append(terraformLocation.System.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.System.Device = innerLocation.Device.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &ntp.TemplateLocation{}
			var innerLocation NtpSettingsTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &ntp.TemplateStackLocation{}
			var innerLocation NtpSettingsTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_ntp_settings_resource",
		"function":      "Read",
	})

	components, err := savestate.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	object, err := o.manager.Read(ctx, location, components)
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, nil, object, ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &NtpSettingsResource{}
	_ resource.ResourceWithConfigure   = &NtpSettingsResource{}
	_ resource.ResourceWithImportState = &NtpSettingsResource{}
)

func NewNtpSettingsResource() resource.Resource {
	return &NtpSettingsResource{}
}

type NtpSettingsResource struct {
	client  *pango.Client
	manager *sdkmanager.ConfigObjectManager[*ntp.Config, ntp.Location, *ntp.Service]
}

func NtpSettingsResourceLocationSchema() rsschema.Attribute {
	return NtpSettingsLocationSchema()
}

type NtpSettingsResourceModel struct {
	Location   types.Object                         `tfsdk:"location"`
	NtpServers *NtpSettingsResourceNtpServersObject `tfsdk:"ntp_servers"`
}
type NtpSettingsResourceNtpServersObject struct {
	PrimaryNtpServer   *NtpSettingsResourceNtpServersPrimaryNtpServerObject   `tfsdk:"primary_ntp_server"`
	SecondaryNtpServer *NtpSettingsResourceNtpServersSecondaryNtpServerObject `tfsdk:"secondary_ntp_server"`
}
type NtpSettingsResourceNtpServersPrimaryNtpServerObject struct {
	AuthenticationType *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject `tfsdk:"authentication_type"`
	NtpServerAddress   types.String                                                           `tfsdk:"ntp_server_address"`
}
type NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject struct {
	Autokey      *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject      `tfsdk:"autokey"`
	None         *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject         `tfsdk:"none"`
	SymmetricKey *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject `tfsdk:"symmetric_key"`
}
type NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject struct {
}
type NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject struct {
}
type NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject struct {
	Algorithm *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject `tfsdk:"algorithm"`
	KeyId     types.Int64                                                                                 `tfsdk:"key_id"`
}
type NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject struct {
	Md5  *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object  `tfsdk:"md5"`
	Sha1 *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object `tfsdk:"sha1"`
}
type NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}
type NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}
type NtpSettingsResourceNtpServersSecondaryNtpServerObject struct {
	AuthenticationType *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject `tfsdk:"authentication_type"`
	NtpServerAddress   types.String                                                             `tfsdk:"ntp_server_address"`
}
type NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject struct {
	Autokey      *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject      `tfsdk:"autokey"`
	None         *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject         `tfsdk:"none"`
	SymmetricKey *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject `tfsdk:"symmetric_key"`
}
type NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject struct {
}
type NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject struct {
}
type NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject struct {
	Algorithm *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject `tfsdk:"algorithm"`
	KeyId     types.Int64                                                                                   `tfsdk:"key_id"`
}
type NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject struct {
	Md5  *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object  `tfsdk:"md5"`
	Sha1 *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object `tfsdk:"sha1"`
}
type NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}
type NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}

func (r *NtpSettingsResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func NtpSettingsResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": NtpSettingsResourceLocationSchema(),

			"ntp_servers": NtpSettingsResourceNtpServersSchema(),
		},
	}
}

func (o *NtpSettingsResourceModel) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"primary_ntp_server": NtpSettingsResourceNtpServersPrimaryNtpServerSchema(),

			"secondary_ntp_server": NtpSettingsResourceNtpServersSecondaryNtpServerSchema(),
		},
	}
}

func (o *NtpSettingsResourceNtpServersObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersPrimaryNtpServerSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"authentication_type": NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSchema(),

			"ntp_server_address": rsschema.StringAttribute{
				Description: "NTP Server IP Address or Domain Name",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersPrimaryNtpServerSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    true,
		Computed:    false,
		Optional:    false,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"autokey": NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeySchema(),

			"none": NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneSchema(),

			"symmetric_key": NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySchema(),
		},
	}
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"algorithm": NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema(),

			"key_id": rsschema.Int64Attribute{
				Description: "Symmetric Key Number",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"md5": NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema(),

			"sha1": NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema(),
		},
	}
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"authentication_key": rsschema.StringAttribute{
				Description: "Symmetric Key MD5 String",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},
		},
	}
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"authentication_key": rsschema.StringAttribute{
				Description: "Symmetric Key SHA1 Hexadecimal",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},
		},
	}
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSecondaryNtpServerSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"authentication_type": NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSchema(),

			"ntp_server_address": rsschema.StringAttribute{
				Description: "NTP Server IP Address or Domain Name",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSecondaryNtpServerSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"autokey": NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeySchema(),

			"none": NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneSchema(),

			"symmetric_key": NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySchema(),
		},
	}
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"algorithm": NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema(),

			"key_id": rsschema.Int64Attribute{
				Description: "Symmetric Key Number",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"md5": NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema(),

			"sha1": NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema(),
		},
	}
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"authentication_key": rsschema.StringAttribute{
				Description: "Symmetric Key MD5 String",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},
		},
	}
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"authentication_key": rsschema.StringAttribute{
				Description: "Symmetric Key SHA1 Hexadecimal",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},
		},
	}
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *NtpSettingsResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ntp_settings"
}

func (r *NtpSettingsResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = NtpSettingsResourceSchema()
}

// </ResourceSchema>

func (r *NtpSettingsResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	r.client = providerData.Client
	specifier, _, err := ntp.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	r.manager = sdkmanager.NewConfigObjectManager(r.client, ntp.NewService(r.client), specifier)
}

func (o *NtpSettingsResourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj NtpSettingsLocation

	var ntpServersObj *NtpSettingsResourceNtpServersObject
	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"ntp_servers": types.ObjectType{
			AttrTypes: ntpServersObj.AttributeTypes(),
		},
	}
}

func (o NtpSettingsResourceModel) AncestorName() string {
	return ""
}

func (o NtpSettingsResourceModel) EntryName() *string {
	return nil
}
func (o *NtpSettingsResourceNtpServersObject) AttributeTypes() map[string]attr.Type {

	var primaryNtpServerObj *NtpSettingsResourceNtpServersPrimaryNtpServerObject

	var secondaryNtpServerObj *NtpSettingsResourceNtpServersSecondaryNtpServerObject
	return map[string]attr.Type{
		"primary_ntp_server": types.ObjectType{
			AttrTypes: primaryNtpServerObj.AttributeTypes(),
		},
		"secondary_ntp_server": types.ObjectType{
			AttrTypes: secondaryNtpServerObj.AttributeTypes(),
		},
	}
}

func (o NtpSettingsResourceNtpServersObject) AncestorName() string {
	return "ntp-servers"
}

func (o NtpSettingsResourceNtpServersObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerObject) AttributeTypes() map[string]attr.Type {

	var authenticationTypeObj *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject

	return map[string]attr.Type{
		"authentication_type": types.ObjectType{
			AttrTypes: authenticationTypeObj.AttributeTypes(),
		},
		"ntp_server_address": types.StringType,
	}
}

func (o NtpSettingsResourceNtpServersPrimaryNtpServerObject) AncestorName() string {
	return "primary-ntp-server"
}

func (o NtpSettingsResourceNtpServersPrimaryNtpServerObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject) AttributeTypes() map[string]attr.Type {

	var autokeyObj *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject

	var noneObj *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject

	var symmetricKeyObj *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject
	return map[string]attr.Type{
		"autokey": types.ObjectType{
			AttrTypes: autokeyObj.AttributeTypes(),
		},
		"none": types.ObjectType{
			AttrTypes: noneObj.AttributeTypes(),
		},
		"symmetric_key": types.ObjectType{
			AttrTypes: symmetricKeyObj.AttributeTypes(),
		},
	}
}

func (o NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject) AncestorName() string {
	return "authentication-type"
}

func (o NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject) AncestorName() string {
	return "autokey"
}

func (o NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject) AncestorName() string {
	return "none"
}

func (o NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) AttributeTypes() map[string]attr.Type {

	var algorithmObj *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject

	return map[string]attr.Type{
		"algorithm": types.ObjectType{
			AttrTypes: algorithmObj.AttributeTypes(),
		},
		"key_id": types.Int64Type,
	}
}

func (o NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) AncestorName() string {
	return "symmetric-key"
}

func (o NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) AttributeTypes() map[string]attr.Type {

	var md5Obj *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object

	var sha1Obj *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object
	return map[string]attr.Type{
		"md5": types.ObjectType{
			AttrTypes: md5Obj.AttributeTypes(),
		},
		"sha1": types.ObjectType{
			AttrTypes: sha1Obj.AttributeTypes(),
		},
	}
}

func (o NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) AncestorName() string {
	return "algorithm"
}

func (o NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"authentication_key": types.StringType,
	}
}

func (o NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) AncestorName() string {
	return "md5"
}

func (o NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) EntryName() *string {
	return nil
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"authentication_key": types.StringType,
	}
}

func (o NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) AncestorName() string {
	return "sha1"
}

func (o NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) EntryName() *string {
	return nil
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerObject) AttributeTypes() map[string]attr.Type {

	var authenticationTypeObj *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject

	return map[string]attr.Type{
		"authentication_type": types.ObjectType{
			AttrTypes: authenticationTypeObj.AttributeTypes(),
		},
		"ntp_server_address": types.StringType,
	}
}

func (o NtpSettingsResourceNtpServersSecondaryNtpServerObject) AncestorName() string {
	return "secondary-ntp-server"
}

func (o NtpSettingsResourceNtpServersSecondaryNtpServerObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject) AttributeTypes() map[string]attr.Type {

	var autokeyObj *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject

	var noneObj *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject

	var symmetricKeyObj *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject
	return map[string]attr.Type{
		"autokey": types.ObjectType{
			AttrTypes: autokeyObj.AttributeTypes(),
		},
		"none": types.ObjectType{
			AttrTypes: noneObj.AttributeTypes(),
		},
		"symmetric_key": types.ObjectType{
			AttrTypes: symmetricKeyObj.AttributeTypes(),
		},
	}
}

func (o NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject) AncestorName() string {
	return "authentication-type"
}

func (o NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject) AncestorName() string {
	return "autokey"
}

func (o NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject) AncestorName() string {
	return "none"
}

func (o NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) AttributeTypes() map[string]attr.Type {

	var algorithmObj *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject

	return map[string]attr.Type{
		"algorithm": types.ObjectType{
			AttrTypes: algorithmObj.AttributeTypes(),
		},
		"key_id": types.Int64Type,
	}
}

func (o NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) AncestorName() string {
	return "symmetric-key"
}

func (o NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) AttributeTypes() map[string]attr.Type {

	var md5Obj *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object

	var sha1Obj *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object
	return map[string]attr.Type{
		"md5": types.ObjectType{
			AttrTypes: md5Obj.AttributeTypes(),
		},
		"sha1": types.ObjectType{
			AttrTypes: sha1Obj.AttributeTypes(),
		},
	}
}

func (o NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) AncestorName() string {
	return "algorithm"
}

func (o NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) EntryName() *string {
	return nil
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"authentication_key": types.StringType,
	}
}

func (o NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) AncestorName() string {
	return "md5"
}

func (o NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) EntryName() *string {
	return nil
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"authentication_key": types.StringType,
	}
}

func (o NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) AncestorName() string {
	return "sha1"
}

func (o NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) EntryName() *string {
	return nil
}

func (o *NtpSettingsResourceModel) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.Config, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var ntpServers_entry *ntp.NtpServers
	if o.NtpServers != nil {
		if *obj != nil && (*obj).NtpServers != nil {
			ntpServers_entry = (*obj).NtpServers
		} else {
			ntpServers_entry = new(ntp.NtpServers)
		}
		// ModelOrObject: Model
		diags.Append(o.NtpServers.CopyToPango(ctx, ancestors, &ntpServers_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.Config)
	}
	(*obj).NtpServers = ntpServers_entry

	return diags
}
func (o *NtpSettingsResourceNtpServersObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServers, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var primaryNtpServer_entry *ntp.NtpServersPrimaryNtpServer
	if o.PrimaryNtpServer != nil {
		if *obj != nil && (*obj).PrimaryNtpServer != nil {
			primaryNtpServer_entry = (*obj).PrimaryNtpServer
		} else {
			primaryNtpServer_entry = new(ntp.NtpServersPrimaryNtpServer)
		}
		// ModelOrObject: Object
		diags.Append(o.PrimaryNtpServer.CopyToPango(ctx, append(ancestors, o), &primaryNtpServer_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var secondaryNtpServer_entry *ntp.NtpServersSecondaryNtpServer
	if o.SecondaryNtpServer != nil {
		if *obj != nil && (*obj).SecondaryNtpServer != nil {
			secondaryNtpServer_entry = (*obj).SecondaryNtpServer
		} else {
			secondaryNtpServer_entry = new(ntp.NtpServersSecondaryNtpServer)
		}
		// ModelOrObject: Object
		diags.Append(o.SecondaryNtpServer.CopyToPango(ctx, append(ancestors, o), &secondaryNtpServer_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServers)
	}
	(*obj).PrimaryNtpServer = primaryNtpServer_entry
	(*obj).SecondaryNtpServer = secondaryNtpServer_entry

	return diags
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersPrimaryNtpServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationType_entry *ntp.NtpServersPrimaryNtpServerAuthenticationType
	if o.AuthenticationType != nil {
		if *obj != nil && (*obj).AuthenticationType != nil {
			authenticationType_entry = (*obj).AuthenticationType
		} else {
			authenticationType_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationType)
		}
		// ModelOrObject: Object
		diags.Append(o.AuthenticationType.CopyToPango(ctx, append(ancestors, o), &authenticationType_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	ntpServerAddress_value := o.NtpServerAddress.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServer)
	}
	(*obj).AuthenticationType = authenticationType_entry
	(*obj).NtpServerAddress = ntpServerAddress_value

	return diags
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersPrimaryNtpServerAuthenticationType, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var autokey_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeAutokey
	if o.Autokey != nil {
		if *obj != nil && (*obj).Autokey != nil {
			autokey_entry = (*obj).Autokey
		} else {
			autokey_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeAutokey)
		}
		// ModelOrObject: Object
		diags.Append(o.Autokey.CopyToPango(ctx, append(ancestors, o), &autokey_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var none_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeNone
	if o.None != nil {
		if *obj != nil && (*obj).None != nil {
			none_entry = (*obj).None
		} else {
			none_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeNone)
		}
		// ModelOrObject: Object
		diags.Append(o.None.CopyToPango(ctx, append(ancestors, o), &none_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var symmetricKey_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey
	if o.SymmetricKey != nil {
		if *obj != nil && (*obj).SymmetricKey != nil {
			symmetricKey_entry = (*obj).SymmetricKey
		} else {
			symmetricKey_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey)
		}
		// ModelOrObject: Object
		diags.Append(o.SymmetricKey.CopyToPango(ctx, append(ancestors, o), &symmetricKey_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationType)
	}
	(*obj).Autokey = autokey_entry
	(*obj).None = none_entry
	(*obj).SymmetricKey = symmetricKey_entry

	return diags
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeAutokey, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeAutokey)
	}

	return diags
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeNone, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeNone)
	}

	return diags
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var algorithm_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm
	if o.Algorithm != nil {
		if *obj != nil && (*obj).Algorithm != nil {
			algorithm_entry = (*obj).Algorithm
		} else {
			algorithm_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm)
		}
		// ModelOrObject: Object
		diags.Append(o.Algorithm.CopyToPango(ctx, append(ancestors, o), &algorithm_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	keyId_value := o.KeyId.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey)
	}
	(*obj).Algorithm = algorithm_entry
	(*obj).KeyId = keyId_value

	return diags
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var md5_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5
	if o.Md5 != nil {
		if *obj != nil && (*obj).Md5 != nil {
			md5_entry = (*obj).Md5
		} else {
			md5_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5)
		}
		// ModelOrObject: Object
		diags.Append(o.Md5.CopyToPango(ctx, append(ancestors, o), &md5_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1
	if o.Sha1 != nil {
		if *obj != nil && (*obj).Sha1 != nil {
			sha1_entry = (*obj).Sha1
		} else {
			sha1_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1)
		}
		// ModelOrObject: Object
		diags.Append(o.Sha1.CopyToPango(ctx, append(ancestors, o), &sha1_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm)
	}
	(*obj).Md5 = md5_entry
	(*obj).Sha1 = sha1_entry

	return diags
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "authentication-key")
	if err != nil {
		diags.AddError("Failed to create encrypted values state key", err.Error())
		return diags
	}

	var authenticationKey_value *string
	err = ev.StorePlaintextValue(valueKey, "solo", o.AuthenticationKey.ValueString())
	if err != nil {
		diags.AddError("Failed to manage encrypted values state", err.Error())
		return diags
	}
	authenticationKey_value = o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "authentication-key")
	if err != nil {
		diags.AddError("Failed to create encrypted values state key", err.Error())
		return diags
	}

	var authenticationKey_value *string
	err = ev.StorePlaintextValue(valueKey, "solo", o.AuthenticationKey.ValueString())
	if err != nil {
		diags.AddError("Failed to manage encrypted values state", err.Error())
		return diags
	}
	authenticationKey_value = o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersSecondaryNtpServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationType_entry *ntp.NtpServersSecondaryNtpServerAuthenticationType
	if o.AuthenticationType != nil {
		if *obj != nil && (*obj).AuthenticationType != nil {
			authenticationType_entry = (*obj).AuthenticationType
		} else {
			authenticationType_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationType)
		}
		// ModelOrObject: Object
		diags.Append(o.AuthenticationType.CopyToPango(ctx, append(ancestors, o), &authenticationType_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	ntpServerAddress_value := o.NtpServerAddress.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServer)
	}
	(*obj).AuthenticationType = authenticationType_entry
	(*obj).NtpServerAddress = ntpServerAddress_value

	return diags
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersSecondaryNtpServerAuthenticationType, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var autokey_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeAutokey
	if o.Autokey != nil {
		if *obj != nil && (*obj).Autokey != nil {
			autokey_entry = (*obj).Autokey
		} else {
			autokey_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeAutokey)
		}
		// ModelOrObject: Object
		diags.Append(o.Autokey.CopyToPango(ctx, append(ancestors, o), &autokey_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var none_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeNone
	if o.None != nil {
		if *obj != nil && (*obj).None != nil {
			none_entry = (*obj).None
		} else {
			none_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeNone)
		}
		// ModelOrObject: Object
		diags.Append(o.None.CopyToPango(ctx, append(ancestors, o), &none_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var symmetricKey_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey
	if o.SymmetricKey != nil {
		if *obj != nil && (*obj).SymmetricKey != nil {
			symmetricKey_entry = (*obj).SymmetricKey
		} else {
			symmetricKey_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey)
		}
		// ModelOrObject: Object
		diags.Append(o.SymmetricKey.CopyToPango(ctx, append(ancestors, o), &symmetricKey_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationType)
	}
	(*obj).Autokey = autokey_entry
	(*obj).None = none_entry
	(*obj).SymmetricKey = symmetricKey_entry

	return diags
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeAutokey, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeAutokey)
	}

	return diags
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeNone, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeNone)
	}

	return diags
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var algorithm_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm
	if o.Algorithm != nil {
		if *obj != nil && (*obj).Algorithm != nil {
			algorithm_entry = (*obj).Algorithm
		} else {
			algorithm_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm)
		}
		// ModelOrObject: Object
		diags.Append(o.Algorithm.CopyToPango(ctx, append(ancestors, o), &algorithm_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	keyId_value := o.KeyId.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey)
	}
	(*obj).Algorithm = algorithm_entry
	(*obj).KeyId = keyId_value

	return diags
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var md5_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5
	if o.Md5 != nil {
		if *obj != nil && (*obj).Md5 != nil {
			md5_entry = (*obj).Md5
		} else {
			md5_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5)
		}
		// ModelOrObject: Object
		diags.Append(o.Md5.CopyToPango(ctx, append(ancestors, o), &md5_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1
	if o.Sha1 != nil {
		if *obj != nil && (*obj).Sha1 != nil {
			sha1_entry = (*obj).Sha1
		} else {
			sha1_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1)
		}
		// ModelOrObject: Object
		diags.Append(o.Sha1.CopyToPango(ctx, append(ancestors, o), &sha1_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm)
	}
	(*obj).Md5 = md5_entry
	(*obj).Sha1 = sha1_entry

	return diags
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "authentication-key")
	if err != nil {
		diags.AddError("Failed to create encrypted values state key", err.Error())
		return diags
	}

	var authenticationKey_value *string
	err = ev.StorePlaintextValue(valueKey, "solo", o.AuthenticationKey.ValueString())
	if err != nil {
		diags.AddError("Failed to manage encrypted values state", err.Error())
		return diags
	}
	authenticationKey_value = o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "authentication-key")
	if err != nil {
		diags.AddError("Failed to create encrypted values state key", err.Error())
		return diags
	}

	var authenticationKey_value *string
	err = ev.StorePlaintextValue(valueKey, "solo", o.AuthenticationKey.ValueString())
	if err != nil {
		diags.AddError("Failed to manage encrypted values state", err.Error())
		return diags
	}
	authenticationKey_value = o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsResourceModel) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.Config, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var ntpServers_object *NtpSettingsResourceNtpServersObject
	if obj.NtpServers != nil {
		ntpServers_object = new(NtpSettingsResourceNtpServersObject)
		diags.Append(ntpServers_object.CopyFromPango(ctx, ancestors, obj.NtpServers, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.NtpServers = ntpServers_object

	return diags
}

func (o *NtpSettingsResourceNtpServersObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServers, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var primaryNtpServer_object *NtpSettingsResourceNtpServersPrimaryNtpServerObject
	if obj.PrimaryNtpServer != nil {
		primaryNtpServer_object = new(NtpSettingsResourceNtpServersPrimaryNtpServerObject)
		diags.Append(primaryNtpServer_object.CopyFromPango(ctx, append(ancestors, o), obj.PrimaryNtpServer, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var secondaryNtpServer_object *NtpSettingsResourceNtpServersSecondaryNtpServerObject
	if obj.SecondaryNtpServer != nil {
		secondaryNtpServer_object = new(NtpSettingsResourceNtpServersSecondaryNtpServerObject)
		diags.Append(secondaryNtpServer_object.CopyFromPango(ctx, append(ancestors, o), obj.SecondaryNtpServer, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.PrimaryNtpServer = primaryNtpServer_object
	o.SecondaryNtpServer = secondaryNtpServer_object

	return diags
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersPrimaryNtpServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationType_object *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject
	if obj.AuthenticationType != nil {
		authenticationType_object = new(NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject)
		diags.Append(authenticationType_object.CopyFromPango(ctx, append(ancestors, o), obj.AuthenticationType, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var ntpServerAddress_value types.String
	if obj.NtpServerAddress != nil {
		ntpServerAddress_value = types.StringValue(*obj.NtpServerAddress)
	}
	o.AuthenticationType = authenticationType_object
	o.NtpServerAddress = ntpServerAddress_value

	return diags
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersPrimaryNtpServerAuthenticationType, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var autokey_object *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject
	if obj.Autokey != nil {
		autokey_object = new(NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject)
		diags.Append(autokey_object.CopyFromPango(ctx, append(ancestors, o), obj.Autokey, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var none_object *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject
	if obj.None != nil {
		none_object = new(NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject)
		diags.Append(none_object.CopyFromPango(ctx, append(ancestors, o), obj.None, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var symmetricKey_object *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject
	if obj.SymmetricKey != nil {
		symmetricKey_object = new(NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject)
		diags.Append(symmetricKey_object.CopyFromPango(ctx, append(ancestors, o), obj.SymmetricKey, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Autokey = autokey_object
	o.None = none_object
	o.SymmetricKey = symmetricKey_object

	return diags
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeAutokey, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeNone, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var algorithm_object *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject
	if obj.Algorithm != nil {
		algorithm_object = new(NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject)
		diags.Append(algorithm_object.CopyFromPango(ctx, append(ancestors, o), obj.Algorithm, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var keyId_value types.Int64
	if obj.KeyId != nil {
		keyId_value = types.Int64Value(*obj.KeyId)
	}
	o.Algorithm = algorithm_object
	o.KeyId = keyId_value

	return diags
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var md5_object *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object
	if obj.Md5 != nil {
		md5_object = new(NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object)
		diags.Append(md5_object.CopyFromPango(ctx, append(ancestors, o), obj.Md5, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_object *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object
	if obj.Sha1 != nil {
		sha1_object = new(NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object)
		diags.Append(sha1_object.CopyFromPango(ctx, append(ancestors, o), obj.Sha1, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Md5 = md5_object
	o.Sha1 = sha1_object

	return diags
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "authentication-key")
		if err != nil {
			diags.AddError("Failed to create encrypted values state key", err.Error())
			return diags
		}

		if evFromState, found := ev.GetEncryptedValue(valueKey); found && ev.PreferServerState() && *obj.AuthenticationKey != evFromState {
			authenticationKey_value = types.StringPointerValue(obj.AuthenticationKey)
		} else if value, found := ev.GetPlaintextValue(valueKey); found {
			authenticationKey_value = types.StringValue(value)
		} else {
			diags.AddError("Failed to read encrypted values state", fmt.Sprintf("Missing plaintext value for %s", valueKey))
			return diags
		}

		if !ev.PreferServerState() {
			err = ev.StoreEncryptedValue(valueKey, "solo", *obj.AuthenticationKey)
			if err != nil {
				diags.AddError("Failed to store encrypted values state", err.Error())
				return diags
			}
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "authentication-key")
		if err != nil {
			diags.AddError("Failed to create encrypted values state key", err.Error())
			return diags
		}

		if evFromState, found := ev.GetEncryptedValue(valueKey); found && ev.PreferServerState() && *obj.AuthenticationKey != evFromState {
			authenticationKey_value = types.StringPointerValue(obj.AuthenticationKey)
		} else if value, found := ev.GetPlaintextValue(valueKey); found {
			authenticationKey_value = types.StringValue(value)
		} else {
			diags.AddError("Failed to read encrypted values state", fmt.Sprintf("Missing plaintext value for %s", valueKey))
			return diags
		}

		if !ev.PreferServerState() {
			err = ev.StoreEncryptedValue(valueKey, "solo", *obj.AuthenticationKey)
			if err != nil {
				diags.AddError("Failed to store encrypted values state", err.Error())
				return diags
			}
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersSecondaryNtpServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationType_object *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject
	if obj.AuthenticationType != nil {
		authenticationType_object = new(NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject)
		diags.Append(authenticationType_object.CopyFromPango(ctx, append(ancestors, o), obj.AuthenticationType, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var ntpServerAddress_value types.String
	if obj.NtpServerAddress != nil {
		ntpServerAddress_value = types.StringValue(*obj.NtpServerAddress)
	}
	o.AuthenticationType = authenticationType_object
	o.NtpServerAddress = ntpServerAddress_value

	return diags
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersSecondaryNtpServerAuthenticationType, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var autokey_object *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject
	if obj.Autokey != nil {
		autokey_object = new(NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject)
		diags.Append(autokey_object.CopyFromPango(ctx, append(ancestors, o), obj.Autokey, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var none_object *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject
	if obj.None != nil {
		none_object = new(NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject)
		diags.Append(none_object.CopyFromPango(ctx, append(ancestors, o), obj.None, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var symmetricKey_object *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject
	if obj.SymmetricKey != nil {
		symmetricKey_object = new(NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject)
		diags.Append(symmetricKey_object.CopyFromPango(ctx, append(ancestors, o), obj.SymmetricKey, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Autokey = autokey_object
	o.None = none_object
	o.SymmetricKey = symmetricKey_object

	return diags
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeAutokey, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeNone, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var algorithm_object *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject
	if obj.Algorithm != nil {
		algorithm_object = new(NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject)
		diags.Append(algorithm_object.CopyFromPango(ctx, append(ancestors, o), obj.Algorithm, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var keyId_value types.Int64
	if obj.KeyId != nil {
		keyId_value = types.Int64Value(*obj.KeyId)
	}
	o.Algorithm = algorithm_object
	o.KeyId = keyId_value

	return diags
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var md5_object *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object
	if obj.Md5 != nil {
		md5_object = new(NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object)
		diags.Append(md5_object.CopyFromPango(ctx, append(ancestors, o), obj.Md5, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_object *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object
	if obj.Sha1 != nil {
		sha1_object = new(NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object)
		diags.Append(sha1_object.CopyFromPango(ctx, append(ancestors, o), obj.Sha1, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Md5 = md5_object
	o.Sha1 = sha1_object

	return diags
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "authentication-key")
		if err != nil {
			diags.AddError("Failed to create encrypted values state key", err.Error())
			return diags
		}

		if evFromState, found := ev.GetEncryptedValue(valueKey); found && ev.PreferServerState() && *obj.AuthenticationKey != evFromState {
			authenticationKey_value = types.StringPointerValue(obj.AuthenticationKey)
		} else if value, found := ev.GetPlaintextValue(valueKey); found {
			authenticationKey_value = types.StringValue(value)
		} else {
			diags.AddError("Failed to read encrypted values state", fmt.Sprintf("Missing plaintext value for %s", valueKey))
			return diags
		}

		if !ev.PreferServerState() {
			err = ev.StoreEncryptedValue(valueKey, "solo", *obj.AuthenticationKey)
			if err != nil {
				diags.AddError("Failed to store encrypted values state", err.Error())
				return diags
			}
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "authentication-key")
		if err != nil {
			diags.AddError("Failed to create encrypted values state key", err.Error())
			return diags
		}

		if evFromState, found := ev.GetEncryptedValue(valueKey); found && ev.PreferServerState() && *obj.AuthenticationKey != evFromState {
			authenticationKey_value = types.StringPointerValue(obj.AuthenticationKey)
		} else if value, found := ev.GetPlaintextValue(valueKey); found {
			authenticationKey_value = types.StringValue(value)
		} else {
			diags.AddError("Failed to read encrypted values state", fmt.Sprintf("Missing plaintext value for %s", valueKey))
			return diags
		}

		if !ev.PreferServerState() {
			err = ev.StoreEncryptedValue(valueKey, "solo", *obj.AuthenticationKey)
			if err != nil {
				diags.AddError("Failed to store encrypted values state", err.Error())
				return diags
			}
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsResourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	return components, nil
}

func (r *NtpSettingsResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state NtpSettingsResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_ntp_settings_resource",
		"function":      "Create",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	// Determine the location.

	var location ntp.Location

	{
		var terraformLocation NtpSettingsLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.System.IsNull() {
			location.System = &ntp.SystemLocation{}
			var innerLocation NtpSettingsSystemLocation
			resp.Diagnostics.Append(terraformLocation.System.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.System.Device = innerLocation.Device.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &ntp.TemplateLocation{}
			var innerLocation NtpSettingsTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &ntp.TemplateStackLocation{}
			var innerLocation NtpSettingsTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	if err := location.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *ntp.Config
	resp.Diagnostics.Append(state.CopyToPango(ctx, nil, &obj, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	created, err := r.manager.Create(ctx, location, components, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	resp.Diagnostics.Append(state.CopyFromPango(ctx, nil, created, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
func (o *NtpSettingsResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state NtpSettingsResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	encryptedValues, diags := req.Private.GetKey(ctx, "encrypted_values")
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location ntp.Location

	{
		var terraformLocation NtpSettingsLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.System.IsNull() {
			location.System = &ntp.SystemLocation{}
			var innerLocation NtpSettingsSystemLocation
			resp.Diagnostics.Append(terraformLocation.System.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.System.Device = innerLocation.Device.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &ntp.TemplateLocation{}
			var innerLocation NtpSettingsTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &ntp.TemplateStackLocation{}
			var innerLocation NtpSettingsTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_ntp_settings_resource",
		"function":      "Read",
	})

	components, err := savestate.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	object, err := o.manager.Read(ctx, location, components)
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, nil, object, ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *NtpSettingsResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state NtpSettingsResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	encryptedValues, diags := req.Private.GetKey(ctx, "encrypted_values")
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location ntp.Location

	{
		var terraformLocation NtpSettingsLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.System.IsNull() {
			location.System = &ntp.SystemLocation{}
			var innerLocation NtpSettingsSystemLocation
			resp.Diagnostics.Append(terraformLocation.System.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.System.Device = innerLocation.Device.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &ntp.TemplateLocation{}
			var innerLocation NtpSettingsTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &ntp.TemplateStackLocation{}
			var innerLocation NtpSettingsTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_ntp_settings_resource",
		"function":      "Update",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	obj, err := r.manager.Read(ctx, location, components)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, nil, &obj, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	components, err = plan.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}

	updated, err := r.manager.Update(ctx, location, components, obj)

	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	copy_diags := state.CopyFromPango(ctx, nil, updated, ev)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *NtpSettingsResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state NtpSettingsResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_ntp_settings_resource",
		"function":      "Delete",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var location ntp.Location

	{
		var terraformLocation NtpSettingsLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.System.IsNull() {
			location.System = &ntp.SystemLocation{}
			var innerLocation NtpSettingsSystemLocation
			resp.Diagnostics.Append(terraformLocation.System.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.System.Device = innerLocation.Device.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &ntp.TemplateLocation{}
			var innerLocation NtpSettingsTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &ntp.TemplateStackLocation{}
			var innerLocation NtpSettingsTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}

	existing, err := r.manager.Read(ctx, location, components)
	if err != nil {
		resp.Diagnostics.AddError("Error while deleting resource", err.Error())
		return
	}

	var obj ntp.Config
	obj.Misc = existing.Misc

	err = r.manager.Delete(ctx, location, &obj)
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
		return
	}

}

func (r *NtpSettingsResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

}

type NtpSettingsSystemLocation struct {
	Device types.String `tfsdk:"device"`
}
type NtpSettingsTemplateLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type NtpSettingsTemplateStackLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type NtpSettingsLocation struct {
	System        types.Object `tfsdk:"system"`
	Template      types.Object `tfsdk:"template"`
	TemplateStack types.Object `tfsdk:"template_stack"`
}

func NtpSettingsLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"system": rsschema.SingleNestedAttribute{
				Description: "System-level configuration",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"device": rsschema.StringAttribute{
						Description: "Device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("system"),
						path.MatchRelative().AtParent().AtName("template"),
						path.MatchRelative().AtParent().AtName("template_stack"),
					}...),
				},
			},
			"template": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Specific Panorama template",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_stack": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template stack",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Specific Panorama template stack",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o NtpSettingsSystemLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Device *string `json:"device,omitempty"`
	}

	obj := shadow{
		Device: o.Device.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *NtpSettingsSystemLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Device *string `json:"device,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.Device = types.StringPointerValue(shadow.Device)

	return nil
}
func (o NtpSettingsTemplateLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *NtpSettingsTemplateLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o NtpSettingsTemplateStackLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *NtpSettingsTemplateStackLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o NtpSettingsLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		System        *NtpSettingsSystemLocation        `json:"system,omitempty"`
		Template      *NtpSettingsTemplateLocation      `json:"template,omitempty"`
		TemplateStack *NtpSettingsTemplateStackLocation `json:"template_stack,omitempty"`
	}
	var system_object *NtpSettingsSystemLocation
	{
		diags := o.System.As(context.TODO(), &system_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal system into JSON document", diags.Errors())
		}
	}
	var template_object *NtpSettingsTemplateLocation
	{
		diags := o.Template.As(context.TODO(), &template_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template into JSON document", diags.Errors())
		}
	}
	var templateStack_object *NtpSettingsTemplateStackLocation
	{
		diags := o.TemplateStack.As(context.TODO(), &templateStack_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template_stack into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		System:        system_object,
		Template:      template_object,
		TemplateStack: templateStack_object,
	}

	return json.Marshal(obj)
}

func (o *NtpSettingsLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		System        *NtpSettingsSystemLocation        `json:"system,omitempty"`
		Template      *NtpSettingsTemplateLocation      `json:"template,omitempty"`
		TemplateStack *NtpSettingsTemplateStackLocation `json:"template_stack,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var system_object types.Object
	{
		var diags_tmp diag.Diagnostics
		system_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.System.AttributeTypes(), shadow.System)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into system", diags_tmp.Errors())
		}
	}
	var template_object types.Object
	{
		var diags_tmp diag.Diagnostics
		template_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Template.AttributeTypes(), shadow.Template)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template", diags_tmp.Errors())
		}
	}
	var templateStack_object types.Object
	{
		var diags_tmp diag.Diagnostics
		templateStack_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.TemplateStack.AttributeTypes(), shadow.TemplateStack)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template_stack", diags_tmp.Errors())
		}
	}
	o.System = system_object
	o.Template = template_object
	o.TemplateStack = templateStack_object

	return nil
}

func (o *NtpSettingsSystemLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"device": types.StringType,
	}
}
func (o *NtpSettingsTemplateLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
		"ngfw_device":     types.StringType,
	}
}
func (o *NtpSettingsTemplateStackLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
		"ngfw_device":     types.StringType,
	}
}
func (o *NtpSettingsLocation) AttributeTypes() map[string]attr.Type {
	var systemObj NtpSettingsSystemLocation
	var templateObj NtpSettingsTemplateLocation
	var templateStackObj NtpSettingsTemplateStackLocation
	return map[string]attr.Type{
		"system": types.ObjectType{
			AttrTypes: systemObj.AttributeTypes(),
		},
		"template": types.ObjectType{
			AttrTypes: templateObj.AttributeTypes(),
		},
		"template_stack": types.ObjectType{
			AttrTypes: templateStackObj.AttributeTypes(),
		},
	}
}
