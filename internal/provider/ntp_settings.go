package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/device/services/ntp"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &NtpSettingsDataSource{}
	_ datasource.DataSourceWithConfigure = &NtpSettingsDataSource{}
)

func NewNtpSettingsDataSource() datasource.DataSource {
	return &NtpSettingsDataSource{}
}

type NtpSettingsDataSource struct {
	client  *pango.Client
	manager *sdkmanager.ConfigObjectManager[*ntp.Config, ntp.Location, *ntp.Service]
}

type NtpSettingsDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type NtpSettingsDataSourceModel struct {
	Location        NtpSettingsLocation                    `tfsdk:"location"`
	NtpServers      *NtpSettingsDataSourceNtpServersObject `tfsdk:"ntp_servers"`
	EncryptedValues types.Map                              `tfsdk:"encrypted_values"`
}
type NtpSettingsDataSourceNtpServersObject struct {
	PrimaryNtpServer   *NtpSettingsDataSourceNtpServersPrimaryNtpServerObject   `tfsdk:"primary_ntp_server"`
	SecondaryNtpServer *NtpSettingsDataSourceNtpServersSecondaryNtpServerObject `tfsdk:"secondary_ntp_server"`
}
type NtpSettingsDataSourceNtpServersPrimaryNtpServerObject struct {
	AuthenticationType *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject `tfsdk:"authentication_type"`
	NtpServerAddress   types.String                                                             `tfsdk:"ntp_server_address"`
}
type NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject struct {
	Autokey      *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject      `tfsdk:"autokey"`
	None         *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject         `tfsdk:"none"`
	SymmetricKey *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject `tfsdk:"symmetric_key"`
}
type NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject struct {
}
type NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject struct {
}
type NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject struct {
	Algorithm *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject `tfsdk:"algorithm"`
	KeyId     types.Int64                                                                                   `tfsdk:"key_id"`
}
type NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject struct {
	Md5  *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object  `tfsdk:"md5"`
	Sha1 *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object `tfsdk:"sha1"`
}
type NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}
type NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}
type NtpSettingsDataSourceNtpServersSecondaryNtpServerObject struct {
	AuthenticationType *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject `tfsdk:"authentication_type"`
	NtpServerAddress   types.String                                                               `tfsdk:"ntp_server_address"`
}
type NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject struct {
	Autokey      *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject      `tfsdk:"autokey"`
	None         *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject         `tfsdk:"none"`
	SymmetricKey *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject `tfsdk:"symmetric_key"`
}
type NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject struct {
}
type NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject struct {
}
type NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject struct {
	Algorithm *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject `tfsdk:"algorithm"`
	KeyId     types.Int64                                                                                     `tfsdk:"key_id"`
}
type NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject struct {
	Md5  *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object  `tfsdk:"md5"`
	Sha1 *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object `tfsdk:"sha1"`
}
type NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}
type NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}

func (o *NtpSettingsDataSourceModel) CopyToPango(ctx context.Context, obj **ntp.Config, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var ntpServers_entry *ntp.NtpServers
	if o.NtpServers != nil {
		if *obj != nil && (*obj).NtpServers != nil {
			ntpServers_entry = (*obj).NtpServers
		} else {
			ntpServers_entry = new(ntp.NtpServers)
		}

		diags.Append(o.NtpServers.CopyToPango(ctx, &ntpServers_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.Config)
	}
	(*obj).NtpServers = ntpServers_entry

	return diags
}
func (o *NtpSettingsDataSourceNtpServersObject) CopyToPango(ctx context.Context, obj **ntp.NtpServers, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var primaryNtpServer_entry *ntp.NtpServersPrimaryNtpServer
	if o.PrimaryNtpServer != nil {
		if *obj != nil && (*obj).PrimaryNtpServer != nil {
			primaryNtpServer_entry = (*obj).PrimaryNtpServer
		} else {
			primaryNtpServer_entry = new(ntp.NtpServersPrimaryNtpServer)
		}

		diags.Append(o.PrimaryNtpServer.CopyToPango(ctx, &primaryNtpServer_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var secondaryNtpServer_entry *ntp.NtpServersSecondaryNtpServer
	if o.SecondaryNtpServer != nil {
		if *obj != nil && (*obj).SecondaryNtpServer != nil {
			secondaryNtpServer_entry = (*obj).SecondaryNtpServer
		} else {
			secondaryNtpServer_entry = new(ntp.NtpServersSecondaryNtpServer)
		}

		diags.Append(o.SecondaryNtpServer.CopyToPango(ctx, &secondaryNtpServer_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServers)
	}
	(*obj).PrimaryNtpServer = primaryNtpServer_entry
	(*obj).SecondaryNtpServer = secondaryNtpServer_entry

	return diags
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServer, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationType_entry *ntp.NtpServersPrimaryNtpServerAuthenticationType
	if o.AuthenticationType != nil {
		if *obj != nil && (*obj).AuthenticationType != nil {
			authenticationType_entry = (*obj).AuthenticationType
		} else {
			authenticationType_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationType)
		}

		diags.Append(o.AuthenticationType.CopyToPango(ctx, &authenticationType_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	ntpServerAddress_value := o.NtpServerAddress.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServer)
	}
	(*obj).AuthenticationType = authenticationType_entry
	(*obj).NtpServerAddress = ntpServerAddress_value

	return diags
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServerAuthenticationType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var autokey_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeAutokey
	if o.Autokey != nil {
		if *obj != nil && (*obj).Autokey != nil {
			autokey_entry = (*obj).Autokey
		} else {
			autokey_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeAutokey)
		}

		diags.Append(o.Autokey.CopyToPango(ctx, &autokey_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var none_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeNone
	if o.None != nil {
		if *obj != nil && (*obj).None != nil {
			none_entry = (*obj).None
		} else {
			none_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeNone)
		}

		diags.Append(o.None.CopyToPango(ctx, &none_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var symmetricKey_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey
	if o.SymmetricKey != nil {
		if *obj != nil && (*obj).SymmetricKey != nil {
			symmetricKey_entry = (*obj).SymmetricKey
		} else {
			symmetricKey_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey)
		}

		diags.Append(o.SymmetricKey.CopyToPango(ctx, &symmetricKey_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationType)
	}
	(*obj).Autokey = autokey_entry
	(*obj).None = none_entry
	(*obj).SymmetricKey = symmetricKey_entry

	return diags
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeAutokey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeAutokey)
	}

	return diags
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeNone, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeNone)
	}

	return diags
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var algorithm_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm
	if o.Algorithm != nil {
		if *obj != nil && (*obj).Algorithm != nil {
			algorithm_entry = (*obj).Algorithm
		} else {
			algorithm_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm)
		}

		diags.Append(o.Algorithm.CopyToPango(ctx, &algorithm_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	keyId_value := o.KeyId.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey)
	}
	(*obj).Algorithm = algorithm_entry
	(*obj).KeyId = keyId_value

	return diags
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var md5_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5
	if o.Md5 != nil {
		if *obj != nil && (*obj).Md5 != nil {
			md5_entry = (*obj).Md5
		} else {
			md5_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5)
		}

		diags.Append(o.Md5.CopyToPango(ctx, &md5_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1
	if o.Sha1 != nil {
		if *obj != nil && (*obj).Sha1 != nil {
			sha1_entry = (*obj).Sha1
		} else {
			sha1_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1)
		}

		diags.Append(o.Sha1.CopyToPango(ctx, &sha1_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm)
	}
	(*obj).Md5 = md5_entry
	(*obj).Sha1 = sha1_entry

	return diags
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	(*encrypted)["solo | plaintext | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | algorithm | md5 | authentication_key"] = o.AuthenticationKey
	authenticationKey_value := o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}
func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	(*encrypted)["solo | plaintext | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | algorithm | sha1 | authentication_key"] = o.AuthenticationKey
	authenticationKey_value := o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServer, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationType_entry *ntp.NtpServersSecondaryNtpServerAuthenticationType
	if o.AuthenticationType != nil {
		if *obj != nil && (*obj).AuthenticationType != nil {
			authenticationType_entry = (*obj).AuthenticationType
		} else {
			authenticationType_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationType)
		}

		diags.Append(o.AuthenticationType.CopyToPango(ctx, &authenticationType_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	ntpServerAddress_value := o.NtpServerAddress.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServer)
	}
	(*obj).AuthenticationType = authenticationType_entry
	(*obj).NtpServerAddress = ntpServerAddress_value

	return diags
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServerAuthenticationType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var autokey_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeAutokey
	if o.Autokey != nil {
		if *obj != nil && (*obj).Autokey != nil {
			autokey_entry = (*obj).Autokey
		} else {
			autokey_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeAutokey)
		}

		diags.Append(o.Autokey.CopyToPango(ctx, &autokey_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var none_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeNone
	if o.None != nil {
		if *obj != nil && (*obj).None != nil {
			none_entry = (*obj).None
		} else {
			none_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeNone)
		}

		diags.Append(o.None.CopyToPango(ctx, &none_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var symmetricKey_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey
	if o.SymmetricKey != nil {
		if *obj != nil && (*obj).SymmetricKey != nil {
			symmetricKey_entry = (*obj).SymmetricKey
		} else {
			symmetricKey_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey)
		}

		diags.Append(o.SymmetricKey.CopyToPango(ctx, &symmetricKey_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationType)
	}
	(*obj).Autokey = autokey_entry
	(*obj).None = none_entry
	(*obj).SymmetricKey = symmetricKey_entry

	return diags
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeAutokey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeAutokey)
	}

	return diags
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeNone, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeNone)
	}

	return diags
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var algorithm_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm
	if o.Algorithm != nil {
		if *obj != nil && (*obj).Algorithm != nil {
			algorithm_entry = (*obj).Algorithm
		} else {
			algorithm_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm)
		}

		diags.Append(o.Algorithm.CopyToPango(ctx, &algorithm_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	keyId_value := o.KeyId.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey)
	}
	(*obj).Algorithm = algorithm_entry
	(*obj).KeyId = keyId_value

	return diags
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var md5_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5
	if o.Md5 != nil {
		if *obj != nil && (*obj).Md5 != nil {
			md5_entry = (*obj).Md5
		} else {
			md5_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5)
		}

		diags.Append(o.Md5.CopyToPango(ctx, &md5_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1
	if o.Sha1 != nil {
		if *obj != nil && (*obj).Sha1 != nil {
			sha1_entry = (*obj).Sha1
		} else {
			sha1_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1)
		}

		diags.Append(o.Sha1.CopyToPango(ctx, &sha1_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm)
	}
	(*obj).Md5 = md5_entry
	(*obj).Sha1 = sha1_entry

	return diags
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	(*encrypted)["solo | plaintext | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | algorithm | md5 | authentication_key"] = o.AuthenticationKey
	authenticationKey_value := o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}
func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	(*encrypted)["solo | plaintext | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | algorithm | sha1 | authentication_key"] = o.AuthenticationKey
	authenticationKey_value := o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsDataSourceModel) CopyFromPango(ctx context.Context, obj *ntp.Config, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var ntpServers_object *NtpSettingsDataSourceNtpServersObject
	if obj.NtpServers != nil {
		ntpServers_object = new(NtpSettingsDataSourceNtpServersObject)

		diags.Append(ntpServers_object.CopyFromPango(ctx, obj.NtpServers, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.NtpServers = ntpServers_object

	return diags
}

func (o *NtpSettingsDataSourceNtpServersObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServers, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var primaryNtpServer_object *NtpSettingsDataSourceNtpServersPrimaryNtpServerObject
	if obj.PrimaryNtpServer != nil {
		primaryNtpServer_object = new(NtpSettingsDataSourceNtpServersPrimaryNtpServerObject)

		diags.Append(primaryNtpServer_object.CopyFromPango(ctx, obj.PrimaryNtpServer, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var secondaryNtpServer_object *NtpSettingsDataSourceNtpServersSecondaryNtpServerObject
	if obj.SecondaryNtpServer != nil {
		secondaryNtpServer_object = new(NtpSettingsDataSourceNtpServersSecondaryNtpServerObject)

		diags.Append(secondaryNtpServer_object.CopyFromPango(ctx, obj.SecondaryNtpServer, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.PrimaryNtpServer = primaryNtpServer_object
	o.SecondaryNtpServer = secondaryNtpServer_object

	return diags
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServer, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationType_object *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject
	if obj.AuthenticationType != nil {
		authenticationType_object = new(NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject)

		diags.Append(authenticationType_object.CopyFromPango(ctx, obj.AuthenticationType, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var ntpServerAddress_value types.String
	if obj.NtpServerAddress != nil {
		ntpServerAddress_value = types.StringValue(*obj.NtpServerAddress)
	}
	o.AuthenticationType = authenticationType_object
	o.NtpServerAddress = ntpServerAddress_value

	return diags
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServerAuthenticationType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var autokey_object *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject
	if obj.Autokey != nil {
		autokey_object = new(NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject)

		diags.Append(autokey_object.CopyFromPango(ctx, obj.Autokey, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var none_object *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject
	if obj.None != nil {
		none_object = new(NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject)

		diags.Append(none_object.CopyFromPango(ctx, obj.None, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var symmetricKey_object *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject
	if obj.SymmetricKey != nil {
		symmetricKey_object = new(NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject)

		diags.Append(symmetricKey_object.CopyFromPango(ctx, obj.SymmetricKey, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Autokey = autokey_object
	o.None = none_object
	o.SymmetricKey = symmetricKey_object

	return diags
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeAutokey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeNone, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var algorithm_object *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject
	if obj.Algorithm != nil {
		algorithm_object = new(NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject)

		diags.Append(algorithm_object.CopyFromPango(ctx, obj.Algorithm, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var keyId_value types.Int64
	if obj.KeyId != nil {
		keyId_value = types.Int64Value(*obj.KeyId)
	}
	o.Algorithm = algorithm_object
	o.KeyId = keyId_value

	return diags
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var md5_object *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object
	if obj.Md5 != nil {
		md5_object = new(NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object)

		diags.Append(md5_object.CopyFromPango(ctx, obj.Md5, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_object *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object
	if obj.Sha1 != nil {
		sha1_object = new(NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object)

		diags.Append(sha1_object.CopyFromPango(ctx, obj.Sha1, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Md5 = md5_object
	o.Sha1 = sha1_object

	return diags
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		(*encrypted)["solo | encrypted | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | algorithm | md5 | authentication_key"] = types.StringValue(*obj.AuthenticationKey)
		if value, ok := (*encrypted)["solo | plaintext | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | algorithm | md5 | authentication_key"]; ok {
			authenticationKey_value = value
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		(*encrypted)["solo | encrypted | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | algorithm | sha1 | authentication_key"] = types.StringValue(*obj.AuthenticationKey)
		if value, ok := (*encrypted)["solo | plaintext | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | algorithm | sha1 | authentication_key"]; ok {
			authenticationKey_value = value
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServer, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationType_object *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject
	if obj.AuthenticationType != nil {
		authenticationType_object = new(NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject)

		diags.Append(authenticationType_object.CopyFromPango(ctx, obj.AuthenticationType, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var ntpServerAddress_value types.String
	if obj.NtpServerAddress != nil {
		ntpServerAddress_value = types.StringValue(*obj.NtpServerAddress)
	}
	o.AuthenticationType = authenticationType_object
	o.NtpServerAddress = ntpServerAddress_value

	return diags
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServerAuthenticationType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var autokey_object *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject
	if obj.Autokey != nil {
		autokey_object = new(NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject)

		diags.Append(autokey_object.CopyFromPango(ctx, obj.Autokey, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var none_object *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject
	if obj.None != nil {
		none_object = new(NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject)

		diags.Append(none_object.CopyFromPango(ctx, obj.None, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var symmetricKey_object *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject
	if obj.SymmetricKey != nil {
		symmetricKey_object = new(NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject)

		diags.Append(symmetricKey_object.CopyFromPango(ctx, obj.SymmetricKey, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Autokey = autokey_object
	o.None = none_object
	o.SymmetricKey = symmetricKey_object

	return diags
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeAutokey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeNone, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var algorithm_object *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject
	if obj.Algorithm != nil {
		algorithm_object = new(NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject)

		diags.Append(algorithm_object.CopyFromPango(ctx, obj.Algorithm, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var keyId_value types.Int64
	if obj.KeyId != nil {
		keyId_value = types.Int64Value(*obj.KeyId)
	}
	o.Algorithm = algorithm_object
	o.KeyId = keyId_value

	return diags
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var md5_object *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object
	if obj.Md5 != nil {
		md5_object = new(NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object)

		diags.Append(md5_object.CopyFromPango(ctx, obj.Md5, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_object *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object
	if obj.Sha1 != nil {
		sha1_object = new(NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object)

		diags.Append(sha1_object.CopyFromPango(ctx, obj.Sha1, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Md5 = md5_object
	o.Sha1 = sha1_object

	return diags
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		(*encrypted)["solo | encrypted | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | algorithm | md5 | authentication_key"] = types.StringValue(*obj.AuthenticationKey)
		if value, ok := (*encrypted)["solo | plaintext | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | algorithm | md5 | authentication_key"]; ok {
			authenticationKey_value = value
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		(*encrypted)["solo | encrypted | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | algorithm | sha1 | authentication_key"] = types.StringValue(*obj.AuthenticationKey)
		if value, ok := (*encrypted)["solo | plaintext | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | algorithm | sha1 | authentication_key"]; ok {
			authenticationKey_value = value
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func NtpSettingsDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": NtpSettingsDataSourceLocationSchema(),

			"encrypted_values": dsschema.MapAttribute{
				Description: "",
				Required:    false,
				Optional:    false,
				Computed:    true,
				Sensitive:   true,
				ElementType: types.StringType,
			},

			"ntp_servers": NtpSettingsDataSourceNtpServersSchema(),
		},
	}
}

func (o *NtpSettingsDataSourceModel) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"primary_ntp_server": NtpSettingsDataSourceNtpServersPrimaryNtpServerSchema(),

			"secondary_ntp_server": NtpSettingsDataSourceNtpServersSecondaryNtpServerSchema(),
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersPrimaryNtpServerSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"authentication_type": NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSchema(),

			"ntp_server_address": dsschema.StringAttribute{
				Description: "NTP Server IP Address or Domain Name",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersPrimaryNtpServerSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    false,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"autokey": NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeySchema(),

			"none": NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneSchema(),

			"symmetric_key": NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySchema(),
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeNoneSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"algorithm": NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema(),

			"key_id": dsschema.Int64Attribute{
				Description: "Symmetric Key Number",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"md5": NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema(),

			"sha1": NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema(),
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"authentication_key": dsschema.StringAttribute{
				Description: "Symmetric Key MD5 String",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"authentication_key": dsschema.StringAttribute{
				Description: "Symmetric Key SHA1 Hexadecimal",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSecondaryNtpServerSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"authentication_type": NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSchema(),

			"ntp_server_address": dsschema.StringAttribute{
				Description: "NTP Server IP Address or Domain Name",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSecondaryNtpServerSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"autokey": NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeySchema(),

			"none": NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneSchema(),

			"symmetric_key": NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySchema(),
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeNoneSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"algorithm": NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema(),

			"key_id": dsschema.Int64Attribute{
				Description: "Symmetric Key Number",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"md5": NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema(),

			"sha1": NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema(),
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"authentication_key": dsschema.StringAttribute{
				Description: "Symmetric Key MD5 String",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"authentication_key": dsschema.StringAttribute{
				Description: "Symmetric Key SHA1 Hexadecimal",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},
		},
	}
}

func (o *NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsDataSourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsDataSourceLocationSchema() rsschema.Attribute {
	return NtpSettingsLocationSchema()
}

// Metadata returns the data source type name.
func (d *NtpSettingsDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ntp_settings"
}

// Schema defines the schema for this data source.
func (d *NtpSettingsDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = NtpSettingsDataSourceSchema()
}

// Configure prepares the struct.
func (d *NtpSettingsDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	d.client = providerData.Client
	specifier, _, err := ntp.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	d.manager = sdkmanager.NewConfigObjectManager(d.client, ntp.NewService(d.client), specifier)
}
func (o *NtpSettingsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state NtpSettingsDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location ntp.Location

	if savestate.Location.System != nil {
		location.System = &ntp.SystemLocation{

			NgfwDevice: savestate.Location.System.NgfwDevice.ValueString(),
		}
	}
	if savestate.Location.Template != nil {
		location.Template = &ntp.TemplateLocation{

			PanoramaDevice: savestate.Location.Template.PanoramaDevice.ValueString(),
			Template:       savestate.Location.Template.Name.ValueString(),
			NgfwDevice:     savestate.Location.Template.NgfwDevice.ValueString(),
		}
	}
	if savestate.Location.TemplateStack != nil {
		location.TemplateStack = &ntp.TemplateStackLocation{

			PanoramaDevice: savestate.Location.TemplateStack.PanoramaDevice.ValueString(),
			TemplateStack:  savestate.Location.TemplateStack.Name.ValueString(),
			NgfwDevice:     savestate.Location.TemplateStack.NgfwDevice.ValueString(),
		}
	}

	ev := make(map[string]types.String, len(state.EncryptedValues.Elements()))
	resp.Diagnostics.Append(savestate.EncryptedValues.ElementsAs(ctx, &ev, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_ntp_settings_resource",
		"function":      "Read",
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, location)
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, &ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location
	ev_map, ev_diags := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = ev_map
	resp.Diagnostics.Append(ev_diags...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &NtpSettingsResource{}
	_ resource.ResourceWithConfigure   = &NtpSettingsResource{}
	_ resource.ResourceWithImportState = &NtpSettingsResource{}
)

func NewNtpSettingsResource() resource.Resource {
	return &NtpSettingsResource{}
}

type NtpSettingsResource struct {
	client  *pango.Client
	manager *sdkmanager.ConfigObjectManager[*ntp.Config, ntp.Location, *ntp.Service]
}

func NtpSettingsResourceLocationSchema() rsschema.Attribute {
	return NtpSettingsLocationSchema()
}

type NtpSettingsResourceModel struct {
	Location        NtpSettingsLocation                  `tfsdk:"location"`
	NtpServers      *NtpSettingsResourceNtpServersObject `tfsdk:"ntp_servers"`
	EncryptedValues types.Map                            `tfsdk:"encrypted_values"`
}
type NtpSettingsResourceNtpServersObject struct {
	PrimaryNtpServer   *NtpSettingsResourceNtpServersPrimaryNtpServerObject   `tfsdk:"primary_ntp_server"`
	SecondaryNtpServer *NtpSettingsResourceNtpServersSecondaryNtpServerObject `tfsdk:"secondary_ntp_server"`
}
type NtpSettingsResourceNtpServersPrimaryNtpServerObject struct {
	AuthenticationType *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject `tfsdk:"authentication_type"`
	NtpServerAddress   types.String                                                           `tfsdk:"ntp_server_address"`
}
type NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject struct {
	Autokey      *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject      `tfsdk:"autokey"`
	None         *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject         `tfsdk:"none"`
	SymmetricKey *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject `tfsdk:"symmetric_key"`
}
type NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject struct {
}
type NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject struct {
}
type NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject struct {
	Algorithm *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject `tfsdk:"algorithm"`
	KeyId     types.Int64                                                                                 `tfsdk:"key_id"`
}
type NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject struct {
	Md5  *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object  `tfsdk:"md5"`
	Sha1 *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object `tfsdk:"sha1"`
}
type NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}
type NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}
type NtpSettingsResourceNtpServersSecondaryNtpServerObject struct {
	AuthenticationType *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject `tfsdk:"authentication_type"`
	NtpServerAddress   types.String                                                             `tfsdk:"ntp_server_address"`
}
type NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject struct {
	Autokey      *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject      `tfsdk:"autokey"`
	None         *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject         `tfsdk:"none"`
	SymmetricKey *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject `tfsdk:"symmetric_key"`
}
type NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject struct {
}
type NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject struct {
}
type NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject struct {
	Algorithm *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject `tfsdk:"algorithm"`
	KeyId     types.Int64                                                                                   `tfsdk:"key_id"`
}
type NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject struct {
	Md5  *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object  `tfsdk:"md5"`
	Sha1 *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object `tfsdk:"sha1"`
}
type NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}
type NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object struct {
	AuthenticationKey types.String `tfsdk:"authentication_key"`
}

func (r *NtpSettingsResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func NtpSettingsResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": NtpSettingsResourceLocationSchema(),

			"encrypted_values": rsschema.MapAttribute{
				Description: "",
				Required:    false,
				Optional:    false,
				Computed:    true,
				Sensitive:   true,
				ElementType: types.StringType,
			},

			"ntp_servers": NtpSettingsResourceNtpServersSchema(),
		},
	}
}

func (o *NtpSettingsResourceModel) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"primary_ntp_server": NtpSettingsResourceNtpServersPrimaryNtpServerSchema(),

			"secondary_ntp_server": NtpSettingsResourceNtpServersSecondaryNtpServerSchema(),
		},
	}
}

func (o *NtpSettingsResourceNtpServersObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersPrimaryNtpServerSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"authentication_type": NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSchema(),

			"ntp_server_address": rsschema.StringAttribute{
				Description: "NTP Server IP Address or Domain Name",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersPrimaryNtpServerSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    true,
		Computed:    false,
		Optional:    false,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"autokey": NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeySchema(),

			"none": NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneSchema(),

			"symmetric_key": NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySchema(),
		},
	}
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"algorithm": NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema(),

			"key_id": rsschema.Int64Attribute{
				Description: "Symmetric Key Number",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"md5": NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema(),

			"sha1": NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema(),
		},
	}
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"authentication_key": rsschema.StringAttribute{
				Description: "Symmetric Key MD5 String",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},
		},
	}
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"authentication_key": rsschema.StringAttribute{
				Description: "Symmetric Key SHA1 Hexadecimal",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},
		},
	}
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSecondaryNtpServerSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"authentication_type": NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSchema(),

			"ntp_server_address": rsschema.StringAttribute{
				Description: "NTP Server IP Address or Domain Name",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSecondaryNtpServerSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"autokey": NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeySchema(),

			"none": NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneSchema(),

			"symmetric_key": NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySchema(),
		},
	}
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("autokey"),
				path.MatchRelative().AtParent().AtName("none"),
				path.MatchRelative().AtParent().AtName("symmetric_key"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"algorithm": NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema(),

			"key_id": rsschema.Int64Attribute{
				Description: "Symmetric Key Number",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},
		},
	}
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"md5": NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema(),

			"sha1": NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema(),
		},
	}
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"authentication_key": rsschema.StringAttribute{
				Description: "Symmetric Key MD5 String",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},
		},
	}
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("md5"),
				path.MatchRelative().AtParent().AtName("sha1"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"authentication_key": rsschema.StringAttribute{
				Description: "Symmetric Key SHA1 Hexadecimal",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},
		},
	}
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) getTypeFor(name string) attr.Type {
	schema := NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *NtpSettingsResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ntp_settings"
}

func (r *NtpSettingsResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = NtpSettingsResourceSchema()
}

// </ResourceSchema>

func (r *NtpSettingsResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	r.client = providerData.Client
	specifier, _, err := ntp.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	r.manager = sdkmanager.NewConfigObjectManager(r.client, ntp.NewService(r.client), specifier)
}

func (o *NtpSettingsResourceModel) CopyToPango(ctx context.Context, obj **ntp.Config, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var ntpServers_entry *ntp.NtpServers
	if o.NtpServers != nil {
		if *obj != nil && (*obj).NtpServers != nil {
			ntpServers_entry = (*obj).NtpServers
		} else {
			ntpServers_entry = new(ntp.NtpServers)
		}

		diags.Append(o.NtpServers.CopyToPango(ctx, &ntpServers_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.Config)
	}
	(*obj).NtpServers = ntpServers_entry

	return diags
}
func (o *NtpSettingsResourceNtpServersObject) CopyToPango(ctx context.Context, obj **ntp.NtpServers, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var primaryNtpServer_entry *ntp.NtpServersPrimaryNtpServer
	if o.PrimaryNtpServer != nil {
		if *obj != nil && (*obj).PrimaryNtpServer != nil {
			primaryNtpServer_entry = (*obj).PrimaryNtpServer
		} else {
			primaryNtpServer_entry = new(ntp.NtpServersPrimaryNtpServer)
		}

		diags.Append(o.PrimaryNtpServer.CopyToPango(ctx, &primaryNtpServer_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var secondaryNtpServer_entry *ntp.NtpServersSecondaryNtpServer
	if o.SecondaryNtpServer != nil {
		if *obj != nil && (*obj).SecondaryNtpServer != nil {
			secondaryNtpServer_entry = (*obj).SecondaryNtpServer
		} else {
			secondaryNtpServer_entry = new(ntp.NtpServersSecondaryNtpServer)
		}

		diags.Append(o.SecondaryNtpServer.CopyToPango(ctx, &secondaryNtpServer_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServers)
	}
	(*obj).PrimaryNtpServer = primaryNtpServer_entry
	(*obj).SecondaryNtpServer = secondaryNtpServer_entry

	return diags
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServer, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationType_entry *ntp.NtpServersPrimaryNtpServerAuthenticationType
	if o.AuthenticationType != nil {
		if *obj != nil && (*obj).AuthenticationType != nil {
			authenticationType_entry = (*obj).AuthenticationType
		} else {
			authenticationType_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationType)
		}

		diags.Append(o.AuthenticationType.CopyToPango(ctx, &authenticationType_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	ntpServerAddress_value := o.NtpServerAddress.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServer)
	}
	(*obj).AuthenticationType = authenticationType_entry
	(*obj).NtpServerAddress = ntpServerAddress_value

	return diags
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServerAuthenticationType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var autokey_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeAutokey
	if o.Autokey != nil {
		if *obj != nil && (*obj).Autokey != nil {
			autokey_entry = (*obj).Autokey
		} else {
			autokey_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeAutokey)
		}

		diags.Append(o.Autokey.CopyToPango(ctx, &autokey_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var none_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeNone
	if o.None != nil {
		if *obj != nil && (*obj).None != nil {
			none_entry = (*obj).None
		} else {
			none_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeNone)
		}

		diags.Append(o.None.CopyToPango(ctx, &none_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var symmetricKey_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey
	if o.SymmetricKey != nil {
		if *obj != nil && (*obj).SymmetricKey != nil {
			symmetricKey_entry = (*obj).SymmetricKey
		} else {
			symmetricKey_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey)
		}

		diags.Append(o.SymmetricKey.CopyToPango(ctx, &symmetricKey_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationType)
	}
	(*obj).Autokey = autokey_entry
	(*obj).None = none_entry
	(*obj).SymmetricKey = symmetricKey_entry

	return diags
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeAutokey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeAutokey)
	}

	return diags
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeNone, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeNone)
	}

	return diags
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var algorithm_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm
	if o.Algorithm != nil {
		if *obj != nil && (*obj).Algorithm != nil {
			algorithm_entry = (*obj).Algorithm
		} else {
			algorithm_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm)
		}

		diags.Append(o.Algorithm.CopyToPango(ctx, &algorithm_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	keyId_value := o.KeyId.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey)
	}
	(*obj).Algorithm = algorithm_entry
	(*obj).KeyId = keyId_value

	return diags
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var md5_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5
	if o.Md5 != nil {
		if *obj != nil && (*obj).Md5 != nil {
			md5_entry = (*obj).Md5
		} else {
			md5_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5)
		}

		diags.Append(o.Md5.CopyToPango(ctx, &md5_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_entry *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1
	if o.Sha1 != nil {
		if *obj != nil && (*obj).Sha1 != nil {
			sha1_entry = (*obj).Sha1
		} else {
			sha1_entry = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1)
		}

		diags.Append(o.Sha1.CopyToPango(ctx, &sha1_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm)
	}
	(*obj).Md5 = md5_entry
	(*obj).Sha1 = sha1_entry

	return diags
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	(*encrypted)["solo | plaintext | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | algorithm | md5 | authentication_key"] = o.AuthenticationKey
	authenticationKey_value := o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}
func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) CopyToPango(ctx context.Context, obj **ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	(*encrypted)["solo | plaintext | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | algorithm | sha1 | authentication_key"] = o.AuthenticationKey
	authenticationKey_value := o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServer, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationType_entry *ntp.NtpServersSecondaryNtpServerAuthenticationType
	if o.AuthenticationType != nil {
		if *obj != nil && (*obj).AuthenticationType != nil {
			authenticationType_entry = (*obj).AuthenticationType
		} else {
			authenticationType_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationType)
		}

		diags.Append(o.AuthenticationType.CopyToPango(ctx, &authenticationType_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	ntpServerAddress_value := o.NtpServerAddress.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServer)
	}
	(*obj).AuthenticationType = authenticationType_entry
	(*obj).NtpServerAddress = ntpServerAddress_value

	return diags
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServerAuthenticationType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var autokey_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeAutokey
	if o.Autokey != nil {
		if *obj != nil && (*obj).Autokey != nil {
			autokey_entry = (*obj).Autokey
		} else {
			autokey_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeAutokey)
		}

		diags.Append(o.Autokey.CopyToPango(ctx, &autokey_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var none_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeNone
	if o.None != nil {
		if *obj != nil && (*obj).None != nil {
			none_entry = (*obj).None
		} else {
			none_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeNone)
		}

		diags.Append(o.None.CopyToPango(ctx, &none_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var symmetricKey_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey
	if o.SymmetricKey != nil {
		if *obj != nil && (*obj).SymmetricKey != nil {
			symmetricKey_entry = (*obj).SymmetricKey
		} else {
			symmetricKey_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey)
		}

		diags.Append(o.SymmetricKey.CopyToPango(ctx, &symmetricKey_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationType)
	}
	(*obj).Autokey = autokey_entry
	(*obj).None = none_entry
	(*obj).SymmetricKey = symmetricKey_entry

	return diags
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeAutokey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeAutokey)
	}

	return diags
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeNone, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeNone)
	}

	return diags
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var algorithm_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm
	if o.Algorithm != nil {
		if *obj != nil && (*obj).Algorithm != nil {
			algorithm_entry = (*obj).Algorithm
		} else {
			algorithm_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm)
		}

		diags.Append(o.Algorithm.CopyToPango(ctx, &algorithm_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	keyId_value := o.KeyId.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey)
	}
	(*obj).Algorithm = algorithm_entry
	(*obj).KeyId = keyId_value

	return diags
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var md5_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5
	if o.Md5 != nil {
		if *obj != nil && (*obj).Md5 != nil {
			md5_entry = (*obj).Md5
		} else {
			md5_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5)
		}

		diags.Append(o.Md5.CopyToPango(ctx, &md5_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_entry *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1
	if o.Sha1 != nil {
		if *obj != nil && (*obj).Sha1 != nil {
			sha1_entry = (*obj).Sha1
		} else {
			sha1_entry = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1)
		}

		diags.Append(o.Sha1.CopyToPango(ctx, &sha1_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm)
	}
	(*obj).Md5 = md5_entry
	(*obj).Sha1 = sha1_entry

	return diags
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	(*encrypted)["solo | plaintext | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | algorithm | md5 | authentication_key"] = o.AuthenticationKey
	authenticationKey_value := o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}
func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) CopyToPango(ctx context.Context, obj **ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	(*encrypted)["solo | plaintext | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | algorithm | sha1 | authentication_key"] = o.AuthenticationKey
	authenticationKey_value := o.AuthenticationKey.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1)
	}
	(*obj).AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsResourceModel) CopyFromPango(ctx context.Context, obj *ntp.Config, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var ntpServers_object *NtpSettingsResourceNtpServersObject
	if obj.NtpServers != nil {
		ntpServers_object = new(NtpSettingsResourceNtpServersObject)

		diags.Append(ntpServers_object.CopyFromPango(ctx, obj.NtpServers, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.NtpServers = ntpServers_object

	return diags
}

func (o *NtpSettingsResourceNtpServersObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServers, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var primaryNtpServer_object *NtpSettingsResourceNtpServersPrimaryNtpServerObject
	if obj.PrimaryNtpServer != nil {
		primaryNtpServer_object = new(NtpSettingsResourceNtpServersPrimaryNtpServerObject)

		diags.Append(primaryNtpServer_object.CopyFromPango(ctx, obj.PrimaryNtpServer, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var secondaryNtpServer_object *NtpSettingsResourceNtpServersSecondaryNtpServerObject
	if obj.SecondaryNtpServer != nil {
		secondaryNtpServer_object = new(NtpSettingsResourceNtpServersSecondaryNtpServerObject)

		diags.Append(secondaryNtpServer_object.CopyFromPango(ctx, obj.SecondaryNtpServer, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.PrimaryNtpServer = primaryNtpServer_object
	o.SecondaryNtpServer = secondaryNtpServer_object

	return diags
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServer, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationType_object *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject
	if obj.AuthenticationType != nil {
		authenticationType_object = new(NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject)

		diags.Append(authenticationType_object.CopyFromPango(ctx, obj.AuthenticationType, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var ntpServerAddress_value types.String
	if obj.NtpServerAddress != nil {
		ntpServerAddress_value = types.StringValue(*obj.NtpServerAddress)
	}
	o.AuthenticationType = authenticationType_object
	o.NtpServerAddress = ntpServerAddress_value

	return diags
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServerAuthenticationType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var autokey_object *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject
	if obj.Autokey != nil {
		autokey_object = new(NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject)

		diags.Append(autokey_object.CopyFromPango(ctx, obj.Autokey, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var none_object *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject
	if obj.None != nil {
		none_object = new(NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject)

		diags.Append(none_object.CopyFromPango(ctx, obj.None, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var symmetricKey_object *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject
	if obj.SymmetricKey != nil {
		symmetricKey_object = new(NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject)

		diags.Append(symmetricKey_object.CopyFromPango(ctx, obj.SymmetricKey, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Autokey = autokey_object
	o.None = none_object
	o.SymmetricKey = symmetricKey_object

	return diags
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeAutokeyObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeAutokey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeNoneObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeNone, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var algorithm_object *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject
	if obj.Algorithm != nil {
		algorithm_object = new(NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject)

		diags.Append(algorithm_object.CopyFromPango(ctx, obj.Algorithm, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var keyId_value types.Int64
	if obj.KeyId != nil {
		keyId_value = types.Int64Value(*obj.KeyId)
	}
	o.Algorithm = algorithm_object
	o.KeyId = keyId_value

	return diags
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var md5_object *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object
	if obj.Md5 != nil {
		md5_object = new(NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object)

		diags.Append(md5_object.CopyFromPango(ctx, obj.Md5, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_object *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object
	if obj.Sha1 != nil {
		sha1_object = new(NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object)

		diags.Append(sha1_object.CopyFromPango(ctx, obj.Sha1, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Md5 = md5_object
	o.Sha1 = sha1_object

	return diags
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		(*encrypted)["solo | encrypted | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | algorithm | md5 | authentication_key"] = types.StringValue(*obj.AuthenticationKey)
		if value, ok := (*encrypted)["solo | plaintext | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | algorithm | md5 | authentication_key"]; ok {
			authenticationKey_value = value
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsResourceNtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) CopyFromPango(ctx context.Context, obj *ntp.NtpServersPrimaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		(*encrypted)["solo | encrypted | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | algorithm | sha1 | authentication_key"] = types.StringValue(*obj.AuthenticationKey)
		if value, ok := (*encrypted)["solo | plaintext | ntp_servers | primary_ntp_server | authentication_type | symmetric_key | algorithm | sha1 | authentication_key"]; ok {
			authenticationKey_value = value
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServer, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authenticationType_object *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject
	if obj.AuthenticationType != nil {
		authenticationType_object = new(NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject)

		diags.Append(authenticationType_object.CopyFromPango(ctx, obj.AuthenticationType, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var ntpServerAddress_value types.String
	if obj.NtpServerAddress != nil {
		ntpServerAddress_value = types.StringValue(*obj.NtpServerAddress)
	}
	o.AuthenticationType = authenticationType_object
	o.NtpServerAddress = ntpServerAddress_value

	return diags
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServerAuthenticationType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var autokey_object *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject
	if obj.Autokey != nil {
		autokey_object = new(NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject)

		diags.Append(autokey_object.CopyFromPango(ctx, obj.Autokey, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var none_object *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject
	if obj.None != nil {
		none_object = new(NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject)

		diags.Append(none_object.CopyFromPango(ctx, obj.None, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var symmetricKey_object *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject
	if obj.SymmetricKey != nil {
		symmetricKey_object = new(NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject)

		diags.Append(symmetricKey_object.CopyFromPango(ctx, obj.SymmetricKey, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Autokey = autokey_object
	o.None = none_object
	o.SymmetricKey = symmetricKey_object

	return diags
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeAutokeyObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeAutokey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeNoneObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeNone, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKey, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var algorithm_object *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject
	if obj.Algorithm != nil {
		algorithm_object = new(NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject)

		diags.Append(algorithm_object.CopyFromPango(ctx, obj.Algorithm, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var keyId_value types.Int64
	if obj.KeyId != nil {
		keyId_value = types.Int64Value(*obj.KeyId)
	}
	o.Algorithm = algorithm_object
	o.KeyId = keyId_value

	return diags
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmObject) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithm, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var md5_object *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object
	if obj.Md5 != nil {
		md5_object = new(NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object)

		diags.Append(md5_object.CopyFromPango(ctx, obj.Md5, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var sha1_object *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object
	if obj.Sha1 != nil {
		sha1_object = new(NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object)

		diags.Append(sha1_object.CopyFromPango(ctx, obj.Sha1, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Md5 = md5_object
	o.Sha1 = sha1_object

	return diags
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5Object) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmMd5, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		(*encrypted)["solo | encrypted | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | algorithm | md5 | authentication_key"] = types.StringValue(*obj.AuthenticationKey)
		if value, ok := (*encrypted)["solo | plaintext | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | algorithm | md5 | authentication_key"]; ok {
			authenticationKey_value = value
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func (o *NtpSettingsResourceNtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1Object) CopyFromPango(ctx context.Context, obj *ntp.NtpServersSecondaryNtpServerAuthenticationTypeSymmetricKeyAlgorithmSha1, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var authenticationKey_value types.String
	if obj.AuthenticationKey != nil {
		(*encrypted)["solo | encrypted | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | algorithm | sha1 | authentication_key"] = types.StringValue(*obj.AuthenticationKey)
		if value, ok := (*encrypted)["solo | plaintext | ntp_servers | secondary_ntp_server | authentication_type | symmetric_key | algorithm | sha1 | authentication_key"]; ok {
			authenticationKey_value = value
		}
	}
	o.AuthenticationKey = authenticationKey_value

	return diags
}

func (r *NtpSettingsResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state NtpSettingsResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_ntp_settings_resource",
		"function":      "Create",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	// Determine the location.

	var location ntp.Location

	if state.Location.System != nil {
		location.System = &ntp.SystemLocation{

			NgfwDevice: state.Location.System.NgfwDevice.ValueString(),
		}
	}
	if state.Location.Template != nil {
		location.Template = &ntp.TemplateLocation{

			PanoramaDevice: state.Location.Template.PanoramaDevice.ValueString(),
			Template:       state.Location.Template.Name.ValueString(),
			NgfwDevice:     state.Location.Template.NgfwDevice.ValueString(),
		}
	}
	if state.Location.TemplateStack != nil {
		location.TemplateStack = &ntp.TemplateStackLocation{

			PanoramaDevice: state.Location.TemplateStack.PanoramaDevice.ValueString(),
			TemplateStack:  state.Location.TemplateStack.Name.ValueString(),
			NgfwDevice:     state.Location.TemplateStack.NgfwDevice.ValueString(),
		}
	}

	if err := location.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *ntp.Config

	ev := make(map[string]types.String)
	resp.Diagnostics.Append(state.CopyToPango(ctx, &obj, &ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.
	created, err := r.manager.Create(ctx, location, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	resp.Diagnostics.Append(state.CopyFromPango(ctx, created, &ev)...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev_map, ev_diags := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = ev_map
	resp.Diagnostics.Append(ev_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
func (o *NtpSettingsResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state NtpSettingsResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location ntp.Location

	if savestate.Location.System != nil {
		location.System = &ntp.SystemLocation{

			NgfwDevice: savestate.Location.System.NgfwDevice.ValueString(),
		}
	}
	if savestate.Location.Template != nil {
		location.Template = &ntp.TemplateLocation{

			PanoramaDevice: savestate.Location.Template.PanoramaDevice.ValueString(),
			Template:       savestate.Location.Template.Name.ValueString(),
			NgfwDevice:     savestate.Location.Template.NgfwDevice.ValueString(),
		}
	}
	if savestate.Location.TemplateStack != nil {
		location.TemplateStack = &ntp.TemplateStackLocation{

			PanoramaDevice: savestate.Location.TemplateStack.PanoramaDevice.ValueString(),
			TemplateStack:  savestate.Location.TemplateStack.Name.ValueString(),
			NgfwDevice:     savestate.Location.TemplateStack.NgfwDevice.ValueString(),
		}
	}

	ev := make(map[string]types.String, len(state.EncryptedValues.Elements()))
	resp.Diagnostics.Append(savestate.EncryptedValues.ElementsAs(ctx, &ev, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_ntp_settings_resource",
		"function":      "Read",
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, location)
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, &ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location
	ev_map, ev_diags := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = ev_map
	resp.Diagnostics.Append(ev_diags...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *NtpSettingsResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state NtpSettingsResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev := make(map[string]types.String, len(state.EncryptedValues.Elements()))
	resp.Diagnostics.Append(state.EncryptedValues.ElementsAs(ctx, &ev, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location ntp.Location

	if state.Location.System != nil {
		location.System = &ntp.SystemLocation{

			NgfwDevice: state.Location.System.NgfwDevice.ValueString(),
		}
	}
	if state.Location.Template != nil {
		location.Template = &ntp.TemplateLocation{

			PanoramaDevice: state.Location.Template.PanoramaDevice.ValueString(),
			Template:       state.Location.Template.Name.ValueString(),
			NgfwDevice:     state.Location.Template.NgfwDevice.ValueString(),
		}
	}
	if state.Location.TemplateStack != nil {
		location.TemplateStack = &ntp.TemplateStackLocation{

			PanoramaDevice: state.Location.TemplateStack.PanoramaDevice.ValueString(),
			TemplateStack:  state.Location.TemplateStack.Name.ValueString(),
			NgfwDevice:     state.Location.TemplateStack.NgfwDevice.ValueString(),
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_ntp_settings_resource",
		"function":      "Update",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}
	obj, err := r.manager.Read(ctx, location)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, &obj, &ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Perform the operation.
	updated, err := r.manager.Update(ctx, location, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	copy_diags := state.CopyFromPango(ctx, updated, &ev)
	ev_map, ev_diags := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = ev_map
	resp.Diagnostics.Append(ev_diags...)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *NtpSettingsResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state NtpSettingsResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_ntp_settings_resource",
		"function":      "Delete",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var location ntp.Location

	if state.Location.System != nil {
		location.System = &ntp.SystemLocation{

			NgfwDevice: state.Location.System.NgfwDevice.ValueString(),
		}
	}
	if state.Location.Template != nil {
		location.Template = &ntp.TemplateLocation{

			PanoramaDevice: state.Location.Template.PanoramaDevice.ValueString(),
			Template:       state.Location.Template.Name.ValueString(),
			NgfwDevice:     state.Location.Template.NgfwDevice.ValueString(),
		}
	}
	if state.Location.TemplateStack != nil {
		location.TemplateStack = &ntp.TemplateStackLocation{

			PanoramaDevice: state.Location.TemplateStack.PanoramaDevice.ValueString(),
			TemplateStack:  state.Location.TemplateStack.Name.ValueString(),
			NgfwDevice:     state.Location.TemplateStack.NgfwDevice.ValueString(),
		}
	}

	ev := make(map[string]types.String)
	var obj *ntp.Config
	resp.Diagnostics.Append(state.CopyToPango(ctx, &obj, &ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := r.manager.Delete(ctx, location, obj)
	if err != nil && errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}

}

func (r *NtpSettingsResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

}

type NtpSettingsSystemLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
}
type NtpSettingsTemplateLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type NtpSettingsTemplateStackLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type NtpSettingsLocation struct {
	System        *NtpSettingsSystemLocation        `tfsdk:"system"`
	Template      *NtpSettingsTemplateLocation      `tfsdk:"template"`
	TemplateStack *NtpSettingsTemplateStackLocation `tfsdk:"template_stack"`
}

func NtpSettingsLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"system": rsschema.SingleNestedAttribute{
				Description: "Located in a system settings.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("system"),
						path.MatchRelative().AtParent().AtName("template"),
						path.MatchRelative().AtParent().AtName("template_stack"),
					}...),
				},
			},
			"template": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "The panorama device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The template.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_stack": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template stack.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "The panorama device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The template stack.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o NtpSettingsSystemLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		NgfwDevice *string `json:"ngfw_device"`
	}{
		NgfwDevice: o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *NtpSettingsSystemLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		NgfwDevice *string `json:"ngfw_device"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o NtpSettingsTemplateLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		PanoramaDevice *string `json:"panorama_device"`
		Name           *string `json:"name"`
		NgfwDevice     *string `json:"ngfw_device"`
	}{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *NtpSettingsTemplateLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device"`
		Name           *string `json:"name"`
		NgfwDevice     *string `json:"ngfw_device"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o NtpSettingsTemplateStackLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		PanoramaDevice *string `json:"panorama_device"`
		Name           *string `json:"name"`
		NgfwDevice     *string `json:"ngfw_device"`
	}{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *NtpSettingsTemplateStackLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device"`
		Name           *string `json:"name"`
		NgfwDevice     *string `json:"ngfw_device"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o NtpSettingsLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		System        *NtpSettingsSystemLocation        `json:"system"`
		Template      *NtpSettingsTemplateLocation      `json:"template"`
		TemplateStack *NtpSettingsTemplateStackLocation `json:"template_stack"`
	}{
		System:        o.System,
		Template:      o.Template,
		TemplateStack: o.TemplateStack,
	}

	return json.Marshal(obj)
}

func (o *NtpSettingsLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		System        *NtpSettingsSystemLocation        `json:"system"`
		Template      *NtpSettingsTemplateLocation      `json:"template"`
		TemplateStack *NtpSettingsTemplateStackLocation `json:"template_stack"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.System = shadow.System
	o.Template = shadow.Template
	o.TemplateStack = shadow.TemplateStack

	return nil
}
