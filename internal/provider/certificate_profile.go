package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/device/profile/certificate"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &CertificateProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &CertificateProfileDataSource{}
)

func NewCertificateProfileDataSource() datasource.DataSource {
	return &CertificateProfileDataSource{}
}

type CertificateProfileDataSource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*certificate.Entry, certificate.Location, *certificate.Service]
}

type CertificateProfileDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type CertificateProfileDataSourceModel struct {
	Location                        types.Object                                     `tfsdk:"location"`
	Name                            types.String                                     `tfsdk:"name"`
	BlockExpiredCertificate         types.Bool                                       `tfsdk:"block_expired_certificate"`
	BlockTimeoutCertificate         types.Bool                                       `tfsdk:"block_timeout_certificate"`
	BlockUnauthenticatedCertificate types.Bool                                       `tfsdk:"block_unauthenticated_certificate"`
	BlockUnknownCertificate         types.Bool                                       `tfsdk:"block_unknown_certificate"`
	Certificate                     types.List                                       `tfsdk:"certificate"`
	CertificateStatusTimeout        types.Int64                                      `tfsdk:"certificate_status_timeout"`
	CrlReceiveTimeout               types.Int64                                      `tfsdk:"crl_receive_timeout"`
	Domain                          types.String                                     `tfsdk:"domain"`
	OcspExcludeNonce                types.Bool                                       `tfsdk:"ocsp_exclude_nonce"`
	OcspReceiveTimeout              types.Int64                                      `tfsdk:"ocsp_receive_timeout"`
	UseCrl                          types.Bool                                       `tfsdk:"use_crl"`
	UseOcsp                         types.Bool                                       `tfsdk:"use_ocsp"`
	UsernameField                   *CertificateProfileDataSourceUsernameFieldObject `tfsdk:"username_field"`
}
type CertificateProfileDataSourceCertificateObject struct {
	Name                  types.String `tfsdk:"name"`
	DefaultOcspUrl        types.String `tfsdk:"default_ocsp_url"`
	OcspVerifyCertificate types.String `tfsdk:"ocsp_verify_certificate"`
	TemplateName          types.String `tfsdk:"template_name"`
}
type CertificateProfileDataSourceUsernameFieldObject struct {
	Subject    types.String `tfsdk:"subject"`
	SubjectAlt types.String `tfsdk:"subject_alt"`
}

func (o *CertificateProfileDataSourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj CertificateProfileLocation

	var usernameFieldObj *CertificateProfileDataSourceUsernameFieldObject
	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"name":                              types.StringType,
		"block_expired_certificate":         types.BoolType,
		"block_timeout_certificate":         types.BoolType,
		"block_unauthenticated_certificate": types.BoolType,
		"block_unknown_certificate":         types.BoolType,
		"certificate":                       types.ListType{},
		"certificate_status_timeout":        types.Int64Type,
		"crl_receive_timeout":               types.Int64Type,
		"domain":                            types.StringType,
		"ocsp_exclude_nonce":                types.BoolType,
		"ocsp_receive_timeout":              types.Int64Type,
		"use_crl":                           types.BoolType,
		"use_ocsp":                          types.BoolType,
		"username_field": types.ObjectType{
			AttrTypes: usernameFieldObj.AttributeTypes(),
		},
	}
}

func (o CertificateProfileDataSourceModel) AncestorName() string {
	return ""
}

func (o CertificateProfileDataSourceModel) EntryName() *string {
	return nil
}
func (o *CertificateProfileDataSourceCertificateObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":                    types.StringType,
		"default_ocsp_url":        types.StringType,
		"ocsp_verify_certificate": types.StringType,
		"template_name":           types.StringType,
	}
}

func (o CertificateProfileDataSourceCertificateObject) AncestorName() string {
	return "certificate"
}

func (o CertificateProfileDataSourceCertificateObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *CertificateProfileDataSourceUsernameFieldObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"subject":     types.StringType,
		"subject_alt": types.StringType,
	}
}

func (o CertificateProfileDataSourceUsernameFieldObject) AncestorName() string {
	return "username-field"
}

func (o CertificateProfileDataSourceUsernameFieldObject) EntryName() *string {
	return nil
}

func (o *CertificateProfileDataSourceModel) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **certificate.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	blockExpiredCertificate_value := o.BlockExpiredCertificate.ValueBoolPointer()
	blockTimeoutCertificate_value := o.BlockTimeoutCertificate.ValueBoolPointer()
	blockUnauthenticatedCertificate_value := o.BlockUnauthenticatedCertificate.ValueBoolPointer()
	blockUnknownCertificate_value := o.BlockUnknownCertificate.ValueBoolPointer()
	var certificate_tf_entries []CertificateProfileDataSourceCertificateObject
	var certificate_pango_entries []certificate.Certificate
	{
		d := o.Certificate.ElementsAs(ctx, &certificate_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range certificate_tf_entries {
			var entry *certificate.Certificate
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			certificate_pango_entries = append(certificate_pango_entries, *entry)
		}
	}
	certificateStatusTimeout_value := o.CertificateStatusTimeout.ValueInt64Pointer()
	crlReceiveTimeout_value := o.CrlReceiveTimeout.ValueInt64Pointer()
	domain_value := o.Domain.ValueStringPointer()
	ocspExcludeNonce_value := o.OcspExcludeNonce.ValueBoolPointer()
	ocspReceiveTimeout_value := o.OcspReceiveTimeout.ValueInt64Pointer()
	useCrl_value := o.UseCrl.ValueBoolPointer()
	useOcsp_value := o.UseOcsp.ValueBoolPointer()
	var usernameField_entry *certificate.UsernameField
	if o.UsernameField != nil {
		if *obj != nil && (*obj).UsernameField != nil {
			usernameField_entry = (*obj).UsernameField
		} else {
			usernameField_entry = new(certificate.UsernameField)
		}
		// ModelOrObject: Model
		diags.Append(o.UsernameField.CopyToPango(ctx, ancestors, &usernameField_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(certificate.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).BlockExpiredCertificate = blockExpiredCertificate_value
	(*obj).BlockTimeoutCertificate = blockTimeoutCertificate_value
	(*obj).BlockUnauthenticatedCertificate = blockUnauthenticatedCertificate_value
	(*obj).BlockUnknownCertificate = blockUnknownCertificate_value
	(*obj).Certificate = certificate_pango_entries
	(*obj).CertificateStatusTimeout = certificateStatusTimeout_value
	(*obj).CrlReceiveTimeout = crlReceiveTimeout_value
	(*obj).Domain = domain_value
	(*obj).OcspExcludeNonce = ocspExcludeNonce_value
	(*obj).OcspReceiveTimeout = ocspReceiveTimeout_value
	(*obj).UseCrl = useCrl_value
	(*obj).UseOcsp = useOcsp_value
	(*obj).UsernameField = usernameField_entry

	return diags
}
func (o *CertificateProfileDataSourceCertificateObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **certificate.Certificate, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	defaultOcspUrl_value := o.DefaultOcspUrl.ValueStringPointer()
	ocspVerifyCertificate_value := o.OcspVerifyCertificate.ValueStringPointer()
	templateName_value := o.TemplateName.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(certificate.Certificate)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).DefaultOcspUrl = defaultOcspUrl_value
	(*obj).OcspVerifyCertificate = ocspVerifyCertificate_value
	(*obj).TemplateName = templateName_value

	return diags
}
func (o *CertificateProfileDataSourceUsernameFieldObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **certificate.UsernameField, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	subject_value := o.Subject.ValueStringPointer()
	subjectAlt_value := o.SubjectAlt.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(certificate.UsernameField)
	}
	(*obj).Subject = subject_value
	(*obj).SubjectAlt = subjectAlt_value

	return diags
}

func (o *CertificateProfileDataSourceModel) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *certificate.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var certificate_list types.List
	{
		var certificate_tf_entries []CertificateProfileDataSourceCertificateObject
		for _, elt := range obj.Certificate {
			entry := CertificateProfileDataSourceCertificateObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			certificate_tf_entries = append(certificate_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("certificate")
		certificate_list, list_diags = types.ListValueFrom(ctx, schemaType, certificate_tf_entries)
		diags.Append(list_diags...)
	}
	var usernameField_object *CertificateProfileDataSourceUsernameFieldObject
	if obj.UsernameField != nil {
		usernameField_object = new(CertificateProfileDataSourceUsernameFieldObject)
		diags.Append(usernameField_object.CopyFromPango(ctx, ancestors, obj.UsernameField, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var blockExpiredCertificate_value types.Bool
	if obj.BlockExpiredCertificate != nil {
		blockExpiredCertificate_value = types.BoolValue(*obj.BlockExpiredCertificate)
	}
	var blockTimeoutCertificate_value types.Bool
	if obj.BlockTimeoutCertificate != nil {
		blockTimeoutCertificate_value = types.BoolValue(*obj.BlockTimeoutCertificate)
	}
	var blockUnauthenticatedCertificate_value types.Bool
	if obj.BlockUnauthenticatedCertificate != nil {
		blockUnauthenticatedCertificate_value = types.BoolValue(*obj.BlockUnauthenticatedCertificate)
	}
	var blockUnknownCertificate_value types.Bool
	if obj.BlockUnknownCertificate != nil {
		blockUnknownCertificate_value = types.BoolValue(*obj.BlockUnknownCertificate)
	}
	var certificateStatusTimeout_value types.Int64
	if obj.CertificateStatusTimeout != nil {
		certificateStatusTimeout_value = types.Int64Value(*obj.CertificateStatusTimeout)
	}
	var crlReceiveTimeout_value types.Int64
	if obj.CrlReceiveTimeout != nil {
		crlReceiveTimeout_value = types.Int64Value(*obj.CrlReceiveTimeout)
	}
	var domain_value types.String
	if obj.Domain != nil {
		domain_value = types.StringValue(*obj.Domain)
	}
	var ocspExcludeNonce_value types.Bool
	if obj.OcspExcludeNonce != nil {
		ocspExcludeNonce_value = types.BoolValue(*obj.OcspExcludeNonce)
	}
	var ocspReceiveTimeout_value types.Int64
	if obj.OcspReceiveTimeout != nil {
		ocspReceiveTimeout_value = types.Int64Value(*obj.OcspReceiveTimeout)
	}
	var useCrl_value types.Bool
	if obj.UseCrl != nil {
		useCrl_value = types.BoolValue(*obj.UseCrl)
	}
	var useOcsp_value types.Bool
	if obj.UseOcsp != nil {
		useOcsp_value = types.BoolValue(*obj.UseOcsp)
	}
	o.Name = types.StringValue(obj.Name)
	o.BlockExpiredCertificate = blockExpiredCertificate_value
	o.BlockTimeoutCertificate = blockTimeoutCertificate_value
	o.BlockUnauthenticatedCertificate = blockUnauthenticatedCertificate_value
	o.BlockUnknownCertificate = blockUnknownCertificate_value
	o.Certificate = certificate_list
	o.CertificateStatusTimeout = certificateStatusTimeout_value
	o.CrlReceiveTimeout = crlReceiveTimeout_value
	o.Domain = domain_value
	o.OcspExcludeNonce = ocspExcludeNonce_value
	o.OcspReceiveTimeout = ocspReceiveTimeout_value
	o.UseCrl = useCrl_value
	o.UseOcsp = useOcsp_value
	o.UsernameField = usernameField_object

	return diags
}

func (o *CertificateProfileDataSourceCertificateObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *certificate.Certificate, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var defaultOcspUrl_value types.String
	if obj.DefaultOcspUrl != nil {
		defaultOcspUrl_value = types.StringValue(*obj.DefaultOcspUrl)
	}
	var ocspVerifyCertificate_value types.String
	if obj.OcspVerifyCertificate != nil {
		ocspVerifyCertificate_value = types.StringValue(*obj.OcspVerifyCertificate)
	}
	var templateName_value types.String
	if obj.TemplateName != nil {
		templateName_value = types.StringValue(*obj.TemplateName)
	}
	o.Name = types.StringValue(obj.Name)
	o.DefaultOcspUrl = defaultOcspUrl_value
	o.OcspVerifyCertificate = ocspVerifyCertificate_value
	o.TemplateName = templateName_value

	return diags
}

func (o *CertificateProfileDataSourceUsernameFieldObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *certificate.UsernameField, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var subject_value types.String
	if obj.Subject != nil {
		subject_value = types.StringValue(*obj.Subject)
	}
	var subjectAlt_value types.String
	if obj.SubjectAlt != nil {
		subjectAlt_value = types.StringValue(*obj.SubjectAlt)
	}
	o.Subject = subject_value
	o.SubjectAlt = subjectAlt_value

	return diags
}

func (o *CertificateProfileDataSourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	return components, nil
}

func CertificateProfileDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": CertificateProfileDataSourceLocationSchema(),

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"block_expired_certificate": dsschema.BoolAttribute{
				Description: "Whether to block a session if certificate status is expired.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"block_timeout_certificate": dsschema.BoolAttribute{
				Description: "Whether to block a session if cert. status can't be retrieved within timeout.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"block_unauthenticated_certificate": dsschema.BoolAttribute{
				Description: "Whether to block session if the certificate was not issued to the authenticating device.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"block_unknown_certificate": dsschema.BoolAttribute{
				Description: "Whether to block a session if cert. status is unknown.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"certificate": dsschema.ListNestedAttribute{
				Description:  "CA Certificate to assign to the profile.",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: CertificateProfileDataSourceCertificateSchema(),
			},

			"certificate_status_timeout": dsschema.Int64Attribute{
				Description: "Certificate status query timeout value in seconds.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"crl_receive_timeout": dsschema.Int64Attribute{
				Description: "CRL receive timeout value in seconds.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"domain": dsschema.StringAttribute{
				Description: "NetBIOS domain so the PAN-OS software can map users through User-ID.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ocsp_exclude_nonce": dsschema.BoolAttribute{
				Description: "Whether to exclude nonce extension for OCSP requests.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ocsp_receive_timeout": dsschema.Int64Attribute{
				Description: "OCSP receive timeout value in seconds.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"use_crl": dsschema.BoolAttribute{
				Description: "Enable use of CRL to verify the revocation status of certificates.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"use_ocsp": dsschema.BoolAttribute{
				Description: "Enable use of OCSP to verify the revocation status of certificates.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"username_field": CertificateProfileDataSourceUsernameFieldSchema(),
		},
	}
}

func (o *CertificateProfileDataSourceModel) getTypeFor(name string) attr.Type {
	schema := CertificateProfileDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func CertificateProfileDataSourceCertificateSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"default_ocsp_url": dsschema.StringAttribute{
				Description: "Default URL for ocsp verification.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ocsp_verify_certificate": dsschema.StringAttribute{
				Description: "Certificate to verify signature in OCSP response.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"template_name": dsschema.StringAttribute{
				Description: "Certificate Template Name / OID for the certificate",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *CertificateProfileDataSourceCertificateObject) getTypeFor(name string) attr.Type {
	schema := CertificateProfileDataSourceCertificateSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func CertificateProfileDataSourceUsernameFieldSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"subject": dsschema.StringAttribute{
				Description: "The common name.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"subject_alt": dsschema.StringAttribute{
				Description: "The Email or Principal Name.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *CertificateProfileDataSourceUsernameFieldObject) getTypeFor(name string) attr.Type {
	schema := CertificateProfileDataSourceUsernameFieldSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func CertificateProfileDataSourceLocationSchema() rsschema.Attribute {
	return CertificateProfileLocationSchema()
}

// Metadata returns the data source type name.
func (d *CertificateProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_certificate_profile"
}

// Schema defines the schema for this data source.
func (d *CertificateProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = CertificateProfileDataSourceSchema()
}

// Configure prepares the struct.
func (d *CertificateProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	d.client = providerData.Client
	specifier, _, err := certificate.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	d.manager = sdkmanager.NewEntryObjectManager[*certificate.Entry, certificate.Location, *certificate.Service](d.client, certificate.NewService(d.client), batchSize, specifier, certificate.SpecMatches)
}
func (o *CertificateProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state CertificateProfileDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location certificate.Location

	{
		var terraformLocation CertificateProfileLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Panorama.IsNull() {
			location.Panorama = &certificate.PanoramaLocation{}
			var innerLocation CertificateProfilePanoramaLocation
			resp.Diagnostics.Append(terraformLocation.Panorama.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &certificate.SharedLocation{}
			var innerLocation CertificateProfileSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &certificate.TemplateLocation{}
			var innerLocation CertificateProfileTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
		}

		if !terraformLocation.TemplateVsys.IsNull() {
			location.TemplateVsys = &certificate.TemplateVsysLocation{}
			var innerLocation CertificateProfileTemplateVsysLocation
			resp.Diagnostics.Append(terraformLocation.TemplateVsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateVsys.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateVsys.Template = innerLocation.Template.ValueString()
			location.TemplateVsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.TemplateVsys.Vsys = innerLocation.Vsys.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &certificate.TemplateStackLocation{}
			var innerLocation CertificateProfileTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
		}

		if !terraformLocation.TemplateStackVsys.IsNull() {
			location.TemplateStackVsys = &certificate.TemplateStackVsysLocation{}
			var innerLocation CertificateProfileTemplateStackVsysLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStackVsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStackVsys.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStackVsys.TemplateStack = innerLocation.TemplateStack.ValueString()
			location.TemplateStackVsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.TemplateStackVsys.Vsys = innerLocation.Vsys.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_certificate_profile_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	components, err := savestate.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	object, err := o.manager.Read(ctx, location, components, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, nil, object, ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &CertificateProfileResource{}
	_ resource.ResourceWithConfigure   = &CertificateProfileResource{}
	_ resource.ResourceWithImportState = &CertificateProfileResource{}
)

func NewCertificateProfileResource() resource.Resource {
	if _, found := resourceFuncMap["panos_certificate_profile"]; !found {
		resourceFuncMap["panos_certificate_profile"] = resourceFuncs{
			CreateImportId: CertificateProfileImportStateCreator,
		}
	}
	return &CertificateProfileResource{}
}

type CertificateProfileResource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*certificate.Entry, certificate.Location, *certificate.Service]
}

func CertificateProfileResourceLocationSchema() rsschema.Attribute {
	return CertificateProfileLocationSchema()
}

type CertificateProfileResourceModel struct {
	Location                        types.Object                                   `tfsdk:"location"`
	Name                            types.String                                   `tfsdk:"name"`
	BlockExpiredCertificate         types.Bool                                     `tfsdk:"block_expired_certificate"`
	BlockTimeoutCertificate         types.Bool                                     `tfsdk:"block_timeout_certificate"`
	BlockUnauthenticatedCertificate types.Bool                                     `tfsdk:"block_unauthenticated_certificate"`
	BlockUnknownCertificate         types.Bool                                     `tfsdk:"block_unknown_certificate"`
	Certificate                     types.List                                     `tfsdk:"certificate"`
	CertificateStatusTimeout        types.Int64                                    `tfsdk:"certificate_status_timeout"`
	CrlReceiveTimeout               types.Int64                                    `tfsdk:"crl_receive_timeout"`
	Domain                          types.String                                   `tfsdk:"domain"`
	OcspExcludeNonce                types.Bool                                     `tfsdk:"ocsp_exclude_nonce"`
	OcspReceiveTimeout              types.Int64                                    `tfsdk:"ocsp_receive_timeout"`
	UseCrl                          types.Bool                                     `tfsdk:"use_crl"`
	UseOcsp                         types.Bool                                     `tfsdk:"use_ocsp"`
	UsernameField                   *CertificateProfileResourceUsernameFieldObject `tfsdk:"username_field"`
}
type CertificateProfileResourceCertificateObject struct {
	Name                  types.String `tfsdk:"name"`
	DefaultOcspUrl        types.String `tfsdk:"default_ocsp_url"`
	OcspVerifyCertificate types.String `tfsdk:"ocsp_verify_certificate"`
	TemplateName          types.String `tfsdk:"template_name"`
}
type CertificateProfileResourceUsernameFieldObject struct {
	Subject    types.String `tfsdk:"subject"`
	SubjectAlt types.String `tfsdk:"subject_alt"`
}

func (r *CertificateProfileResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func CertificateProfileResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": CertificateProfileResourceLocationSchema(),

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"block_expired_certificate": rsschema.BoolAttribute{
				Description: "Whether to block a session if certificate status is expired.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"block_timeout_certificate": rsschema.BoolAttribute{
				Description: "Whether to block a session if cert. status can't be retrieved within timeout.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"block_unauthenticated_certificate": rsschema.BoolAttribute{
				Description: "Whether to block session if the certificate was not issued to the authenticating device.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"block_unknown_certificate": rsschema.BoolAttribute{
				Description: "Whether to block a session if cert. status is unknown.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"certificate": rsschema.ListNestedAttribute{
				Description:  "CA Certificate to assign to the profile.",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: CertificateProfileResourceCertificateSchema(),
			},

			"certificate_status_timeout": rsschema.Int64Attribute{
				Description: "Certificate status query timeout value in seconds.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(5),
			},

			"crl_receive_timeout": rsschema.Int64Attribute{
				Description: "CRL receive timeout value in seconds.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(5),
			},

			"domain": rsschema.StringAttribute{
				Description: "NetBIOS domain so the PAN-OS software can map users through User-ID.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ocsp_exclude_nonce": rsschema.BoolAttribute{
				Description: "Whether to exclude nonce extension for OCSP requests.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ocsp_receive_timeout": rsschema.Int64Attribute{
				Description: "OCSP receive timeout value in seconds.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(5),
			},

			"use_crl": rsschema.BoolAttribute{
				Description: "Enable use of CRL to verify the revocation status of certificates.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"use_ocsp": rsschema.BoolAttribute{
				Description: "Enable use of OCSP to verify the revocation status of certificates.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"username_field": CertificateProfileResourceUsernameFieldSchema(),
		},
	}
}

func (o *CertificateProfileResourceModel) getTypeFor(name string) attr.Type {
	schema := CertificateProfileResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func CertificateProfileResourceCertificateSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"default_ocsp_url": rsschema.StringAttribute{
				Description: "Default URL for ocsp verification.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ocsp_verify_certificate": rsschema.StringAttribute{
				Description: "Certificate to verify signature in OCSP response.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"template_name": rsschema.StringAttribute{
				Description: "Certificate Template Name / OID for the certificate",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *CertificateProfileResourceCertificateObject) getTypeFor(name string) attr.Type {
	schema := CertificateProfileResourceCertificateSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func CertificateProfileResourceUsernameFieldSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"subject": rsschema.StringAttribute{
				Description: "The common name.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,

				Validators: []validator.String{
					stringvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("subject"),
						path.MatchRelative().AtParent().AtName("subject_alt"),
					}...),
				},
			},

			"subject_alt": rsschema.StringAttribute{
				Description: "The Email or Principal Name.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *CertificateProfileResourceUsernameFieldObject) getTypeFor(name string) attr.Type {
	schema := CertificateProfileResourceUsernameFieldSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *CertificateProfileResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_certificate_profile"
}

func (r *CertificateProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = CertificateProfileResourceSchema()
}

// </ResourceSchema>

func (r *CertificateProfileResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	r.client = providerData.Client
	specifier, _, err := certificate.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	r.manager = sdkmanager.NewEntryObjectManager[*certificate.Entry, certificate.Location, *certificate.Service](r.client, certificate.NewService(r.client), batchSize, specifier, certificate.SpecMatches)
}

func (o *CertificateProfileResourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj CertificateProfileLocation

	var usernameFieldObj *CertificateProfileResourceUsernameFieldObject
	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"name":                              types.StringType,
		"block_expired_certificate":         types.BoolType,
		"block_timeout_certificate":         types.BoolType,
		"block_unauthenticated_certificate": types.BoolType,
		"block_unknown_certificate":         types.BoolType,
		"certificate":                       types.ListType{},
		"certificate_status_timeout":        types.Int64Type,
		"crl_receive_timeout":               types.Int64Type,
		"domain":                            types.StringType,
		"ocsp_exclude_nonce":                types.BoolType,
		"ocsp_receive_timeout":              types.Int64Type,
		"use_crl":                           types.BoolType,
		"use_ocsp":                          types.BoolType,
		"username_field": types.ObjectType{
			AttrTypes: usernameFieldObj.AttributeTypes(),
		},
	}
}

func (o CertificateProfileResourceModel) AncestorName() string {
	return ""
}

func (o CertificateProfileResourceModel) EntryName() *string {
	return nil
}
func (o *CertificateProfileResourceCertificateObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":                    types.StringType,
		"default_ocsp_url":        types.StringType,
		"ocsp_verify_certificate": types.StringType,
		"template_name":           types.StringType,
	}
}

func (o CertificateProfileResourceCertificateObject) AncestorName() string {
	return "certificate"
}

func (o CertificateProfileResourceCertificateObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *CertificateProfileResourceUsernameFieldObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"subject":     types.StringType,
		"subject_alt": types.StringType,
	}
}

func (o CertificateProfileResourceUsernameFieldObject) AncestorName() string {
	return "username-field"
}

func (o CertificateProfileResourceUsernameFieldObject) EntryName() *string {
	return nil
}

func (o *CertificateProfileResourceModel) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **certificate.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	blockExpiredCertificate_value := o.BlockExpiredCertificate.ValueBoolPointer()
	blockTimeoutCertificate_value := o.BlockTimeoutCertificate.ValueBoolPointer()
	blockUnauthenticatedCertificate_value := o.BlockUnauthenticatedCertificate.ValueBoolPointer()
	blockUnknownCertificate_value := o.BlockUnknownCertificate.ValueBoolPointer()
	var certificate_tf_entries []CertificateProfileResourceCertificateObject
	var certificate_pango_entries []certificate.Certificate
	{
		d := o.Certificate.ElementsAs(ctx, &certificate_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range certificate_tf_entries {
			var entry *certificate.Certificate
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			certificate_pango_entries = append(certificate_pango_entries, *entry)
		}
	}
	certificateStatusTimeout_value := o.CertificateStatusTimeout.ValueInt64Pointer()
	crlReceiveTimeout_value := o.CrlReceiveTimeout.ValueInt64Pointer()
	domain_value := o.Domain.ValueStringPointer()
	ocspExcludeNonce_value := o.OcspExcludeNonce.ValueBoolPointer()
	ocspReceiveTimeout_value := o.OcspReceiveTimeout.ValueInt64Pointer()
	useCrl_value := o.UseCrl.ValueBoolPointer()
	useOcsp_value := o.UseOcsp.ValueBoolPointer()
	var usernameField_entry *certificate.UsernameField
	if o.UsernameField != nil {
		if *obj != nil && (*obj).UsernameField != nil {
			usernameField_entry = (*obj).UsernameField
		} else {
			usernameField_entry = new(certificate.UsernameField)
		}
		// ModelOrObject: Model
		diags.Append(o.UsernameField.CopyToPango(ctx, ancestors, &usernameField_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(certificate.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).BlockExpiredCertificate = blockExpiredCertificate_value
	(*obj).BlockTimeoutCertificate = blockTimeoutCertificate_value
	(*obj).BlockUnauthenticatedCertificate = blockUnauthenticatedCertificate_value
	(*obj).BlockUnknownCertificate = blockUnknownCertificate_value
	(*obj).Certificate = certificate_pango_entries
	(*obj).CertificateStatusTimeout = certificateStatusTimeout_value
	(*obj).CrlReceiveTimeout = crlReceiveTimeout_value
	(*obj).Domain = domain_value
	(*obj).OcspExcludeNonce = ocspExcludeNonce_value
	(*obj).OcspReceiveTimeout = ocspReceiveTimeout_value
	(*obj).UseCrl = useCrl_value
	(*obj).UseOcsp = useOcsp_value
	(*obj).UsernameField = usernameField_entry

	return diags
}
func (o *CertificateProfileResourceCertificateObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **certificate.Certificate, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	defaultOcspUrl_value := o.DefaultOcspUrl.ValueStringPointer()
	ocspVerifyCertificate_value := o.OcspVerifyCertificate.ValueStringPointer()
	templateName_value := o.TemplateName.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(certificate.Certificate)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).DefaultOcspUrl = defaultOcspUrl_value
	(*obj).OcspVerifyCertificate = ocspVerifyCertificate_value
	(*obj).TemplateName = templateName_value

	return diags
}
func (o *CertificateProfileResourceUsernameFieldObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **certificate.UsernameField, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	subject_value := o.Subject.ValueStringPointer()
	subjectAlt_value := o.SubjectAlt.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(certificate.UsernameField)
	}
	(*obj).Subject = subject_value
	(*obj).SubjectAlt = subjectAlt_value

	return diags
}

func (o *CertificateProfileResourceModel) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *certificate.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var certificate_list types.List
	{
		var certificate_tf_entries []CertificateProfileResourceCertificateObject
		for _, elt := range obj.Certificate {
			entry := CertificateProfileResourceCertificateObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			certificate_tf_entries = append(certificate_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("certificate")
		certificate_list, list_diags = types.ListValueFrom(ctx, schemaType, certificate_tf_entries)
		diags.Append(list_diags...)
	}
	var usernameField_object *CertificateProfileResourceUsernameFieldObject
	if obj.UsernameField != nil {
		usernameField_object = new(CertificateProfileResourceUsernameFieldObject)
		diags.Append(usernameField_object.CopyFromPango(ctx, ancestors, obj.UsernameField, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var blockExpiredCertificate_value types.Bool
	if obj.BlockExpiredCertificate != nil {
		blockExpiredCertificate_value = types.BoolValue(*obj.BlockExpiredCertificate)
	}
	var blockTimeoutCertificate_value types.Bool
	if obj.BlockTimeoutCertificate != nil {
		blockTimeoutCertificate_value = types.BoolValue(*obj.BlockTimeoutCertificate)
	}
	var blockUnauthenticatedCertificate_value types.Bool
	if obj.BlockUnauthenticatedCertificate != nil {
		blockUnauthenticatedCertificate_value = types.BoolValue(*obj.BlockUnauthenticatedCertificate)
	}
	var blockUnknownCertificate_value types.Bool
	if obj.BlockUnknownCertificate != nil {
		blockUnknownCertificate_value = types.BoolValue(*obj.BlockUnknownCertificate)
	}
	var certificateStatusTimeout_value types.Int64
	if obj.CertificateStatusTimeout != nil {
		certificateStatusTimeout_value = types.Int64Value(*obj.CertificateStatusTimeout)
	}
	var crlReceiveTimeout_value types.Int64
	if obj.CrlReceiveTimeout != nil {
		crlReceiveTimeout_value = types.Int64Value(*obj.CrlReceiveTimeout)
	}
	var domain_value types.String
	if obj.Domain != nil {
		domain_value = types.StringValue(*obj.Domain)
	}
	var ocspExcludeNonce_value types.Bool
	if obj.OcspExcludeNonce != nil {
		ocspExcludeNonce_value = types.BoolValue(*obj.OcspExcludeNonce)
	}
	var ocspReceiveTimeout_value types.Int64
	if obj.OcspReceiveTimeout != nil {
		ocspReceiveTimeout_value = types.Int64Value(*obj.OcspReceiveTimeout)
	}
	var useCrl_value types.Bool
	if obj.UseCrl != nil {
		useCrl_value = types.BoolValue(*obj.UseCrl)
	}
	var useOcsp_value types.Bool
	if obj.UseOcsp != nil {
		useOcsp_value = types.BoolValue(*obj.UseOcsp)
	}
	o.Name = types.StringValue(obj.Name)
	o.BlockExpiredCertificate = blockExpiredCertificate_value
	o.BlockTimeoutCertificate = blockTimeoutCertificate_value
	o.BlockUnauthenticatedCertificate = blockUnauthenticatedCertificate_value
	o.BlockUnknownCertificate = blockUnknownCertificate_value
	o.Certificate = certificate_list
	o.CertificateStatusTimeout = certificateStatusTimeout_value
	o.CrlReceiveTimeout = crlReceiveTimeout_value
	o.Domain = domain_value
	o.OcspExcludeNonce = ocspExcludeNonce_value
	o.OcspReceiveTimeout = ocspReceiveTimeout_value
	o.UseCrl = useCrl_value
	o.UseOcsp = useOcsp_value
	o.UsernameField = usernameField_object

	return diags
}

func (o *CertificateProfileResourceCertificateObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *certificate.Certificate, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var defaultOcspUrl_value types.String
	if obj.DefaultOcspUrl != nil {
		defaultOcspUrl_value = types.StringValue(*obj.DefaultOcspUrl)
	}
	var ocspVerifyCertificate_value types.String
	if obj.OcspVerifyCertificate != nil {
		ocspVerifyCertificate_value = types.StringValue(*obj.OcspVerifyCertificate)
	}
	var templateName_value types.String
	if obj.TemplateName != nil {
		templateName_value = types.StringValue(*obj.TemplateName)
	}
	o.Name = types.StringValue(obj.Name)
	o.DefaultOcspUrl = defaultOcspUrl_value
	o.OcspVerifyCertificate = ocspVerifyCertificate_value
	o.TemplateName = templateName_value

	return diags
}

func (o *CertificateProfileResourceUsernameFieldObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *certificate.UsernameField, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var subject_value types.String
	if obj.Subject != nil {
		subject_value = types.StringValue(*obj.Subject)
	}
	var subjectAlt_value types.String
	if obj.SubjectAlt != nil {
		subjectAlt_value = types.StringValue(*obj.SubjectAlt)
	}
	o.Subject = subject_value
	o.SubjectAlt = subjectAlt_value

	return diags
}

func (o *CertificateProfileResourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	return components, nil
}

func (r *CertificateProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state CertificateProfileResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_certificate_profile_resource",
		"function":      "Create",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	// Determine the location.

	var location certificate.Location

	{
		var terraformLocation CertificateProfileLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Panorama.IsNull() {
			location.Panorama = &certificate.PanoramaLocation{}
			var innerLocation CertificateProfilePanoramaLocation
			resp.Diagnostics.Append(terraformLocation.Panorama.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &certificate.SharedLocation{}
			var innerLocation CertificateProfileSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &certificate.TemplateLocation{}
			var innerLocation CertificateProfileTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
		}

		if !terraformLocation.TemplateVsys.IsNull() {
			location.TemplateVsys = &certificate.TemplateVsysLocation{}
			var innerLocation CertificateProfileTemplateVsysLocation
			resp.Diagnostics.Append(terraformLocation.TemplateVsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateVsys.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateVsys.Template = innerLocation.Template.ValueString()
			location.TemplateVsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.TemplateVsys.Vsys = innerLocation.Vsys.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &certificate.TemplateStackLocation{}
			var innerLocation CertificateProfileTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
		}

		if !terraformLocation.TemplateStackVsys.IsNull() {
			location.TemplateStackVsys = &certificate.TemplateStackVsysLocation{}
			var innerLocation CertificateProfileTemplateStackVsysLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStackVsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStackVsys.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStackVsys.TemplateStack = innerLocation.TemplateStack.ValueString()
			location.TemplateStackVsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.TemplateStackVsys.Vsys = innerLocation.Vsys.ValueString()
		}
	}

	if err := location.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *certificate.Entry
	resp.Diagnostics.Append(state.CopyToPango(ctx, nil, &obj, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	created, err := r.manager.Create(ctx, location, components, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	resp.Diagnostics.Append(state.CopyFromPango(ctx, nil, created, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
func (o *CertificateProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state CertificateProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	encryptedValues, diags := req.Private.GetKey(ctx, "encrypted_values")
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location certificate.Location

	{
		var terraformLocation CertificateProfileLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Panorama.IsNull() {
			location.Panorama = &certificate.PanoramaLocation{}
			var innerLocation CertificateProfilePanoramaLocation
			resp.Diagnostics.Append(terraformLocation.Panorama.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &certificate.SharedLocation{}
			var innerLocation CertificateProfileSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &certificate.TemplateLocation{}
			var innerLocation CertificateProfileTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
		}

		if !terraformLocation.TemplateVsys.IsNull() {
			location.TemplateVsys = &certificate.TemplateVsysLocation{}
			var innerLocation CertificateProfileTemplateVsysLocation
			resp.Diagnostics.Append(terraformLocation.TemplateVsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateVsys.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateVsys.Template = innerLocation.Template.ValueString()
			location.TemplateVsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.TemplateVsys.Vsys = innerLocation.Vsys.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &certificate.TemplateStackLocation{}
			var innerLocation CertificateProfileTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
		}

		if !terraformLocation.TemplateStackVsys.IsNull() {
			location.TemplateStackVsys = &certificate.TemplateStackVsysLocation{}
			var innerLocation CertificateProfileTemplateStackVsysLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStackVsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStackVsys.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStackVsys.TemplateStack = innerLocation.TemplateStack.ValueString()
			location.TemplateStackVsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.TemplateStackVsys.Vsys = innerLocation.Vsys.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_certificate_profile_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	components, err := savestate.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	object, err := o.manager.Read(ctx, location, components, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, nil, object, ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *CertificateProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state CertificateProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	encryptedValues, diags := req.Private.GetKey(ctx, "encrypted_values")
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location certificate.Location

	{
		var terraformLocation CertificateProfileLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Panorama.IsNull() {
			location.Panorama = &certificate.PanoramaLocation{}
			var innerLocation CertificateProfilePanoramaLocation
			resp.Diagnostics.Append(terraformLocation.Panorama.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &certificate.SharedLocation{}
			var innerLocation CertificateProfileSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &certificate.TemplateLocation{}
			var innerLocation CertificateProfileTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
		}

		if !terraformLocation.TemplateVsys.IsNull() {
			location.TemplateVsys = &certificate.TemplateVsysLocation{}
			var innerLocation CertificateProfileTemplateVsysLocation
			resp.Diagnostics.Append(terraformLocation.TemplateVsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateVsys.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateVsys.Template = innerLocation.Template.ValueString()
			location.TemplateVsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.TemplateVsys.Vsys = innerLocation.Vsys.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &certificate.TemplateStackLocation{}
			var innerLocation CertificateProfileTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
		}

		if !terraformLocation.TemplateStackVsys.IsNull() {
			location.TemplateStackVsys = &certificate.TemplateStackVsysLocation{}
			var innerLocation CertificateProfileTemplateStackVsysLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStackVsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStackVsys.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStackVsys.TemplateStack = innerLocation.TemplateStack.ValueString()
			location.TemplateStackVsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.TemplateStackVsys.Vsys = innerLocation.Vsys.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_certificate_profile_resource",
		"function":      "Update",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	obj, err := r.manager.Read(ctx, location, components, plan.Name.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, nil, &obj, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	components, err = plan.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}

	updated, err := r.manager.Update(ctx, location, components, obj, obj.Name)

	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	copy_diags := state.CopyFromPango(ctx, nil, updated, ev)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *CertificateProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state CertificateProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_certificate_profile_resource",
		"function":      "Delete",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var location certificate.Location

	{
		var terraformLocation CertificateProfileLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Panorama.IsNull() {
			location.Panorama = &certificate.PanoramaLocation{}
			var innerLocation CertificateProfilePanoramaLocation
			resp.Diagnostics.Append(terraformLocation.Panorama.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &certificate.SharedLocation{}
			var innerLocation CertificateProfileSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &certificate.TemplateLocation{}
			var innerLocation CertificateProfileTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
		}

		if !terraformLocation.TemplateVsys.IsNull() {
			location.TemplateVsys = &certificate.TemplateVsysLocation{}
			var innerLocation CertificateProfileTemplateVsysLocation
			resp.Diagnostics.Append(terraformLocation.TemplateVsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateVsys.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateVsys.Template = innerLocation.Template.ValueString()
			location.TemplateVsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.TemplateVsys.Vsys = innerLocation.Vsys.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &certificate.TemplateStackLocation{}
			var innerLocation CertificateProfileTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
		}

		if !terraformLocation.TemplateStackVsys.IsNull() {
			location.TemplateStackVsys = &certificate.TemplateStackVsysLocation{}
			var innerLocation CertificateProfileTemplateStackVsysLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStackVsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStackVsys.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStackVsys.TemplateStack = innerLocation.TemplateStack.ValueString()
			location.TemplateStackVsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.TemplateStackVsys.Vsys = innerLocation.Vsys.ValueString()
		}
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	err = r.manager.Delete(ctx, location, components, []string{state.Name.ValueString()})
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
		return
	}

}

type CertificateProfileImportState struct {
	Location types.Object `json:"location"`
	Name     types.String `json:"name"`
}

func (o CertificateProfileImportState) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Location *CertificateProfileLocation `json:"location"`
		Name     *string                     `json:"name"`
	}
	var location_object *CertificateProfileLocation
	{
		diags := o.Location.As(context.TODO(), &location_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal location into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Location: location_object,
		Name:     o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *CertificateProfileImportState) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Location *CertificateProfileLocation `json:"location"`
		Name     *string                     `json:"name"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var location_object types.Object
	{
		var diags_tmp diag.Diagnostics
		location_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Location.AttributeTypes(), shadow.Location)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into location", diags_tmp.Errors())
		}
	}
	o.Location = location_object
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}

func CertificateProfileImportStateCreator(ctx context.Context, resource types.Object) ([]byte, error) {
	attrs := resource.Attributes()
	if attrs == nil {
		return nil, fmt.Errorf("Object has no attributes")
	}

	locationAttr, ok := attrs["location"]
	if !ok {
		return nil, fmt.Errorf("location attribute missing")
	}

	var location types.Object
	switch value := locationAttr.(type) {
	case types.Object:
		location = value
	default:
		return nil, fmt.Errorf("location attribute expected to be an object")
	}
	nameAttr, ok := attrs["name"]
	if !ok {
		return nil, fmt.Errorf("name attribute missing")
	}

	var name types.String
	switch value := nameAttr.(type) {
	case types.String:
		name = value
	default:
		return nil, fmt.Errorf("name attribute expected to be a string")
	}

	importStruct := CertificateProfileImportState{
		Location: location,
		Name:     name,
	}

	return json.Marshal(importStruct)
}

func (r *CertificateProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	var obj CertificateProfileImportState
	data, err := base64.StdEncoding.DecodeString(req.ID)
	if err != nil {
		resp.Diagnostics.AddError("Failed to decode Import ID", err.Error())
		return
	}

	err = json.Unmarshal(data, &obj)
	if err != nil {
		var diagsErr *DiagnosticsError
		if errors.As(err, &diagsErr) {
			resp.Diagnostics.Append(diagsErr.Diagnostics()...)
		} else {
			resp.Diagnostics.AddError("Failed to unmarshal Import ID", err.Error())
		}
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("location"), obj.Location)...)
	if resp.Diagnostics.HasError() {
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("name"), obj.Name)...)
}

type CertificateProfilePanoramaLocation struct {
}
type CertificateProfileSharedLocation struct {
}
type CertificateProfileTemplateLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
}
type CertificateProfileTemplateVsysLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Template       types.String `tfsdk:"template"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
	Vsys           types.String `tfsdk:"vsys"`
}
type CertificateProfileTemplateStackLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
}
type CertificateProfileTemplateStackVsysLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	TemplateStack  types.String `tfsdk:"template_stack"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
	Vsys           types.String `tfsdk:"vsys"`
}
type CertificateProfileLocation struct {
	Panorama          types.Object `tfsdk:"panorama"`
	Shared            types.Object `tfsdk:"shared"`
	Template          types.Object `tfsdk:"template"`
	TemplateVsys      types.Object `tfsdk:"template_vsys"`
	TemplateStack     types.Object `tfsdk:"template_stack"`
	TemplateStackVsys types.Object `tfsdk:"template_stack_vsys"`
}

func CertificateProfileLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"panorama": rsschema.SingleNestedAttribute{
				Description: "Located in a panorama.",
				Optional:    true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("panorama"),
						path.MatchRelative().AtParent().AtName("shared"),
						path.MatchRelative().AtParent().AtName("template"),
						path.MatchRelative().AtParent().AtName("template_vsys"),
						path.MatchRelative().AtParent().AtName("template_stack"),
						path.MatchRelative().AtParent().AtName("template_stack_vsys"),
					}...),
				},
			},
			"shared": rsschema.SingleNestedAttribute{
				Description: "Panorama shared object",
				Optional:    true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template": rsschema.SingleNestedAttribute{
				Description: "A shared resource located within a specific template",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Specific Panorama template",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template, device and vsys.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"template": rsschema.StringAttribute{
						Description: "Specific Panorama template",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"vsys": rsschema.StringAttribute{
						Description: "The vsys.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_stack": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The template stack",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_stack_vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template, device and vsys.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"template_stack": rsschema.StringAttribute{
						Description: "The template stack",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"vsys": rsschema.StringAttribute{
						Description: "The vsys.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o CertificateProfilePanoramaLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
	}

	obj := shadow{}

	return json.Marshal(obj)
}

func (o *CertificateProfilePanoramaLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}

	return nil
}
func (o CertificateProfileSharedLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
	}

	obj := shadow{}

	return json.Marshal(obj)
}

func (o *CertificateProfileSharedLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}

	return nil
}
func (o CertificateProfileTemplateLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *CertificateProfileTemplateLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o CertificateProfileTemplateVsysLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Template       *string `json:"template,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
		Vsys           *string `json:"vsys,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Template:       o.Template.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
		Vsys:           o.Vsys.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *CertificateProfileTemplateVsysLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Template       *string `json:"template,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
		Vsys           *string `json:"vsys,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Template = types.StringPointerValue(shadow.Template)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)
	o.Vsys = types.StringPointerValue(shadow.Vsys)

	return nil
}
func (o CertificateProfileTemplateStackLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *CertificateProfileTemplateStackLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o CertificateProfileTemplateStackVsysLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		TemplateStack  *string `json:"template_stack,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
		Vsys           *string `json:"vsys,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		TemplateStack:  o.TemplateStack.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
		Vsys:           o.Vsys.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *CertificateProfileTemplateStackVsysLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		TemplateStack  *string `json:"template_stack,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
		Vsys           *string `json:"vsys,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.TemplateStack = types.StringPointerValue(shadow.TemplateStack)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)
	o.Vsys = types.StringPointerValue(shadow.Vsys)

	return nil
}
func (o CertificateProfileLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Panorama          *CertificateProfilePanoramaLocation          `json:"panorama,omitempty"`
		Shared            *CertificateProfileSharedLocation            `json:"shared,omitempty"`
		Template          *CertificateProfileTemplateLocation          `json:"template,omitempty"`
		TemplateVsys      *CertificateProfileTemplateVsysLocation      `json:"template_vsys,omitempty"`
		TemplateStack     *CertificateProfileTemplateStackLocation     `json:"template_stack,omitempty"`
		TemplateStackVsys *CertificateProfileTemplateStackVsysLocation `json:"template_stack_vsys,omitempty"`
	}
	var panorama_object *CertificateProfilePanoramaLocation
	{
		diags := o.Panorama.As(context.TODO(), &panorama_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal panorama into JSON document", diags.Errors())
		}
	}
	var shared_object *CertificateProfileSharedLocation
	{
		diags := o.Shared.As(context.TODO(), &shared_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal shared into JSON document", diags.Errors())
		}
	}
	var template_object *CertificateProfileTemplateLocation
	{
		diags := o.Template.As(context.TODO(), &template_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template into JSON document", diags.Errors())
		}
	}
	var templateVsys_object *CertificateProfileTemplateVsysLocation
	{
		diags := o.TemplateVsys.As(context.TODO(), &templateVsys_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template_vsys into JSON document", diags.Errors())
		}
	}
	var templateStack_object *CertificateProfileTemplateStackLocation
	{
		diags := o.TemplateStack.As(context.TODO(), &templateStack_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template_stack into JSON document", diags.Errors())
		}
	}
	var templateStackVsys_object *CertificateProfileTemplateStackVsysLocation
	{
		diags := o.TemplateStackVsys.As(context.TODO(), &templateStackVsys_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template_stack_vsys into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Panorama:          panorama_object,
		Shared:            shared_object,
		Template:          template_object,
		TemplateVsys:      templateVsys_object,
		TemplateStack:     templateStack_object,
		TemplateStackVsys: templateStackVsys_object,
	}

	return json.Marshal(obj)
}

func (o *CertificateProfileLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Panorama          *CertificateProfilePanoramaLocation          `json:"panorama,omitempty"`
		Shared            *CertificateProfileSharedLocation            `json:"shared,omitempty"`
		Template          *CertificateProfileTemplateLocation          `json:"template,omitempty"`
		TemplateVsys      *CertificateProfileTemplateVsysLocation      `json:"template_vsys,omitempty"`
		TemplateStack     *CertificateProfileTemplateStackLocation     `json:"template_stack,omitempty"`
		TemplateStackVsys *CertificateProfileTemplateStackVsysLocation `json:"template_stack_vsys,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var panorama_object types.Object
	{
		var diags_tmp diag.Diagnostics
		panorama_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Panorama.AttributeTypes(), shadow.Panorama)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into panorama", diags_tmp.Errors())
		}
	}
	var shared_object types.Object
	{
		var diags_tmp diag.Diagnostics
		shared_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Shared.AttributeTypes(), shadow.Shared)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into shared", diags_tmp.Errors())
		}
	}
	var template_object types.Object
	{
		var diags_tmp diag.Diagnostics
		template_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Template.AttributeTypes(), shadow.Template)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template", diags_tmp.Errors())
		}
	}
	var templateVsys_object types.Object
	{
		var diags_tmp diag.Diagnostics
		templateVsys_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.TemplateVsys.AttributeTypes(), shadow.TemplateVsys)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template_vsys", diags_tmp.Errors())
		}
	}
	var templateStack_object types.Object
	{
		var diags_tmp diag.Diagnostics
		templateStack_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.TemplateStack.AttributeTypes(), shadow.TemplateStack)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template_stack", diags_tmp.Errors())
		}
	}
	var templateStackVsys_object types.Object
	{
		var diags_tmp diag.Diagnostics
		templateStackVsys_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.TemplateStackVsys.AttributeTypes(), shadow.TemplateStackVsys)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template_stack_vsys", diags_tmp.Errors())
		}
	}
	o.Panorama = panorama_object
	o.Shared = shared_object
	o.Template = template_object
	o.TemplateVsys = templateVsys_object
	o.TemplateStack = templateStack_object
	o.TemplateStackVsys = templateStackVsys_object

	return nil
}

func (o *CertificateProfilePanoramaLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}
func (o *CertificateProfileSharedLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}
func (o *CertificateProfileTemplateLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
	}
}
func (o *CertificateProfileTemplateVsysLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"template":        types.StringType,
		"ngfw_device":     types.StringType,
		"vsys":            types.StringType,
	}
}
func (o *CertificateProfileTemplateStackLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
	}
}
func (o *CertificateProfileTemplateStackVsysLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"template_stack":  types.StringType,
		"ngfw_device":     types.StringType,
		"vsys":            types.StringType,
	}
}
func (o *CertificateProfileLocation) AttributeTypes() map[string]attr.Type {
	var panoramaObj CertificateProfilePanoramaLocation
	var sharedObj CertificateProfileSharedLocation
	var templateObj CertificateProfileTemplateLocation
	var templateVsysObj CertificateProfileTemplateVsysLocation
	var templateStackObj CertificateProfileTemplateStackLocation
	var templateStackVsysObj CertificateProfileTemplateStackVsysLocation
	return map[string]attr.Type{
		"panorama": types.ObjectType{
			AttrTypes: panoramaObj.AttributeTypes(),
		},
		"shared": types.ObjectType{
			AttrTypes: sharedObj.AttributeTypes(),
		},
		"template": types.ObjectType{
			AttrTypes: templateObj.AttributeTypes(),
		},
		"template_vsys": types.ObjectType{
			AttrTypes: templateVsysObj.AttributeTypes(),
		},
		"template_stack": types.ObjectType{
			AttrTypes: templateStackObj.AttributeTypes(),
		},
		"template_stack_vsys": types.ObjectType{
			AttrTypes: templateStackVsysObj.AttributeTypes(),
		},
	}
}
