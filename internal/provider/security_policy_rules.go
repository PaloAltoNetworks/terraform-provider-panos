package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	sdkerrors "github.com/PaloAltoNetworks/pango/errors"
	"github.com/PaloAltoNetworks/pango/policies/rules/security"

	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &SecurityPolicyRulesDataSource{}
	_ datasource.DataSourceWithConfigure = &SecurityPolicyRulesDataSource{}
)

func NewSecurityPolicyRulesDataSource() datasource.DataSource {
	return &SecurityPolicyRulesDataSource{}
}

type SecurityPolicyRulesDataSource struct {
	client  *pango.Client
	manager *sdkmanager.UuidObjectManager[*security.Entry, security.Location, *security.Service]
}

type SecurityPolicyRulesDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type SecurityPolicyRulesDataSourceModel struct {
	Location SecurityPolicyRulesLocation `tfsdk:"location"`
	Position TerraformPositionObject     `tfsdk:"position"`
	Rules    types.List                  `tfsdk:"rules"`
}
type SecurityPolicyRulesDataSourceRulesObject struct {
	Name                            types.String                                            `tfsdk:"name"`
	DestinationZone                 types.String                                            `tfsdk:"destination_zone"`
	Action                          types.String                                            `tfsdk:"action"`
	Schedule                        types.String                                            `tfsdk:"schedule"`
	SourceNwSlice                   types.List                                              `tfsdk:"source_nw_slice"`
	SourceAddresses                 types.List                                              `tfsdk:"source_addresses"`
	SourceHip                       types.List                                              `tfsdk:"source_hip"`
	GroupTag                        types.String                                            `tfsdk:"group_tag"`
	LogEnd                          types.Bool                                              `tfsdk:"log_end"`
	Services                        types.List                                              `tfsdk:"services"`
	Tag                             types.List                                              `tfsdk:"tag"`
	RuleType                        types.String                                            `tfsdk:"rule_type"`
	SourceImsi                      types.List                                              `tfsdk:"source_imsi"`
	SourceUsers                     types.List                                              `tfsdk:"source_users"`
	NegateDestination               types.Bool                                              `tfsdk:"negate_destination"`
	Uuid                            types.String                                            `tfsdk:"uuid"`
	DestinationAddresses            types.List                                              `tfsdk:"destination_addresses"`
	DestinationHip                  types.List                                              `tfsdk:"destination_hip"`
	LogSetting                      types.String                                            `tfsdk:"log_setting"`
	Target                          *SecurityPolicyRulesDataSourceRulesTargetObject         `tfsdk:"target"`
	Category                        types.List                                              `tfsdk:"category"`
	Qos                             *SecurityPolicyRulesDataSourceRulesQosObject            `tfsdk:"qos"`
	SourceImei                      types.List                                              `tfsdk:"source_imei"`
	LogStart                        types.Bool                                              `tfsdk:"log_start"`
	ProfileSetting                  *SecurityPolicyRulesDataSourceRulesProfileSettingObject `tfsdk:"profile_setting"`
	Disabled                        types.Bool                                              `tfsdk:"disabled"`
	SourceZones                     types.List                                              `tfsdk:"source_zones"`
	IcmpUnreachable                 types.Bool                                              `tfsdk:"icmp_unreachable"`
	DisableServerResponseInspection types.Bool                                              `tfsdk:"disable_server_response_inspection"`
	Applications                    types.List                                              `tfsdk:"applications"`
	Description                     types.String                                            `tfsdk:"description"`
	DisableInspect                  types.Bool                                              `tfsdk:"disable_inspect"`
	NegateSource                    types.Bool                                              `tfsdk:"negate_source"`
}
type SecurityPolicyRulesDataSourceRulesTargetObject struct {
	Devices types.List `tfsdk:"devices"`
	Negate  types.Bool `tfsdk:"negate"`
	Tags    types.List `tfsdk:"tags"`
}
type SecurityPolicyRulesDataSourceRulesTargetDevicesObject struct {
	Name types.String `tfsdk:"name"`
	Vsys types.List   `tfsdk:"vsys"`
}
type SecurityPolicyRulesDataSourceRulesTargetDevicesVsysObject struct {
	Name types.String `tfsdk:"name"`
}
type SecurityPolicyRulesDataSourceRulesQosObject struct {
	Marking *SecurityPolicyRulesDataSourceRulesQosMarkingObject `tfsdk:"marking"`
}
type SecurityPolicyRulesDataSourceRulesQosMarkingObject struct {
	IpPrecedence  types.String                                                     `tfsdk:"ip_precedence"`
	FollowC2sFlow *SecurityPolicyRulesDataSourceRulesQosMarkingFollowC2sFlowObject `tfsdk:"follow_c2s_flow"`
	IpDscp        types.String                                                     `tfsdk:"ip_dscp"`
}
type SecurityPolicyRulesDataSourceRulesQosMarkingFollowC2sFlowObject struct {
}
type SecurityPolicyRulesDataSourceRulesProfileSettingObject struct {
	Profiles *SecurityPolicyRulesDataSourceRulesProfileSettingProfilesObject `tfsdk:"profiles"`
	Group    types.List                                                      `tfsdk:"group"`
}
type SecurityPolicyRulesDataSourceRulesProfileSettingProfilesObject struct {
	DataFiltering    types.List `tfsdk:"data_filtering"`
	Gtp              types.List `tfsdk:"gtp"`
	Sctp             types.List `tfsdk:"sctp"`
	Vulnerability    types.List `tfsdk:"vulnerability"`
	WildfireAnalysis types.List `tfsdk:"wildfire_analysis"`
	FileBlocking     types.List `tfsdk:"file_blocking"`
	Spyware          types.List `tfsdk:"spyware"`
	UrlFiltering     types.List `tfsdk:"url_filtering"`
	Virus            types.List `tfsdk:"virus"`
}

func (o *SecurityPolicyRulesDataSourceRulesObject) CopyToPango(ctx context.Context, obj **security.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	action_value := o.Action.ValueStringPointer()
	schedule_value := o.Schedule.ValueStringPointer()
	sourceNwSlice_pango_entries := make([]string, 0)
	diags.Append(o.SourceNwSlice.ElementsAs(ctx, &sourceNwSlice_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	destinationZone_pango_entries := []string{o.DestinationZone.ValueString()}
	groupTag_value := o.GroupTag.ValueStringPointer()
	logEnd_value := o.LogEnd.ValueBoolPointer()
	services_pango_entries := make([]string, 0)
	diags.Append(o.Services.ElementsAs(ctx, &services_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceAddresses_pango_entries := make([]string, 0)
	diags.Append(o.SourceAddresses.ElementsAs(ctx, &sourceAddresses_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceHip_pango_entries := make([]string, 0)
	diags.Append(o.SourceHip.ElementsAs(ctx, &sourceHip_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	ruleType_value := o.RuleType.ValueStringPointer()
	sourceImsi_pango_entries := make([]string, 0)
	diags.Append(o.SourceImsi.ElementsAs(ctx, &sourceImsi_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceUsers_pango_entries := make([]string, 0)
	diags.Append(o.SourceUsers.ElementsAs(ctx, &sourceUsers_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	tag_pango_entries := make([]string, 0)
	diags.Append(o.Tag.ElementsAs(ctx, &tag_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	destinationAddresses_pango_entries := make([]string, 0)
	diags.Append(o.DestinationAddresses.ElementsAs(ctx, &destinationAddresses_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	destinationHip_pango_entries := make([]string, 0)
	diags.Append(o.DestinationHip.ElementsAs(ctx, &destinationHip_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	logSetting_value := o.LogSetting.ValueStringPointer()
	negateDestination_value := o.NegateDestination.ValueBoolPointer()
	uuid_value := o.Uuid.ValueStringPointer()
	category_pango_entries := make([]string, 0)
	diags.Append(o.Category.ElementsAs(ctx, &category_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var qos_entry *security.Qos
	if o.Qos != nil {
		if *obj != nil && (*obj).Qos != nil {
			qos_entry = (*obj).Qos
		} else {
			qos_entry = new(security.Qos)
		}

		diags.Append(o.Qos.CopyToPango(ctx, &qos_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	sourceImei_pango_entries := make([]string, 0)
	diags.Append(o.SourceImei.ElementsAs(ctx, &sourceImei_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var target_entry *security.Target
	if o.Target != nil {
		if *obj != nil && (*obj).Target != nil {
			target_entry = (*obj).Target
		} else {
			target_entry = new(security.Target)
		}

		diags.Append(o.Target.CopyToPango(ctx, &target_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	disabled_value := o.Disabled.ValueBoolPointer()
	sourceZones_pango_entries := make([]string, 0)
	diags.Append(o.SourceZones.ElementsAs(ctx, &sourceZones_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	icmpUnreachable_value := o.IcmpUnreachable.ValueBoolPointer()
	logStart_value := o.LogStart.ValueBoolPointer()
	var profileSetting_entry *security.ProfileSetting
	if o.ProfileSetting != nil {
		if *obj != nil && (*obj).ProfileSetting != nil {
			profileSetting_entry = (*obj).ProfileSetting
		} else {
			profileSetting_entry = new(security.ProfileSetting)
		}

		diags.Append(o.ProfileSetting.CopyToPango(ctx, &profileSetting_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	applications_pango_entries := make([]string, 0)
	diags.Append(o.Applications.ElementsAs(ctx, &applications_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	description_value := o.Description.ValueStringPointer()
	disableInspect_value := o.DisableInspect.ValueBoolPointer()
	disableServerResponseInspection_value := o.DisableServerResponseInspection.ValueBoolPointer()
	negateSource_value := o.NegateSource.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(security.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Action = action_value
	(*obj).Schedule = schedule_value
	(*obj).SourceNwSlice = sourceNwSlice_pango_entries
	(*obj).To = destinationZone_pango_entries
	(*obj).GroupTag = groupTag_value
	(*obj).LogEnd = logEnd_value
	(*obj).Service = services_pango_entries
	(*obj).Source = sourceAddresses_pango_entries
	(*obj).SourceHip = sourceHip_pango_entries
	(*obj).RuleType = ruleType_value
	(*obj).SourceImsi = sourceImsi_pango_entries
	(*obj).SourceUser = sourceUsers_pango_entries
	(*obj).Tag = tag_pango_entries
	(*obj).Destination = destinationAddresses_pango_entries
	(*obj).DestinationHip = destinationHip_pango_entries
	(*obj).LogSetting = logSetting_value
	(*obj).NegateDestination = negateDestination_value
	(*obj).Uuid = uuid_value
	(*obj).Category = category_pango_entries
	(*obj).Qos = qos_entry
	(*obj).SourceImei = sourceImei_pango_entries
	(*obj).Target = target_entry
	(*obj).Disabled = disabled_value
	(*obj).From = sourceZones_pango_entries
	(*obj).IcmpUnreachable = icmpUnreachable_value
	(*obj).LogStart = logStart_value
	(*obj).ProfileSetting = profileSetting_entry
	(*obj).Application = applications_pango_entries
	(*obj).Description = description_value
	(*obj).DisableInspect = disableInspect_value
	(*obj).DisableServerResponseInspection = disableServerResponseInspection_value
	(*obj).NegateSource = negateSource_value

	return diags
}
func (o *SecurityPolicyRulesDataSourceRulesQosObject) CopyToPango(ctx context.Context, obj **security.Qos, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var marking_entry *security.QosMarking
	if o.Marking != nil {
		if *obj != nil && (*obj).Marking != nil {
			marking_entry = (*obj).Marking
		} else {
			marking_entry = new(security.QosMarking)
		}

		diags.Append(o.Marking.CopyToPango(ctx, &marking_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(security.Qos)
	}
	(*obj).Marking = marking_entry

	return diags
}
func (o *SecurityPolicyRulesDataSourceRulesQosMarkingObject) CopyToPango(ctx context.Context, obj **security.QosMarking, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var followC2sFlow_entry *security.QosMarkingFollowC2sFlow
	if o.FollowC2sFlow != nil {
		if *obj != nil && (*obj).FollowC2sFlow != nil {
			followC2sFlow_entry = (*obj).FollowC2sFlow
		} else {
			followC2sFlow_entry = new(security.QosMarkingFollowC2sFlow)
		}

		diags.Append(o.FollowC2sFlow.CopyToPango(ctx, &followC2sFlow_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	ipDscp_value := o.IpDscp.ValueStringPointer()
	ipPrecedence_value := o.IpPrecedence.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(security.QosMarking)
	}
	(*obj).FollowC2sFlow = followC2sFlow_entry
	(*obj).IpDscp = ipDscp_value
	(*obj).IpPrecedence = ipPrecedence_value

	return diags
}
func (o *SecurityPolicyRulesDataSourceRulesQosMarkingFollowC2sFlowObject) CopyToPango(ctx context.Context, obj **security.QosMarkingFollowC2sFlow, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(security.QosMarkingFollowC2sFlow)
	}

	return diags
}
func (o *SecurityPolicyRulesDataSourceRulesTargetObject) CopyToPango(ctx context.Context, obj **security.Target, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var devices_tf_entries []SecurityPolicyRulesDataSourceRulesTargetDevicesObject
	var devices_pango_entries []security.TargetDevices
	{
		d := o.Devices.ElementsAs(ctx, &devices_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range devices_tf_entries {
			var entry *security.TargetDevices
			diags.Append(elt.CopyToPango(ctx, &entry, encrypted)...)
			if diags.HasError() {
				return diags
			}
			devices_pango_entries = append(devices_pango_entries, *entry)
		}
	}
	negate_value := o.Negate.ValueBoolPointer()
	tags_pango_entries := make([]string, 0)
	diags.Append(o.Tags.ElementsAs(ctx, &tags_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(security.Target)
	}
	(*obj).Devices = devices_pango_entries
	(*obj).Negate = negate_value
	(*obj).Tags = tags_pango_entries

	return diags
}
func (o *SecurityPolicyRulesDataSourceRulesTargetDevicesObject) CopyToPango(ctx context.Context, obj **security.TargetDevices, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var vsys_tf_entries []SecurityPolicyRulesDataSourceRulesTargetDevicesVsysObject
	var vsys_pango_entries []security.TargetDevicesVsys
	{
		d := o.Vsys.ElementsAs(ctx, &vsys_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range vsys_tf_entries {
			var entry *security.TargetDevicesVsys
			diags.Append(elt.CopyToPango(ctx, &entry, encrypted)...)
			if diags.HasError() {
				return diags
			}
			vsys_pango_entries = append(vsys_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(security.TargetDevices)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Vsys = vsys_pango_entries

	return diags
}
func (o *SecurityPolicyRulesDataSourceRulesTargetDevicesVsysObject) CopyToPango(ctx context.Context, obj **security.TargetDevicesVsys, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(security.TargetDevicesVsys)
	}
	(*obj).Name = o.Name.ValueString()

	return diags
}
func (o *SecurityPolicyRulesDataSourceRulesProfileSettingObject) CopyToPango(ctx context.Context, obj **security.ProfileSetting, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	group_pango_entries := make([]string, 0)
	diags.Append(o.Group.ElementsAs(ctx, &group_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var profiles_entry *security.ProfileSettingProfiles
	if o.Profiles != nil {
		if *obj != nil && (*obj).Profiles != nil {
			profiles_entry = (*obj).Profiles
		} else {
			profiles_entry = new(security.ProfileSettingProfiles)
		}

		diags.Append(o.Profiles.CopyToPango(ctx, &profiles_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(security.ProfileSetting)
	}
	(*obj).Group = group_pango_entries
	(*obj).Profiles = profiles_entry

	return diags
}
func (o *SecurityPolicyRulesDataSourceRulesProfileSettingProfilesObject) CopyToPango(ctx context.Context, obj **security.ProfileSettingProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	urlFiltering_pango_entries := make([]string, 0)
	diags.Append(o.UrlFiltering.ElementsAs(ctx, &urlFiltering_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	virus_pango_entries := make([]string, 0)
	diags.Append(o.Virus.ElementsAs(ctx, &virus_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	vulnerability_pango_entries := make([]string, 0)
	diags.Append(o.Vulnerability.ElementsAs(ctx, &vulnerability_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	wildfireAnalysis_pango_entries := make([]string, 0)
	diags.Append(o.WildfireAnalysis.ElementsAs(ctx, &wildfireAnalysis_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	fileBlocking_pango_entries := make([]string, 0)
	diags.Append(o.FileBlocking.ElementsAs(ctx, &fileBlocking_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	spyware_pango_entries := make([]string, 0)
	diags.Append(o.Spyware.ElementsAs(ctx, &spyware_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sctp_pango_entries := make([]string, 0)
	diags.Append(o.Sctp.ElementsAs(ctx, &sctp_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	dataFiltering_pango_entries := make([]string, 0)
	diags.Append(o.DataFiltering.ElementsAs(ctx, &dataFiltering_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	gtp_pango_entries := make([]string, 0)
	diags.Append(o.Gtp.ElementsAs(ctx, &gtp_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(security.ProfileSettingProfiles)
	}
	(*obj).UrlFiltering = urlFiltering_pango_entries
	(*obj).Virus = virus_pango_entries
	(*obj).Vulnerability = vulnerability_pango_entries
	(*obj).WildfireAnalysis = wildfireAnalysis_pango_entries
	(*obj).FileBlocking = fileBlocking_pango_entries
	(*obj).Spyware = spyware_pango_entries
	(*obj).Sctp = sctp_pango_entries
	(*obj).DataFiltering = dataFiltering_pango_entries
	(*obj).Gtp = gtp_pango_entries

	return diags
}

func (o *SecurityPolicyRulesDataSourceRulesObject) CopyFromPango(ctx context.Context, obj *security.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var sourceZones_list types.List
	{
		var list_diags diag.Diagnostics
		sourceZones_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.From)
		diags.Append(list_diags...)
	}
	var applications_list types.List
	{
		var list_diags diag.Diagnostics
		applications_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Application)
		diags.Append(list_diags...)
	}
	var sourceNwSlice_list types.List
	{
		var list_diags diag.Diagnostics
		sourceNwSlice_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceNwSlice)
		diags.Append(list_diags...)
	}
	var services_list types.List
	{
		var list_diags diag.Diagnostics
		services_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Service)
		diags.Append(list_diags...)
	}
	var sourceAddresses_list types.List
	{
		var list_diags diag.Diagnostics
		sourceAddresses_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Source)
		diags.Append(list_diags...)
	}
	var sourceHip_list types.List
	{
		var list_diags diag.Diagnostics
		sourceHip_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceHip)
		diags.Append(list_diags...)
	}
	var sourceImsi_list types.List
	{
		var list_diags diag.Diagnostics
		sourceImsi_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceImsi)
		diags.Append(list_diags...)
	}
	var sourceUsers_list types.List
	{
		var list_diags diag.Diagnostics
		sourceUsers_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceUser)
		diags.Append(list_diags...)
	}
	var tag_list types.List
	{
		var list_diags diag.Diagnostics
		tag_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tag)
		diags.Append(list_diags...)
	}
	var destinationAddresses_list types.List
	{
		var list_diags diag.Diagnostics
		destinationAddresses_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Destination)
		diags.Append(list_diags...)
	}
	var destinationHip_list types.List
	{
		var list_diags diag.Diagnostics
		destinationHip_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DestinationHip)
		diags.Append(list_diags...)
	}
	var category_list types.List
	{
		var list_diags diag.Diagnostics
		category_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Category)
		diags.Append(list_diags...)
	}
	var sourceImei_list types.List
	{
		var list_diags diag.Diagnostics
		sourceImei_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceImei)
		diags.Append(list_diags...)
	}
	var profileSetting_object *SecurityPolicyRulesDataSourceRulesProfileSettingObject
	if obj.ProfileSetting != nil {
		profileSetting_object = new(SecurityPolicyRulesDataSourceRulesProfileSettingObject)

		diags.Append(profileSetting_object.CopyFromPango(ctx, obj.ProfileSetting, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var qos_object *SecurityPolicyRulesDataSourceRulesQosObject
	if obj.Qos != nil {
		qos_object = new(SecurityPolicyRulesDataSourceRulesQosObject)

		diags.Append(qos_object.CopyFromPango(ctx, obj.Qos, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var target_object *SecurityPolicyRulesDataSourceRulesTargetObject
	if obj.Target != nil {
		target_object = new(SecurityPolicyRulesDataSourceRulesTargetObject)

		diags.Append(target_object.CopyFromPango(ctx, obj.Target, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	destinationZone_value := types.StringValue(obj.To[0])

	var disabled_value types.Bool
	if obj.Disabled != nil {
		disabled_value = types.BoolValue(*obj.Disabled)
	}
	var icmpUnreachable_value types.Bool
	if obj.IcmpUnreachable != nil {
		icmpUnreachable_value = types.BoolValue(*obj.IcmpUnreachable)
	}
	var logStart_value types.Bool
	if obj.LogStart != nil {
		logStart_value = types.BoolValue(*obj.LogStart)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var disableInspect_value types.Bool
	if obj.DisableInspect != nil {
		disableInspect_value = types.BoolValue(*obj.DisableInspect)
	}
	var disableServerResponseInspection_value types.Bool
	if obj.DisableServerResponseInspection != nil {
		disableServerResponseInspection_value = types.BoolValue(*obj.DisableServerResponseInspection)
	}
	var negateSource_value types.Bool
	if obj.NegateSource != nil {
		negateSource_value = types.BoolValue(*obj.NegateSource)
	}
	var action_value types.String
	if obj.Action != nil {
		action_value = types.StringValue(*obj.Action)
	}
	var schedule_value types.String
	if obj.Schedule != nil {
		schedule_value = types.StringValue(*obj.Schedule)
	}
	var groupTag_value types.String
	if obj.GroupTag != nil {
		groupTag_value = types.StringValue(*obj.GroupTag)
	}
	var logEnd_value types.Bool
	if obj.LogEnd != nil {
		logEnd_value = types.BoolValue(*obj.LogEnd)
	}
	var ruleType_value types.String
	if obj.RuleType != nil {
		ruleType_value = types.StringValue(*obj.RuleType)
	}
	var logSetting_value types.String
	if obj.LogSetting != nil {
		logSetting_value = types.StringValue(*obj.LogSetting)
	}
	var negateDestination_value types.Bool
	if obj.NegateDestination != nil {
		negateDestination_value = types.BoolValue(*obj.NegateDestination)
	}
	var uuid_value types.String
	if obj.Uuid != nil {
		uuid_value = types.StringValue(*obj.Uuid)
	}
	o.Name = types.StringValue(obj.Name)
	o.Disabled = disabled_value
	o.SourceZones = sourceZones_list
	o.IcmpUnreachable = icmpUnreachable_value
	o.LogStart = logStart_value
	o.ProfileSetting = profileSetting_object
	o.Applications = applications_list
	o.Description = description_value
	o.DisableInspect = disableInspect_value
	o.DisableServerResponseInspection = disableServerResponseInspection_value
	o.NegateSource = negateSource_value
	o.Action = action_value
	o.Schedule = schedule_value
	o.SourceNwSlice = sourceNwSlice_list
	o.DestinationZone = destinationZone_value
	o.GroupTag = groupTag_value
	o.LogEnd = logEnd_value
	o.Services = services_list
	o.SourceAddresses = sourceAddresses_list
	o.SourceHip = sourceHip_list
	o.RuleType = ruleType_value
	o.SourceImsi = sourceImsi_list
	o.SourceUsers = sourceUsers_list
	o.Tag = tag_list
	o.DestinationAddresses = destinationAddresses_list
	o.DestinationHip = destinationHip_list
	o.LogSetting = logSetting_value
	o.NegateDestination = negateDestination_value
	o.Uuid = uuid_value
	o.Category = category_list
	o.Qos = qos_object
	o.SourceImei = sourceImei_list
	o.Target = target_object

	return diags
}

func (o *SecurityPolicyRulesDataSourceRulesQosObject) CopyFromPango(ctx context.Context, obj *security.Qos, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var marking_object *SecurityPolicyRulesDataSourceRulesQosMarkingObject
	if obj.Marking != nil {
		marking_object = new(SecurityPolicyRulesDataSourceRulesQosMarkingObject)

		diags.Append(marking_object.CopyFromPango(ctx, obj.Marking, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Marking = marking_object

	return diags
}

func (o *SecurityPolicyRulesDataSourceRulesQosMarkingObject) CopyFromPango(ctx context.Context, obj *security.QosMarking, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var followC2sFlow_object *SecurityPolicyRulesDataSourceRulesQosMarkingFollowC2sFlowObject
	if obj.FollowC2sFlow != nil {
		followC2sFlow_object = new(SecurityPolicyRulesDataSourceRulesQosMarkingFollowC2sFlowObject)

		diags.Append(followC2sFlow_object.CopyFromPango(ctx, obj.FollowC2sFlow, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var ipDscp_value types.String
	if obj.IpDscp != nil {
		ipDscp_value = types.StringValue(*obj.IpDscp)
	}
	var ipPrecedence_value types.String
	if obj.IpPrecedence != nil {
		ipPrecedence_value = types.StringValue(*obj.IpPrecedence)
	}
	o.FollowC2sFlow = followC2sFlow_object
	o.IpDscp = ipDscp_value
	o.IpPrecedence = ipPrecedence_value

	return diags
}

func (o *SecurityPolicyRulesDataSourceRulesQosMarkingFollowC2sFlowObject) CopyFromPango(ctx context.Context, obj *security.QosMarkingFollowC2sFlow, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *SecurityPolicyRulesDataSourceRulesTargetObject) CopyFromPango(ctx context.Context, obj *security.Target, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var devices_list types.List
	{
		var devices_tf_entries []SecurityPolicyRulesDataSourceRulesTargetDevicesObject
		for _, elt := range obj.Devices {
			var entry SecurityPolicyRulesDataSourceRulesTargetDevicesObject
			entry_diags := entry.CopyFromPango(ctx, &elt, encrypted)
			diags.Append(entry_diags...)
			devices_tf_entries = append(devices_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("devices")
		devices_list, list_diags = types.ListValueFrom(ctx, schemaType, devices_tf_entries)
		diags.Append(list_diags...)
	}
	var tags_list types.List
	{
		var list_diags diag.Diagnostics
		tags_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tags)
		diags.Append(list_diags...)
	}

	var negate_value types.Bool
	if obj.Negate != nil {
		negate_value = types.BoolValue(*obj.Negate)
	}
	o.Devices = devices_list
	o.Negate = negate_value
	o.Tags = tags_list

	return diags
}

func (o *SecurityPolicyRulesDataSourceRulesTargetDevicesObject) CopyFromPango(ctx context.Context, obj *security.TargetDevices, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var vsys_list types.List
	{
		var vsys_tf_entries []SecurityPolicyRulesDataSourceRulesTargetDevicesVsysObject
		for _, elt := range obj.Vsys {
			var entry SecurityPolicyRulesDataSourceRulesTargetDevicesVsysObject
			entry_diags := entry.CopyFromPango(ctx, &elt, encrypted)
			diags.Append(entry_diags...)
			vsys_tf_entries = append(vsys_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("vsys")
		vsys_list, list_diags = types.ListValueFrom(ctx, schemaType, vsys_tf_entries)
		diags.Append(list_diags...)
	}

	o.Name = types.StringValue(obj.Name)
	o.Vsys = vsys_list

	return diags
}

func (o *SecurityPolicyRulesDataSourceRulesTargetDevicesVsysObject) CopyFromPango(ctx context.Context, obj *security.TargetDevicesVsys, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	o.Name = types.StringValue(obj.Name)

	return diags
}

func (o *SecurityPolicyRulesDataSourceRulesProfileSettingObject) CopyFromPango(ctx context.Context, obj *security.ProfileSetting, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var group_list types.List
	{
		var list_diags diag.Diagnostics
		group_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Group)
		diags.Append(list_diags...)
	}
	var profiles_object *SecurityPolicyRulesDataSourceRulesProfileSettingProfilesObject
	if obj.Profiles != nil {
		profiles_object = new(SecurityPolicyRulesDataSourceRulesProfileSettingProfilesObject)

		diags.Append(profiles_object.CopyFromPango(ctx, obj.Profiles, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Profiles = profiles_object
	o.Group = group_list

	return diags
}

func (o *SecurityPolicyRulesDataSourceRulesProfileSettingProfilesObject) CopyFromPango(ctx context.Context, obj *security.ProfileSettingProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var vulnerability_list types.List
	{
		var list_diags diag.Diagnostics
		vulnerability_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Vulnerability)
		diags.Append(list_diags...)
	}
	var wildfireAnalysis_list types.List
	{
		var list_diags diag.Diagnostics
		wildfireAnalysis_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.WildfireAnalysis)
		diags.Append(list_diags...)
	}
	var fileBlocking_list types.List
	{
		var list_diags diag.Diagnostics
		fileBlocking_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.FileBlocking)
		diags.Append(list_diags...)
	}
	var spyware_list types.List
	{
		var list_diags diag.Diagnostics
		spyware_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Spyware)
		diags.Append(list_diags...)
	}
	var urlFiltering_list types.List
	{
		var list_diags diag.Diagnostics
		urlFiltering_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.UrlFiltering)
		diags.Append(list_diags...)
	}
	var virus_list types.List
	{
		var list_diags diag.Diagnostics
		virus_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Virus)
		diags.Append(list_diags...)
	}
	var dataFiltering_list types.List
	{
		var list_diags diag.Diagnostics
		dataFiltering_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DataFiltering)
		diags.Append(list_diags...)
	}
	var gtp_list types.List
	{
		var list_diags diag.Diagnostics
		gtp_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Gtp)
		diags.Append(list_diags...)
	}
	var sctp_list types.List
	{
		var list_diags diag.Diagnostics
		sctp_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Sctp)
		diags.Append(list_diags...)
	}

	o.Vulnerability = vulnerability_list
	o.WildfireAnalysis = wildfireAnalysis_list
	o.FileBlocking = fileBlocking_list
	o.Spyware = spyware_list
	o.UrlFiltering = urlFiltering_list
	o.Virus = virus_list
	o.DataFiltering = dataFiltering_list
	o.Gtp = gtp_list
	o.Sctp = sctp_list

	return diags
}

func SecurityPolicyRulesDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": SecurityPolicyRulesDataSourceLocationSchema(),

			"position": TerraformPositionObjectSchema(),

			"rules": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     true,
				Optional:     false,
				Computed:     false,
				Sensitive:    false,
				NestedObject: SecurityPolicyRulesDataSourceRulesSchema(),
			},
		},
	}
}

func (o *SecurityPolicyRulesDataSourceModel) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesDataSourceRulesSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"applications": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"description": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"disable_inspect": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"disable_server_response_inspection": dsschema.BoolAttribute{
				Description: "Disable inspection of server side traffic",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"negate_source": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"action": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"schedule": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source_nw_slice": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"destination_zone": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"group_tag": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_end": dsschema.BoolAttribute{
				Description: "Log at session end (required for certain ACC tables)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"services": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_addresses": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_hip": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"rule_type": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source_imsi": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_users": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"tag": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"destination_addresses": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"destination_hip": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"log_setting": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"negate_destination": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"uuid": dsschema.StringAttribute{
				Description: "Entry UUID value",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"category": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"qos": SecurityPolicyRulesDataSourceRulesQosSchema(),

			"source_imei": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"target": SecurityPolicyRulesDataSourceRulesTargetSchema(),

			"disabled": dsschema.BoolAttribute{
				Description: "Disable the rule",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source_zones": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"icmp_unreachable": dsschema.BoolAttribute{
				Description: "Send ICMP unreachable error when action is drop or reset",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_start": dsschema.BoolAttribute{
				Description: "Log at session start",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"profile_setting": SecurityPolicyRulesDataSourceRulesProfileSettingSchema(),
		},
	}
}

func (o *SecurityPolicyRulesDataSourceRulesObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesDataSourceRulesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesDataSourceRulesQosSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"marking": SecurityPolicyRulesDataSourceRulesQosMarkingSchema(),
		},
	}
}

func (o *SecurityPolicyRulesDataSourceRulesQosObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesDataSourceRulesQosSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesDataSourceRulesQosMarkingSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"follow_c2s_flow": SecurityPolicyRulesDataSourceRulesQosMarkingFollowC2sFlowSchema(),

			"ip_dscp": dsschema.StringAttribute{
				Description: "IP DSCP",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ip_precedence": dsschema.StringAttribute{
				Description: "IP Precedence",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *SecurityPolicyRulesDataSourceRulesQosMarkingObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesDataSourceRulesQosMarkingSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesDataSourceRulesQosMarkingFollowC2sFlowSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("ip_precedence"),
				path.MatchRelative().AtParent().AtName("follow_c2s_flow"),
				path.MatchRelative().AtParent().AtName("ip_dscp"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *SecurityPolicyRulesDataSourceRulesQosMarkingFollowC2sFlowObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesDataSourceRulesQosMarkingFollowC2sFlowSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesDataSourceRulesTargetSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"devices": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: SecurityPolicyRulesDataSourceRulesTargetDevicesSchema(),
			},

			"negate": dsschema.BoolAttribute{
				Description: "Target to all but these specified devices and tags",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tags": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *SecurityPolicyRulesDataSourceRulesTargetObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesDataSourceRulesTargetSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesDataSourceRulesTargetDevicesSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"vsys": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: SecurityPolicyRulesDataSourceRulesTargetDevicesVsysSchema(),
			},
		},
	}
}

func (o *SecurityPolicyRulesDataSourceRulesTargetDevicesObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesDataSourceRulesTargetDevicesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesDataSourceRulesTargetDevicesVsysSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},
		},
	}
}

func (o *SecurityPolicyRulesDataSourceRulesTargetDevicesVsysObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesDataSourceRulesTargetDevicesVsysSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesDataSourceRulesProfileSettingSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"group": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"profiles": SecurityPolicyRulesDataSourceRulesProfileSettingProfilesSchema(),
		},
	}
}

func (o *SecurityPolicyRulesDataSourceRulesProfileSettingObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesDataSourceRulesProfileSettingSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesDataSourceRulesProfileSettingProfilesSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("group"),
				path.MatchRelative().AtParent().AtName("profiles"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"file_blocking": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"spyware": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"url_filtering": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"virus": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"vulnerability": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"wildfire_analysis": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"data_filtering": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"gtp": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"sctp": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *SecurityPolicyRulesDataSourceRulesProfileSettingProfilesObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesDataSourceRulesProfileSettingProfilesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesDataSourceLocationSchema() rsschema.Attribute {
	return SecurityPolicyRulesLocationSchema()
}

// Metadata returns the data source type name.
func (d *SecurityPolicyRulesDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_security_policy_rules"
}

// Schema defines the schema for this data source.
func (d *SecurityPolicyRulesDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = SecurityPolicyRulesDataSourceSchema()
}

// Configure prepares the struct.
func (d *SecurityPolicyRulesDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*pango.Client)
	specifier, _, err := security.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	d.manager = sdkmanager.NewUuidObjectManager(d.client, security.NewService(d.client), specifier, security.SpecMatches)
}

func (o *SecurityPolicyRulesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var state SecurityPolicyRulesDataSourceModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_security_policy_rules",
		"function":      "Create",
	})

	var location security.Location

	if state.Location.Shared != nil {
		location.Shared = &security.SharedLocation{

			Rulebase: state.Location.Shared.Rulebase.ValueString(),
		}
	}
	if state.Location.Vsys != nil {
		location.Vsys = &security.VsysLocation{

			NgfwDevice: state.Location.Vsys.NgfwDevice.ValueString(),
			Vsys:       state.Location.Vsys.Name.ValueString(),
		}
	}
	if state.Location.DeviceGroup != nil {
		location.DeviceGroup = &security.DeviceGroupLocation{

			PanoramaDevice: state.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    state.Location.DeviceGroup.Name.ValueString(),
			Rulebase:       state.Location.DeviceGroup.Rulebase.ValueString(),
		}
	}

	var elements []SecurityPolicyRulesDataSourceRulesObject
	state.Rules.ElementsAs(ctx, &elements, false)
	entries := make([]*security.Entry, 0, len(elements))
	for _, elt := range elements {
		var entry *security.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, &entry, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		entries = append(entries, entry)
	}

	readEntries, err := o.manager.ReadMany(ctx, location, entries, sdkmanager.NonExhaustive)
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Failed to read entries from the server", err.Error())
		}
		return
	}

	var objects []SecurityPolicyRulesDataSourceRulesObject
	for _, elt := range readEntries {
		var object SecurityPolicyRulesDataSourceRulesObject
		err := object.CopyFromPango(ctx, elt, nil)
		resp.Diagnostics.Append(err...)
		if resp.Diagnostics.HasError() {
			return
		}
		objects = append(objects, object)
	}

	var list_diags diag.Diagnostics
	state.Rules, list_diags = types.ListValueFrom(ctx, state.getTypeFor("rules"), objects)
	resp.Diagnostics.Append(list_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &SecurityPolicyRulesResource{}
	_ resource.ResourceWithConfigure   = &SecurityPolicyRulesResource{}
	_ resource.ResourceWithImportState = &SecurityPolicyRulesResource{}
)

func NewSecurityPolicyRulesResource() resource.Resource {
	return &SecurityPolicyRulesResource{}
}

type SecurityPolicyRulesResource struct {
	client  *pango.Client
	manager *sdkmanager.UuidObjectManager[*security.Entry, security.Location, *security.Service]
}

func SecurityPolicyRulesResourceLocationSchema() rsschema.Attribute {
	return SecurityPolicyRulesLocationSchema()
}

type SecurityPolicyRulesResourceModel struct {
	Location SecurityPolicyRulesLocation `tfsdk:"location"`
	Position TerraformPositionObject     `tfsdk:"position"`
	Rules    types.List                  `tfsdk:"rules"`
}
type SecurityPolicyRulesResourceRulesObject struct {
	Name                            types.String                                          `tfsdk:"name"`
	Tag                             types.List                                            `tfsdk:"tag"`
	RuleType                        types.String                                          `tfsdk:"rule_type"`
	SourceImsi                      types.List                                            `tfsdk:"source_imsi"`
	SourceUsers                     types.List                                            `tfsdk:"source_users"`
	NegateDestination               types.Bool                                            `tfsdk:"negate_destination"`
	Uuid                            types.String                                          `tfsdk:"uuid"`
	DestinationAddresses            types.List                                            `tfsdk:"destination_addresses"`
	DestinationHip                  types.List                                            `tfsdk:"destination_hip"`
	LogSetting                      types.String                                          `tfsdk:"log_setting"`
	Target                          *SecurityPolicyRulesResourceRulesTargetObject         `tfsdk:"target"`
	Category                        types.List                                            `tfsdk:"category"`
	Qos                             *SecurityPolicyRulesResourceRulesQosObject            `tfsdk:"qos"`
	SourceImei                      types.List                                            `tfsdk:"source_imei"`
	LogStart                        types.Bool                                            `tfsdk:"log_start"`
	ProfileSetting                  *SecurityPolicyRulesResourceRulesProfileSettingObject `tfsdk:"profile_setting"`
	Disabled                        types.Bool                                            `tfsdk:"disabled"`
	SourceZones                     types.List                                            `tfsdk:"source_zones"`
	IcmpUnreachable                 types.Bool                                            `tfsdk:"icmp_unreachable"`
	DisableServerResponseInspection types.Bool                                            `tfsdk:"disable_server_response_inspection"`
	Applications                    types.List                                            `tfsdk:"applications"`
	Description                     types.String                                          `tfsdk:"description"`
	DisableInspect                  types.Bool                                            `tfsdk:"disable_inspect"`
	NegateSource                    types.Bool                                            `tfsdk:"negate_source"`
	DestinationZone                 types.String                                          `tfsdk:"destination_zone"`
	Action                          types.String                                          `tfsdk:"action"`
	Schedule                        types.String                                          `tfsdk:"schedule"`
	SourceNwSlice                   types.List                                            `tfsdk:"source_nw_slice"`
	SourceAddresses                 types.List                                            `tfsdk:"source_addresses"`
	SourceHip                       types.List                                            `tfsdk:"source_hip"`
	GroupTag                        types.String                                          `tfsdk:"group_tag"`
	LogEnd                          types.Bool                                            `tfsdk:"log_end"`
	Services                        types.List                                            `tfsdk:"services"`
}
type SecurityPolicyRulesResourceRulesTargetObject struct {
	Negate  types.Bool `tfsdk:"negate"`
	Tags    types.List `tfsdk:"tags"`
	Devices types.List `tfsdk:"devices"`
}
type SecurityPolicyRulesResourceRulesTargetDevicesObject struct {
	Name types.String `tfsdk:"name"`
	Vsys types.List   `tfsdk:"vsys"`
}
type SecurityPolicyRulesResourceRulesTargetDevicesVsysObject struct {
	Name types.String `tfsdk:"name"`
}
type SecurityPolicyRulesResourceRulesQosObject struct {
	Marking *SecurityPolicyRulesResourceRulesQosMarkingObject `tfsdk:"marking"`
}
type SecurityPolicyRulesResourceRulesQosMarkingObject struct {
	FollowC2sFlow *SecurityPolicyRulesResourceRulesQosMarkingFollowC2sFlowObject `tfsdk:"follow_c2s_flow"`
	IpDscp        types.String                                                   `tfsdk:"ip_dscp"`
	IpPrecedence  types.String                                                   `tfsdk:"ip_precedence"`
}
type SecurityPolicyRulesResourceRulesQosMarkingFollowC2sFlowObject struct {
}
type SecurityPolicyRulesResourceRulesProfileSettingObject struct {
	Group    types.List                                                    `tfsdk:"group"`
	Profiles *SecurityPolicyRulesResourceRulesProfileSettingProfilesObject `tfsdk:"profiles"`
}
type SecurityPolicyRulesResourceRulesProfileSettingProfilesObject struct {
	DataFiltering    types.List `tfsdk:"data_filtering"`
	Gtp              types.List `tfsdk:"gtp"`
	Sctp             types.List `tfsdk:"sctp"`
	Virus            types.List `tfsdk:"virus"`
	Vulnerability    types.List `tfsdk:"vulnerability"`
	WildfireAnalysis types.List `tfsdk:"wildfire_analysis"`
	FileBlocking     types.List `tfsdk:"file_blocking"`
	Spyware          types.List `tfsdk:"spyware"`
	UrlFiltering     types.List `tfsdk:"url_filtering"`
}

func (r *SecurityPolicyRulesResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_security_policy_rules"
}

func (r *SecurityPolicyRulesResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
	var resource SecurityPolicyRulesResourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &resource)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resource.Position.ValidateConfig(resp)
}

// <ResourceSchema>

func SecurityPolicyRulesResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": SecurityPolicyRulesResourceLocationSchema(),

			"position": TerraformPositionObjectSchema(),

			"rules": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     true,
				Optional:     false,
				Computed:     false,
				Sensitive:    false,
				NestedObject: SecurityPolicyRulesResourceRulesSchema(),
			},
		},
	}
}

func (o *SecurityPolicyRulesResourceModel) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesResourceRulesSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"disabled": rsschema.BoolAttribute{
				Description: "Disable the rule",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source_zones": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"icmp_unreachable": rsschema.BoolAttribute{
				Description: "Send ICMP unreachable error when action is drop or reset",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_start": rsschema.BoolAttribute{
				Description: "Log at session start",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"profile_setting": SecurityPolicyRulesResourceRulesProfileSettingSchema(),

			"applications": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"description": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"disable_inspect": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"disable_server_response_inspection": rsschema.BoolAttribute{
				Description: "Disable inspection of server side traffic",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"negate_source": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"action": rsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("allow"),

				Validators: []validator.String{
					stringvalidator.OneOf([]string{
						"deny",
						"allow",
						"drop",
						"reset-client",
						"reset-server",
						"reset-both",
					}...),
				},
			},

			"schedule": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source_nw_slice": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"destination_zone": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"group_tag": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_end": rsschema.BoolAttribute{
				Description: "Log at session end (required for certain ACC tables)",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"services": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_addresses": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_hip": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"rule_type": rsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("universal"),

				Validators: []validator.String{
					stringvalidator.OneOf([]string{
						"universal",
						"intrazone",
						"interzone",
					}...),
				},
			},

			"source_imsi": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_users": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"tag": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"destination_addresses": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"destination_hip": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"log_setting": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"negate_destination": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"uuid": rsschema.StringAttribute{
				Description: "Entry UUID value",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"category": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"qos": SecurityPolicyRulesResourceRulesQosSchema(),

			"source_imei": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"target": SecurityPolicyRulesResourceRulesTargetSchema(),
		},
	}
}

func (o *SecurityPolicyRulesResourceRulesObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesResourceRulesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesResourceRulesProfileSettingSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"group": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,

				Validators: []validator.List{
					listvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("group"),
						path.MatchRelative().AtParent().AtName("profiles"),
					}...),
				},
			},

			"profiles": SecurityPolicyRulesResourceRulesProfileSettingProfilesSchema(),
		},
	}
}

func (o *SecurityPolicyRulesResourceRulesProfileSettingObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesResourceRulesProfileSettingSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesResourceRulesProfileSettingProfilesSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("group"),
				path.MatchRelative().AtParent().AtName("profiles"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"vulnerability": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"wildfire_analysis": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"file_blocking": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"spyware": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"url_filtering": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"virus": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"data_filtering": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"gtp": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"sctp": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *SecurityPolicyRulesResourceRulesProfileSettingProfilesObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesResourceRulesProfileSettingProfilesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesResourceRulesQosSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"marking": SecurityPolicyRulesResourceRulesQosMarkingSchema(),
		},
	}
}

func (o *SecurityPolicyRulesResourceRulesQosObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesResourceRulesQosSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesResourceRulesQosMarkingSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"follow_c2s_flow": SecurityPolicyRulesResourceRulesQosMarkingFollowC2sFlowSchema(),

			"ip_dscp": rsschema.StringAttribute{
				Description: "IP DSCP",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ip_precedence": rsschema.StringAttribute{
				Description: "IP Precedence",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *SecurityPolicyRulesResourceRulesQosMarkingObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesResourceRulesQosMarkingSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesResourceRulesQosMarkingFollowC2sFlowSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("ip_dscp"),
				path.MatchRelative().AtParent().AtName("ip_precedence"),
				path.MatchRelative().AtParent().AtName("follow_c2s_flow"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *SecurityPolicyRulesResourceRulesQosMarkingFollowC2sFlowObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesResourceRulesQosMarkingFollowC2sFlowSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesResourceRulesTargetSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"devices": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: SecurityPolicyRulesResourceRulesTargetDevicesSchema(),
			},

			"negate": rsschema.BoolAttribute{
				Description: "Target to all but these specified devices and tags",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tags": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *SecurityPolicyRulesResourceRulesTargetObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesResourceRulesTargetSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesResourceRulesTargetDevicesSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"vsys": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: SecurityPolicyRulesResourceRulesTargetDevicesVsysSchema(),
			},
		},
	}
}

func (o *SecurityPolicyRulesResourceRulesTargetDevicesObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesResourceRulesTargetDevicesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyRulesResourceRulesTargetDevicesVsysSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},
		},
	}
}

func (o *SecurityPolicyRulesResourceRulesTargetDevicesVsysObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyRulesResourceRulesTargetDevicesVsysSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *SecurityPolicyRulesResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = SecurityPolicyRulesResourceSchema()
}

// </ResourceSchema>

func (r *SecurityPolicyRulesResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*pango.Client)
	specifier, _, err := security.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	r.manager = sdkmanager.NewUuidObjectManager(r.client, security.NewService(r.client), specifier, security.SpecMatches)
}

func (o *SecurityPolicyRulesResourceRulesObject) CopyToPango(ctx context.Context, obj **security.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	icmpUnreachable_value := o.IcmpUnreachable.ValueBoolPointer()
	logStart_value := o.LogStart.ValueBoolPointer()
	var profileSetting_entry *security.ProfileSetting
	if o.ProfileSetting != nil {
		if *obj != nil && (*obj).ProfileSetting != nil {
			profileSetting_entry = (*obj).ProfileSetting
		} else {
			profileSetting_entry = new(security.ProfileSetting)
		}

		diags.Append(o.ProfileSetting.CopyToPango(ctx, &profileSetting_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	disabled_value := o.Disabled.ValueBoolPointer()
	sourceZones_pango_entries := make([]string, 0)
	diags.Append(o.SourceZones.ElementsAs(ctx, &sourceZones_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	disableInspect_value := o.DisableInspect.ValueBoolPointer()
	disableServerResponseInspection_value := o.DisableServerResponseInspection.ValueBoolPointer()
	applications_pango_entries := make([]string, 0)
	diags.Append(o.Applications.ElementsAs(ctx, &applications_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	description_value := o.Description.ValueStringPointer()
	negateSource_value := o.NegateSource.ValueBoolPointer()
	sourceNwSlice_pango_entries := make([]string, 0)
	diags.Append(o.SourceNwSlice.ElementsAs(ctx, &sourceNwSlice_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	destinationZone_pango_entries := []string{o.DestinationZone.ValueString()}
	action_value := o.Action.ValueStringPointer()
	schedule_value := o.Schedule.ValueStringPointer()
	services_pango_entries := make([]string, 0)
	diags.Append(o.Services.ElementsAs(ctx, &services_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceAddresses_pango_entries := make([]string, 0)
	diags.Append(o.SourceAddresses.ElementsAs(ctx, &sourceAddresses_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceHip_pango_entries := make([]string, 0)
	diags.Append(o.SourceHip.ElementsAs(ctx, &sourceHip_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	groupTag_value := o.GroupTag.ValueStringPointer()
	logEnd_value := o.LogEnd.ValueBoolPointer()
	sourceUsers_pango_entries := make([]string, 0)
	diags.Append(o.SourceUsers.ElementsAs(ctx, &sourceUsers_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	tag_pango_entries := make([]string, 0)
	diags.Append(o.Tag.ElementsAs(ctx, &tag_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	ruleType_value := o.RuleType.ValueStringPointer()
	sourceImsi_pango_entries := make([]string, 0)
	diags.Append(o.SourceImsi.ElementsAs(ctx, &sourceImsi_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	logSetting_value := o.LogSetting.ValueStringPointer()
	negateDestination_value := o.NegateDestination.ValueBoolPointer()
	uuid_value := o.Uuid.ValueStringPointer()
	destinationAddresses_pango_entries := make([]string, 0)
	diags.Append(o.DestinationAddresses.ElementsAs(ctx, &destinationAddresses_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	destinationHip_pango_entries := make([]string, 0)
	diags.Append(o.DestinationHip.ElementsAs(ctx, &destinationHip_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceImei_pango_entries := make([]string, 0)
	diags.Append(o.SourceImei.ElementsAs(ctx, &sourceImei_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var target_entry *security.Target
	if o.Target != nil {
		if *obj != nil && (*obj).Target != nil {
			target_entry = (*obj).Target
		} else {
			target_entry = new(security.Target)
		}

		diags.Append(o.Target.CopyToPango(ctx, &target_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	category_pango_entries := make([]string, 0)
	diags.Append(o.Category.ElementsAs(ctx, &category_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var qos_entry *security.Qos
	if o.Qos != nil {
		if *obj != nil && (*obj).Qos != nil {
			qos_entry = (*obj).Qos
		} else {
			qos_entry = new(security.Qos)
		}

		diags.Append(o.Qos.CopyToPango(ctx, &qos_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(security.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).IcmpUnreachable = icmpUnreachable_value
	(*obj).LogStart = logStart_value
	(*obj).ProfileSetting = profileSetting_entry
	(*obj).Disabled = disabled_value
	(*obj).From = sourceZones_pango_entries
	(*obj).DisableInspect = disableInspect_value
	(*obj).DisableServerResponseInspection = disableServerResponseInspection_value
	(*obj).Application = applications_pango_entries
	(*obj).Description = description_value
	(*obj).NegateSource = negateSource_value
	(*obj).SourceNwSlice = sourceNwSlice_pango_entries
	(*obj).To = destinationZone_pango_entries
	(*obj).Action = action_value
	(*obj).Schedule = schedule_value
	(*obj).Service = services_pango_entries
	(*obj).Source = sourceAddresses_pango_entries
	(*obj).SourceHip = sourceHip_pango_entries
	(*obj).GroupTag = groupTag_value
	(*obj).LogEnd = logEnd_value
	(*obj).SourceUser = sourceUsers_pango_entries
	(*obj).Tag = tag_pango_entries
	(*obj).RuleType = ruleType_value
	(*obj).SourceImsi = sourceImsi_pango_entries
	(*obj).LogSetting = logSetting_value
	(*obj).NegateDestination = negateDestination_value
	(*obj).Uuid = uuid_value
	(*obj).Destination = destinationAddresses_pango_entries
	(*obj).DestinationHip = destinationHip_pango_entries
	(*obj).SourceImei = sourceImei_pango_entries
	(*obj).Target = target_entry
	(*obj).Category = category_pango_entries
	(*obj).Qos = qos_entry

	return diags
}
func (o *SecurityPolicyRulesResourceRulesTargetObject) CopyToPango(ctx context.Context, obj **security.Target, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	tags_pango_entries := make([]string, 0)
	diags.Append(o.Tags.ElementsAs(ctx, &tags_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var devices_tf_entries []SecurityPolicyRulesResourceRulesTargetDevicesObject
	var devices_pango_entries []security.TargetDevices
	{
		d := o.Devices.ElementsAs(ctx, &devices_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range devices_tf_entries {
			var entry *security.TargetDevices
			diags.Append(elt.CopyToPango(ctx, &entry, encrypted)...)
			if diags.HasError() {
				return diags
			}
			devices_pango_entries = append(devices_pango_entries, *entry)
		}
	}
	negate_value := o.Negate.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(security.Target)
	}
	(*obj).Tags = tags_pango_entries
	(*obj).Devices = devices_pango_entries
	(*obj).Negate = negate_value

	return diags
}
func (o *SecurityPolicyRulesResourceRulesTargetDevicesObject) CopyToPango(ctx context.Context, obj **security.TargetDevices, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var vsys_tf_entries []SecurityPolicyRulesResourceRulesTargetDevicesVsysObject
	var vsys_pango_entries []security.TargetDevicesVsys
	{
		d := o.Vsys.ElementsAs(ctx, &vsys_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range vsys_tf_entries {
			var entry *security.TargetDevicesVsys
			diags.Append(elt.CopyToPango(ctx, &entry, encrypted)...)
			if diags.HasError() {
				return diags
			}
			vsys_pango_entries = append(vsys_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(security.TargetDevices)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Vsys = vsys_pango_entries

	return diags
}
func (o *SecurityPolicyRulesResourceRulesTargetDevicesVsysObject) CopyToPango(ctx context.Context, obj **security.TargetDevicesVsys, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(security.TargetDevicesVsys)
	}
	(*obj).Name = o.Name.ValueString()

	return diags
}
func (o *SecurityPolicyRulesResourceRulesQosObject) CopyToPango(ctx context.Context, obj **security.Qos, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var marking_entry *security.QosMarking
	if o.Marking != nil {
		if *obj != nil && (*obj).Marking != nil {
			marking_entry = (*obj).Marking
		} else {
			marking_entry = new(security.QosMarking)
		}

		diags.Append(o.Marking.CopyToPango(ctx, &marking_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(security.Qos)
	}
	(*obj).Marking = marking_entry

	return diags
}
func (o *SecurityPolicyRulesResourceRulesQosMarkingObject) CopyToPango(ctx context.Context, obj **security.QosMarking, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	ipPrecedence_value := o.IpPrecedence.ValueStringPointer()
	var followC2sFlow_entry *security.QosMarkingFollowC2sFlow
	if o.FollowC2sFlow != nil {
		if *obj != nil && (*obj).FollowC2sFlow != nil {
			followC2sFlow_entry = (*obj).FollowC2sFlow
		} else {
			followC2sFlow_entry = new(security.QosMarkingFollowC2sFlow)
		}

		diags.Append(o.FollowC2sFlow.CopyToPango(ctx, &followC2sFlow_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	ipDscp_value := o.IpDscp.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(security.QosMarking)
	}
	(*obj).IpPrecedence = ipPrecedence_value
	(*obj).FollowC2sFlow = followC2sFlow_entry
	(*obj).IpDscp = ipDscp_value

	return diags
}
func (o *SecurityPolicyRulesResourceRulesQosMarkingFollowC2sFlowObject) CopyToPango(ctx context.Context, obj **security.QosMarkingFollowC2sFlow, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(security.QosMarkingFollowC2sFlow)
	}

	return diags
}
func (o *SecurityPolicyRulesResourceRulesProfileSettingObject) CopyToPango(ctx context.Context, obj **security.ProfileSetting, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	group_pango_entries := make([]string, 0)
	diags.Append(o.Group.ElementsAs(ctx, &group_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var profiles_entry *security.ProfileSettingProfiles
	if o.Profiles != nil {
		if *obj != nil && (*obj).Profiles != nil {
			profiles_entry = (*obj).Profiles
		} else {
			profiles_entry = new(security.ProfileSettingProfiles)
		}

		diags.Append(o.Profiles.CopyToPango(ctx, &profiles_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(security.ProfileSetting)
	}
	(*obj).Group = group_pango_entries
	(*obj).Profiles = profiles_entry

	return diags
}
func (o *SecurityPolicyRulesResourceRulesProfileSettingProfilesObject) CopyToPango(ctx context.Context, obj **security.ProfileSettingProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	dataFiltering_pango_entries := make([]string, 0)
	diags.Append(o.DataFiltering.ElementsAs(ctx, &dataFiltering_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	gtp_pango_entries := make([]string, 0)
	diags.Append(o.Gtp.ElementsAs(ctx, &gtp_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sctp_pango_entries := make([]string, 0)
	diags.Append(o.Sctp.ElementsAs(ctx, &sctp_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	wildfireAnalysis_pango_entries := make([]string, 0)
	diags.Append(o.WildfireAnalysis.ElementsAs(ctx, &wildfireAnalysis_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	fileBlocking_pango_entries := make([]string, 0)
	diags.Append(o.FileBlocking.ElementsAs(ctx, &fileBlocking_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	spyware_pango_entries := make([]string, 0)
	diags.Append(o.Spyware.ElementsAs(ctx, &spyware_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	urlFiltering_pango_entries := make([]string, 0)
	diags.Append(o.UrlFiltering.ElementsAs(ctx, &urlFiltering_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	virus_pango_entries := make([]string, 0)
	diags.Append(o.Virus.ElementsAs(ctx, &virus_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	vulnerability_pango_entries := make([]string, 0)
	diags.Append(o.Vulnerability.ElementsAs(ctx, &vulnerability_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(security.ProfileSettingProfiles)
	}
	(*obj).DataFiltering = dataFiltering_pango_entries
	(*obj).Gtp = gtp_pango_entries
	(*obj).Sctp = sctp_pango_entries
	(*obj).WildfireAnalysis = wildfireAnalysis_pango_entries
	(*obj).FileBlocking = fileBlocking_pango_entries
	(*obj).Spyware = spyware_pango_entries
	(*obj).UrlFiltering = urlFiltering_pango_entries
	(*obj).Virus = virus_pango_entries
	(*obj).Vulnerability = vulnerability_pango_entries

	return diags
}

func (o *SecurityPolicyRulesResourceRulesObject) CopyFromPango(ctx context.Context, obj *security.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var category_list types.List
	{
		var list_diags diag.Diagnostics
		category_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Category)
		diags.Append(list_diags...)
	}
	var sourceImei_list types.List
	{
		var list_diags diag.Diagnostics
		sourceImei_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceImei)
		diags.Append(list_diags...)
	}
	var sourceZones_list types.List
	{
		var list_diags diag.Diagnostics
		sourceZones_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.From)
		diags.Append(list_diags...)
	}
	var applications_list types.List
	{
		var list_diags diag.Diagnostics
		applications_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Application)
		diags.Append(list_diags...)
	}
	var sourceNwSlice_list types.List
	{
		var list_diags diag.Diagnostics
		sourceNwSlice_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceNwSlice)
		diags.Append(list_diags...)
	}
	var services_list types.List
	{
		var list_diags diag.Diagnostics
		services_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Service)
		diags.Append(list_diags...)
	}
	var sourceAddresses_list types.List
	{
		var list_diags diag.Diagnostics
		sourceAddresses_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Source)
		diags.Append(list_diags...)
	}
	var sourceHip_list types.List
	{
		var list_diags diag.Diagnostics
		sourceHip_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceHip)
		diags.Append(list_diags...)
	}
	var sourceImsi_list types.List
	{
		var list_diags diag.Diagnostics
		sourceImsi_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceImsi)
		diags.Append(list_diags...)
	}
	var sourceUsers_list types.List
	{
		var list_diags diag.Diagnostics
		sourceUsers_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceUser)
		diags.Append(list_diags...)
	}
	var tag_list types.List
	{
		var list_diags diag.Diagnostics
		tag_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tag)
		diags.Append(list_diags...)
	}
	var destinationAddresses_list types.List
	{
		var list_diags diag.Diagnostics
		destinationAddresses_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Destination)
		diags.Append(list_diags...)
	}
	var destinationHip_list types.List
	{
		var list_diags diag.Diagnostics
		destinationHip_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DestinationHip)
		diags.Append(list_diags...)
	}
	var qos_object *SecurityPolicyRulesResourceRulesQosObject
	if obj.Qos != nil {
		qos_object = new(SecurityPolicyRulesResourceRulesQosObject)

		diags.Append(qos_object.CopyFromPango(ctx, obj.Qos, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var target_object *SecurityPolicyRulesResourceRulesTargetObject
	if obj.Target != nil {
		target_object = new(SecurityPolicyRulesResourceRulesTargetObject)

		diags.Append(target_object.CopyFromPango(ctx, obj.Target, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var profileSetting_object *SecurityPolicyRulesResourceRulesProfileSettingObject
	if obj.ProfileSetting != nil {
		profileSetting_object = new(SecurityPolicyRulesResourceRulesProfileSettingObject)

		diags.Append(profileSetting_object.CopyFromPango(ctx, obj.ProfileSetting, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	destinationZone_value := types.StringValue(obj.To[0])

	var disabled_value types.Bool
	if obj.Disabled != nil {
		disabled_value = types.BoolValue(*obj.Disabled)
	}
	var icmpUnreachable_value types.Bool
	if obj.IcmpUnreachable != nil {
		icmpUnreachable_value = types.BoolValue(*obj.IcmpUnreachable)
	}
	var logStart_value types.Bool
	if obj.LogStart != nil {
		logStart_value = types.BoolValue(*obj.LogStart)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var disableInspect_value types.Bool
	if obj.DisableInspect != nil {
		disableInspect_value = types.BoolValue(*obj.DisableInspect)
	}
	var disableServerResponseInspection_value types.Bool
	if obj.DisableServerResponseInspection != nil {
		disableServerResponseInspection_value = types.BoolValue(*obj.DisableServerResponseInspection)
	}
	var negateSource_value types.Bool
	if obj.NegateSource != nil {
		negateSource_value = types.BoolValue(*obj.NegateSource)
	}
	var action_value types.String
	if obj.Action != nil {
		action_value = types.StringValue(*obj.Action)
	}
	var schedule_value types.String
	if obj.Schedule != nil {
		schedule_value = types.StringValue(*obj.Schedule)
	}
	var groupTag_value types.String
	if obj.GroupTag != nil {
		groupTag_value = types.StringValue(*obj.GroupTag)
	}
	var logEnd_value types.Bool
	if obj.LogEnd != nil {
		logEnd_value = types.BoolValue(*obj.LogEnd)
	}
	var ruleType_value types.String
	if obj.RuleType != nil {
		ruleType_value = types.StringValue(*obj.RuleType)
	}
	var logSetting_value types.String
	if obj.LogSetting != nil {
		logSetting_value = types.StringValue(*obj.LogSetting)
	}
	var negateDestination_value types.Bool
	if obj.NegateDestination != nil {
		negateDestination_value = types.BoolValue(*obj.NegateDestination)
	}
	var uuid_value types.String
	if obj.Uuid != nil {
		uuid_value = types.StringValue(*obj.Uuid)
	}
	o.Name = types.StringValue(obj.Name)
	o.Category = category_list
	o.Qos = qos_object
	o.SourceImei = sourceImei_list
	o.Target = target_object
	o.Disabled = disabled_value
	o.SourceZones = sourceZones_list
	o.IcmpUnreachable = icmpUnreachable_value
	o.LogStart = logStart_value
	o.ProfileSetting = profileSetting_object
	o.Applications = applications_list
	o.Description = description_value
	o.DisableInspect = disableInspect_value
	o.DisableServerResponseInspection = disableServerResponseInspection_value
	o.NegateSource = negateSource_value
	o.Action = action_value
	o.Schedule = schedule_value
	o.SourceNwSlice = sourceNwSlice_list
	o.DestinationZone = destinationZone_value
	o.GroupTag = groupTag_value
	o.LogEnd = logEnd_value
	o.Services = services_list
	o.SourceAddresses = sourceAddresses_list
	o.SourceHip = sourceHip_list
	o.RuleType = ruleType_value
	o.SourceImsi = sourceImsi_list
	o.SourceUsers = sourceUsers_list
	o.Tag = tag_list
	o.DestinationAddresses = destinationAddresses_list
	o.DestinationHip = destinationHip_list
	o.LogSetting = logSetting_value
	o.NegateDestination = negateDestination_value
	o.Uuid = uuid_value

	return diags
}

func (o *SecurityPolicyRulesResourceRulesProfileSettingObject) CopyFromPango(ctx context.Context, obj *security.ProfileSetting, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var group_list types.List
	{
		var list_diags diag.Diagnostics
		group_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Group)
		diags.Append(list_diags...)
	}
	var profiles_object *SecurityPolicyRulesResourceRulesProfileSettingProfilesObject
	if obj.Profiles != nil {
		profiles_object = new(SecurityPolicyRulesResourceRulesProfileSettingProfilesObject)

		diags.Append(profiles_object.CopyFromPango(ctx, obj.Profiles, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Group = group_list
	o.Profiles = profiles_object

	return diags
}

func (o *SecurityPolicyRulesResourceRulesProfileSettingProfilesObject) CopyFromPango(ctx context.Context, obj *security.ProfileSettingProfiles, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var urlFiltering_list types.List
	{
		var list_diags diag.Diagnostics
		urlFiltering_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.UrlFiltering)
		diags.Append(list_diags...)
	}
	var virus_list types.List
	{
		var list_diags diag.Diagnostics
		virus_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Virus)
		diags.Append(list_diags...)
	}
	var vulnerability_list types.List
	{
		var list_diags diag.Diagnostics
		vulnerability_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Vulnerability)
		diags.Append(list_diags...)
	}
	var wildfireAnalysis_list types.List
	{
		var list_diags diag.Diagnostics
		wildfireAnalysis_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.WildfireAnalysis)
		diags.Append(list_diags...)
	}
	var fileBlocking_list types.List
	{
		var list_diags diag.Diagnostics
		fileBlocking_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.FileBlocking)
		diags.Append(list_diags...)
	}
	var spyware_list types.List
	{
		var list_diags diag.Diagnostics
		spyware_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Spyware)
		diags.Append(list_diags...)
	}
	var sctp_list types.List
	{
		var list_diags diag.Diagnostics
		sctp_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Sctp)
		diags.Append(list_diags...)
	}
	var dataFiltering_list types.List
	{
		var list_diags diag.Diagnostics
		dataFiltering_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DataFiltering)
		diags.Append(list_diags...)
	}
	var gtp_list types.List
	{
		var list_diags diag.Diagnostics
		gtp_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Gtp)
		diags.Append(list_diags...)
	}

	o.UrlFiltering = urlFiltering_list
	o.Virus = virus_list
	o.Vulnerability = vulnerability_list
	o.WildfireAnalysis = wildfireAnalysis_list
	o.FileBlocking = fileBlocking_list
	o.Spyware = spyware_list
	o.Sctp = sctp_list
	o.DataFiltering = dataFiltering_list
	o.Gtp = gtp_list

	return diags
}

func (o *SecurityPolicyRulesResourceRulesQosObject) CopyFromPango(ctx context.Context, obj *security.Qos, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var marking_object *SecurityPolicyRulesResourceRulesQosMarkingObject
	if obj.Marking != nil {
		marking_object = new(SecurityPolicyRulesResourceRulesQosMarkingObject)

		diags.Append(marking_object.CopyFromPango(ctx, obj.Marking, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Marking = marking_object

	return diags
}

func (o *SecurityPolicyRulesResourceRulesQosMarkingObject) CopyFromPango(ctx context.Context, obj *security.QosMarking, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var followC2sFlow_object *SecurityPolicyRulesResourceRulesQosMarkingFollowC2sFlowObject
	if obj.FollowC2sFlow != nil {
		followC2sFlow_object = new(SecurityPolicyRulesResourceRulesQosMarkingFollowC2sFlowObject)

		diags.Append(followC2sFlow_object.CopyFromPango(ctx, obj.FollowC2sFlow, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var ipDscp_value types.String
	if obj.IpDscp != nil {
		ipDscp_value = types.StringValue(*obj.IpDscp)
	}
	var ipPrecedence_value types.String
	if obj.IpPrecedence != nil {
		ipPrecedence_value = types.StringValue(*obj.IpPrecedence)
	}
	o.FollowC2sFlow = followC2sFlow_object
	o.IpDscp = ipDscp_value
	o.IpPrecedence = ipPrecedence_value

	return diags
}

func (o *SecurityPolicyRulesResourceRulesQosMarkingFollowC2sFlowObject) CopyFromPango(ctx context.Context, obj *security.QosMarkingFollowC2sFlow, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *SecurityPolicyRulesResourceRulesTargetObject) CopyFromPango(ctx context.Context, obj *security.Target, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var devices_list types.List
	{
		var devices_tf_entries []SecurityPolicyRulesResourceRulesTargetDevicesObject
		for _, elt := range obj.Devices {
			var entry SecurityPolicyRulesResourceRulesTargetDevicesObject
			entry_diags := entry.CopyFromPango(ctx, &elt, encrypted)
			diags.Append(entry_diags...)
			devices_tf_entries = append(devices_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("devices")
		devices_list, list_diags = types.ListValueFrom(ctx, schemaType, devices_tf_entries)
		diags.Append(list_diags...)
	}
	var tags_list types.List
	{
		var list_diags diag.Diagnostics
		tags_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tags)
		diags.Append(list_diags...)
	}

	var negate_value types.Bool
	if obj.Negate != nil {
		negate_value = types.BoolValue(*obj.Negate)
	}
	o.Devices = devices_list
	o.Negate = negate_value
	o.Tags = tags_list

	return diags
}

func (o *SecurityPolicyRulesResourceRulesTargetDevicesObject) CopyFromPango(ctx context.Context, obj *security.TargetDevices, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var vsys_list types.List
	{
		var vsys_tf_entries []SecurityPolicyRulesResourceRulesTargetDevicesVsysObject
		for _, elt := range obj.Vsys {
			var entry SecurityPolicyRulesResourceRulesTargetDevicesVsysObject
			entry_diags := entry.CopyFromPango(ctx, &elt, encrypted)
			diags.Append(entry_diags...)
			vsys_tf_entries = append(vsys_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("vsys")
		vsys_list, list_diags = types.ListValueFrom(ctx, schemaType, vsys_tf_entries)
		diags.Append(list_diags...)
	}

	o.Name = types.StringValue(obj.Name)
	o.Vsys = vsys_list

	return diags
}

func (o *SecurityPolicyRulesResourceRulesTargetDevicesVsysObject) CopyFromPango(ctx context.Context, obj *security.TargetDevicesVsys, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	o.Name = types.StringValue(obj.Name)

	return diags
}

func (r *SecurityPolicyRulesResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	var state SecurityPolicyRulesResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_security_policy_rules_resource",
		"function":      "Create",
	})

	var location security.Location

	if state.Location.Shared != nil {
		location.Shared = &security.SharedLocation{

			Rulebase: state.Location.Shared.Rulebase.ValueString(),
		}
	}
	if state.Location.Vsys != nil {
		location.Vsys = &security.VsysLocation{

			NgfwDevice: state.Location.Vsys.NgfwDevice.ValueString(),
			Vsys:       state.Location.Vsys.Name.ValueString(),
		}
	}
	if state.Location.DeviceGroup != nil {
		location.DeviceGroup = &security.DeviceGroupLocation{

			PanoramaDevice: state.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    state.Location.DeviceGroup.Name.ValueString(),
			Rulebase:       state.Location.DeviceGroup.Rulebase.ValueString(),
		}
	}

	var elements []SecurityPolicyRulesResourceRulesObject
	state.Rules.ElementsAs(ctx, &elements, false)
	entries := make([]*security.Entry, len(elements))
	for idx, elt := range elements {
		var entry *security.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, &entry, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		entries[idx] = entry
	}
	position := state.Position.CopyToPango()
	processed, err := r.manager.CreateMany(ctx, location, entries, sdkmanager.NonExhaustive, position)
	if err != nil {
		resp.Diagnostics.AddError("Error during CreateMany() call", err.Error())
		return
	}
	objects := make([]SecurityPolicyRulesResourceRulesObject, len(processed))
	for idx, elt := range processed {
		var object SecurityPolicyRulesResourceRulesObject
		copy_diags := object.CopyFromPango(ctx, elt, nil)
		resp.Diagnostics.Append(copy_diags...)
		if resp.Diagnostics.HasError() {
			return
		}
		objects[idx] = object
	}

	var list_diags diag.Diagnostics
	state.Rules, list_diags = types.ListValueFrom(ctx, state.getTypeFor("rules"), objects)
	resp.Diagnostics.Append(list_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

func (o *SecurityPolicyRulesResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var state SecurityPolicyRulesResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_security_policy_rules",
		"function":      "Create",
	})

	var location security.Location

	if state.Location.Shared != nil {
		location.Shared = &security.SharedLocation{

			Rulebase: state.Location.Shared.Rulebase.ValueString(),
		}
	}
	if state.Location.Vsys != nil {
		location.Vsys = &security.VsysLocation{

			NgfwDevice: state.Location.Vsys.NgfwDevice.ValueString(),
			Vsys:       state.Location.Vsys.Name.ValueString(),
		}
	}
	if state.Location.DeviceGroup != nil {
		location.DeviceGroup = &security.DeviceGroupLocation{

			PanoramaDevice: state.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    state.Location.DeviceGroup.Name.ValueString(),
			Rulebase:       state.Location.DeviceGroup.Rulebase.ValueString(),
		}
	}

	var elements []SecurityPolicyRulesResourceRulesObject
	state.Rules.ElementsAs(ctx, &elements, false)
	entries := make([]*security.Entry, 0, len(elements))
	for _, elt := range elements {
		var entry *security.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, &entry, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		entries = append(entries, entry)
	}

	readEntries, err := o.manager.ReadMany(ctx, location, entries, sdkmanager.NonExhaustive)
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Failed to read entries from the server", err.Error())
		}
		return
	}

	var objects []SecurityPolicyRulesResourceRulesObject
	for _, elt := range readEntries {
		var object SecurityPolicyRulesResourceRulesObject
		err := object.CopyFromPango(ctx, elt, nil)
		resp.Diagnostics.Append(err...)
		if resp.Diagnostics.HasError() {
			return
		}
		objects = append(objects, object)
	}

	var list_diags diag.Diagnostics
	state.Rules, list_diags = types.ListValueFrom(ctx, state.getTypeFor("rules"), objects)
	resp.Diagnostics.Append(list_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

func (r *SecurityPolicyRulesResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var state, plan SecurityPolicyRulesResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_security_policy_rules_resource",
		"function":      "Create",
	})

	var location security.Location

	if plan.Location.Shared != nil {
		location.Shared = &security.SharedLocation{

			Rulebase: plan.Location.Shared.Rulebase.ValueString(),
		}
	}
	if plan.Location.Vsys != nil {
		location.Vsys = &security.VsysLocation{

			NgfwDevice: plan.Location.Vsys.NgfwDevice.ValueString(),
			Vsys:       plan.Location.Vsys.Name.ValueString(),
		}
	}
	if plan.Location.DeviceGroup != nil {
		location.DeviceGroup = &security.DeviceGroupLocation{

			PanoramaDevice: plan.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    plan.Location.DeviceGroup.Name.ValueString(),
			Rulebase:       plan.Location.DeviceGroup.Rulebase.ValueString(),
		}
	}

	var elements []SecurityPolicyRulesResourceRulesObject
	state.Rules.ElementsAs(ctx, &elements, false)
	stateEntries := make([]*security.Entry, len(elements))
	for idx, elt := range elements {
		var entry *security.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, &entry, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		stateEntries[idx] = entry
	}

	position := state.Position.CopyToPango()

	existing, err := r.manager.ReadMany(ctx, location, stateEntries, sdkmanager.NonExhaustive)
	if err != nil && !sdkerrors.IsObjectNotFound(err) {
		resp.Diagnostics.AddError("Error while reading entries from the server", err.Error())
		return
	}

	existingEntriesByName := make(map[string]*security.Entry, len(existing))
	for _, elt := range existing {
		existingEntriesByName[elt.Name] = elt
	}

	plan.Rules.ElementsAs(ctx, &elements, false)
	planEntries := make([]*security.Entry, len(elements))
	for idx, elt := range elements {
		entry, _ := existingEntriesByName[elt.Name.ValueString()]
		resp.Diagnostics.Append(elt.CopyToPango(ctx, &entry, nil)...)
		if resp.Diagnostics.HasError() {
			return
		}
		planEntries[idx] = entry
	}

	processed, err := r.manager.UpdateMany(ctx, location, stateEntries, planEntries, sdkmanager.NonExhaustive, position)
	if err != nil {
		resp.Diagnostics.AddError("Failed to udpate entries", err.Error())
	}

	objects := make([]*SecurityPolicyRulesResourceRulesObject, len(processed))
	for idx, elt := range processed {
		var object SecurityPolicyRulesResourceRulesObject
		copy_diags := object.CopyFromPango(ctx, elt, nil)
		resp.Diagnostics.Append(copy_diags...)
		if resp.Diagnostics.HasError() {
			return
		}
		objects[idx] = &object
	}

	var list_diags diag.Diagnostics
	plan.Rules, list_diags = types.ListValueFrom(ctx, state.getTypeFor("rules"), objects)
	resp.Diagnostics.Append(list_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &plan)...)

}

func (r *SecurityPolicyRulesResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state SecurityPolicyRulesResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_security_policy_rules_resource",
		"function":      "Delete",
	})
	var elements []SecurityPolicyRulesResourceRulesObject
	state.Rules.ElementsAs(ctx, &elements, false)

	var location security.Location

	if state.Location.Shared != nil {
		location.Shared = &security.SharedLocation{

			Rulebase: state.Location.Shared.Rulebase.ValueString(),
		}
	}
	if state.Location.Vsys != nil {
		location.Vsys = &security.VsysLocation{

			NgfwDevice: state.Location.Vsys.NgfwDevice.ValueString(),
			Vsys:       state.Location.Vsys.Name.ValueString(),
		}
	}
	if state.Location.DeviceGroup != nil {
		location.DeviceGroup = &security.DeviceGroupLocation{

			Rulebase:       state.Location.DeviceGroup.Rulebase.ValueString(),
			PanoramaDevice: state.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    state.Location.DeviceGroup.Name.ValueString(),
		}
	}

	var names []string
	for _, elt := range elements {
		names = append(names, elt.Name.ValueString())
	}
	err := r.manager.Delete(ctx, location, names, sdkmanager.NonExhaustive)
	if err != nil {
		resp.Diagnostics.AddError("error while deleting entries", err.Error())
		return
	}

}

func (r *SecurityPolicyRulesResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

}

type SecurityPolicyRulesSharedLocation struct {
	Rulebase types.String `tfsdk:"rulebase"`
}
type SecurityPolicyRulesVsysLocation struct {
	Name       types.String `tfsdk:"name"`
	NgfwDevice types.String `tfsdk:"ngfw_device"`
}
type SecurityPolicyRulesDeviceGroupLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	Rulebase       types.String `tfsdk:"rulebase"`
}
type SecurityPolicyRulesLocation struct {
	Shared      *SecurityPolicyRulesSharedLocation      `tfsdk:"shared"`
	Vsys        *SecurityPolicyRulesVsysLocation        `tfsdk:"vsys"`
	DeviceGroup *SecurityPolicyRulesDeviceGroupLocation `tfsdk:"device_group"`
}

func SecurityPolicyRulesLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"shared": rsschema.SingleNestedAttribute{
				Description: "Located in a shared rulebase",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"rulebase": rsschema.StringAttribute{
						Description: "Rulebase name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("pre-rulebase"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("device_group"),
						path.MatchRelative().AtParent().AtName("shared"),
						path.MatchRelative().AtParent().AtName("vsys"),
					}...),
				},
			},
			"vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific vsys.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The vsys name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"device_group": rsschema.SingleNestedAttribute{
				Description: "Located in a specific device group.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "The panorama device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The device group.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"rulebase": rsschema.StringAttribute{
						Description: "The rulebase.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("pre-rulebase"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o SecurityPolicyRulesSharedLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		Rulebase *string `json:"rulebase"`
	}{
		Rulebase: o.Rulebase.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *SecurityPolicyRulesSharedLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Rulebase *string `json:"rulebase"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.Rulebase = types.StringPointerValue(shadow.Rulebase)

	return nil
}
func (o SecurityPolicyRulesVsysLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		NgfwDevice *string `json:"ngfw_device"`
		Name       *string `json:"name"`
	}{
		NgfwDevice: o.NgfwDevice.ValueStringPointer(),
		Name:       o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *SecurityPolicyRulesVsysLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		NgfwDevice *string `json:"ngfw_device"`
		Name       *string `json:"name"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o SecurityPolicyRulesDeviceGroupLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		PanoramaDevice *string `json:"panorama_device"`
		Name           *string `json:"name"`
		Rulebase       *string `json:"rulebase"`
	}{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
		Rulebase:       o.Rulebase.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *SecurityPolicyRulesDeviceGroupLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device"`
		Name           *string `json:"name"`
		Rulebase       *string `json:"rulebase"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)
	o.Rulebase = types.StringPointerValue(shadow.Rulebase)

	return nil
}
func (o SecurityPolicyRulesLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		Shared      *SecurityPolicyRulesSharedLocation      `json:"shared"`
		Vsys        *SecurityPolicyRulesVsysLocation        `json:"vsys"`
		DeviceGroup *SecurityPolicyRulesDeviceGroupLocation `json:"device_group"`
	}{
		Shared:      o.Shared,
		Vsys:        o.Vsys,
		DeviceGroup: o.DeviceGroup,
	}

	return json.Marshal(obj)
}

func (o *SecurityPolicyRulesLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Shared      *SecurityPolicyRulesSharedLocation      `json:"shared"`
		Vsys        *SecurityPolicyRulesVsysLocation        `json:"vsys"`
		DeviceGroup *SecurityPolicyRulesDeviceGroupLocation `json:"device_group"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.Shared = shadow.Shared
	o.Vsys = shadow.Vsys
	o.DeviceGroup = shadow.DeviceGroup

	return nil
}
