package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"strings"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/network/virtual_router/ipv6/staticroute"
	pangoutil "github.com/PaloAltoNetworks/pango/util"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &VirtualRouterStaticRoutesIpv6DataSource{}
	_ datasource.DataSourceWithConfigure = &VirtualRouterStaticRoutesIpv6DataSource{}
)

func NewVirtualRouterStaticRoutesIpv6DataSource() datasource.DataSource {
	return &VirtualRouterStaticRoutesIpv6DataSource{}
}

type VirtualRouterStaticRoutesIpv6DataSource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*staticroute.Entry, staticroute.Location, *staticroute.Service]
}

type VirtualRouterStaticRoutesIpv6DataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type VirtualRouterStaticRoutesIpv6DataSourceModel struct {
	Location      types.Object `tfsdk:"location"`
	VirtualRouter types.String `tfsdk:"virtual_router"`
	StaticRoutes  types.List   `tfsdk:"static_routes"`
}
type VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesObject struct {
	Name        types.String                                                          `tfsdk:"name"`
	AdminDist   types.Int64                                                           `tfsdk:"admin_dist"`
	Bfd         *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesBfdObject         `tfsdk:"bfd"`
	Destination types.String                                                          `tfsdk:"destination"`
	Interface   types.String                                                          `tfsdk:"interface"`
	Metric      types.Int64                                                           `tfsdk:"metric"`
	Nexthop     *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopObject     `tfsdk:"nexthop"`
	PathMonitor *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorObject `tfsdk:"path_monitor"`
	RouteTable  *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableObject  `tfsdk:"route_table"`
}
type VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesBfdObject struct {
	Profile types.String `tfsdk:"profile"`
}
type VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopObject struct {
	Discard     *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopDiscardObject `tfsdk:"discard"`
	Ipv6Address types.String                                                             `tfsdk:"ipv6_address"`
	NextVr      types.String                                                             `tfsdk:"next_vr"`
	Receive     *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopReceiveObject `tfsdk:"receive"`
}
type VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopDiscardObject struct {
}
type VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopReceiveObject struct {
}
type VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorObject struct {
	Enable              types.Bool   `tfsdk:"enable"`
	FailureCondition    types.String `tfsdk:"failure_condition"`
	HoldTime            types.Int64  `tfsdk:"hold_time"`
	MonitorDestinations types.List   `tfsdk:"monitor_destinations"`
}
type VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorMonitorDestinationsObject struct {
	Name        types.String `tfsdk:"name"`
	Enable      types.Bool   `tfsdk:"enable"`
	Source      types.String `tfsdk:"source"`
	Destination types.String `tfsdk:"destination"`
	Interval    types.Int64  `tfsdk:"interval"`
	Count       types.Int64  `tfsdk:"count"`
}
type VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableObject struct {
	NoInstall *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableNoInstallObject `tfsdk:"no_install"`
	Unicast   *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableUnicastObject   `tfsdk:"unicast"`
}
type VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableNoInstallObject struct {
}
type VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableUnicastObject struct {
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj VirtualRouterStaticRoutesIpv6Location

	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"virtual_router": types.StringType,
		"static_routes":  types.ListType{},
	}
}

func (o VirtualRouterStaticRoutesIpv6DataSourceModel) AncestorName() string {
	return ""
}

func (o VirtualRouterStaticRoutesIpv6DataSourceModel) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesObject) AttributeTypes() map[string]attr.Type {

	var bfdObj *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesBfdObject

	var nexthopObj *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopObject

	var pathMonitorObj *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorObject

	var routeTableObj *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableObject
	return map[string]attr.Type{
		"name":       types.StringType,
		"admin_dist": types.Int64Type,
		"bfd": types.ObjectType{
			AttrTypes: bfdObj.AttributeTypes(),
		},
		"destination": types.StringType,
		"interface":   types.StringType,
		"metric":      types.Int64Type,
		"nexthop": types.ObjectType{
			AttrTypes: nexthopObj.AttributeTypes(),
		},
		"path_monitor": types.ObjectType{
			AttrTypes: pathMonitorObj.AttributeTypes(),
		},
		"route_table": types.ObjectType{
			AttrTypes: routeTableObj.AttributeTypes(),
		},
	}
}

func (o VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesObject) AncestorName() string {
	return "static-routes"
}

func (o VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesBfdObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"profile": types.StringType,
	}
}

func (o VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesBfdObject) AncestorName() string {
	return "bfd"
}

func (o VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesBfdObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopObject) AttributeTypes() map[string]attr.Type {

	var discardObj *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopDiscardObject

	var receiveObj *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopReceiveObject
	return map[string]attr.Type{
		"discard": types.ObjectType{
			AttrTypes: discardObj.AttributeTypes(),
		},
		"ipv6_address": types.StringType,
		"next_vr":      types.StringType,
		"receive": types.ObjectType{
			AttrTypes: receiveObj.AttributeTypes(),
		},
	}
}

func (o VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopObject) AncestorName() string {
	return "nexthop"
}

func (o VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopDiscardObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopDiscardObject) AncestorName() string {
	return "discard"
}

func (o VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopDiscardObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopReceiveObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopReceiveObject) AncestorName() string {
	return "receive"
}

func (o VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopReceiveObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"enable":               types.BoolType,
		"failure_condition":    types.StringType,
		"hold_time":            types.Int64Type,
		"monitor_destinations": types.ListType{},
	}
}

func (o VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorObject) AncestorName() string {
	return "path-monitor"
}

func (o VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorMonitorDestinationsObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":        types.StringType,
		"enable":      types.BoolType,
		"source":      types.StringType,
		"destination": types.StringType,
		"interval":    types.Int64Type,
		"count":       types.Int64Type,
	}
}

func (o VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorMonitorDestinationsObject) AncestorName() string {
	return "monitor-destinations"
}

func (o VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorMonitorDestinationsObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableObject) AttributeTypes() map[string]attr.Type {

	var noInstallObj *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableNoInstallObject

	var unicastObj *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableUnicastObject
	return map[string]attr.Type{
		"no_install": types.ObjectType{
			AttrTypes: noInstallObj.AttributeTypes(),
		},
		"unicast": types.ObjectType{
			AttrTypes: unicastObj.AttributeTypes(),
		},
	}
}

func (o VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableObject) AncestorName() string {
	return "route-table"
}

func (o VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableNoInstallObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableNoInstallObject) AncestorName() string {
	return "no-install"
}

func (o VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableNoInstallObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableUnicastObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableUnicastObject) AncestorName() string {
	return "unicast"
}

func (o VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableUnicastObject) EntryName() *string {
	return nil
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	adminDist_value := o.AdminDist.ValueInt64Pointer()
	var bfd_entry *staticroute.Bfd
	if o.Bfd != nil {
		if *obj != nil && (*obj).Bfd != nil {
			bfd_entry = (*obj).Bfd
		} else {
			bfd_entry = new(staticroute.Bfd)
		}
		// ModelOrObject: Object
		diags.Append(o.Bfd.CopyToPango(ctx, append(ancestors, o), &bfd_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	destination_value := o.Destination.ValueStringPointer()
	interface_value := o.Interface.ValueStringPointer()
	metric_value := o.Metric.ValueInt64Pointer()
	var nexthop_entry *staticroute.Nexthop
	if o.Nexthop != nil {
		if *obj != nil && (*obj).Nexthop != nil {
			nexthop_entry = (*obj).Nexthop
		} else {
			nexthop_entry = new(staticroute.Nexthop)
		}
		// ModelOrObject: Object
		diags.Append(o.Nexthop.CopyToPango(ctx, append(ancestors, o), &nexthop_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var pathMonitor_entry *staticroute.PathMonitor
	if o.PathMonitor != nil {
		if *obj != nil && (*obj).PathMonitor != nil {
			pathMonitor_entry = (*obj).PathMonitor
		} else {
			pathMonitor_entry = new(staticroute.PathMonitor)
		}
		// ModelOrObject: Object
		diags.Append(o.PathMonitor.CopyToPango(ctx, append(ancestors, o), &pathMonitor_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var routeTable_entry *staticroute.RouteTable
	if o.RouteTable != nil {
		if *obj != nil && (*obj).RouteTable != nil {
			routeTable_entry = (*obj).RouteTable
		} else {
			routeTable_entry = new(staticroute.RouteTable)
		}
		// ModelOrObject: Object
		diags.Append(o.RouteTable.CopyToPango(ctx, append(ancestors, o), &routeTable_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(staticroute.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).AdminDist = adminDist_value
	(*obj).Bfd = bfd_entry
	(*obj).Destination = destination_value
	(*obj).Interface = interface_value
	(*obj).Metric = metric_value
	(*obj).Nexthop = nexthop_entry
	(*obj).PathMonitor = pathMonitor_entry
	(*obj).RouteTable = routeTable_entry

	return diags
}
func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesBfdObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.Bfd, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	profile_value := o.Profile.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(staticroute.Bfd)
	}
	(*obj).Profile = profile_value

	return diags
}
func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.Nexthop, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var discard_entry *staticroute.NexthopDiscard
	if o.Discard != nil {
		if *obj != nil && (*obj).Discard != nil {
			discard_entry = (*obj).Discard
		} else {
			discard_entry = new(staticroute.NexthopDiscard)
		}
		// ModelOrObject: Object
		diags.Append(o.Discard.CopyToPango(ctx, append(ancestors, o), &discard_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	ipv6Address_value := o.Ipv6Address.ValueStringPointer()
	nextVr_value := o.NextVr.ValueStringPointer()
	var receive_entry *staticroute.NexthopReceive
	if o.Receive != nil {
		if *obj != nil && (*obj).Receive != nil {
			receive_entry = (*obj).Receive
		} else {
			receive_entry = new(staticroute.NexthopReceive)
		}
		// ModelOrObject: Object
		diags.Append(o.Receive.CopyToPango(ctx, append(ancestors, o), &receive_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(staticroute.Nexthop)
	}
	(*obj).Discard = discard_entry
	(*obj).Ipv6Address = ipv6Address_value
	(*obj).NextVr = nextVr_value
	(*obj).Receive = receive_entry

	return diags
}
func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopDiscardObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.NexthopDiscard, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(staticroute.NexthopDiscard)
	}

	return diags
}
func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopReceiveObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.NexthopReceive, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(staticroute.NexthopReceive)
	}

	return diags
}
func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.PathMonitor, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	failureCondition_value := o.FailureCondition.ValueStringPointer()
	holdTime_value := o.HoldTime.ValueInt64Pointer()
	var monitorDestinations_tf_entries []VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorMonitorDestinationsObject
	var monitorDestinations_pango_entries []staticroute.PathMonitorMonitorDestinations
	{
		d := o.MonitorDestinations.ElementsAs(ctx, &monitorDestinations_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range monitorDestinations_tf_entries {
			var entry *staticroute.PathMonitorMonitorDestinations
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			monitorDestinations_pango_entries = append(monitorDestinations_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(staticroute.PathMonitor)
	}
	(*obj).Enable = enable_value
	(*obj).FailureCondition = failureCondition_value
	(*obj).HoldTime = holdTime_value
	(*obj).MonitorDestinations = monitorDestinations_pango_entries

	return diags
}
func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorMonitorDestinationsObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.PathMonitorMonitorDestinations, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	source_value := o.Source.ValueStringPointer()
	destination_value := o.Destination.ValueStringPointer()
	interval_value := o.Interval.ValueInt64Pointer()
	count_value := o.Count.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(staticroute.PathMonitorMonitorDestinations)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Enable = enable_value
	(*obj).Source = source_value
	(*obj).Destination = destination_value
	(*obj).Interval = interval_value
	(*obj).Count = count_value

	return diags
}
func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.RouteTable, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var noInstall_entry *staticroute.RouteTableNoInstall
	if o.NoInstall != nil {
		if *obj != nil && (*obj).NoInstall != nil {
			noInstall_entry = (*obj).NoInstall
		} else {
			noInstall_entry = new(staticroute.RouteTableNoInstall)
		}
		// ModelOrObject: Object
		diags.Append(o.NoInstall.CopyToPango(ctx, append(ancestors, o), &noInstall_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var unicast_entry *staticroute.RouteTableUnicast
	if o.Unicast != nil {
		if *obj != nil && (*obj).Unicast != nil {
			unicast_entry = (*obj).Unicast
		} else {
			unicast_entry = new(staticroute.RouteTableUnicast)
		}
		// ModelOrObject: Object
		diags.Append(o.Unicast.CopyToPango(ctx, append(ancestors, o), &unicast_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(staticroute.RouteTable)
	}
	(*obj).NoInstall = noInstall_entry
	(*obj).Unicast = unicast_entry

	return diags
}
func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableNoInstallObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.RouteTableNoInstall, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(staticroute.RouteTableNoInstall)
	}

	return diags
}
func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableUnicastObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.RouteTableUnicast, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(staticroute.RouteTableUnicast)
	}

	return diags
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var bfd_object *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesBfdObject
	if obj.Bfd != nil {
		bfd_object = new(VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesBfdObject)
		diags.Append(bfd_object.CopyFromPango(ctx, append(ancestors, o), obj.Bfd, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var nexthop_object *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopObject
	if obj.Nexthop != nil {
		nexthop_object = new(VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopObject)
		diags.Append(nexthop_object.CopyFromPango(ctx, append(ancestors, o), obj.Nexthop, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var pathMonitor_object *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorObject
	if obj.PathMonitor != nil {
		pathMonitor_object = new(VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorObject)
		diags.Append(pathMonitor_object.CopyFromPango(ctx, append(ancestors, o), obj.PathMonitor, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var routeTable_object *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableObject
	if obj.RouteTable != nil {
		routeTable_object = new(VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableObject)
		diags.Append(routeTable_object.CopyFromPango(ctx, append(ancestors, o), obj.RouteTable, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var adminDist_value types.Int64
	if obj.AdminDist != nil {
		adminDist_value = types.Int64Value(*obj.AdminDist)
	}
	var destination_value types.String
	if obj.Destination != nil {
		destination_value = types.StringValue(*obj.Destination)
	}
	var interface_value types.String
	if obj.Interface != nil {
		interface_value = types.StringValue(*obj.Interface)
	}
	var metric_value types.Int64
	if obj.Metric != nil {
		metric_value = types.Int64Value(*obj.Metric)
	}
	o.Name = types.StringValue(obj.Name)
	o.AdminDist = adminDist_value
	o.Bfd = bfd_object
	o.Destination = destination_value
	o.Interface = interface_value
	o.Metric = metric_value
	o.Nexthop = nexthop_object
	o.PathMonitor = pathMonitor_object
	o.RouteTable = routeTable_object

	return diags
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesBfdObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.Bfd, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var profile_value types.String
	if obj.Profile != nil {
		profile_value = types.StringValue(*obj.Profile)
	}
	o.Profile = profile_value

	return diags
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.Nexthop, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var discard_object *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopDiscardObject
	if obj.Discard != nil {
		discard_object = new(VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopDiscardObject)
		diags.Append(discard_object.CopyFromPango(ctx, append(ancestors, o), obj.Discard, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var receive_object *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopReceiveObject
	if obj.Receive != nil {
		receive_object = new(VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopReceiveObject)
		diags.Append(receive_object.CopyFromPango(ctx, append(ancestors, o), obj.Receive, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var ipv6Address_value types.String
	if obj.Ipv6Address != nil {
		ipv6Address_value = types.StringValue(*obj.Ipv6Address)
	}
	var nextVr_value types.String
	if obj.NextVr != nil {
		nextVr_value = types.StringValue(*obj.NextVr)
	}
	o.Discard = discard_object
	o.Ipv6Address = ipv6Address_value
	o.NextVr = nextVr_value
	o.Receive = receive_object

	return diags
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopDiscardObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.NexthopDiscard, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopReceiveObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.NexthopReceive, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.PathMonitor, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var monitorDestinations_list types.List
	{
		var monitorDestinations_tf_entries []VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorMonitorDestinationsObject
		for _, elt := range obj.MonitorDestinations {
			entry := VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorMonitorDestinationsObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			monitorDestinations_tf_entries = append(monitorDestinations_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("monitor_destinations")
		monitorDestinations_list, list_diags = types.ListValueFrom(ctx, schemaType, monitorDestinations_tf_entries)
		diags.Append(list_diags...)
	}

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var failureCondition_value types.String
	if obj.FailureCondition != nil {
		failureCondition_value = types.StringValue(*obj.FailureCondition)
	}
	var holdTime_value types.Int64
	if obj.HoldTime != nil {
		holdTime_value = types.Int64Value(*obj.HoldTime)
	}
	o.Enable = enable_value
	o.FailureCondition = failureCondition_value
	o.HoldTime = holdTime_value
	o.MonitorDestinations = monitorDestinations_list

	return diags
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorMonitorDestinationsObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.PathMonitorMonitorDestinations, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var source_value types.String
	if obj.Source != nil {
		source_value = types.StringValue(*obj.Source)
	}
	var destination_value types.String
	if obj.Destination != nil {
		destination_value = types.StringValue(*obj.Destination)
	}
	var interval_value types.Int64
	if obj.Interval != nil {
		interval_value = types.Int64Value(*obj.Interval)
	}
	var count_value types.Int64
	if obj.Count != nil {
		count_value = types.Int64Value(*obj.Count)
	}
	o.Name = types.StringValue(obj.Name)
	o.Enable = enable_value
	o.Source = source_value
	o.Destination = destination_value
	o.Interval = interval_value
	o.Count = count_value

	return diags
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.RouteTable, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var noInstall_object *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableNoInstallObject
	if obj.NoInstall != nil {
		noInstall_object = new(VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableNoInstallObject)
		diags.Append(noInstall_object.CopyFromPango(ctx, append(ancestors, o), obj.NoInstall, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var unicast_object *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableUnicastObject
	if obj.Unicast != nil {
		unicast_object = new(VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableUnicastObject)
		diags.Append(unicast_object.CopyFromPango(ctx, append(ancestors, o), obj.Unicast, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.NoInstall = noInstall_object
	o.Unicast = unicast_object

	return diags
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableNoInstallObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.RouteTableNoInstall, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableUnicastObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.RouteTableUnicast, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	components = append(components, pangoutil.AsEntryXpath(o.VirtualRouter.ValueString()))
	return components, nil
}

func VirtualRouterStaticRoutesIpv6DataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": VirtualRouterStaticRoutesIpv6DataSourceLocationSchema(),

			"static_routes": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     true,
				Optional:     false,
				Computed:     false,
				Sensitive:    false,
				NestedObject: VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesSchema(),
			},

			"virtual_router": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},
		},
	}
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceModel) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRoutesIpv6DataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"admin_dist": dsschema.Int64Attribute{
				Description: "adminitrative distance",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"bfd": VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesBfdSchema(),

			"destination": dsschema.StringAttribute{
				Description: "Destination IP address/prefix",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"interface": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"metric": dsschema.Int64Attribute{
				Description: "metric value (path cost)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"nexthop": VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopSchema(),

			"path_monitor": VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorSchema(),

			"route_table": VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableSchema(),
		},
	}
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesBfdSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"profile": dsschema.StringAttribute{
				Description: "BFD profile",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesBfdObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesBfdSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"discard": VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopDiscardSchema(),

			"ipv6_address": dsschema.StringAttribute{
				Description: "Next hop IP address",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"next_vr": dsschema.StringAttribute{
				Description: "Next hop virtual router",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"receive": VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopReceiveSchema(),
		},
	}
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopDiscardSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("discard"),
				path.MatchRelative().AtParent().AtName("ipv6_address"),
				path.MatchRelative().AtParent().AtName("next_vr"),
				path.MatchRelative().AtParent().AtName("receive"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopDiscardObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopDiscardSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopReceiveSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("discard"),
				path.MatchRelative().AtParent().AtName("ipv6_address"),
				path.MatchRelative().AtParent().AtName("next_vr"),
				path.MatchRelative().AtParent().AtName("receive"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopReceiveObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesNexthopReceiveSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"enable": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"failure_condition": dsschema.StringAttribute{
				Description: "failure condition",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hold_time": dsschema.Int64Attribute{
				Description: "hold time (minutes)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"monitor_destinations": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorMonitorDestinationsSchema(),
			},
		},
	}
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorMonitorDestinationsSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"enable": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source": dsschema.StringAttribute{
				Description: "Source IP address",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"destination": dsschema.StringAttribute{
				Description: "Destination IP address",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"interval": dsschema.Int64Attribute{
				Description: "ping interval",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"count": dsschema.Int64Attribute{
				Description: "ping count",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorMonitorDestinationsObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesPathMonitorMonitorDestinationsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"no_install": VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableNoInstallSchema(),

			"unicast": VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableUnicastSchema(),
		},
	}
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableNoInstallSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("no_install"),
				path.MatchRelative().AtParent().AtName("unicast"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableNoInstallObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableNoInstallSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableUnicastSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("no_install"),
				path.MatchRelative().AtParent().AtName("unicast"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableUnicastObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesRouteTableUnicastSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRoutesIpv6DataSourceLocationSchema() rsschema.Attribute {
	return VirtualRouterStaticRoutesIpv6LocationSchema()
}

// Metadata returns the data source type name.
func (d *VirtualRouterStaticRoutesIpv6DataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_virtual_router_static_routes_ipv6"
}

// Schema defines the schema for this data source.
func (d *VirtualRouterStaticRoutesIpv6DataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = VirtualRouterStaticRoutesIpv6DataSourceSchema()
}

// Configure prepares the struct.
func (d *VirtualRouterStaticRoutesIpv6DataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	d.client = providerData.Client
	specifier, _, err := staticroute.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	d.manager = sdkmanager.NewEntryObjectManager[*staticroute.Entry, staticroute.Location, *staticroute.Service](d.client, staticroute.NewService(d.client), batchSize, specifier, staticroute.SpecMatches)
}
func (o *VirtualRouterStaticRoutesIpv6DataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var state VirtualRouterStaticRoutesIpv6DataSourceModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_virtual_router_static_routes_ipv6",
		"function":      "Create",
	})

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location staticroute.Location

	{
		var terraformLocation VirtualRouterStaticRoutesIpv6Location
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &staticroute.NgfwLocation{}
			var innerLocation VirtualRouterStaticRoutesIpv6NgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &staticroute.TemplateLocation{}
			var innerLocation VirtualRouterStaticRoutesIpv6TemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &staticroute.TemplateStackLocation{}
			var innerLocation VirtualRouterStaticRoutesIpv6TemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	var elements []VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesObject
	resp.Diagnostics.Append(state.StaticRoutes.ElementsAs(ctx, &elements, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	entries := make([]*staticroute.Entry, 0, len(elements))
	for _, elt := range elements {
		var entry *staticroute.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, nil, &entry, ev)...)
		if resp.Diagnostics.HasError() {
			return
		}
		entries = append(entries, entry)
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}

	readEntries, err := o.manager.ReadMany(ctx, location, components, entries)
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Failed to read entries from the server", err.Error())
		}
		return
	}
	objects := make([]VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesObject, len(readEntries))
	for idx, elt := range readEntries {
		var object VirtualRouterStaticRoutesIpv6DataSourceStaticRoutesObject
		resp.Diagnostics.Append(object.CopyFromPango(ctx, nil, elt, ev)...)
		if resp.Diagnostics.HasError() {
			return
		}
		objects[idx] = object
	}

	var list_diags diag.Diagnostics
	state.StaticRoutes, list_diags = types.ListValueFrom(ctx, state.getTypeFor("static_routes"), objects)
	resp.Diagnostics.Append(list_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	{
		component := components[0]
		component = strings.TrimPrefix(component, "entry[@name='")
		component = strings.TrimSuffix(component, "']")
		state.VirtualRouter = types.StringValue(component)
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &VirtualRouterStaticRoutesIpv6Resource{}
	_ resource.ResourceWithConfigure   = &VirtualRouterStaticRoutesIpv6Resource{}
	_ resource.ResourceWithImportState = &VirtualRouterStaticRoutesIpv6Resource{}
)

func NewVirtualRouterStaticRoutesIpv6Resource() resource.Resource {
	if _, found := resourceFuncMap["panos_virtual_router_static_routes_ipv6"]; !found {
		resourceFuncMap["panos_virtual_router_static_routes_ipv6"] = resourceFuncs{
			CreateImportId: VirtualRouterStaticRoutesIpv6ImportStateCreator,
		}
	}
	return &VirtualRouterStaticRoutesIpv6Resource{}
}

type VirtualRouterStaticRoutesIpv6Resource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*staticroute.Entry, staticroute.Location, *staticroute.Service]
}

func VirtualRouterStaticRoutesIpv6ResourceLocationSchema() rsschema.Attribute {
	return VirtualRouterStaticRoutesIpv6LocationSchema()
}

type VirtualRouterStaticRoutesIpv6ResourceModel struct {
	Location      types.Object `tfsdk:"location"`
	VirtualRouter types.String `tfsdk:"virtual_router"`
	StaticRoutes  types.List   `tfsdk:"static_routes"`
}
type VirtualRouterStaticRoutesIpv6ResourceStaticRoutesObject struct {
	Name        types.String                                                        `tfsdk:"name"`
	AdminDist   types.Int64                                                         `tfsdk:"admin_dist"`
	Bfd         *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesBfdObject         `tfsdk:"bfd"`
	Destination types.String                                                        `tfsdk:"destination"`
	Interface   types.String                                                        `tfsdk:"interface"`
	Metric      types.Int64                                                         `tfsdk:"metric"`
	Nexthop     *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopObject     `tfsdk:"nexthop"`
	PathMonitor *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorObject `tfsdk:"path_monitor"`
	RouteTable  *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableObject  `tfsdk:"route_table"`
}
type VirtualRouterStaticRoutesIpv6ResourceStaticRoutesBfdObject struct {
	Profile types.String `tfsdk:"profile"`
}
type VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopObject struct {
	Discard     *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopDiscardObject `tfsdk:"discard"`
	Ipv6Address types.String                                                           `tfsdk:"ipv6_address"`
	NextVr      types.String                                                           `tfsdk:"next_vr"`
	Receive     *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopReceiveObject `tfsdk:"receive"`
}
type VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopDiscardObject struct {
}
type VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopReceiveObject struct {
}
type VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorObject struct {
	Enable              types.Bool   `tfsdk:"enable"`
	FailureCondition    types.String `tfsdk:"failure_condition"`
	HoldTime            types.Int64  `tfsdk:"hold_time"`
	MonitorDestinations types.List   `tfsdk:"monitor_destinations"`
}
type VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorMonitorDestinationsObject struct {
	Name        types.String `tfsdk:"name"`
	Enable      types.Bool   `tfsdk:"enable"`
	Source      types.String `tfsdk:"source"`
	Destination types.String `tfsdk:"destination"`
	Interval    types.Int64  `tfsdk:"interval"`
	Count       types.Int64  `tfsdk:"count"`
}
type VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableObject struct {
	NoInstall *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableNoInstallObject `tfsdk:"no_install"`
	Unicast   *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableUnicastObject   `tfsdk:"unicast"`
}
type VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableNoInstallObject struct {
}
type VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableUnicastObject struct {
}

func (r *VirtualRouterStaticRoutesIpv6Resource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func VirtualRouterStaticRoutesIpv6ResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": VirtualRouterStaticRoutesIpv6ResourceLocationSchema(),

			"static_routes": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     true,
				Optional:     false,
				Computed:     false,
				Sensitive:    false,
				NestedObject: VirtualRouterStaticRoutesIpv6ResourceStaticRoutesSchema(),
			},

			"virtual_router": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},
		},
	}
}

func (o *VirtualRouterStaticRoutesIpv6ResourceModel) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRoutesIpv6ResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRoutesIpv6ResourceStaticRoutesSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"admin_dist": rsschema.Int64Attribute{
				Description: "adminitrative distance",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"bfd": VirtualRouterStaticRoutesIpv6ResourceStaticRoutesBfdSchema(),

			"destination": rsschema.StringAttribute{
				Description: "Destination IP address/prefix",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"interface": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"metric": rsschema.Int64Attribute{
				Description: "metric value (path cost)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(10),
			},

			"nexthop": VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopSchema(),

			"path_monitor": VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorSchema(),

			"route_table": VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableSchema(),
		},
	}
}

func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRoutesIpv6ResourceStaticRoutesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRoutesIpv6ResourceStaticRoutesBfdSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"profile": rsschema.StringAttribute{
				Description: "BFD profile",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("None"),
			},
		},
	}
}

func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesBfdObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRoutesIpv6ResourceStaticRoutesBfdSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"discard": VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopDiscardSchema(),

			"ipv6_address": rsschema.StringAttribute{
				Description: "Next hop IP address",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"next_vr": rsschema.StringAttribute{
				Description: "Next hop virtual router",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"receive": VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopReceiveSchema(),
		},
	}
}

func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopDiscardSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("discard"),
				path.MatchRelative().AtParent().AtName("ipv6_address"),
				path.MatchRelative().AtParent().AtName("next_vr"),
				path.MatchRelative().AtParent().AtName("receive"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopDiscardObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopDiscardSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopReceiveSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("discard"),
				path.MatchRelative().AtParent().AtName("ipv6_address"),
				path.MatchRelative().AtParent().AtName("next_vr"),
				path.MatchRelative().AtParent().AtName("receive"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopReceiveObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopReceiveSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"enable": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"failure_condition": rsschema.StringAttribute{
				Description: "failure condition",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("any"),
			},

			"hold_time": rsschema.Int64Attribute{
				Description: "hold time (minutes)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(2),
			},

			"monitor_destinations": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorMonitorDestinationsSchema(),
			},
		},
	}
}

func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorMonitorDestinationsSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"enable": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source": rsschema.StringAttribute{
				Description: "Source IP address",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"destination": rsschema.StringAttribute{
				Description: "Destination IP address",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"interval": rsschema.Int64Attribute{
				Description: "ping interval",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(3),
			},

			"count": rsschema.Int64Attribute{
				Description: "ping count",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(5),
			},
		},
	}
}

func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorMonitorDestinationsObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorMonitorDestinationsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"no_install": VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableNoInstallSchema(),

			"unicast": VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableUnicastSchema(),
		},
	}
}

func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableNoInstallSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("no_install"),
				path.MatchRelative().AtParent().AtName("unicast"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableNoInstallObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableNoInstallSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableUnicastSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("no_install"),
				path.MatchRelative().AtParent().AtName("unicast"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableUnicastObject) getTypeFor(name string) attr.Type {
	schema := VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableUnicastSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *VirtualRouterStaticRoutesIpv6Resource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_virtual_router_static_routes_ipv6"
}

func (r *VirtualRouterStaticRoutesIpv6Resource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = VirtualRouterStaticRoutesIpv6ResourceSchema()
}

// </ResourceSchema>

func (r *VirtualRouterStaticRoutesIpv6Resource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	r.client = providerData.Client
	specifier, _, err := staticroute.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	r.manager = sdkmanager.NewEntryObjectManager[*staticroute.Entry, staticroute.Location, *staticroute.Service](r.client, staticroute.NewService(r.client), batchSize, specifier, staticroute.SpecMatches)
}

func (o *VirtualRouterStaticRoutesIpv6ResourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj VirtualRouterStaticRoutesIpv6Location

	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"virtual_router": types.StringType,
		"static_routes":  types.ListType{},
	}
}

func (o VirtualRouterStaticRoutesIpv6ResourceModel) AncestorName() string {
	return ""
}

func (o VirtualRouterStaticRoutesIpv6ResourceModel) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesObject) AttributeTypes() map[string]attr.Type {

	var bfdObj *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesBfdObject

	var nexthopObj *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopObject

	var pathMonitorObj *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorObject

	var routeTableObj *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableObject
	return map[string]attr.Type{
		"name":       types.StringType,
		"admin_dist": types.Int64Type,
		"bfd": types.ObjectType{
			AttrTypes: bfdObj.AttributeTypes(),
		},
		"destination": types.StringType,
		"interface":   types.StringType,
		"metric":      types.Int64Type,
		"nexthop": types.ObjectType{
			AttrTypes: nexthopObj.AttributeTypes(),
		},
		"path_monitor": types.ObjectType{
			AttrTypes: pathMonitorObj.AttributeTypes(),
		},
		"route_table": types.ObjectType{
			AttrTypes: routeTableObj.AttributeTypes(),
		},
	}
}

func (o VirtualRouterStaticRoutesIpv6ResourceStaticRoutesObject) AncestorName() string {
	return "static-routes"
}

func (o VirtualRouterStaticRoutesIpv6ResourceStaticRoutesObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesBfdObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"profile": types.StringType,
	}
}

func (o VirtualRouterStaticRoutesIpv6ResourceStaticRoutesBfdObject) AncestorName() string {
	return "bfd"
}

func (o VirtualRouterStaticRoutesIpv6ResourceStaticRoutesBfdObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopObject) AttributeTypes() map[string]attr.Type {

	var discardObj *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopDiscardObject

	var receiveObj *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopReceiveObject
	return map[string]attr.Type{
		"discard": types.ObjectType{
			AttrTypes: discardObj.AttributeTypes(),
		},
		"ipv6_address": types.StringType,
		"next_vr":      types.StringType,
		"receive": types.ObjectType{
			AttrTypes: receiveObj.AttributeTypes(),
		},
	}
}

func (o VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopObject) AncestorName() string {
	return "nexthop"
}

func (o VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopDiscardObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopDiscardObject) AncestorName() string {
	return "discard"
}

func (o VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopDiscardObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopReceiveObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopReceiveObject) AncestorName() string {
	return "receive"
}

func (o VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopReceiveObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"enable":               types.BoolType,
		"failure_condition":    types.StringType,
		"hold_time":            types.Int64Type,
		"monitor_destinations": types.ListType{},
	}
}

func (o VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorObject) AncestorName() string {
	return "path-monitor"
}

func (o VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorMonitorDestinationsObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":        types.StringType,
		"enable":      types.BoolType,
		"source":      types.StringType,
		"destination": types.StringType,
		"interval":    types.Int64Type,
		"count":       types.Int64Type,
	}
}

func (o VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorMonitorDestinationsObject) AncestorName() string {
	return "monitor-destinations"
}

func (o VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorMonitorDestinationsObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableObject) AttributeTypes() map[string]attr.Type {

	var noInstallObj *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableNoInstallObject

	var unicastObj *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableUnicastObject
	return map[string]attr.Type{
		"no_install": types.ObjectType{
			AttrTypes: noInstallObj.AttributeTypes(),
		},
		"unicast": types.ObjectType{
			AttrTypes: unicastObj.AttributeTypes(),
		},
	}
}

func (o VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableObject) AncestorName() string {
	return "route-table"
}

func (o VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableNoInstallObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableNoInstallObject) AncestorName() string {
	return "no-install"
}

func (o VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableNoInstallObject) EntryName() *string {
	return nil
}
func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableUnicastObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableUnicastObject) AncestorName() string {
	return "unicast"
}

func (o VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableUnicastObject) EntryName() *string {
	return nil
}

func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	adminDist_value := o.AdminDist.ValueInt64Pointer()
	var bfd_entry *staticroute.Bfd
	if o.Bfd != nil {
		if *obj != nil && (*obj).Bfd != nil {
			bfd_entry = (*obj).Bfd
		} else {
			bfd_entry = new(staticroute.Bfd)
		}
		// ModelOrObject: Object
		diags.Append(o.Bfd.CopyToPango(ctx, append(ancestors, o), &bfd_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	destination_value := o.Destination.ValueStringPointer()
	interface_value := o.Interface.ValueStringPointer()
	metric_value := o.Metric.ValueInt64Pointer()
	var nexthop_entry *staticroute.Nexthop
	if o.Nexthop != nil {
		if *obj != nil && (*obj).Nexthop != nil {
			nexthop_entry = (*obj).Nexthop
		} else {
			nexthop_entry = new(staticroute.Nexthop)
		}
		// ModelOrObject: Object
		diags.Append(o.Nexthop.CopyToPango(ctx, append(ancestors, o), &nexthop_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var pathMonitor_entry *staticroute.PathMonitor
	if o.PathMonitor != nil {
		if *obj != nil && (*obj).PathMonitor != nil {
			pathMonitor_entry = (*obj).PathMonitor
		} else {
			pathMonitor_entry = new(staticroute.PathMonitor)
		}
		// ModelOrObject: Object
		diags.Append(o.PathMonitor.CopyToPango(ctx, append(ancestors, o), &pathMonitor_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var routeTable_entry *staticroute.RouteTable
	if o.RouteTable != nil {
		if *obj != nil && (*obj).RouteTable != nil {
			routeTable_entry = (*obj).RouteTable
		} else {
			routeTable_entry = new(staticroute.RouteTable)
		}
		// ModelOrObject: Object
		diags.Append(o.RouteTable.CopyToPango(ctx, append(ancestors, o), &routeTable_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(staticroute.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).AdminDist = adminDist_value
	(*obj).Bfd = bfd_entry
	(*obj).Destination = destination_value
	(*obj).Interface = interface_value
	(*obj).Metric = metric_value
	(*obj).Nexthop = nexthop_entry
	(*obj).PathMonitor = pathMonitor_entry
	(*obj).RouteTable = routeTable_entry

	return diags
}
func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesBfdObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.Bfd, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	profile_value := o.Profile.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(staticroute.Bfd)
	}
	(*obj).Profile = profile_value

	return diags
}
func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.Nexthop, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var discard_entry *staticroute.NexthopDiscard
	if o.Discard != nil {
		if *obj != nil && (*obj).Discard != nil {
			discard_entry = (*obj).Discard
		} else {
			discard_entry = new(staticroute.NexthopDiscard)
		}
		// ModelOrObject: Object
		diags.Append(o.Discard.CopyToPango(ctx, append(ancestors, o), &discard_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	ipv6Address_value := o.Ipv6Address.ValueStringPointer()
	nextVr_value := o.NextVr.ValueStringPointer()
	var receive_entry *staticroute.NexthopReceive
	if o.Receive != nil {
		if *obj != nil && (*obj).Receive != nil {
			receive_entry = (*obj).Receive
		} else {
			receive_entry = new(staticroute.NexthopReceive)
		}
		// ModelOrObject: Object
		diags.Append(o.Receive.CopyToPango(ctx, append(ancestors, o), &receive_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(staticroute.Nexthop)
	}
	(*obj).Discard = discard_entry
	(*obj).Ipv6Address = ipv6Address_value
	(*obj).NextVr = nextVr_value
	(*obj).Receive = receive_entry

	return diags
}
func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopDiscardObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.NexthopDiscard, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(staticroute.NexthopDiscard)
	}

	return diags
}
func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopReceiveObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.NexthopReceive, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(staticroute.NexthopReceive)
	}

	return diags
}
func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.PathMonitor, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	failureCondition_value := o.FailureCondition.ValueStringPointer()
	holdTime_value := o.HoldTime.ValueInt64Pointer()
	var monitorDestinations_tf_entries []VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorMonitorDestinationsObject
	var monitorDestinations_pango_entries []staticroute.PathMonitorMonitorDestinations
	{
		d := o.MonitorDestinations.ElementsAs(ctx, &monitorDestinations_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range monitorDestinations_tf_entries {
			var entry *staticroute.PathMonitorMonitorDestinations
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			monitorDestinations_pango_entries = append(monitorDestinations_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(staticroute.PathMonitor)
	}
	(*obj).Enable = enable_value
	(*obj).FailureCondition = failureCondition_value
	(*obj).HoldTime = holdTime_value
	(*obj).MonitorDestinations = monitorDestinations_pango_entries

	return diags
}
func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorMonitorDestinationsObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.PathMonitorMonitorDestinations, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	source_value := o.Source.ValueStringPointer()
	destination_value := o.Destination.ValueStringPointer()
	interval_value := o.Interval.ValueInt64Pointer()
	count_value := o.Count.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(staticroute.PathMonitorMonitorDestinations)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Enable = enable_value
	(*obj).Source = source_value
	(*obj).Destination = destination_value
	(*obj).Interval = interval_value
	(*obj).Count = count_value

	return diags
}
func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.RouteTable, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var noInstall_entry *staticroute.RouteTableNoInstall
	if o.NoInstall != nil {
		if *obj != nil && (*obj).NoInstall != nil {
			noInstall_entry = (*obj).NoInstall
		} else {
			noInstall_entry = new(staticroute.RouteTableNoInstall)
		}
		// ModelOrObject: Object
		diags.Append(o.NoInstall.CopyToPango(ctx, append(ancestors, o), &noInstall_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var unicast_entry *staticroute.RouteTableUnicast
	if o.Unicast != nil {
		if *obj != nil && (*obj).Unicast != nil {
			unicast_entry = (*obj).Unicast
		} else {
			unicast_entry = new(staticroute.RouteTableUnicast)
		}
		// ModelOrObject: Object
		diags.Append(o.Unicast.CopyToPango(ctx, append(ancestors, o), &unicast_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(staticroute.RouteTable)
	}
	(*obj).NoInstall = noInstall_entry
	(*obj).Unicast = unicast_entry

	return diags
}
func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableNoInstallObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.RouteTableNoInstall, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(staticroute.RouteTableNoInstall)
	}

	return diags
}
func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableUnicastObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **staticroute.RouteTableUnicast, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(staticroute.RouteTableUnicast)
	}

	return diags
}

func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var bfd_object *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesBfdObject
	if obj.Bfd != nil {
		bfd_object = new(VirtualRouterStaticRoutesIpv6ResourceStaticRoutesBfdObject)
		diags.Append(bfd_object.CopyFromPango(ctx, append(ancestors, o), obj.Bfd, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var nexthop_object *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopObject
	if obj.Nexthop != nil {
		nexthop_object = new(VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopObject)
		diags.Append(nexthop_object.CopyFromPango(ctx, append(ancestors, o), obj.Nexthop, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var pathMonitor_object *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorObject
	if obj.PathMonitor != nil {
		pathMonitor_object = new(VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorObject)
		diags.Append(pathMonitor_object.CopyFromPango(ctx, append(ancestors, o), obj.PathMonitor, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var routeTable_object *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableObject
	if obj.RouteTable != nil {
		routeTable_object = new(VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableObject)
		diags.Append(routeTable_object.CopyFromPango(ctx, append(ancestors, o), obj.RouteTable, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var adminDist_value types.Int64
	if obj.AdminDist != nil {
		adminDist_value = types.Int64Value(*obj.AdminDist)
	}
	var destination_value types.String
	if obj.Destination != nil {
		destination_value = types.StringValue(*obj.Destination)
	}
	var interface_value types.String
	if obj.Interface != nil {
		interface_value = types.StringValue(*obj.Interface)
	}
	var metric_value types.Int64
	if obj.Metric != nil {
		metric_value = types.Int64Value(*obj.Metric)
	}
	o.Name = types.StringValue(obj.Name)
	o.AdminDist = adminDist_value
	o.Bfd = bfd_object
	o.Destination = destination_value
	o.Interface = interface_value
	o.Metric = metric_value
	o.Nexthop = nexthop_object
	o.PathMonitor = pathMonitor_object
	o.RouteTable = routeTable_object

	return diags
}

func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesBfdObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.Bfd, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var profile_value types.String
	if obj.Profile != nil {
		profile_value = types.StringValue(*obj.Profile)
	}
	o.Profile = profile_value

	return diags
}

func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.Nexthop, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var discard_object *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopDiscardObject
	if obj.Discard != nil {
		discard_object = new(VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopDiscardObject)
		diags.Append(discard_object.CopyFromPango(ctx, append(ancestors, o), obj.Discard, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var receive_object *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopReceiveObject
	if obj.Receive != nil {
		receive_object = new(VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopReceiveObject)
		diags.Append(receive_object.CopyFromPango(ctx, append(ancestors, o), obj.Receive, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var ipv6Address_value types.String
	if obj.Ipv6Address != nil {
		ipv6Address_value = types.StringValue(*obj.Ipv6Address)
	}
	var nextVr_value types.String
	if obj.NextVr != nil {
		nextVr_value = types.StringValue(*obj.NextVr)
	}
	o.Discard = discard_object
	o.Ipv6Address = ipv6Address_value
	o.NextVr = nextVr_value
	o.Receive = receive_object

	return diags
}

func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopDiscardObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.NexthopDiscard, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesNexthopReceiveObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.NexthopReceive, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.PathMonitor, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var monitorDestinations_list types.List
	{
		var monitorDestinations_tf_entries []VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorMonitorDestinationsObject
		for _, elt := range obj.MonitorDestinations {
			entry := VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorMonitorDestinationsObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			monitorDestinations_tf_entries = append(monitorDestinations_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("monitor_destinations")
		monitorDestinations_list, list_diags = types.ListValueFrom(ctx, schemaType, monitorDestinations_tf_entries)
		diags.Append(list_diags...)
	}

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var failureCondition_value types.String
	if obj.FailureCondition != nil {
		failureCondition_value = types.StringValue(*obj.FailureCondition)
	}
	var holdTime_value types.Int64
	if obj.HoldTime != nil {
		holdTime_value = types.Int64Value(*obj.HoldTime)
	}
	o.Enable = enable_value
	o.FailureCondition = failureCondition_value
	o.HoldTime = holdTime_value
	o.MonitorDestinations = monitorDestinations_list

	return diags
}

func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesPathMonitorMonitorDestinationsObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.PathMonitorMonitorDestinations, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var source_value types.String
	if obj.Source != nil {
		source_value = types.StringValue(*obj.Source)
	}
	var destination_value types.String
	if obj.Destination != nil {
		destination_value = types.StringValue(*obj.Destination)
	}
	var interval_value types.Int64
	if obj.Interval != nil {
		interval_value = types.Int64Value(*obj.Interval)
	}
	var count_value types.Int64
	if obj.Count != nil {
		count_value = types.Int64Value(*obj.Count)
	}
	o.Name = types.StringValue(obj.Name)
	o.Enable = enable_value
	o.Source = source_value
	o.Destination = destination_value
	o.Interval = interval_value
	o.Count = count_value

	return diags
}

func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.RouteTable, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var noInstall_object *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableNoInstallObject
	if obj.NoInstall != nil {
		noInstall_object = new(VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableNoInstallObject)
		diags.Append(noInstall_object.CopyFromPango(ctx, append(ancestors, o), obj.NoInstall, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var unicast_object *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableUnicastObject
	if obj.Unicast != nil {
		unicast_object = new(VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableUnicastObject)
		diags.Append(unicast_object.CopyFromPango(ctx, append(ancestors, o), obj.Unicast, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.NoInstall = noInstall_object
	o.Unicast = unicast_object

	return diags
}

func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableNoInstallObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.RouteTableNoInstall, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *VirtualRouterStaticRoutesIpv6ResourceStaticRoutesRouteTableUnicastObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *staticroute.RouteTableUnicast, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *VirtualRouterStaticRoutesIpv6ResourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	components = append(components, pangoutil.AsEntryXpath(o.VirtualRouter.ValueString()))
	return components, nil
}

func (r *VirtualRouterStaticRoutesIpv6Resource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	var state VirtualRouterStaticRoutesIpv6ResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_virtual_router_static_routes_ipv6_resource",
		"function":      "Create",
	})

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location staticroute.Location

	{
		var terraformLocation VirtualRouterStaticRoutesIpv6Location
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &staticroute.NgfwLocation{}
			var innerLocation VirtualRouterStaticRoutesIpv6NgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &staticroute.TemplateLocation{}
			var innerLocation VirtualRouterStaticRoutesIpv6TemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &staticroute.TemplateStackLocation{}
			var innerLocation VirtualRouterStaticRoutesIpv6TemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	type entryWithState struct {
		Entry    *staticroute.Entry
		StateIdx int
	}

	var elements []VirtualRouterStaticRoutesIpv6ResourceStaticRoutesObject
	resp.Diagnostics.Append(state.StaticRoutes.ElementsAs(ctx, &elements, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	entries := make([]*staticroute.Entry, len(elements))
	for idx, elt := range elements {
		var entry *staticroute.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, nil, &entry, ev)...)
		if resp.Diagnostics.HasError() {
			return
		}
		entry.Name = elt.Name.ValueString()
		entries[idx] = entry
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}

	created, err := r.manager.CreateMany(ctx, location, components, entries)
	if err != nil {
		resp.Diagnostics.AddError("Failed to create new entries", err.Error())
		return
	}

	elementsByName := make(map[string]int)
	for idx, elt := range elements {
		elementsByName[elt.Name.ValueString()] = idx
	}

	for _, elt := range created {
		idx, found := elementsByName[elt.Name]
		if !found {
			continue
		}

		var object VirtualRouterStaticRoutesIpv6ResourceStaticRoutesObject
		resp.Diagnostics.Append(object.CopyFromPango(ctx, nil, elt, ev)...)
		if resp.Diagnostics.HasError() {
			return
		}
		elements[idx] = object
	}

	var list_diags diag.Diagnostics

	state.StaticRoutes, list_diags = types.ListValueFrom(ctx, state.getTypeFor("static_routes"), elements)

	resp.Diagnostics.Append(list_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (o *VirtualRouterStaticRoutesIpv6Resource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var state VirtualRouterStaticRoutesIpv6ResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_virtual_router_static_routes_ipv6",
		"function":      "Create",
	})

	encryptedValues, diags := req.Private.GetKey(ctx, "encrypted_values")
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location staticroute.Location

	{
		var terraformLocation VirtualRouterStaticRoutesIpv6Location
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &staticroute.NgfwLocation{}
			var innerLocation VirtualRouterStaticRoutesIpv6NgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &staticroute.TemplateLocation{}
			var innerLocation VirtualRouterStaticRoutesIpv6TemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &staticroute.TemplateStackLocation{}
			var innerLocation VirtualRouterStaticRoutesIpv6TemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	var elements []VirtualRouterStaticRoutesIpv6ResourceStaticRoutesObject
	resp.Diagnostics.Append(state.StaticRoutes.ElementsAs(ctx, &elements, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	entries := make([]*staticroute.Entry, 0, len(elements))
	for _, elt := range elements {
		var entry *staticroute.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, nil, &entry, ev)...)
		if resp.Diagnostics.HasError() {
			return
		}
		entries = append(entries, entry)
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}

	readEntries, err := o.manager.ReadMany(ctx, location, components, entries)
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Failed to read entries from the server", err.Error())
		}
		return
	}
	objects := make([]VirtualRouterStaticRoutesIpv6ResourceStaticRoutesObject, len(readEntries))
	for idx, elt := range readEntries {
		var object VirtualRouterStaticRoutesIpv6ResourceStaticRoutesObject
		resp.Diagnostics.Append(object.CopyFromPango(ctx, nil, elt, ev)...)
		if resp.Diagnostics.HasError() {
			return
		}
		objects[idx] = object
	}

	var list_diags diag.Diagnostics
	state.StaticRoutes, list_diags = types.ListValueFrom(ctx, state.getTypeFor("static_routes"), objects)
	resp.Diagnostics.Append(list_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	{
		component := components[0]
		component = strings.TrimPrefix(component, "entry[@name='")
		component = strings.TrimSuffix(component, "']")
		state.VirtualRouter = types.StringValue(component)
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *VirtualRouterStaticRoutesIpv6Resource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var state, plan VirtualRouterStaticRoutesIpv6ResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_virtual_router_static_routes_ipv6_resource",
		"function":      "Create",
	})

	encryptedValues, diags := req.Private.GetKey(ctx, "encrypted_values")
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location staticroute.Location

	{
		var terraformLocation VirtualRouterStaticRoutesIpv6Location
		resp.Diagnostics.Append(plan.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &staticroute.NgfwLocation{}
			var innerLocation VirtualRouterStaticRoutesIpv6NgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &staticroute.TemplateLocation{}
			var innerLocation VirtualRouterStaticRoutesIpv6TemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &staticroute.TemplateStackLocation{}
			var innerLocation VirtualRouterStaticRoutesIpv6TemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_virtual_router_static_routes_ipv6_resource",
		"function":      "Update",
	})

	var elements []VirtualRouterStaticRoutesIpv6ResourceStaticRoutesObject
	resp.Diagnostics.Append(state.StaticRoutes.ElementsAs(ctx, &elements, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	stateEntries := make([]*staticroute.Entry, len(elements))
	for idx, elt := range elements {
		var entry *staticroute.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, nil, &entry, ev)...)
		if resp.Diagnostics.HasError() {
			return
		}
		stateEntries[idx] = entry
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}

	existing, err := r.manager.ReadMany(ctx, location, components, stateEntries)
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error while reading entries from the server", err.Error())
		return
	}

	existingEntriesByName := make(map[string]*staticroute.Entry, len(existing))
	for _, elt := range existing {
		existingEntriesByName[elt.Name] = elt
	}

	resp.Diagnostics.Append(plan.StaticRoutes.ElementsAs(ctx, &elements, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var planEntries []*staticroute.Entry
	for _, elt := range elements {
		existingEntry, _ := existingEntriesByName[elt.Name.ValueString()]
		resp.Diagnostics.Append(elt.CopyToPango(ctx, nil, &existingEntry, ev)...)
		if resp.Diagnostics.HasError() {
			return
		}

		planEntries = append(planEntries, existingEntry)
	}

	processed, err := r.manager.UpdateMany(ctx, location, components, stateEntries, planEntries)
	if err != nil {
		resp.Diagnostics.AddError("Error while updating entries", err.Error())
		return
	}
	objects := make([]*VirtualRouterStaticRoutesIpv6ResourceStaticRoutesObject, len(processed))
	for idx, elt := range processed {
		var object VirtualRouterStaticRoutesIpv6ResourceStaticRoutesObject
		resp.Diagnostics.Append(object.CopyFromPango(ctx, nil, elt, ev)...)
		if resp.Diagnostics.HasError() {
			return
		}

		objects[idx] = &object
	}

	var list_diags diag.Diagnostics

	plan.StaticRoutes, list_diags = types.ListValueFrom(ctx, state.getTypeFor("static_routes"), objects)

	resp.Diagnostics.Append(list_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	resp.Diagnostics.Append(resp.State.Set(ctx, &plan)...)

}
func (r *VirtualRouterStaticRoutesIpv6Resource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state VirtualRouterStaticRoutesIpv6ResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_virtual_router_static_routes_ipv6_resource",
		"function":      "Delete",
	})
	var elements []VirtualRouterStaticRoutesIpv6ResourceStaticRoutesObject
	resp.Diagnostics.Append(state.StaticRoutes.ElementsAs(ctx, &elements, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location staticroute.Location

	{
		var terraformLocation VirtualRouterStaticRoutesIpv6Location
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &staticroute.NgfwLocation{}
			var innerLocation VirtualRouterStaticRoutesIpv6NgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &staticroute.TemplateLocation{}
			var innerLocation VirtualRouterStaticRoutesIpv6TemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &staticroute.TemplateStackLocation{}
			var innerLocation VirtualRouterStaticRoutesIpv6TemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	var names []string
	for _, elt := range elements {
		names = append(names, elt.Name.ValueString())
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	err = r.manager.Delete(ctx, location, components, names)
	if err != nil {
		resp.Diagnostics.AddError("error while deleting entries", err.Error())
		return
	}

}

type VirtualRouterStaticRoutesIpv6ImportState struct {
	Location      types.Object `json:"location"`
	VirtualRouter types.String `json:"virtual_router"`
}

func (o VirtualRouterStaticRoutesIpv6ImportState) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Location      *VirtualRouterStaticRoutesIpv6Location `json:"location"`
		VirtualRouter *string                                `json:"virtual_router"`
	}
	var location_object *VirtualRouterStaticRoutesIpv6Location
	{
		diags := o.Location.As(context.TODO(), &location_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal location into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Location:      location_object,
		VirtualRouter: o.VirtualRouter.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *VirtualRouterStaticRoutesIpv6ImportState) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Location      *VirtualRouterStaticRoutesIpv6Location `json:"location"`
		VirtualRouter *string                                `json:"virtual_router"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var location_object types.Object
	{
		var diags_tmp diag.Diagnostics
		location_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Location.AttributeTypes(), shadow.Location)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into location", diags_tmp.Errors())
		}
	}
	o.Location = location_object
	o.VirtualRouter = types.StringPointerValue(shadow.VirtualRouter)

	return nil
}

func VirtualRouterStaticRoutesIpv6ImportStateCreator(ctx context.Context, resource types.Object) ([]byte, error) {
	attrs := resource.Attributes()
	if attrs == nil {
		return nil, fmt.Errorf("Object has no attributes")
	}

	locationAttr, ok := attrs["location"]
	if !ok {
		return nil, fmt.Errorf("location attribute missing")
	}

	var location types.Object
	switch value := locationAttr.(type) {
	case types.Object:
		location = value
	default:
		return nil, fmt.Errorf("location attribute expected to be an object")
	}
	parentAttr, ok := attrs["virtual_router"]
	if !ok {
		return nil, fmt.Errorf("virtual_router attribute missing")
	}

	var parent types.String
	switch value := parentAttr.(type) {
	case types.String:
		parent = value
	default:
		return nil, fmt.Errorf("virtual_router expected to be a map")
	}

	importStruct := VirtualRouterStaticRoutesIpv6ImportState{
		Location:      location,
		VirtualRouter: parent,
	}

	return json.Marshal(importStruct)
}

func (r *VirtualRouterStaticRoutesIpv6Resource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	var obj VirtualRouterStaticRoutesIpv6ImportState
	data, err := base64.StdEncoding.DecodeString(req.ID)
	if err != nil {
		resp.Diagnostics.AddError("Failed to decode Import ID", err.Error())
		return
	}

	err = json.Unmarshal(data, &obj)
	if err != nil {
		var diagsErr *DiagnosticsError
		if errors.As(err, &diagsErr) {
			resp.Diagnostics.Append(diagsErr.Diagnostics()...)
		} else {
			resp.Diagnostics.AddError("Failed to unmarshal Import ID", err.Error())
		}
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("location"), obj.Location)...)
	if resp.Diagnostics.HasError() {
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("virtual_router"), obj.VirtualRouter)...)
}

type VirtualRouterStaticRoutesIpv6NgfwLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
}
type VirtualRouterStaticRoutesIpv6TemplateLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type VirtualRouterStaticRoutesIpv6TemplateStackLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type VirtualRouterStaticRoutesIpv6Location struct {
	Ngfw          types.Object `tfsdk:"ngfw"`
	Template      types.Object `tfsdk:"template"`
	TemplateStack types.Object `tfsdk:"template_stack"`
}

func VirtualRouterStaticRoutesIpv6LocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"ngfw": rsschema.SingleNestedAttribute{
				Description: "Located in a specific NGFW device",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("ngfw"),
						path.MatchRelative().AtParent().AtName("template"),
						path.MatchRelative().AtParent().AtName("template_stack"),
					}...),
				},
			},
			"template": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Specific Panorama template",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_stack": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template stack",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Specific Panorama template stack",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o VirtualRouterStaticRoutesIpv6NgfwLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
	}

	obj := shadow{
		NgfwDevice: o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *VirtualRouterStaticRoutesIpv6NgfwLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o VirtualRouterStaticRoutesIpv6TemplateLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *VirtualRouterStaticRoutesIpv6TemplateLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o VirtualRouterStaticRoutesIpv6TemplateStackLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *VirtualRouterStaticRoutesIpv6TemplateStackLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o VirtualRouterStaticRoutesIpv6Location) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Ngfw          *VirtualRouterStaticRoutesIpv6NgfwLocation          `json:"ngfw,omitempty"`
		Template      *VirtualRouterStaticRoutesIpv6TemplateLocation      `json:"template,omitempty"`
		TemplateStack *VirtualRouterStaticRoutesIpv6TemplateStackLocation `json:"template_stack,omitempty"`
	}
	var ngfw_object *VirtualRouterStaticRoutesIpv6NgfwLocation
	{
		diags := o.Ngfw.As(context.TODO(), &ngfw_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal ngfw into JSON document", diags.Errors())
		}
	}
	var template_object *VirtualRouterStaticRoutesIpv6TemplateLocation
	{
		diags := o.Template.As(context.TODO(), &template_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template into JSON document", diags.Errors())
		}
	}
	var templateStack_object *VirtualRouterStaticRoutesIpv6TemplateStackLocation
	{
		diags := o.TemplateStack.As(context.TODO(), &templateStack_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template_stack into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Ngfw:          ngfw_object,
		Template:      template_object,
		TemplateStack: templateStack_object,
	}

	return json.Marshal(obj)
}

func (o *VirtualRouterStaticRoutesIpv6Location) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Ngfw          *VirtualRouterStaticRoutesIpv6NgfwLocation          `json:"ngfw,omitempty"`
		Template      *VirtualRouterStaticRoutesIpv6TemplateLocation      `json:"template,omitempty"`
		TemplateStack *VirtualRouterStaticRoutesIpv6TemplateStackLocation `json:"template_stack,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var ngfw_object types.Object
	{
		var diags_tmp diag.Diagnostics
		ngfw_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Ngfw.AttributeTypes(), shadow.Ngfw)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into ngfw", diags_tmp.Errors())
		}
	}
	var template_object types.Object
	{
		var diags_tmp diag.Diagnostics
		template_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Template.AttributeTypes(), shadow.Template)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template", diags_tmp.Errors())
		}
	}
	var templateStack_object types.Object
	{
		var diags_tmp diag.Diagnostics
		templateStack_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.TemplateStack.AttributeTypes(), shadow.TemplateStack)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template_stack", diags_tmp.Errors())
		}
	}
	o.Ngfw = ngfw_object
	o.Template = template_object
	o.TemplateStack = templateStack_object

	return nil
}

func (o *VirtualRouterStaticRoutesIpv6NgfwLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"ngfw_device": types.StringType,
	}
}
func (o *VirtualRouterStaticRoutesIpv6TemplateLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
		"ngfw_device":     types.StringType,
	}
}
func (o *VirtualRouterStaticRoutesIpv6TemplateStackLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
		"ngfw_device":     types.StringType,
	}
}
func (o *VirtualRouterStaticRoutesIpv6Location) AttributeTypes() map[string]attr.Type {
	var ngfwObj VirtualRouterStaticRoutesIpv6NgfwLocation
	var templateObj VirtualRouterStaticRoutesIpv6TemplateLocation
	var templateStackObj VirtualRouterStaticRoutesIpv6TemplateStackLocation
	return map[string]attr.Type{
		"ngfw": types.ObjectType{
			AttrTypes: ngfwObj.AttributeTypes(),
		},
		"template": types.ObjectType{
			AttrTypes: templateObj.AttributeTypes(),
		},
		"template_stack": types.ObjectType{
			AttrTypes: templateStackObj.AttributeTypes(),
		},
	}
}
