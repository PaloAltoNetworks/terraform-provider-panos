package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/PaloAltoNetworks/pango"

	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-log/tflog"
)

import (
	"encoding/xml"

	sdkerrors "github.com/PaloAltoNetworks/pango/errors"
	"github.com/PaloAltoNetworks/pango/util"
	"github.com/PaloAltoNetworks/pango/xmlapi"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &DeviceGroupParentDataSource{}
	_ datasource.DataSourceWithConfigure = &DeviceGroupParentDataSource{}
)

func NewDeviceGroupParentDataSource() datasource.DataSource {
	return &DeviceGroupParentDataSource{}
}

type DeviceGroupParentDataSource struct {
	client *pango.Client
}

type DeviceGroupParentDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type DeviceGroupParentDataSourceModel struct {
	Location    DeviceGroupParentLocation `tfsdk:"location"`
	Parent      types.String              `tfsdk:"parent"`
	DeviceGroup types.String              `tfsdk:"device_group"`
}

func DeviceGroupParentDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": DeviceGroupParentDataSourceLocationSchema(),

			"device_group": dsschema.StringAttribute{
				Description: "The device group whose parent is being set",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"parent": dsschema.StringAttribute{
				Description: "The parent device group. Leaving it empty moves 'device-group' under 'shared'.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *DeviceGroupParentDataSourceModel) getTypeFor(name string) attr.Type {
	schema := DeviceGroupParentDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DeviceGroupParentDataSourceLocationSchema() rsschema.Attribute {
	return DeviceGroupParentLocationSchema()
}

// Metadata returns the data source type name.
func (d *DeviceGroupParentDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_device_group_parent"
}

// Schema defines the schema for this data source.
func (d *DeviceGroupParentDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = DeviceGroupParentDataSourceSchema()
}

// Configure prepares the struct.
func (d *DeviceGroupParentDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*pango.Client)
}
func (o *DeviceGroupParentDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var state DeviceGroupParentResourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	name := state.DeviceGroup.ValueString()
	hierarchy, err := getParents(ctx, o.client, name)
	if err != nil {
		if sdkerrors.IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Failed to query for the device group parent", err.Error())
		}
		return
	}

	parent, ok := hierarchy[name]
	if !ok {
		resp.Diagnostics.AddError("Failed to query for the device group parent", fmt.Sprintf("Device Group '%s' doesn't exist", name))
		return
	}
	state.Parent = types.StringValue(parent)

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &DeviceGroupParentResource{}
	_ resource.ResourceWithConfigure   = &DeviceGroupParentResource{}
	_ resource.ResourceWithImportState = &DeviceGroupParentResource{}
)

func NewDeviceGroupParentResource() resource.Resource {
	return &DeviceGroupParentResource{}
}

type DeviceGroupParentResource struct {
	client *pango.Client
}

func DeviceGroupParentResourceLocationSchema() rsschema.Attribute {
	return DeviceGroupParentLocationSchema()
}

type DeviceGroupParentResourceModel struct {
	Location    DeviceGroupParentLocation `tfsdk:"location"`
	DeviceGroup types.String              `tfsdk:"device_group"`
	Parent      types.String              `tfsdk:"parent"`
}

func (r *DeviceGroupParentResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func DeviceGroupParentResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": DeviceGroupParentResourceLocationSchema(),

			"device_group": rsschema.StringAttribute{
				Description: "The device group whose parent is being set",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"parent": rsschema.StringAttribute{
				Description: "The parent device group. Leaving it empty moves 'device-group' under 'shared'.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *DeviceGroupParentResourceModel) getTypeFor(name string) attr.Type {
	schema := DeviceGroupParentResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *DeviceGroupParentResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_device_group_parent"
}

func (r *DeviceGroupParentResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = DeviceGroupParentResourceSchema()
}

// </ResourceSchema>

func (r *DeviceGroupParentResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*pango.Client)
}

func (r *DeviceGroupParentResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	var state DeviceGroupParentResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	deviceGroup := state.DeviceGroup.ValueString()
	parent := state.Parent.ValueString()
	if err := assignParent(ctx, r.client, deviceGroup, parent); err != nil {
		resp.Diagnostics.AddError("Failed to assign parent to the device group", err.Error())
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (o *DeviceGroupParentResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var state DeviceGroupParentResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	name := state.DeviceGroup.ValueString()
	hierarchy, err := getParents(ctx, o.client, name)
	if err != nil {
		if sdkerrors.IsObjectNotFound(err) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Failed to query for the device group parent", err.Error())
		}
		return
	}

	parent, ok := hierarchy[name]
	if !ok {
		resp.State.RemoveResource(ctx)
		return
	}
	state.Parent = types.StringValue(parent)

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *DeviceGroupParentResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var state DeviceGroupParentResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	deviceGroup := state.DeviceGroup.ValueString()
	parent := state.Parent.ValueString()
	if err := assignParent(ctx, r.client, deviceGroup, parent); err != nil {
		resp.Diagnostics.AddError("Failed to assign parent to the device group", err.Error())
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *DeviceGroupParentResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state DeviceGroupParentResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	name := state.DeviceGroup.ValueString()
	hierarchy, err := getParents(ctx, r.client, name)
	if err != nil {
		resp.Diagnostics.AddError("Failed to query for the device group parent", err.Error())
		return
	}

	parent, ok := hierarchy[name]
	if !ok {
		resp.Diagnostics.AddError("Failed to query for the device group parent", fmt.Sprintf("Device Group '%s' doesn't exist", name))
		return
	}

	if parent != "" {
		deviceGroup := state.DeviceGroup.ValueString()
		if err := assignParent(ctx, r.client, deviceGroup, ""); err != nil {
			resp.Diagnostics.AddError("Failed to assign parent to the device group", err.Error())
			return
		}
	}

}

func (r *DeviceGroupParentResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

}

type DeviceGroupParentPanoramaLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
}
type DeviceGroupParentLocation struct {
	Panorama *DeviceGroupParentPanoramaLocation `tfsdk:"panorama"`
}

func DeviceGroupParentLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"panorama": rsschema.SingleNestedAttribute{
				Description: "Located in a specific Panorama.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "The Panorama device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o DeviceGroupParentPanoramaLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		PanoramaDevice *string `json:"panorama_device"`
	}{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *DeviceGroupParentPanoramaLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)

	return nil
}
func (o DeviceGroupParentLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		Panorama *DeviceGroupParentPanoramaLocation `json:"panorama"`
	}{
		Panorama: o.Panorama,
	}

	return json.Marshal(obj)
}

func (o *DeviceGroupParentLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Panorama *DeviceGroupParentPanoramaLocation `json:"panorama"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.Panorama = shadow.Panorama

	return nil
}

var _ = tflog.Warn

type _ = diag.Diagnostics
type dgpReq struct {
	XMLName xml.Name `xml:"show"`
	Cmd     string   `xml:"dg-hierarchy"`
}

type dgpResp struct {
	Result *dgHierarchy `xml:"result>dg-hierarchy"`
}

func (o *dgpResp) results() map[string]string {
	ans := make(map[string]string)

	if o.Result != nil {
		for _, v := range o.Result.Info {
			ans[v.Name] = ""
			v.results(ans)
		}
	}

	return ans
}

type dgHierarchy struct {
	Info []dghInfo `xml:"dg"`
}

type dghInfo struct {
	Name     string    `xml:"name,attr"`
	Children []dghInfo `xml:"dg"`
}

func (o *dghInfo) results(ans map[string]string) {
	for _, v := range o.Children {
		ans[v.Name] = o.Name
		v.results(ans)
	}
}

type apReq struct {
	XMLName xml.Name `xml:"request"`
	Info    apInfo   `xml:"move-dg>entry"`
}

type apInfo struct {
	Child  string `xml:"name,attr"`
	Parent string `xml:"new-parent-dg,omitempty"`
}

func getParents(ctx context.Context, client util.PangoClient, deviceGroup string) (map[string]string, error) {
	cmd := &xmlapi.Op{
		Command: dgpReq{},
	}

	var ans dgpResp
	if _, _, err := client.Communicate(ctx, cmd, false, &ans); err != nil {
		return nil, err
	}

	return ans.results(), nil
}

func assignParent(ctx context.Context, client util.PangoClient, deviceGroup string, parent string) error {
	cmd := &xmlapi.Op{
		Command: apReq{
			Info: apInfo{
				Child:  deviceGroup,
				Parent: parent,
			},
		},
	}

	ans := util.JobResponse{}
	if _, _, err := client.Communicate(ctx, cmd, false, &ans); err != nil {
		return err
	}
	if err := client.WaitForJob(ctx, ans.Id, 0, nil); err != nil {
		return err
	}

	return nil
}
