package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"strings"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/network/interface/ethernet/subinterface/layer3"
	pangoutil "github.com/PaloAltoNetworks/pango/util"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &EthernetLayer3SubinterfaceDataSource{}
	_ datasource.DataSourceWithConfigure = &EthernetLayer3SubinterfaceDataSource{}
)

func NewEthernetLayer3SubinterfaceDataSource() datasource.DataSource {
	return &EthernetLayer3SubinterfaceDataSource{}
}

type EthernetLayer3SubinterfaceDataSource struct {
	client  *pango.Client
	manager *sdkmanager.ImportableEntryObjectManager[*layer3.Entry, layer3.Location, layer3.ImportLocation, *layer3.Service]
}

type EthernetLayer3SubinterfaceDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type EthernetLayer3SubinterfaceDataSourceModel struct {
	Location                   types.Object                                                 `tfsdk:"location"`
	Name                       types.String                                                 `tfsdk:"name"`
	Parent                     types.String                                                 `tfsdk:"parent"`
	AdjustTcpMss               *EthernetLayer3SubinterfaceDataSourceAdjustTcpMssObject      `tfsdk:"adjust_tcp_mss"`
	Arp                        types.List                                                   `tfsdk:"arp"`
	Bonjour                    *EthernetLayer3SubinterfaceDataSourceBonjourObject           `tfsdk:"bonjour"`
	Comment                    types.String                                                 `tfsdk:"comment"`
	DdnsConfig                 *EthernetLayer3SubinterfaceDataSourceDdnsConfigObject        `tfsdk:"ddns_config"`
	DecryptForward             types.Bool                                                   `tfsdk:"decrypt_forward"`
	DfIgnore                   types.Bool                                                   `tfsdk:"df_ignore"`
	DhcpClient                 *EthernetLayer3SubinterfaceDataSourceDhcpClientObject        `tfsdk:"dhcp_client"`
	InterfaceManagementProfile types.String                                                 `tfsdk:"interface_management_profile"`
	Ip                         types.List                                                   `tfsdk:"ip"`
	Ipv6                       *EthernetLayer3SubinterfaceDataSourceIpv6Object              `tfsdk:"ipv6"`
	Mtu                        types.Int64                                                  `tfsdk:"mtu"`
	NdpProxy                   *EthernetLayer3SubinterfaceDataSourceNdpProxyObject          `tfsdk:"ndp_proxy"`
	NetflowProfile             types.String                                                 `tfsdk:"netflow_profile"`
	Pppoe                      *EthernetLayer3SubinterfaceDataSourcePppoeObject             `tfsdk:"pppoe"`
	SdwanLinkSettings          *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsObject `tfsdk:"sdwan_link_settings"`
	Tag                        types.Int64                                                  `tfsdk:"tag"`
}
type EthernetLayer3SubinterfaceDataSourceAdjustTcpMssObject struct {
	Enable            types.Bool  `tfsdk:"enable"`
	Ipv4MssAdjustment types.Int64 `tfsdk:"ipv4_mss_adjustment"`
	Ipv6MssAdjustment types.Int64 `tfsdk:"ipv6_mss_adjustment"`
}
type EthernetLayer3SubinterfaceDataSourceArpObject struct {
	Name      types.String `tfsdk:"name"`
	HwAddress types.String `tfsdk:"hw_address"`
}
type EthernetLayer3SubinterfaceDataSourceBonjourObject struct {
	Enable   types.Bool  `tfsdk:"enable"`
	GroupId  types.Int64 `tfsdk:"group_id"`
	TtlCheck types.Bool  `tfsdk:"ttl_check"`
}
type EthernetLayer3SubinterfaceDataSourceDdnsConfigObject struct {
	DdnsCertProfile    types.String `tfsdk:"ddns_cert_profile"`
	DdnsEnabled        types.Bool   `tfsdk:"ddns_enabled"`
	DdnsHostname       types.String `tfsdk:"ddns_hostname"`
	DdnsIp             types.List   `tfsdk:"ddns_ip"`
	DdnsIpv6           types.List   `tfsdk:"ddns_ipv6"`
	DdnsUpdateInterval types.Int64  `tfsdk:"ddns_update_interval"`
	DdnsVendor         types.String `tfsdk:"ddns_vendor"`
	DdnsVendorConfig   types.List   `tfsdk:"ddns_vendor_config"`
}
type EthernetLayer3SubinterfaceDataSourceDdnsConfigDdnsVendorConfigObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}
type EthernetLayer3SubinterfaceDataSourceDhcpClientObject struct {
	CreateDefaultRoute types.Bool                                                        `tfsdk:"create_default_route"`
	DefaultRouteMetric types.Int64                                                       `tfsdk:"default_route_metric"`
	Enable             types.Bool                                                        `tfsdk:"enable"`
	SendHostname       *EthernetLayer3SubinterfaceDataSourceDhcpClientSendHostnameObject `tfsdk:"send_hostname"`
}
type EthernetLayer3SubinterfaceDataSourceDhcpClientSendHostnameObject struct {
	Enable   types.Bool   `tfsdk:"enable"`
	Hostname types.String `tfsdk:"hostname"`
}
type EthernetLayer3SubinterfaceDataSourceIpObject struct {
	Name         types.String `tfsdk:"name"`
	SdwanGateway types.String `tfsdk:"sdwan_gateway"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6Object struct {
	Address           types.List                                                       `tfsdk:"address"`
	DhcpClient        *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientObject        `tfsdk:"dhcp_client"`
	Enabled           types.Bool                                                       `tfsdk:"enabled"`
	Inherited         *EthernetLayer3SubinterfaceDataSourceIpv6InheritedObject         `tfsdk:"inherited"`
	InterfaceId       types.String                                                     `tfsdk:"interface_id"`
	NeighborDiscovery *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryObject `tfsdk:"neighbor_discovery"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6AddressObject struct {
	Name              types.String                                                    `tfsdk:"name"`
	EnableOnInterface types.Bool                                                      `tfsdk:"enable_on_interface"`
	Prefix            *EthernetLayer3SubinterfaceDataSourceIpv6AddressPrefixObject    `tfsdk:"prefix"`
	Anycast           *EthernetLayer3SubinterfaceDataSourceIpv6AddressAnycastObject   `tfsdk:"anycast"`
	Advertise         *EthernetLayer3SubinterfaceDataSourceIpv6AddressAdvertiseObject `tfsdk:"advertise"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6AddressPrefixObject struct {
}
type EthernetLayer3SubinterfaceDataSourceIpv6AddressAnycastObject struct {
}
type EthernetLayer3SubinterfaceDataSourceIpv6AddressAdvertiseObject struct {
	Enable            types.Bool   `tfsdk:"enable"`
	ValidLifetime     types.String `tfsdk:"valid_lifetime"`
	PreferredLifetime types.String `tfsdk:"preferred_lifetime"`
	OnlinkFlag        types.Bool   `tfsdk:"onlink_flag"`
	AutoConfigFlag    types.Bool   `tfsdk:"auto_config_flag"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientObject struct {
	AcceptRaRoute      types.Bool                                                                 `tfsdk:"accept_ra_route"`
	DefaultRouteMetric types.Int64                                                                `tfsdk:"default_route_metric"`
	Enable             types.Bool                                                                 `tfsdk:"enable"`
	NeighborDiscovery  *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryObject `tfsdk:"neighbor_discovery"`
	Preference         types.String                                                               `tfsdk:"preference"`
	PrefixDelegation   *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationObject  `tfsdk:"prefix_delegation"`
	V6Options          *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsObject         `tfsdk:"v6_options"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryObject struct {
	DadAttempts      types.Int64                                                                         `tfsdk:"dad_attempts"`
	DnsServer        *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerObject `tfsdk:"dns_server"`
	DnsSuffix        *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixObject `tfsdk:"dns_suffix"`
	EnableDad        types.Bool                                                                          `tfsdk:"enable_dad"`
	EnableNdpMonitor types.Bool                                                                          `tfsdk:"enable_ndp_monitor"`
	Neighbor         types.List                                                                          `tfsdk:"neighbor"`
	NsInterval       types.Int64                                                                         `tfsdk:"ns_interval"`
	ReachableTime    types.Int64                                                                         `tfsdk:"reachable_time"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerObject struct {
	Enable types.Bool                                                                                `tfsdk:"enable"`
	Source *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceObject `tfsdk:"source"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceObject struct {
	Dhcpv6 *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Object `tfsdk:"dhcpv6"`
	Manual *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualObject `tfsdk:"manual"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Object struct {
}
type EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualObject struct {
	Server types.List `tfsdk:"server"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerObject struct {
	Name     types.String `tfsdk:"name"`
	Lifetime types.Int64  `tfsdk:"lifetime"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixObject struct {
	Enable types.Bool                                                                                `tfsdk:"enable"`
	Source *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceObject `tfsdk:"source"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceObject struct {
	Dhcpv6 *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Object `tfsdk:"dhcpv6"`
	Manual *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualObject `tfsdk:"manual"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Object struct {
}
type EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualObject struct {
	Suffix types.List `tfsdk:"suffix"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixObject struct {
	Name     types.String `tfsdk:"name"`
	Lifetime types.Int64  `tfsdk:"lifetime"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryNeighborObject struct {
	Name      types.String `tfsdk:"name"`
	HwAddress types.String `tfsdk:"hw_address"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationObject struct {
	Enable *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableObject `tfsdk:"enable"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableObject struct {
	No  *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableNoObject  `tfsdk:"no"`
	Yes *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableYesObject `tfsdk:"yes"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableNoObject struct {
}
type EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableYesObject struct {
	PfxPoolName   types.String `tfsdk:"pfx_pool_name"`
	PrefixLen     types.Int64  `tfsdk:"prefix_len"`
	PrefixLenHint types.Bool   `tfsdk:"prefix_len_hint"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsObject struct {
	DuidType            types.String                                                             `tfsdk:"duid_type"`
	Enable              *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableObject `tfsdk:"enable"`
	RapidCommit         types.Bool                                                               `tfsdk:"rapid_commit"`
	SupportSrvrReconfig types.Bool                                                               `tfsdk:"support_srvr_reconfig"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableObject struct {
	No  *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableNoObject  `tfsdk:"no"`
	Yes *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableYesObject `tfsdk:"yes"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableNoObject struct {
}
type EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableYesObject struct {
	NonTempAddr types.Bool `tfsdk:"non_temp_addr"`
	TempAddr    types.Bool `tfsdk:"temp_addr"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedObject struct {
	AssignAddr        types.List                                                                `tfsdk:"assign_addr"`
	Enable            types.Bool                                                                `tfsdk:"enable"`
	NeighborDiscovery *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryObject `tfsdk:"neighbor_discovery"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrObject struct {
	Name types.String                                                           `tfsdk:"name"`
	Type *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeObject `tfsdk:"type"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeObject struct {
	Gua *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaObject `tfsdk:"gua"`
	Ula *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaObject `tfsdk:"ula"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaObject struct {
	EnableOnInterface types.Bool                                                                         `tfsdk:"enable_on_interface"`
	PrefixPool        types.String                                                                       `tfsdk:"prefix_pool"`
	PoolType          *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeObject  `tfsdk:"pool_type"`
	Advertise         *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaAdvertiseObject `tfsdk:"advertise"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeObject struct {
	Dynamic   *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicObject   `tfsdk:"dynamic"`
	DynamicId *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdObject `tfsdk:"dynamic_id"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicObject struct {
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdObject struct {
	Identifier types.Int64 `tfsdk:"identifier"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaAdvertiseObject struct {
	Enable         types.Bool `tfsdk:"enable"`
	OnlinkFlag     types.Bool `tfsdk:"onlink_flag"`
	AutoConfigFlag types.Bool `tfsdk:"auto_config_flag"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaObject struct {
	EnableOnInterface types.Bool                                                                         `tfsdk:"enable_on_interface"`
	Address           types.String                                                                       `tfsdk:"address"`
	Prefix            types.Bool                                                                         `tfsdk:"prefix"`
	Anycast           types.Bool                                                                         `tfsdk:"anycast"`
	Advertise         *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaAdvertiseObject `tfsdk:"advertise"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaAdvertiseObject struct {
	Enable            types.Bool   `tfsdk:"enable"`
	ValidLifetime     types.String `tfsdk:"valid_lifetime"`
	PreferredLifetime types.String `tfsdk:"preferred_lifetime"`
	OnlinkFlag        types.Bool   `tfsdk:"onlink_flag"`
	AutoConfigFlag    types.Bool   `tfsdk:"auto_config_flag"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryObject struct {
	DadAttempts         types.Int64                                                                                  `tfsdk:"dad_attempts"`
	DnsServer           *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerObject           `tfsdk:"dns_server"`
	DnsSuffix           *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixObject           `tfsdk:"dns_suffix"`
	EnableDad           types.Bool                                                                                   `tfsdk:"enable_dad"`
	EnableNdpMonitor    types.Bool                                                                                   `tfsdk:"enable_ndp_monitor"`
	Neighbor            types.List                                                                                   `tfsdk:"neighbor"`
	NsInterval          types.Int64                                                                                  `tfsdk:"ns_interval"`
	ReachableTime       types.Int64                                                                                  `tfsdk:"reachable_time"`
	RouterAdvertisement *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryRouterAdvertisementObject `tfsdk:"router_advertisement"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerObject struct {
	Enable types.Bool                                                                               `tfsdk:"enable"`
	Source *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceObject `tfsdk:"source"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceObject struct {
	Dhcpv6 *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Object `tfsdk:"dhcpv6"`
	Manual *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualObject `tfsdk:"manual"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Object struct {
	PrefixPool types.String `tfsdk:"prefix_pool"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualObject struct {
	Server types.List `tfsdk:"server"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerObject struct {
	Name     types.String `tfsdk:"name"`
	Lifetime types.Int64  `tfsdk:"lifetime"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixObject struct {
	Enable types.Bool                                                                               `tfsdk:"enable"`
	Source *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceObject `tfsdk:"source"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceObject struct {
	Dhcpv6 *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Object `tfsdk:"dhcpv6"`
	Manual *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualObject `tfsdk:"manual"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Object struct {
	PrefixPool types.String `tfsdk:"prefix_pool"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualObject struct {
	Suffix types.List `tfsdk:"suffix"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixObject struct {
	Name     types.String `tfsdk:"name"`
	Lifetime types.Int64  `tfsdk:"lifetime"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryNeighborObject struct {
	Name      types.String `tfsdk:"name"`
	HwAddress types.String `tfsdk:"hw_address"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryRouterAdvertisementObject struct {
	Enable                 types.Bool   `tfsdk:"enable"`
	EnableConsistencyCheck types.Bool   `tfsdk:"enable_consistency_check"`
	HopLimit               types.String `tfsdk:"hop_limit"`
	Lifetime               types.Int64  `tfsdk:"lifetime"`
	LinkMtu                types.String `tfsdk:"link_mtu"`
	ManagedFlag            types.Bool   `tfsdk:"managed_flag"`
	MaxInterval            types.Int64  `tfsdk:"max_interval"`
	MinInterval            types.Int64  `tfsdk:"min_interval"`
	OtherFlag              types.Bool   `tfsdk:"other_flag"`
	ReachableTime          types.String `tfsdk:"reachable_time"`
	RetransmissionTimer    types.String `tfsdk:"retransmission_timer"`
	RouterPreference       types.String `tfsdk:"router_preference"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryObject struct {
	DadAttempts         types.Int64                                                                         `tfsdk:"dad_attempts"`
	EnableDad           types.Bool                                                                          `tfsdk:"enable_dad"`
	EnableNdpMonitor    types.Bool                                                                          `tfsdk:"enable_ndp_monitor"`
	Neighbor            types.List                                                                          `tfsdk:"neighbor"`
	NsInterval          types.Int64                                                                         `tfsdk:"ns_interval"`
	ReachableTime       types.Int64                                                                         `tfsdk:"reachable_time"`
	RouterAdvertisement *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementObject `tfsdk:"router_advertisement"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryNeighborObject struct {
	Name      types.String `tfsdk:"name"`
	HwAddress types.String `tfsdk:"hw_address"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementObject struct {
	DnsSupport             *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportObject `tfsdk:"dns_support"`
	Enable                 types.Bool                                                                                    `tfsdk:"enable"`
	EnableConsistencyCheck types.Bool                                                                                    `tfsdk:"enable_consistency_check"`
	HopLimit               types.String                                                                                  `tfsdk:"hop_limit"`
	Lifetime               types.Int64                                                                                   `tfsdk:"lifetime"`
	LinkMtu                types.String                                                                                  `tfsdk:"link_mtu"`
	ManagedFlag            types.Bool                                                                                    `tfsdk:"managed_flag"`
	MaxInterval            types.Int64                                                                                   `tfsdk:"max_interval"`
	MinInterval            types.Int64                                                                                   `tfsdk:"min_interval"`
	OtherFlag              types.Bool                                                                                    `tfsdk:"other_flag"`
	ReachableTime          types.String                                                                                  `tfsdk:"reachable_time"`
	RetransmissionTimer    types.String                                                                                  `tfsdk:"retransmission_timer"`
	RouterPreference       types.String                                                                                  `tfsdk:"router_preference"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportObject struct {
	Enable types.Bool `tfsdk:"enable"`
	Server types.List `tfsdk:"server"`
	Suffix types.List `tfsdk:"suffix"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerObject struct {
	Name     types.String `tfsdk:"name"`
	Lifetime types.Int64  `tfsdk:"lifetime"`
}
type EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixObject struct {
	Name     types.String `tfsdk:"name"`
	Lifetime types.Int64  `tfsdk:"lifetime"`
}
type EthernetLayer3SubinterfaceDataSourceNdpProxyObject struct {
	Address types.List `tfsdk:"address"`
	Enabled types.Bool `tfsdk:"enabled"`
}
type EthernetLayer3SubinterfaceDataSourceNdpProxyAddressObject struct {
	Name   types.String `tfsdk:"name"`
	Negate types.Bool   `tfsdk:"negate"`
}
type EthernetLayer3SubinterfaceDataSourcePppoeObject struct {
	AccessConcentrator types.String                                                  `tfsdk:"access_concentrator"`
	Authentication     types.String                                                  `tfsdk:"authentication"`
	CreateDefaultRoute types.Bool                                                    `tfsdk:"create_default_route"`
	DefaultRouteMetric types.Int64                                                   `tfsdk:"default_route_metric"`
	Enable             types.Bool                                                    `tfsdk:"enable"`
	Passive            *EthernetLayer3SubinterfaceDataSourcePppoePassiveObject       `tfsdk:"passive"`
	Password           types.String                                                  `tfsdk:"password"`
	Service            types.String                                                  `tfsdk:"service"`
	StaticAddress      *EthernetLayer3SubinterfaceDataSourcePppoeStaticAddressObject `tfsdk:"static_address"`
	Username           types.String                                                  `tfsdk:"username"`
}
type EthernetLayer3SubinterfaceDataSourcePppoePassiveObject struct {
	Enable types.Bool `tfsdk:"enable"`
}
type EthernetLayer3SubinterfaceDataSourcePppoeStaticAddressObject struct {
	Ip types.String `tfsdk:"ip"`
}
type EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsObject struct {
	Enable                types.Bool                                                              `tfsdk:"enable"`
	SdwanInterfaceProfile types.String                                                            `tfsdk:"sdwan_interface_profile"`
	UpstreamNat           *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatObject `tfsdk:"upstream_nat"`
}
type EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatObject struct {
	Enable   types.Bool                                                                      `tfsdk:"enable"`
	Ddns     *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatDdnsObject     `tfsdk:"ddns"`
	StaticIp *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatStaticIpObject `tfsdk:"static_ip"`
}
type EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatDdnsObject struct {
}
type EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatStaticIpObject struct {
	Fqdn      types.String `tfsdk:"fqdn"`
	IpAddress types.String `tfsdk:"ip_address"`
}

func (o *EthernetLayer3SubinterfaceDataSourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj EthernetLayer3SubinterfaceLocation

	var adjustTcpMssObj *EthernetLayer3SubinterfaceDataSourceAdjustTcpMssObject

	var bonjourObj *EthernetLayer3SubinterfaceDataSourceBonjourObject

	var ddnsConfigObj *EthernetLayer3SubinterfaceDataSourceDdnsConfigObject

	var dhcpClientObj *EthernetLayer3SubinterfaceDataSourceDhcpClientObject

	var ipv6Obj *EthernetLayer3SubinterfaceDataSourceIpv6Object

	var ndpProxyObj *EthernetLayer3SubinterfaceDataSourceNdpProxyObject

	var pppoeObj *EthernetLayer3SubinterfaceDataSourcePppoeObject

	var sdwanLinkSettingsObj *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsObject

	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"name":   types.StringType,
		"parent": types.StringType,
		"adjust_tcp_mss": types.ObjectType{
			AttrTypes: adjustTcpMssObj.AttributeTypes(),
		},
		"arp": types.ListType{},
		"bonjour": types.ObjectType{
			AttrTypes: bonjourObj.AttributeTypes(),
		},
		"comment": types.StringType,
		"ddns_config": types.ObjectType{
			AttrTypes: ddnsConfigObj.AttributeTypes(),
		},
		"decrypt_forward": types.BoolType,
		"df_ignore":       types.BoolType,
		"dhcp_client": types.ObjectType{
			AttrTypes: dhcpClientObj.AttributeTypes(),
		},
		"interface_management_profile": types.StringType,
		"ip":                           types.ListType{},
		"ipv6": types.ObjectType{
			AttrTypes: ipv6Obj.AttributeTypes(),
		},
		"mtu": types.Int64Type,
		"ndp_proxy": types.ObjectType{
			AttrTypes: ndpProxyObj.AttributeTypes(),
		},
		"netflow_profile": types.StringType,
		"pppoe": types.ObjectType{
			AttrTypes: pppoeObj.AttributeTypes(),
		},
		"sdwan_link_settings": types.ObjectType{
			AttrTypes: sdwanLinkSettingsObj.AttributeTypes(),
		},
		"tag": types.Int64Type,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceModel) AncestorName() string {
	return ""
}

func (o EthernetLayer3SubinterfaceDataSourceModel) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceAdjustTcpMssObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"enable":              types.BoolType,
		"ipv4_mss_adjustment": types.Int64Type,
		"ipv6_mss_adjustment": types.Int64Type,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceAdjustTcpMssObject) AncestorName() string {
	return "adjust-tcp-mss"
}

func (o EthernetLayer3SubinterfaceDataSourceAdjustTcpMssObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceArpObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":       types.StringType,
		"hw_address": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceArpObject) AncestorName() string {
	return "arp"
}

func (o EthernetLayer3SubinterfaceDataSourceArpObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceDataSourceBonjourObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"enable":    types.BoolType,
		"group_id":  types.Int64Type,
		"ttl_check": types.BoolType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceBonjourObject) AncestorName() string {
	return "bonjour"
}

func (o EthernetLayer3SubinterfaceDataSourceBonjourObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceDdnsConfigObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"ddns_cert_profile":    types.StringType,
		"ddns_enabled":         types.BoolType,
		"ddns_hostname":        types.StringType,
		"ddns_ip":              types.ListType{},
		"ddns_ipv6":            types.ListType{},
		"ddns_update_interval": types.Int64Type,
		"ddns_vendor":          types.StringType,
		"ddns_vendor_config":   types.ListType{},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceDdnsConfigObject) AncestorName() string {
	return "ddns-config"
}

func (o EthernetLayer3SubinterfaceDataSourceDdnsConfigObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceDdnsConfigDdnsVendorConfigObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":  types.StringType,
		"value": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceDdnsConfigDdnsVendorConfigObject) AncestorName() string {
	return "ddns-vendor-config"
}

func (o EthernetLayer3SubinterfaceDataSourceDdnsConfigDdnsVendorConfigObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceDataSourceDhcpClientObject) AttributeTypes() map[string]attr.Type {

	var sendHostnameObj *EthernetLayer3SubinterfaceDataSourceDhcpClientSendHostnameObject
	return map[string]attr.Type{
		"create_default_route": types.BoolType,
		"default_route_metric": types.Int64Type,
		"enable":               types.BoolType,
		"send_hostname": types.ObjectType{
			AttrTypes: sendHostnameObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceDhcpClientObject) AncestorName() string {
	return "dhcp-client"
}

func (o EthernetLayer3SubinterfaceDataSourceDhcpClientObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceDhcpClientSendHostnameObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"enable":   types.BoolType,
		"hostname": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceDhcpClientSendHostnameObject) AncestorName() string {
	return "send-hostname"
}

func (o EthernetLayer3SubinterfaceDataSourceDhcpClientSendHostnameObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":          types.StringType,
		"sdwan_gateway": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpObject) AncestorName() string {
	return "ip"
}

func (o EthernetLayer3SubinterfaceDataSourceIpObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6Object) AttributeTypes() map[string]attr.Type {

	var dhcpClientObj *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientObject

	var inheritedObj *EthernetLayer3SubinterfaceDataSourceIpv6InheritedObject

	var neighborDiscoveryObj *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryObject
	return map[string]attr.Type{
		"address": types.ListType{},
		"dhcp_client": types.ObjectType{
			AttrTypes: dhcpClientObj.AttributeTypes(),
		},
		"enabled": types.BoolType,
		"inherited": types.ObjectType{
			AttrTypes: inheritedObj.AttributeTypes(),
		},
		"interface_id": types.StringType,
		"neighbor_discovery": types.ObjectType{
			AttrTypes: neighborDiscoveryObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6Object) AncestorName() string {
	return "ipv6"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6Object) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6AddressObject) AttributeTypes() map[string]attr.Type {

	var prefixObj *EthernetLayer3SubinterfaceDataSourceIpv6AddressPrefixObject

	var anycastObj *EthernetLayer3SubinterfaceDataSourceIpv6AddressAnycastObject

	var advertiseObj *EthernetLayer3SubinterfaceDataSourceIpv6AddressAdvertiseObject
	return map[string]attr.Type{
		"name":                types.StringType,
		"enable_on_interface": types.BoolType,
		"prefix": types.ObjectType{
			AttrTypes: prefixObj.AttributeTypes(),
		},
		"anycast": types.ObjectType{
			AttrTypes: anycastObj.AttributeTypes(),
		},
		"advertise": types.ObjectType{
			AttrTypes: advertiseObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6AddressObject) AncestorName() string {
	return "address"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6AddressObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6AddressPrefixObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6AddressPrefixObject) AncestorName() string {
	return "prefix"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6AddressPrefixObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6AddressAnycastObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6AddressAnycastObject) AncestorName() string {
	return "anycast"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6AddressAnycastObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6AddressAdvertiseObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"enable":             types.BoolType,
		"valid_lifetime":     types.StringType,
		"preferred_lifetime": types.StringType,
		"onlink_flag":        types.BoolType,
		"auto_config_flag":   types.BoolType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6AddressAdvertiseObject) AncestorName() string {
	return "advertise"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6AddressAdvertiseObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientObject) AttributeTypes() map[string]attr.Type {

	var neighborDiscoveryObj *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryObject

	var prefixDelegationObj *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationObject

	var v6OptionsObj *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsObject
	return map[string]attr.Type{
		"accept_ra_route":      types.BoolType,
		"default_route_metric": types.Int64Type,
		"enable":               types.BoolType,
		"neighbor_discovery": types.ObjectType{
			AttrTypes: neighborDiscoveryObj.AttributeTypes(),
		},
		"preference": types.StringType,
		"prefix_delegation": types.ObjectType{
			AttrTypes: prefixDelegationObj.AttributeTypes(),
		},
		"v6_options": types.ObjectType{
			AttrTypes: v6OptionsObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientObject) AncestorName() string {
	return "dhcp-client"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryObject) AttributeTypes() map[string]attr.Type {

	var dnsServerObj *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerObject

	var dnsSuffixObj *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixObject

	return map[string]attr.Type{
		"dad_attempts": types.Int64Type,
		"dns_server": types.ObjectType{
			AttrTypes: dnsServerObj.AttributeTypes(),
		},
		"dns_suffix": types.ObjectType{
			AttrTypes: dnsSuffixObj.AttributeTypes(),
		},
		"enable_dad":         types.BoolType,
		"enable_ndp_monitor": types.BoolType,
		"neighbor":           types.ListType{},
		"ns_interval":        types.Int64Type,
		"reachable_time":     types.Int64Type,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryObject) AncestorName() string {
	return "neighbor-discovery"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerObject) AttributeTypes() map[string]attr.Type {

	var sourceObj *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceObject
	return map[string]attr.Type{
		"enable": types.BoolType,
		"source": types.ObjectType{
			AttrTypes: sourceObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerObject) AncestorName() string {
	return "dns-server"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceObject) AttributeTypes() map[string]attr.Type {

	var dhcpv6Obj *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Object

	var manualObj *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualObject
	return map[string]attr.Type{
		"dhcpv6": types.ObjectType{
			AttrTypes: dhcpv6Obj.AttributeTypes(),
		},
		"manual": types.ObjectType{
			AttrTypes: manualObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceObject) AncestorName() string {
	return "source"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Object) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Object) AncestorName() string {
	return "dhcpv6"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Object) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"server": types.ListType{},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualObject) AncestorName() string {
	return "manual"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":     types.StringType,
		"lifetime": types.Int64Type,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerObject) AncestorName() string {
	return "server"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixObject) AttributeTypes() map[string]attr.Type {

	var sourceObj *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceObject
	return map[string]attr.Type{
		"enable": types.BoolType,
		"source": types.ObjectType{
			AttrTypes: sourceObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixObject) AncestorName() string {
	return "dns-suffix"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceObject) AttributeTypes() map[string]attr.Type {

	var dhcpv6Obj *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Object

	var manualObj *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualObject
	return map[string]attr.Type{
		"dhcpv6": types.ObjectType{
			AttrTypes: dhcpv6Obj.AttributeTypes(),
		},
		"manual": types.ObjectType{
			AttrTypes: manualObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceObject) AncestorName() string {
	return "source"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Object) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Object) AncestorName() string {
	return "dhcpv6"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Object) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"suffix": types.ListType{},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualObject) AncestorName() string {
	return "manual"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":     types.StringType,
		"lifetime": types.Int64Type,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixObject) AncestorName() string {
	return "suffix"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryNeighborObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":       types.StringType,
		"hw_address": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryNeighborObject) AncestorName() string {
	return "neighbor"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryNeighborObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationObject) AttributeTypes() map[string]attr.Type {

	var enableObj *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableObject
	return map[string]attr.Type{
		"enable": types.ObjectType{
			AttrTypes: enableObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationObject) AncestorName() string {
	return "prefix-delegation"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableObject) AttributeTypes() map[string]attr.Type {

	var noObj *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableNoObject

	var yesObj *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableYesObject
	return map[string]attr.Type{
		"no": types.ObjectType{
			AttrTypes: noObj.AttributeTypes(),
		},
		"yes": types.ObjectType{
			AttrTypes: yesObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableObject) AncestorName() string {
	return "enable"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableNoObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableNoObject) AncestorName() string {
	return "no"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableNoObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableYesObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"pfx_pool_name":   types.StringType,
		"prefix_len":      types.Int64Type,
		"prefix_len_hint": types.BoolType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableYesObject) AncestorName() string {
	return "yes"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableYesObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsObject) AttributeTypes() map[string]attr.Type {

	var enableObj *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableObject

	return map[string]attr.Type{
		"duid_type": types.StringType,
		"enable": types.ObjectType{
			AttrTypes: enableObj.AttributeTypes(),
		},
		"rapid_commit":          types.BoolType,
		"support_srvr_reconfig": types.BoolType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsObject) AncestorName() string {
	return "v6-options"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableObject) AttributeTypes() map[string]attr.Type {

	var noObj *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableNoObject

	var yesObj *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableYesObject
	return map[string]attr.Type{
		"no": types.ObjectType{
			AttrTypes: noObj.AttributeTypes(),
		},
		"yes": types.ObjectType{
			AttrTypes: yesObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableObject) AncestorName() string {
	return "enable"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableNoObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableNoObject) AncestorName() string {
	return "no"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableNoObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableYesObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"non_temp_addr": types.BoolType,
		"temp_addr":     types.BoolType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableYesObject) AncestorName() string {
	return "yes"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableYesObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedObject) AttributeTypes() map[string]attr.Type {

	var neighborDiscoveryObj *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryObject
	return map[string]attr.Type{
		"assign_addr": types.ListType{},
		"enable":      types.BoolType,
		"neighbor_discovery": types.ObjectType{
			AttrTypes: neighborDiscoveryObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedObject) AncestorName() string {
	return "inherited"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrObject) AttributeTypes() map[string]attr.Type {

	var typeObj *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeObject
	return map[string]attr.Type{
		"name": types.StringType,
		"type": types.ObjectType{
			AttrTypes: typeObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrObject) AncestorName() string {
	return "assign-addr"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeObject) AttributeTypes() map[string]attr.Type {

	var guaObj *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaObject

	var ulaObj *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaObject
	return map[string]attr.Type{
		"gua": types.ObjectType{
			AttrTypes: guaObj.AttributeTypes(),
		},
		"ula": types.ObjectType{
			AttrTypes: ulaObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeObject) AncestorName() string {
	return "type"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaObject) AttributeTypes() map[string]attr.Type {

	var poolTypeObj *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeObject

	var advertiseObj *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaAdvertiseObject
	return map[string]attr.Type{
		"enable_on_interface": types.BoolType,
		"prefix_pool":         types.StringType,
		"pool_type": types.ObjectType{
			AttrTypes: poolTypeObj.AttributeTypes(),
		},
		"advertise": types.ObjectType{
			AttrTypes: advertiseObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaObject) AncestorName() string {
	return "gua"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeObject) AttributeTypes() map[string]attr.Type {

	var dynamicObj *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicObject

	var dynamicIdObj *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdObject
	return map[string]attr.Type{
		"dynamic": types.ObjectType{
			AttrTypes: dynamicObj.AttributeTypes(),
		},
		"dynamic_id": types.ObjectType{
			AttrTypes: dynamicIdObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeObject) AncestorName() string {
	return "pool-type"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicObject) AncestorName() string {
	return "dynamic"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"identifier": types.Int64Type,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdObject) AncestorName() string {
	return "dynamic-id"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaAdvertiseObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"enable":           types.BoolType,
		"onlink_flag":      types.BoolType,
		"auto_config_flag": types.BoolType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaAdvertiseObject) AncestorName() string {
	return "advertise"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaAdvertiseObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaObject) AttributeTypes() map[string]attr.Type {

	var advertiseObj *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaAdvertiseObject
	return map[string]attr.Type{
		"enable_on_interface": types.BoolType,
		"address":             types.StringType,
		"prefix":              types.BoolType,
		"anycast":             types.BoolType,
		"advertise": types.ObjectType{
			AttrTypes: advertiseObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaObject) AncestorName() string {
	return "ula"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaAdvertiseObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"enable":             types.BoolType,
		"valid_lifetime":     types.StringType,
		"preferred_lifetime": types.StringType,
		"onlink_flag":        types.BoolType,
		"auto_config_flag":   types.BoolType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaAdvertiseObject) AncestorName() string {
	return "advertise"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaAdvertiseObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryObject) AttributeTypes() map[string]attr.Type {

	var dnsServerObj *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerObject

	var dnsSuffixObj *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixObject

	var routerAdvertisementObj *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryRouterAdvertisementObject
	return map[string]attr.Type{
		"dad_attempts": types.Int64Type,
		"dns_server": types.ObjectType{
			AttrTypes: dnsServerObj.AttributeTypes(),
		},
		"dns_suffix": types.ObjectType{
			AttrTypes: dnsSuffixObj.AttributeTypes(),
		},
		"enable_dad":         types.BoolType,
		"enable_ndp_monitor": types.BoolType,
		"neighbor":           types.ListType{},
		"ns_interval":        types.Int64Type,
		"reachable_time":     types.Int64Type,
		"router_advertisement": types.ObjectType{
			AttrTypes: routerAdvertisementObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryObject) AncestorName() string {
	return "neighbor-discovery"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerObject) AttributeTypes() map[string]attr.Type {

	var sourceObj *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceObject
	return map[string]attr.Type{
		"enable": types.BoolType,
		"source": types.ObjectType{
			AttrTypes: sourceObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerObject) AncestorName() string {
	return "dns-server"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceObject) AttributeTypes() map[string]attr.Type {

	var dhcpv6Obj *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Object

	var manualObj *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualObject
	return map[string]attr.Type{
		"dhcpv6": types.ObjectType{
			AttrTypes: dhcpv6Obj.AttributeTypes(),
		},
		"manual": types.ObjectType{
			AttrTypes: manualObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceObject) AncestorName() string {
	return "source"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Object) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"prefix_pool": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Object) AncestorName() string {
	return "dhcpv6"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Object) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"server": types.ListType{},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualObject) AncestorName() string {
	return "manual"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":     types.StringType,
		"lifetime": types.Int64Type,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerObject) AncestorName() string {
	return "server"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixObject) AttributeTypes() map[string]attr.Type {

	var sourceObj *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceObject
	return map[string]attr.Type{
		"enable": types.BoolType,
		"source": types.ObjectType{
			AttrTypes: sourceObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixObject) AncestorName() string {
	return "dns-suffix"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceObject) AttributeTypes() map[string]attr.Type {

	var dhcpv6Obj *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Object

	var manualObj *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualObject
	return map[string]attr.Type{
		"dhcpv6": types.ObjectType{
			AttrTypes: dhcpv6Obj.AttributeTypes(),
		},
		"manual": types.ObjectType{
			AttrTypes: manualObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceObject) AncestorName() string {
	return "source"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Object) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"prefix_pool": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Object) AncestorName() string {
	return "dhcpv6"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Object) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"suffix": types.ListType{},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualObject) AncestorName() string {
	return "manual"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":     types.StringType,
		"lifetime": types.Int64Type,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixObject) AncestorName() string {
	return "suffix"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryNeighborObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":       types.StringType,
		"hw_address": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryNeighborObject) AncestorName() string {
	return "neighbor"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryNeighborObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryRouterAdvertisementObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"enable":                   types.BoolType,
		"enable_consistency_check": types.BoolType,
		"hop_limit":                types.StringType,
		"lifetime":                 types.Int64Type,
		"link_mtu":                 types.StringType,
		"managed_flag":             types.BoolType,
		"max_interval":             types.Int64Type,
		"min_interval":             types.Int64Type,
		"other_flag":               types.BoolType,
		"reachable_time":           types.StringType,
		"retransmission_timer":     types.StringType,
		"router_preference":        types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryRouterAdvertisementObject) AncestorName() string {
	return "router-advertisement"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryRouterAdvertisementObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryObject) AttributeTypes() map[string]attr.Type {

	var routerAdvertisementObj *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementObject
	return map[string]attr.Type{
		"dad_attempts":       types.Int64Type,
		"enable_dad":         types.BoolType,
		"enable_ndp_monitor": types.BoolType,
		"neighbor":           types.ListType{},
		"ns_interval":        types.Int64Type,
		"reachable_time":     types.Int64Type,
		"router_advertisement": types.ObjectType{
			AttrTypes: routerAdvertisementObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryObject) AncestorName() string {
	return "neighbor-discovery"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryNeighborObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":       types.StringType,
		"hw_address": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryNeighborObject) AncestorName() string {
	return "neighbor"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryNeighborObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementObject) AttributeTypes() map[string]attr.Type {

	var dnsSupportObj *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportObject

	return map[string]attr.Type{
		"dns_support": types.ObjectType{
			AttrTypes: dnsSupportObj.AttributeTypes(),
		},
		"enable":                   types.BoolType,
		"enable_consistency_check": types.BoolType,
		"hop_limit":                types.StringType,
		"lifetime":                 types.Int64Type,
		"link_mtu":                 types.StringType,
		"managed_flag":             types.BoolType,
		"max_interval":             types.Int64Type,
		"min_interval":             types.Int64Type,
		"other_flag":               types.BoolType,
		"reachable_time":           types.StringType,
		"retransmission_timer":     types.StringType,
		"router_preference":        types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementObject) AncestorName() string {
	return "router-advertisement"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"enable": types.BoolType,
		"server": types.ListType{},
		"suffix": types.ListType{},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportObject) AncestorName() string {
	return "dns-support"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":     types.StringType,
		"lifetime": types.Int64Type,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerObject) AncestorName() string {
	return "server"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":     types.StringType,
		"lifetime": types.Int64Type,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixObject) AncestorName() string {
	return "suffix"
}

func (o EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceDataSourceNdpProxyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"address": types.ListType{},
		"enabled": types.BoolType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceNdpProxyObject) AncestorName() string {
	return "ndp-proxy"
}

func (o EthernetLayer3SubinterfaceDataSourceNdpProxyObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceNdpProxyAddressObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":   types.StringType,
		"negate": types.BoolType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceNdpProxyAddressObject) AncestorName() string {
	return "address"
}

func (o EthernetLayer3SubinterfaceDataSourceNdpProxyAddressObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceDataSourcePppoeObject) AttributeTypes() map[string]attr.Type {

	var passiveObj *EthernetLayer3SubinterfaceDataSourcePppoePassiveObject

	var staticAddressObj *EthernetLayer3SubinterfaceDataSourcePppoeStaticAddressObject

	return map[string]attr.Type{
		"access_concentrator":  types.StringType,
		"authentication":       types.StringType,
		"create_default_route": types.BoolType,
		"default_route_metric": types.Int64Type,
		"enable":               types.BoolType,
		"passive": types.ObjectType{
			AttrTypes: passiveObj.AttributeTypes(),
		},
		"password": types.StringType,
		"service":  types.StringType,
		"static_address": types.ObjectType{
			AttrTypes: staticAddressObj.AttributeTypes(),
		},
		"username": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourcePppoeObject) AncestorName() string {
	return "pppoe"
}

func (o EthernetLayer3SubinterfaceDataSourcePppoeObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourcePppoePassiveObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"enable": types.BoolType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourcePppoePassiveObject) AncestorName() string {
	return "passive"
}

func (o EthernetLayer3SubinterfaceDataSourcePppoePassiveObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourcePppoeStaticAddressObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"ip": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourcePppoeStaticAddressObject) AncestorName() string {
	return "static-address"
}

func (o EthernetLayer3SubinterfaceDataSourcePppoeStaticAddressObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsObject) AttributeTypes() map[string]attr.Type {

	var upstreamNatObj *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatObject
	return map[string]attr.Type{
		"enable":                  types.BoolType,
		"sdwan_interface_profile": types.StringType,
		"upstream_nat": types.ObjectType{
			AttrTypes: upstreamNatObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsObject) AncestorName() string {
	return "sdwan-link-settings"
}

func (o EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatObject) AttributeTypes() map[string]attr.Type {

	var ddnsObj *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatDdnsObject

	var staticIpObj *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatStaticIpObject
	return map[string]attr.Type{
		"enable": types.BoolType,
		"ddns": types.ObjectType{
			AttrTypes: ddnsObj.AttributeTypes(),
		},
		"static_ip": types.ObjectType{
			AttrTypes: staticIpObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatObject) AncestorName() string {
	return "upstream-nat"
}

func (o EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatDdnsObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatDdnsObject) AncestorName() string {
	return "ddns"
}

func (o EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatDdnsObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatStaticIpObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"fqdn":       types.StringType,
		"ip_address": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatStaticIpObject) AncestorName() string {
	return "static-ip"
}

func (o EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatStaticIpObject) EntryName() *string {
	return nil
}

func (o *EthernetLayer3SubinterfaceDataSourceModel) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var adjustTcpMss_entry *layer3.AdjustTcpMss
	if o.AdjustTcpMss != nil {
		if *obj != nil && (*obj).AdjustTcpMss != nil {
			adjustTcpMss_entry = (*obj).AdjustTcpMss
		} else {
			adjustTcpMss_entry = new(layer3.AdjustTcpMss)
		}
		// ModelOrObject: Model
		diags.Append(o.AdjustTcpMss.CopyToPango(ctx, ancestors, &adjustTcpMss_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var arp_tf_entries []EthernetLayer3SubinterfaceDataSourceArpObject
	var arp_pango_entries []layer3.Arp
	{
		d := o.Arp.ElementsAs(ctx, &arp_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range arp_tf_entries {
			var entry *layer3.Arp
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			arp_pango_entries = append(arp_pango_entries, *entry)
		}
	}
	var bonjour_entry *layer3.Bonjour
	if o.Bonjour != nil {
		if *obj != nil && (*obj).Bonjour != nil {
			bonjour_entry = (*obj).Bonjour
		} else {
			bonjour_entry = new(layer3.Bonjour)
		}
		// ModelOrObject: Model
		diags.Append(o.Bonjour.CopyToPango(ctx, ancestors, &bonjour_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	comment_value := o.Comment.ValueStringPointer()
	var ddnsConfig_entry *layer3.DdnsConfig
	if o.DdnsConfig != nil {
		if *obj != nil && (*obj).DdnsConfig != nil {
			ddnsConfig_entry = (*obj).DdnsConfig
		} else {
			ddnsConfig_entry = new(layer3.DdnsConfig)
		}
		// ModelOrObject: Model
		diags.Append(o.DdnsConfig.CopyToPango(ctx, ancestors, &ddnsConfig_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	decryptForward_value := o.DecryptForward.ValueBoolPointer()
	dfIgnore_value := o.DfIgnore.ValueBoolPointer()
	var dhcpClient_entry *layer3.DhcpClient
	if o.DhcpClient != nil {
		if *obj != nil && (*obj).DhcpClient != nil {
			dhcpClient_entry = (*obj).DhcpClient
		} else {
			dhcpClient_entry = new(layer3.DhcpClient)
		}
		// ModelOrObject: Model
		diags.Append(o.DhcpClient.CopyToPango(ctx, ancestors, &dhcpClient_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	interfaceManagementProfile_value := o.InterfaceManagementProfile.ValueStringPointer()
	var ip_tf_entries []EthernetLayer3SubinterfaceDataSourceIpObject
	var ip_pango_entries []layer3.Ip
	{
		d := o.Ip.ElementsAs(ctx, &ip_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range ip_tf_entries {
			var entry *layer3.Ip
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			ip_pango_entries = append(ip_pango_entries, *entry)
		}
	}
	var ipv6_entry *layer3.Ipv6
	if o.Ipv6 != nil {
		if *obj != nil && (*obj).Ipv6 != nil {
			ipv6_entry = (*obj).Ipv6
		} else {
			ipv6_entry = new(layer3.Ipv6)
		}
		// ModelOrObject: Model
		diags.Append(o.Ipv6.CopyToPango(ctx, ancestors, &ipv6_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	mtu_value := o.Mtu.ValueInt64Pointer()
	var ndpProxy_entry *layer3.NdpProxy
	if o.NdpProxy != nil {
		if *obj != nil && (*obj).NdpProxy != nil {
			ndpProxy_entry = (*obj).NdpProxy
		} else {
			ndpProxy_entry = new(layer3.NdpProxy)
		}
		// ModelOrObject: Model
		diags.Append(o.NdpProxy.CopyToPango(ctx, ancestors, &ndpProxy_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	netflowProfile_value := o.NetflowProfile.ValueStringPointer()
	var pppoe_entry *layer3.Pppoe
	if o.Pppoe != nil {
		if *obj != nil && (*obj).Pppoe != nil {
			pppoe_entry = (*obj).Pppoe
		} else {
			pppoe_entry = new(layer3.Pppoe)
		}
		// ModelOrObject: Model
		diags.Append(o.Pppoe.CopyToPango(ctx, ancestors, &pppoe_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var sdwanLinkSettings_entry *layer3.SdwanLinkSettings
	if o.SdwanLinkSettings != nil {
		if *obj != nil && (*obj).SdwanLinkSettings != nil {
			sdwanLinkSettings_entry = (*obj).SdwanLinkSettings
		} else {
			sdwanLinkSettings_entry = new(layer3.SdwanLinkSettings)
		}
		// ModelOrObject: Model
		diags.Append(o.SdwanLinkSettings.CopyToPango(ctx, ancestors, &sdwanLinkSettings_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	tag_value := o.Tag.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(layer3.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).AdjustTcpMss = adjustTcpMss_entry
	(*obj).Arp = arp_pango_entries
	(*obj).Bonjour = bonjour_entry
	(*obj).Comment = comment_value
	(*obj).DdnsConfig = ddnsConfig_entry
	(*obj).DecryptForward = decryptForward_value
	(*obj).DfIgnore = dfIgnore_value
	(*obj).DhcpClient = dhcpClient_entry
	(*obj).InterfaceManagementProfile = interfaceManagementProfile_value
	(*obj).Ip = ip_pango_entries
	(*obj).Ipv6 = ipv6_entry
	(*obj).Mtu = mtu_value
	(*obj).NdpProxy = ndpProxy_entry
	(*obj).NetflowProfile = netflowProfile_value
	(*obj).Pppoe = pppoe_entry
	(*obj).SdwanLinkSettings = sdwanLinkSettings_entry
	(*obj).Tag = tag_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceAdjustTcpMssObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.AdjustTcpMss, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	ipv4MssAdjustment_value := o.Ipv4MssAdjustment.ValueInt64Pointer()
	ipv6MssAdjustment_value := o.Ipv6MssAdjustment.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(layer3.AdjustTcpMss)
	}
	(*obj).Enable = enable_value
	(*obj).Ipv4MssAdjustment = ipv4MssAdjustment_value
	(*obj).Ipv6MssAdjustment = ipv6MssAdjustment_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceArpObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Arp, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	hwAddress_value := o.HwAddress.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.Arp)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).HwAddress = hwAddress_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceBonjourObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Bonjour, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	groupId_value := o.GroupId.ValueInt64Pointer()
	ttlCheck_value := o.TtlCheck.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(layer3.Bonjour)
	}
	(*obj).Enable = enable_value
	(*obj).GroupId = groupId_value
	(*obj).TtlCheck = ttlCheck_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceDdnsConfigObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.DdnsConfig, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	ddnsCertProfile_value := o.DdnsCertProfile.ValueStringPointer()
	ddnsEnabled_value := o.DdnsEnabled.ValueBoolPointer()
	ddnsHostname_value := o.DdnsHostname.ValueStringPointer()
	ddnsIp_pango_entries := make([]string, 0)
	diags.Append(o.DdnsIp.ElementsAs(ctx, &ddnsIp_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	ddnsIpv6_pango_entries := make([]string, 0)
	diags.Append(o.DdnsIpv6.ElementsAs(ctx, &ddnsIpv6_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	ddnsUpdateInterval_value := o.DdnsUpdateInterval.ValueInt64Pointer()
	ddnsVendor_value := o.DdnsVendor.ValueStringPointer()
	var ddnsVendorConfig_tf_entries []EthernetLayer3SubinterfaceDataSourceDdnsConfigDdnsVendorConfigObject
	var ddnsVendorConfig_pango_entries []layer3.DdnsConfigDdnsVendorConfig
	{
		d := o.DdnsVendorConfig.ElementsAs(ctx, &ddnsVendorConfig_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range ddnsVendorConfig_tf_entries {
			var entry *layer3.DdnsConfigDdnsVendorConfig
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			ddnsVendorConfig_pango_entries = append(ddnsVendorConfig_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.DdnsConfig)
	}
	(*obj).DdnsCertProfile = ddnsCertProfile_value
	(*obj).DdnsEnabled = ddnsEnabled_value
	(*obj).DdnsHostname = ddnsHostname_value
	(*obj).DdnsIp = ddnsIp_pango_entries
	(*obj).DdnsIpv6 = ddnsIpv6_pango_entries
	(*obj).DdnsUpdateInterval = ddnsUpdateInterval_value
	(*obj).DdnsVendor = ddnsVendor_value
	(*obj).DdnsVendorConfig = ddnsVendorConfig_pango_entries

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceDdnsConfigDdnsVendorConfigObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.DdnsConfigDdnsVendorConfig, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	value_value := o.Value.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.DdnsConfigDdnsVendorConfig)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Value = value_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceDhcpClientObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.DhcpClient, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	createDefaultRoute_value := o.CreateDefaultRoute.ValueBoolPointer()
	defaultRouteMetric_value := o.DefaultRouteMetric.ValueInt64Pointer()
	enable_value := o.Enable.ValueBoolPointer()
	var sendHostname_entry *layer3.DhcpClientSendHostname
	if o.SendHostname != nil {
		if *obj != nil && (*obj).SendHostname != nil {
			sendHostname_entry = (*obj).SendHostname
		} else {
			sendHostname_entry = new(layer3.DhcpClientSendHostname)
		}
		// ModelOrObject: Object
		diags.Append(o.SendHostname.CopyToPango(ctx, append(ancestors, o), &sendHostname_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.DhcpClient)
	}
	(*obj).CreateDefaultRoute = createDefaultRoute_value
	(*obj).DefaultRouteMetric = defaultRouteMetric_value
	(*obj).Enable = enable_value
	(*obj).SendHostname = sendHostname_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceDhcpClientSendHostnameObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.DhcpClientSendHostname, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	hostname_value := o.Hostname.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.DhcpClientSendHostname)
	}
	(*obj).Enable = enable_value
	(*obj).Hostname = hostname_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ip, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	sdwanGateway_value := o.SdwanGateway.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ip)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).SdwanGateway = sdwanGateway_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6Object) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var address_tf_entries []EthernetLayer3SubinterfaceDataSourceIpv6AddressObject
	var address_pango_entries []layer3.Ipv6Address
	{
		d := o.Address.ElementsAs(ctx, &address_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range address_tf_entries {
			var entry *layer3.Ipv6Address
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			address_pango_entries = append(address_pango_entries, *entry)
		}
	}
	var dhcpClient_entry *layer3.Ipv6DhcpClient
	if o.DhcpClient != nil {
		if *obj != nil && (*obj).DhcpClient != nil {
			dhcpClient_entry = (*obj).DhcpClient
		} else {
			dhcpClient_entry = new(layer3.Ipv6DhcpClient)
		}
		// ModelOrObject: Object
		diags.Append(o.DhcpClient.CopyToPango(ctx, append(ancestors, o), &dhcpClient_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	enabled_value := o.Enabled.ValueBoolPointer()
	var inherited_entry *layer3.Ipv6Inherited
	if o.Inherited != nil {
		if *obj != nil && (*obj).Inherited != nil {
			inherited_entry = (*obj).Inherited
		} else {
			inherited_entry = new(layer3.Ipv6Inherited)
		}
		// ModelOrObject: Object
		diags.Append(o.Inherited.CopyToPango(ctx, append(ancestors, o), &inherited_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	interfaceId_value := o.InterfaceId.ValueStringPointer()
	var neighborDiscovery_entry *layer3.Ipv6NeighborDiscovery
	if o.NeighborDiscovery != nil {
		if *obj != nil && (*obj).NeighborDiscovery != nil {
			neighborDiscovery_entry = (*obj).NeighborDiscovery
		} else {
			neighborDiscovery_entry = new(layer3.Ipv6NeighborDiscovery)
		}
		// ModelOrObject: Object
		diags.Append(o.NeighborDiscovery.CopyToPango(ctx, append(ancestors, o), &neighborDiscovery_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6)
	}
	(*obj).Address = address_pango_entries
	(*obj).DhcpClient = dhcpClient_entry
	(*obj).Enabled = enabled_value
	(*obj).Inherited = inherited_entry
	(*obj).InterfaceId = interfaceId_value
	(*obj).NeighborDiscovery = neighborDiscovery_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6AddressObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6Address, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enableOnInterface_value := o.EnableOnInterface.ValueBoolPointer()
	var prefix_entry *layer3.Ipv6AddressPrefix
	if o.Prefix != nil {
		if *obj != nil && (*obj).Prefix != nil {
			prefix_entry = (*obj).Prefix
		} else {
			prefix_entry = new(layer3.Ipv6AddressPrefix)
		}
		// ModelOrObject: Object
		diags.Append(o.Prefix.CopyToPango(ctx, append(ancestors, o), &prefix_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var anycast_entry *layer3.Ipv6AddressAnycast
	if o.Anycast != nil {
		if *obj != nil && (*obj).Anycast != nil {
			anycast_entry = (*obj).Anycast
		} else {
			anycast_entry = new(layer3.Ipv6AddressAnycast)
		}
		// ModelOrObject: Object
		diags.Append(o.Anycast.CopyToPango(ctx, append(ancestors, o), &anycast_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var advertise_entry *layer3.Ipv6AddressAdvertise
	if o.Advertise != nil {
		if *obj != nil && (*obj).Advertise != nil {
			advertise_entry = (*obj).Advertise
		} else {
			advertise_entry = new(layer3.Ipv6AddressAdvertise)
		}
		// ModelOrObject: Object
		diags.Append(o.Advertise.CopyToPango(ctx, append(ancestors, o), &advertise_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6Address)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).EnableOnInterface = enableOnInterface_value
	(*obj).Prefix = prefix_entry
	(*obj).Anycast = anycast_entry
	(*obj).Advertise = advertise_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6AddressPrefixObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6AddressPrefix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(layer3.Ipv6AddressPrefix)
	}

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6AddressAnycastObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6AddressAnycast, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(layer3.Ipv6AddressAnycast)
	}

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6AddressAdvertiseObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6AddressAdvertise, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	validLifetime_value := o.ValidLifetime.ValueStringPointer()
	preferredLifetime_value := o.PreferredLifetime.ValueStringPointer()
	onlinkFlag_value := o.OnlinkFlag.ValueBoolPointer()
	autoConfigFlag_value := o.AutoConfigFlag.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6AddressAdvertise)
	}
	(*obj).Enable = enable_value
	(*obj).ValidLifetime = validLifetime_value
	(*obj).PreferredLifetime = preferredLifetime_value
	(*obj).OnlinkFlag = onlinkFlag_value
	(*obj).AutoConfigFlag = autoConfigFlag_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClient, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	acceptRaRoute_value := o.AcceptRaRoute.ValueBoolPointer()
	defaultRouteMetric_value := o.DefaultRouteMetric.ValueInt64Pointer()
	enable_value := o.Enable.ValueBoolPointer()
	var neighborDiscovery_entry *layer3.Ipv6DhcpClientNeighborDiscovery
	if o.NeighborDiscovery != nil {
		if *obj != nil && (*obj).NeighborDiscovery != nil {
			neighborDiscovery_entry = (*obj).NeighborDiscovery
		} else {
			neighborDiscovery_entry = new(layer3.Ipv6DhcpClientNeighborDiscovery)
		}
		// ModelOrObject: Object
		diags.Append(o.NeighborDiscovery.CopyToPango(ctx, append(ancestors, o), &neighborDiscovery_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	preference_value := o.Preference.ValueStringPointer()
	var prefixDelegation_entry *layer3.Ipv6DhcpClientPrefixDelegation
	if o.PrefixDelegation != nil {
		if *obj != nil && (*obj).PrefixDelegation != nil {
			prefixDelegation_entry = (*obj).PrefixDelegation
		} else {
			prefixDelegation_entry = new(layer3.Ipv6DhcpClientPrefixDelegation)
		}
		// ModelOrObject: Object
		diags.Append(o.PrefixDelegation.CopyToPango(ctx, append(ancestors, o), &prefixDelegation_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var v6Options_entry *layer3.Ipv6DhcpClientV6Options
	if o.V6Options != nil {
		if *obj != nil && (*obj).V6Options != nil {
			v6Options_entry = (*obj).V6Options
		} else {
			v6Options_entry = new(layer3.Ipv6DhcpClientV6Options)
		}
		// ModelOrObject: Object
		diags.Append(o.V6Options.CopyToPango(ctx, append(ancestors, o), &v6Options_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClient)
	}
	(*obj).AcceptRaRoute = acceptRaRoute_value
	(*obj).DefaultRouteMetric = defaultRouteMetric_value
	(*obj).Enable = enable_value
	(*obj).NeighborDiscovery = neighborDiscovery_entry
	(*obj).Preference = preference_value
	(*obj).PrefixDelegation = prefixDelegation_entry
	(*obj).V6Options = v6Options_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscovery, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	dadAttempts_value := o.DadAttempts.ValueInt64Pointer()
	var dnsServer_entry *layer3.Ipv6DhcpClientNeighborDiscoveryDnsServer
	if o.DnsServer != nil {
		if *obj != nil && (*obj).DnsServer != nil {
			dnsServer_entry = (*obj).DnsServer
		} else {
			dnsServer_entry = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsServer)
		}
		// ModelOrObject: Object
		diags.Append(o.DnsServer.CopyToPango(ctx, append(ancestors, o), &dnsServer_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var dnsSuffix_entry *layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffix
	if o.DnsSuffix != nil {
		if *obj != nil && (*obj).DnsSuffix != nil {
			dnsSuffix_entry = (*obj).DnsSuffix
		} else {
			dnsSuffix_entry = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffix)
		}
		// ModelOrObject: Object
		diags.Append(o.DnsSuffix.CopyToPango(ctx, append(ancestors, o), &dnsSuffix_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	enableDad_value := o.EnableDad.ValueBoolPointer()
	enableNdpMonitor_value := o.EnableNdpMonitor.ValueBoolPointer()
	var neighbor_tf_entries []EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryNeighborObject
	var neighbor_pango_entries []layer3.Ipv6DhcpClientNeighborDiscoveryNeighbor
	{
		d := o.Neighbor.ElementsAs(ctx, &neighbor_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range neighbor_tf_entries {
			var entry *layer3.Ipv6DhcpClientNeighborDiscoveryNeighbor
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			neighbor_pango_entries = append(neighbor_pango_entries, *entry)
		}
	}
	nsInterval_value := o.NsInterval.ValueInt64Pointer()
	reachableTime_value := o.ReachableTime.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscovery)
	}
	(*obj).DadAttempts = dadAttempts_value
	(*obj).DnsServer = dnsServer_entry
	(*obj).DnsSuffix = dnsSuffix_entry
	(*obj).EnableDad = enableDad_value
	(*obj).EnableNdpMonitor = enableNdpMonitor_value
	(*obj).Neighbor = neighbor_pango_entries
	(*obj).NsInterval = nsInterval_value
	(*obj).ReachableTime = reachableTime_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscoveryDnsServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	var source_entry *layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSource
	if o.Source != nil {
		if *obj != nil && (*obj).Source != nil {
			source_entry = (*obj).Source
		} else {
			source_entry = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSource)
		}
		// ModelOrObject: Object
		diags.Append(o.Source.CopyToPango(ctx, append(ancestors, o), &source_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsServer)
	}
	(*obj).Enable = enable_value
	(*obj).Source = source_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSource, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dhcpv6_entry *layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6
	if o.Dhcpv6 != nil {
		if *obj != nil && (*obj).Dhcpv6 != nil {
			dhcpv6_entry = (*obj).Dhcpv6
		} else {
			dhcpv6_entry = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6)
		}
		// ModelOrObject: Object
		diags.Append(o.Dhcpv6.CopyToPango(ctx, append(ancestors, o), &dhcpv6_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var manual_entry *layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceManual
	if o.Manual != nil {
		if *obj != nil && (*obj).Manual != nil {
			manual_entry = (*obj).Manual
		} else {
			manual_entry = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceManual)
		}
		// ModelOrObject: Object
		diags.Append(o.Manual.CopyToPango(ctx, append(ancestors, o), &manual_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSource)
	}
	(*obj).Dhcpv6 = dhcpv6_entry
	(*obj).Manual = manual_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Object) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6)
	}

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceManual, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var server_tf_entries []EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerObject
	var server_pango_entries []layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceManualServer
	{
		d := o.Server.ElementsAs(ctx, &server_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range server_tf_entries {
			var entry *layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceManualServer
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			server_pango_entries = append(server_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceManual)
	}
	(*obj).Server = server_pango_entries

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceManualServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	lifetime_value := o.Lifetime.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceManualServer)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Lifetime = lifetime_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	var source_entry *layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSource
	if o.Source != nil {
		if *obj != nil && (*obj).Source != nil {
			source_entry = (*obj).Source
		} else {
			source_entry = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSource)
		}
		// ModelOrObject: Object
		diags.Append(o.Source.CopyToPango(ctx, append(ancestors, o), &source_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffix)
	}
	(*obj).Enable = enable_value
	(*obj).Source = source_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSource, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dhcpv6_entry *layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6
	if o.Dhcpv6 != nil {
		if *obj != nil && (*obj).Dhcpv6 != nil {
			dhcpv6_entry = (*obj).Dhcpv6
		} else {
			dhcpv6_entry = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6)
		}
		// ModelOrObject: Object
		diags.Append(o.Dhcpv6.CopyToPango(ctx, append(ancestors, o), &dhcpv6_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var manual_entry *layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceManual
	if o.Manual != nil {
		if *obj != nil && (*obj).Manual != nil {
			manual_entry = (*obj).Manual
		} else {
			manual_entry = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceManual)
		}
		// ModelOrObject: Object
		diags.Append(o.Manual.CopyToPango(ctx, append(ancestors, o), &manual_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSource)
	}
	(*obj).Dhcpv6 = dhcpv6_entry
	(*obj).Manual = manual_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Object) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6)
	}

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceManual, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var suffix_tf_entries []EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixObject
	var suffix_pango_entries []layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffix
	{
		d := o.Suffix.ElementsAs(ctx, &suffix_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range suffix_tf_entries {
			var entry *layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffix
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			suffix_pango_entries = append(suffix_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceManual)
	}
	(*obj).Suffix = suffix_pango_entries

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	lifetime_value := o.Lifetime.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffix)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Lifetime = lifetime_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryNeighborObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscoveryNeighbor, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	hwAddress_value := o.HwAddress.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscoveryNeighbor)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).HwAddress = hwAddress_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientPrefixDelegation, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var enable_entry *layer3.Ipv6DhcpClientPrefixDelegationEnable
	if o.Enable != nil {
		if *obj != nil && (*obj).Enable != nil {
			enable_entry = (*obj).Enable
		} else {
			enable_entry = new(layer3.Ipv6DhcpClientPrefixDelegationEnable)
		}
		// ModelOrObject: Object
		diags.Append(o.Enable.CopyToPango(ctx, append(ancestors, o), &enable_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientPrefixDelegation)
	}
	(*obj).Enable = enable_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientPrefixDelegationEnable, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var no_entry *layer3.Ipv6DhcpClientPrefixDelegationEnableNo
	if o.No != nil {
		if *obj != nil && (*obj).No != nil {
			no_entry = (*obj).No
		} else {
			no_entry = new(layer3.Ipv6DhcpClientPrefixDelegationEnableNo)
		}
		// ModelOrObject: Object
		diags.Append(o.No.CopyToPango(ctx, append(ancestors, o), &no_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var yes_entry *layer3.Ipv6DhcpClientPrefixDelegationEnableYes
	if o.Yes != nil {
		if *obj != nil && (*obj).Yes != nil {
			yes_entry = (*obj).Yes
		} else {
			yes_entry = new(layer3.Ipv6DhcpClientPrefixDelegationEnableYes)
		}
		// ModelOrObject: Object
		diags.Append(o.Yes.CopyToPango(ctx, append(ancestors, o), &yes_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientPrefixDelegationEnable)
	}
	(*obj).No = no_entry
	(*obj).Yes = yes_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableNoObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientPrefixDelegationEnableNo, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientPrefixDelegationEnableNo)
	}

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableYesObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientPrefixDelegationEnableYes, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	pfxPoolName_value := o.PfxPoolName.ValueStringPointer()
	prefixLen_value := o.PrefixLen.ValueInt64Pointer()
	prefixLenHint_value := o.PrefixLenHint.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientPrefixDelegationEnableYes)
	}
	(*obj).PfxPoolName = pfxPoolName_value
	(*obj).PrefixLen = prefixLen_value
	(*obj).PrefixLenHint = prefixLenHint_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientV6Options, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	duidType_value := o.DuidType.ValueStringPointer()
	var enable_entry *layer3.Ipv6DhcpClientV6OptionsEnable
	if o.Enable != nil {
		if *obj != nil && (*obj).Enable != nil {
			enable_entry = (*obj).Enable
		} else {
			enable_entry = new(layer3.Ipv6DhcpClientV6OptionsEnable)
		}
		// ModelOrObject: Object
		diags.Append(o.Enable.CopyToPango(ctx, append(ancestors, o), &enable_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	rapidCommit_value := o.RapidCommit.ValueBoolPointer()
	supportSrvrReconfig_value := o.SupportSrvrReconfig.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientV6Options)
	}
	(*obj).DuidType = duidType_value
	(*obj).Enable = enable_entry
	(*obj).RapidCommit = rapidCommit_value
	(*obj).SupportSrvrReconfig = supportSrvrReconfig_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientV6OptionsEnable, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var no_entry *layer3.Ipv6DhcpClientV6OptionsEnableNo
	if o.No != nil {
		if *obj != nil && (*obj).No != nil {
			no_entry = (*obj).No
		} else {
			no_entry = new(layer3.Ipv6DhcpClientV6OptionsEnableNo)
		}
		// ModelOrObject: Object
		diags.Append(o.No.CopyToPango(ctx, append(ancestors, o), &no_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var yes_entry *layer3.Ipv6DhcpClientV6OptionsEnableYes
	if o.Yes != nil {
		if *obj != nil && (*obj).Yes != nil {
			yes_entry = (*obj).Yes
		} else {
			yes_entry = new(layer3.Ipv6DhcpClientV6OptionsEnableYes)
		}
		// ModelOrObject: Object
		diags.Append(o.Yes.CopyToPango(ctx, append(ancestors, o), &yes_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientV6OptionsEnable)
	}
	(*obj).No = no_entry
	(*obj).Yes = yes_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableNoObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientV6OptionsEnableNo, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientV6OptionsEnableNo)
	}

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableYesObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientV6OptionsEnableYes, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	nonTempAddr_value := o.NonTempAddr.ValueBoolPointer()
	tempAddr_value := o.TempAddr.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientV6OptionsEnableYes)
	}
	(*obj).NonTempAddr = nonTempAddr_value
	(*obj).TempAddr = tempAddr_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6Inherited, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var assignAddr_tf_entries []EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrObject
	var assignAddr_pango_entries []layer3.Ipv6InheritedAssignAddr
	{
		d := o.AssignAddr.ElementsAs(ctx, &assignAddr_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range assignAddr_tf_entries {
			var entry *layer3.Ipv6InheritedAssignAddr
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			assignAddr_pango_entries = append(assignAddr_pango_entries, *entry)
		}
	}
	enable_value := o.Enable.ValueBoolPointer()
	var neighborDiscovery_entry *layer3.Ipv6InheritedNeighborDiscovery
	if o.NeighborDiscovery != nil {
		if *obj != nil && (*obj).NeighborDiscovery != nil {
			neighborDiscovery_entry = (*obj).NeighborDiscovery
		} else {
			neighborDiscovery_entry = new(layer3.Ipv6InheritedNeighborDiscovery)
		}
		// ModelOrObject: Object
		diags.Append(o.NeighborDiscovery.CopyToPango(ctx, append(ancestors, o), &neighborDiscovery_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6Inherited)
	}
	(*obj).AssignAddr = assignAddr_pango_entries
	(*obj).Enable = enable_value
	(*obj).NeighborDiscovery = neighborDiscovery_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedAssignAddr, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var type_entry *layer3.Ipv6InheritedAssignAddrType
	if o.Type != nil {
		if *obj != nil && (*obj).Type != nil {
			type_entry = (*obj).Type
		} else {
			type_entry = new(layer3.Ipv6InheritedAssignAddrType)
		}
		// ModelOrObject: Object
		diags.Append(o.Type.CopyToPango(ctx, append(ancestors, o), &type_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedAssignAddr)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Type = type_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedAssignAddrType, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var gua_entry *layer3.Ipv6InheritedAssignAddrTypeGua
	if o.Gua != nil {
		if *obj != nil && (*obj).Gua != nil {
			gua_entry = (*obj).Gua
		} else {
			gua_entry = new(layer3.Ipv6InheritedAssignAddrTypeGua)
		}
		// ModelOrObject: Object
		diags.Append(o.Gua.CopyToPango(ctx, append(ancestors, o), &gua_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var ula_entry *layer3.Ipv6InheritedAssignAddrTypeUla
	if o.Ula != nil {
		if *obj != nil && (*obj).Ula != nil {
			ula_entry = (*obj).Ula
		} else {
			ula_entry = new(layer3.Ipv6InheritedAssignAddrTypeUla)
		}
		// ModelOrObject: Object
		diags.Append(o.Ula.CopyToPango(ctx, append(ancestors, o), &ula_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedAssignAddrType)
	}
	(*obj).Gua = gua_entry
	(*obj).Ula = ula_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedAssignAddrTypeGua, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enableOnInterface_value := o.EnableOnInterface.ValueBoolPointer()
	prefixPool_value := o.PrefixPool.ValueStringPointer()
	var poolType_entry *layer3.Ipv6InheritedAssignAddrTypeGuaPoolType
	if o.PoolType != nil {
		if *obj != nil && (*obj).PoolType != nil {
			poolType_entry = (*obj).PoolType
		} else {
			poolType_entry = new(layer3.Ipv6InheritedAssignAddrTypeGuaPoolType)
		}
		// ModelOrObject: Object
		diags.Append(o.PoolType.CopyToPango(ctx, append(ancestors, o), &poolType_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var advertise_entry *layer3.Ipv6InheritedAssignAddrTypeGuaAdvertise
	if o.Advertise != nil {
		if *obj != nil && (*obj).Advertise != nil {
			advertise_entry = (*obj).Advertise
		} else {
			advertise_entry = new(layer3.Ipv6InheritedAssignAddrTypeGuaAdvertise)
		}
		// ModelOrObject: Object
		diags.Append(o.Advertise.CopyToPango(ctx, append(ancestors, o), &advertise_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedAssignAddrTypeGua)
	}
	(*obj).EnableOnInterface = enableOnInterface_value
	(*obj).PrefixPool = prefixPool_value
	(*obj).PoolType = poolType_entry
	(*obj).Advertise = advertise_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedAssignAddrTypeGuaPoolType, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dynamic_entry *layer3.Ipv6InheritedAssignAddrTypeGuaPoolTypeDynamic
	if o.Dynamic != nil {
		if *obj != nil && (*obj).Dynamic != nil {
			dynamic_entry = (*obj).Dynamic
		} else {
			dynamic_entry = new(layer3.Ipv6InheritedAssignAddrTypeGuaPoolTypeDynamic)
		}
		// ModelOrObject: Object
		diags.Append(o.Dynamic.CopyToPango(ctx, append(ancestors, o), &dynamic_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var dynamicId_entry *layer3.Ipv6InheritedAssignAddrTypeGuaPoolTypeDynamicId
	if o.DynamicId != nil {
		if *obj != nil && (*obj).DynamicId != nil {
			dynamicId_entry = (*obj).DynamicId
		} else {
			dynamicId_entry = new(layer3.Ipv6InheritedAssignAddrTypeGuaPoolTypeDynamicId)
		}
		// ModelOrObject: Object
		diags.Append(o.DynamicId.CopyToPango(ctx, append(ancestors, o), &dynamicId_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedAssignAddrTypeGuaPoolType)
	}
	(*obj).Dynamic = dynamic_entry
	(*obj).DynamicId = dynamicId_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedAssignAddrTypeGuaPoolTypeDynamic, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedAssignAddrTypeGuaPoolTypeDynamic)
	}

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedAssignAddrTypeGuaPoolTypeDynamicId, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	identifier_value := o.Identifier.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedAssignAddrTypeGuaPoolTypeDynamicId)
	}
	(*obj).Identifier = identifier_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaAdvertiseObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedAssignAddrTypeGuaAdvertise, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	onlinkFlag_value := o.OnlinkFlag.ValueBoolPointer()
	autoConfigFlag_value := o.AutoConfigFlag.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedAssignAddrTypeGuaAdvertise)
	}
	(*obj).Enable = enable_value
	(*obj).OnlinkFlag = onlinkFlag_value
	(*obj).AutoConfigFlag = autoConfigFlag_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedAssignAddrTypeUla, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enableOnInterface_value := o.EnableOnInterface.ValueBoolPointer()
	address_value := o.Address.ValueStringPointer()
	prefix_value := o.Prefix.ValueBoolPointer()
	anycast_value := o.Anycast.ValueBoolPointer()
	var advertise_entry *layer3.Ipv6InheritedAssignAddrTypeUlaAdvertise
	if o.Advertise != nil {
		if *obj != nil && (*obj).Advertise != nil {
			advertise_entry = (*obj).Advertise
		} else {
			advertise_entry = new(layer3.Ipv6InheritedAssignAddrTypeUlaAdvertise)
		}
		// ModelOrObject: Object
		diags.Append(o.Advertise.CopyToPango(ctx, append(ancestors, o), &advertise_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedAssignAddrTypeUla)
	}
	(*obj).EnableOnInterface = enableOnInterface_value
	(*obj).Address = address_value
	(*obj).Prefix = prefix_value
	(*obj).Anycast = anycast_value
	(*obj).Advertise = advertise_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaAdvertiseObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedAssignAddrTypeUlaAdvertise, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	validLifetime_value := o.ValidLifetime.ValueStringPointer()
	preferredLifetime_value := o.PreferredLifetime.ValueStringPointer()
	onlinkFlag_value := o.OnlinkFlag.ValueBoolPointer()
	autoConfigFlag_value := o.AutoConfigFlag.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedAssignAddrTypeUlaAdvertise)
	}
	(*obj).Enable = enable_value
	(*obj).ValidLifetime = validLifetime_value
	(*obj).PreferredLifetime = preferredLifetime_value
	(*obj).OnlinkFlag = onlinkFlag_value
	(*obj).AutoConfigFlag = autoConfigFlag_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscovery, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	dadAttempts_value := o.DadAttempts.ValueInt64Pointer()
	var dnsServer_entry *layer3.Ipv6InheritedNeighborDiscoveryDnsServer
	if o.DnsServer != nil {
		if *obj != nil && (*obj).DnsServer != nil {
			dnsServer_entry = (*obj).DnsServer
		} else {
			dnsServer_entry = new(layer3.Ipv6InheritedNeighborDiscoveryDnsServer)
		}
		// ModelOrObject: Object
		diags.Append(o.DnsServer.CopyToPango(ctx, append(ancestors, o), &dnsServer_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var dnsSuffix_entry *layer3.Ipv6InheritedNeighborDiscoveryDnsSuffix
	if o.DnsSuffix != nil {
		if *obj != nil && (*obj).DnsSuffix != nil {
			dnsSuffix_entry = (*obj).DnsSuffix
		} else {
			dnsSuffix_entry = new(layer3.Ipv6InheritedNeighborDiscoveryDnsSuffix)
		}
		// ModelOrObject: Object
		diags.Append(o.DnsSuffix.CopyToPango(ctx, append(ancestors, o), &dnsSuffix_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	enableDad_value := o.EnableDad.ValueBoolPointer()
	enableNdpMonitor_value := o.EnableNdpMonitor.ValueBoolPointer()
	var neighbor_tf_entries []EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryNeighborObject
	var neighbor_pango_entries []layer3.Ipv6InheritedNeighborDiscoveryNeighbor
	{
		d := o.Neighbor.ElementsAs(ctx, &neighbor_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range neighbor_tf_entries {
			var entry *layer3.Ipv6InheritedNeighborDiscoveryNeighbor
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			neighbor_pango_entries = append(neighbor_pango_entries, *entry)
		}
	}
	nsInterval_value := o.NsInterval.ValueInt64Pointer()
	reachableTime_value := o.ReachableTime.ValueInt64Pointer()
	var routerAdvertisement_entry *layer3.Ipv6InheritedNeighborDiscoveryRouterAdvertisement
	if o.RouterAdvertisement != nil {
		if *obj != nil && (*obj).RouterAdvertisement != nil {
			routerAdvertisement_entry = (*obj).RouterAdvertisement
		} else {
			routerAdvertisement_entry = new(layer3.Ipv6InheritedNeighborDiscoveryRouterAdvertisement)
		}
		// ModelOrObject: Object
		diags.Append(o.RouterAdvertisement.CopyToPango(ctx, append(ancestors, o), &routerAdvertisement_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscovery)
	}
	(*obj).DadAttempts = dadAttempts_value
	(*obj).DnsServer = dnsServer_entry
	(*obj).DnsSuffix = dnsSuffix_entry
	(*obj).EnableDad = enableDad_value
	(*obj).EnableNdpMonitor = enableNdpMonitor_value
	(*obj).Neighbor = neighbor_pango_entries
	(*obj).NsInterval = nsInterval_value
	(*obj).ReachableTime = reachableTime_value
	(*obj).RouterAdvertisement = routerAdvertisement_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryDnsServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	var source_entry *layer3.Ipv6InheritedNeighborDiscoveryDnsServerSource
	if o.Source != nil {
		if *obj != nil && (*obj).Source != nil {
			source_entry = (*obj).Source
		} else {
			source_entry = new(layer3.Ipv6InheritedNeighborDiscoveryDnsServerSource)
		}
		// ModelOrObject: Object
		diags.Append(o.Source.CopyToPango(ctx, append(ancestors, o), &source_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryDnsServer)
	}
	(*obj).Enable = enable_value
	(*obj).Source = source_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryDnsServerSource, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dhcpv6_entry *layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6
	if o.Dhcpv6 != nil {
		if *obj != nil && (*obj).Dhcpv6 != nil {
			dhcpv6_entry = (*obj).Dhcpv6
		} else {
			dhcpv6_entry = new(layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6)
		}
		// ModelOrObject: Object
		diags.Append(o.Dhcpv6.CopyToPango(ctx, append(ancestors, o), &dhcpv6_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var manual_entry *layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceManual
	if o.Manual != nil {
		if *obj != nil && (*obj).Manual != nil {
			manual_entry = (*obj).Manual
		} else {
			manual_entry = new(layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceManual)
		}
		// ModelOrObject: Object
		diags.Append(o.Manual.CopyToPango(ctx, append(ancestors, o), &manual_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryDnsServerSource)
	}
	(*obj).Dhcpv6 = dhcpv6_entry
	(*obj).Manual = manual_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Object) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	prefixPool_value := o.PrefixPool.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6)
	}
	(*obj).PrefixPool = prefixPool_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceManual, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var server_tf_entries []EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerObject
	var server_pango_entries []layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceManualServer
	{
		d := o.Server.ElementsAs(ctx, &server_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range server_tf_entries {
			var entry *layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceManualServer
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			server_pango_entries = append(server_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceManual)
	}
	(*obj).Server = server_pango_entries

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceManualServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	lifetime_value := o.Lifetime.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceManualServer)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Lifetime = lifetime_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryDnsSuffix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	var source_entry *layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSource
	if o.Source != nil {
		if *obj != nil && (*obj).Source != nil {
			source_entry = (*obj).Source
		} else {
			source_entry = new(layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSource)
		}
		// ModelOrObject: Object
		diags.Append(o.Source.CopyToPango(ctx, append(ancestors, o), &source_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryDnsSuffix)
	}
	(*obj).Enable = enable_value
	(*obj).Source = source_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSource, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dhcpv6_entry *layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6
	if o.Dhcpv6 != nil {
		if *obj != nil && (*obj).Dhcpv6 != nil {
			dhcpv6_entry = (*obj).Dhcpv6
		} else {
			dhcpv6_entry = new(layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6)
		}
		// ModelOrObject: Object
		diags.Append(o.Dhcpv6.CopyToPango(ctx, append(ancestors, o), &dhcpv6_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var manual_entry *layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceManual
	if o.Manual != nil {
		if *obj != nil && (*obj).Manual != nil {
			manual_entry = (*obj).Manual
		} else {
			manual_entry = new(layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceManual)
		}
		// ModelOrObject: Object
		diags.Append(o.Manual.CopyToPango(ctx, append(ancestors, o), &manual_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSource)
	}
	(*obj).Dhcpv6 = dhcpv6_entry
	(*obj).Manual = manual_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Object) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	prefixPool_value := o.PrefixPool.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6)
	}
	(*obj).PrefixPool = prefixPool_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceManual, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var suffix_tf_entries []EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixObject
	var suffix_pango_entries []layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffix
	{
		d := o.Suffix.ElementsAs(ctx, &suffix_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range suffix_tf_entries {
			var entry *layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffix
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			suffix_pango_entries = append(suffix_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceManual)
	}
	(*obj).Suffix = suffix_pango_entries

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	lifetime_value := o.Lifetime.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffix)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Lifetime = lifetime_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryNeighborObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryNeighbor, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	hwAddress_value := o.HwAddress.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryNeighbor)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).HwAddress = hwAddress_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryRouterAdvertisementObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryRouterAdvertisement, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	enableConsistencyCheck_value := o.EnableConsistencyCheck.ValueBoolPointer()
	hopLimit_value := o.HopLimit.ValueStringPointer()
	lifetime_value := o.Lifetime.ValueInt64Pointer()
	linkMtu_value := o.LinkMtu.ValueStringPointer()
	managedFlag_value := o.ManagedFlag.ValueBoolPointer()
	maxInterval_value := o.MaxInterval.ValueInt64Pointer()
	minInterval_value := o.MinInterval.ValueInt64Pointer()
	otherFlag_value := o.OtherFlag.ValueBoolPointer()
	reachableTime_value := o.ReachableTime.ValueStringPointer()
	retransmissionTimer_value := o.RetransmissionTimer.ValueStringPointer()
	routerPreference_value := o.RouterPreference.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryRouterAdvertisement)
	}
	(*obj).Enable = enable_value
	(*obj).EnableConsistencyCheck = enableConsistencyCheck_value
	(*obj).HopLimit = hopLimit_value
	(*obj).Lifetime = lifetime_value
	(*obj).LinkMtu = linkMtu_value
	(*obj).ManagedFlag = managedFlag_value
	(*obj).MaxInterval = maxInterval_value
	(*obj).MinInterval = minInterval_value
	(*obj).OtherFlag = otherFlag_value
	(*obj).ReachableTime = reachableTime_value
	(*obj).RetransmissionTimer = retransmissionTimer_value
	(*obj).RouterPreference = routerPreference_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6NeighborDiscovery, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	dadAttempts_value := o.DadAttempts.ValueInt64Pointer()
	enableDad_value := o.EnableDad.ValueBoolPointer()
	enableNdpMonitor_value := o.EnableNdpMonitor.ValueBoolPointer()
	var neighbor_tf_entries []EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryNeighborObject
	var neighbor_pango_entries []layer3.Ipv6NeighborDiscoveryNeighbor
	{
		d := o.Neighbor.ElementsAs(ctx, &neighbor_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range neighbor_tf_entries {
			var entry *layer3.Ipv6NeighborDiscoveryNeighbor
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			neighbor_pango_entries = append(neighbor_pango_entries, *entry)
		}
	}
	nsInterval_value := o.NsInterval.ValueInt64Pointer()
	reachableTime_value := o.ReachableTime.ValueInt64Pointer()
	var routerAdvertisement_entry *layer3.Ipv6NeighborDiscoveryRouterAdvertisement
	if o.RouterAdvertisement != nil {
		if *obj != nil && (*obj).RouterAdvertisement != nil {
			routerAdvertisement_entry = (*obj).RouterAdvertisement
		} else {
			routerAdvertisement_entry = new(layer3.Ipv6NeighborDiscoveryRouterAdvertisement)
		}
		// ModelOrObject: Object
		diags.Append(o.RouterAdvertisement.CopyToPango(ctx, append(ancestors, o), &routerAdvertisement_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6NeighborDiscovery)
	}
	(*obj).DadAttempts = dadAttempts_value
	(*obj).EnableDad = enableDad_value
	(*obj).EnableNdpMonitor = enableNdpMonitor_value
	(*obj).Neighbor = neighbor_pango_entries
	(*obj).NsInterval = nsInterval_value
	(*obj).ReachableTime = reachableTime_value
	(*obj).RouterAdvertisement = routerAdvertisement_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryNeighborObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6NeighborDiscoveryNeighbor, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	hwAddress_value := o.HwAddress.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6NeighborDiscoveryNeighbor)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).HwAddress = hwAddress_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6NeighborDiscoveryRouterAdvertisement, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dnsSupport_entry *layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupport
	if o.DnsSupport != nil {
		if *obj != nil && (*obj).DnsSupport != nil {
			dnsSupport_entry = (*obj).DnsSupport
		} else {
			dnsSupport_entry = new(layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupport)
		}
		// ModelOrObject: Object
		diags.Append(o.DnsSupport.CopyToPango(ctx, append(ancestors, o), &dnsSupport_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	enable_value := o.Enable.ValueBoolPointer()
	enableConsistencyCheck_value := o.EnableConsistencyCheck.ValueBoolPointer()
	hopLimit_value := o.HopLimit.ValueStringPointer()
	lifetime_value := o.Lifetime.ValueInt64Pointer()
	linkMtu_value := o.LinkMtu.ValueStringPointer()
	managedFlag_value := o.ManagedFlag.ValueBoolPointer()
	maxInterval_value := o.MaxInterval.ValueInt64Pointer()
	minInterval_value := o.MinInterval.ValueInt64Pointer()
	otherFlag_value := o.OtherFlag.ValueBoolPointer()
	reachableTime_value := o.ReachableTime.ValueStringPointer()
	retransmissionTimer_value := o.RetransmissionTimer.ValueStringPointer()
	routerPreference_value := o.RouterPreference.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6NeighborDiscoveryRouterAdvertisement)
	}
	(*obj).DnsSupport = dnsSupport_entry
	(*obj).Enable = enable_value
	(*obj).EnableConsistencyCheck = enableConsistencyCheck_value
	(*obj).HopLimit = hopLimit_value
	(*obj).Lifetime = lifetime_value
	(*obj).LinkMtu = linkMtu_value
	(*obj).ManagedFlag = managedFlag_value
	(*obj).MaxInterval = maxInterval_value
	(*obj).MinInterval = minInterval_value
	(*obj).OtherFlag = otherFlag_value
	(*obj).ReachableTime = reachableTime_value
	(*obj).RetransmissionTimer = retransmissionTimer_value
	(*obj).RouterPreference = routerPreference_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupport, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	var server_tf_entries []EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerObject
	var server_pango_entries []layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupportServer
	{
		d := o.Server.ElementsAs(ctx, &server_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range server_tf_entries {
			var entry *layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupportServer
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			server_pango_entries = append(server_pango_entries, *entry)
		}
	}
	var suffix_tf_entries []EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixObject
	var suffix_pango_entries []layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffix
	{
		d := o.Suffix.ElementsAs(ctx, &suffix_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range suffix_tf_entries {
			var entry *layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffix
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			suffix_pango_entries = append(suffix_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupport)
	}
	(*obj).Enable = enable_value
	(*obj).Server = server_pango_entries
	(*obj).Suffix = suffix_pango_entries

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupportServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	lifetime_value := o.Lifetime.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupportServer)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Lifetime = lifetime_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	lifetime_value := o.Lifetime.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffix)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Lifetime = lifetime_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceNdpProxyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.NdpProxy, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var address_tf_entries []EthernetLayer3SubinterfaceDataSourceNdpProxyAddressObject
	var address_pango_entries []layer3.NdpProxyAddress
	{
		d := o.Address.ElementsAs(ctx, &address_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range address_tf_entries {
			var entry *layer3.NdpProxyAddress
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			address_pango_entries = append(address_pango_entries, *entry)
		}
	}
	enabled_value := o.Enabled.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(layer3.NdpProxy)
	}
	(*obj).Address = address_pango_entries
	(*obj).Enabled = enabled_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceNdpProxyAddressObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.NdpProxyAddress, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	negate_value := o.Negate.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(layer3.NdpProxyAddress)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Negate = negate_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourcePppoeObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Pppoe, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	accessConcentrator_value := o.AccessConcentrator.ValueStringPointer()
	authentication_value := o.Authentication.ValueStringPointer()
	createDefaultRoute_value := o.CreateDefaultRoute.ValueBoolPointer()
	defaultRouteMetric_value := o.DefaultRouteMetric.ValueInt64Pointer()
	enable_value := o.Enable.ValueBoolPointer()
	var passive_entry *layer3.PppoePassive
	if o.Passive != nil {
		if *obj != nil && (*obj).Passive != nil {
			passive_entry = (*obj).Passive
		} else {
			passive_entry = new(layer3.PppoePassive)
		}
		// ModelOrObject: Object
		diags.Append(o.Passive.CopyToPango(ctx, append(ancestors, o), &passive_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
	if err != nil {
		diags.AddError("Failed to create encrypted values state key", err.Error())
		return diags
	}

	var password_value *string
	err = ev.StorePlaintextValue(valueKey, "solo", o.Password.ValueString())
	if err != nil {
		diags.AddError("Failed to manage encrypted values state", err.Error())
		return diags
	}
	password_value = o.Password.ValueStringPointer()
	service_value := o.Service.ValueStringPointer()
	var staticAddress_entry *layer3.PppoeStaticAddress
	if o.StaticAddress != nil {
		if *obj != nil && (*obj).StaticAddress != nil {
			staticAddress_entry = (*obj).StaticAddress
		} else {
			staticAddress_entry = new(layer3.PppoeStaticAddress)
		}
		// ModelOrObject: Object
		diags.Append(o.StaticAddress.CopyToPango(ctx, append(ancestors, o), &staticAddress_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	username_value := o.Username.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.Pppoe)
	}
	(*obj).AccessConcentrator = accessConcentrator_value
	(*obj).Authentication = authentication_value
	(*obj).CreateDefaultRoute = createDefaultRoute_value
	(*obj).DefaultRouteMetric = defaultRouteMetric_value
	(*obj).Enable = enable_value
	(*obj).Passive = passive_entry
	(*obj).Password = password_value
	(*obj).Service = service_value
	(*obj).StaticAddress = staticAddress_entry
	(*obj).Username = username_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourcePppoePassiveObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.PppoePassive, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(layer3.PppoePassive)
	}
	(*obj).Enable = enable_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourcePppoeStaticAddressObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.PppoeStaticAddress, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	ip_value := o.Ip.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.PppoeStaticAddress)
	}
	(*obj).Ip = ip_value

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.SdwanLinkSettings, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	sdwanInterfaceProfile_value := o.SdwanInterfaceProfile.ValueStringPointer()
	var upstreamNat_entry *layer3.SdwanLinkSettingsUpstreamNat
	if o.UpstreamNat != nil {
		if *obj != nil && (*obj).UpstreamNat != nil {
			upstreamNat_entry = (*obj).UpstreamNat
		} else {
			upstreamNat_entry = new(layer3.SdwanLinkSettingsUpstreamNat)
		}
		// ModelOrObject: Object
		diags.Append(o.UpstreamNat.CopyToPango(ctx, append(ancestors, o), &upstreamNat_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.SdwanLinkSettings)
	}
	(*obj).Enable = enable_value
	(*obj).SdwanInterfaceProfile = sdwanInterfaceProfile_value
	(*obj).UpstreamNat = upstreamNat_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.SdwanLinkSettingsUpstreamNat, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	var ddns_entry *layer3.SdwanLinkSettingsUpstreamNatDdns
	if o.Ddns != nil {
		if *obj != nil && (*obj).Ddns != nil {
			ddns_entry = (*obj).Ddns
		} else {
			ddns_entry = new(layer3.SdwanLinkSettingsUpstreamNatDdns)
		}
		// ModelOrObject: Object
		diags.Append(o.Ddns.CopyToPango(ctx, append(ancestors, o), &ddns_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var staticIp_entry *layer3.SdwanLinkSettingsUpstreamNatStaticIp
	if o.StaticIp != nil {
		if *obj != nil && (*obj).StaticIp != nil {
			staticIp_entry = (*obj).StaticIp
		} else {
			staticIp_entry = new(layer3.SdwanLinkSettingsUpstreamNatStaticIp)
		}
		// ModelOrObject: Object
		diags.Append(o.StaticIp.CopyToPango(ctx, append(ancestors, o), &staticIp_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.SdwanLinkSettingsUpstreamNat)
	}
	(*obj).Enable = enable_value
	(*obj).Ddns = ddns_entry
	(*obj).StaticIp = staticIp_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatDdnsObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.SdwanLinkSettingsUpstreamNatDdns, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(layer3.SdwanLinkSettingsUpstreamNatDdns)
	}

	return diags
}
func (o *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatStaticIpObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.SdwanLinkSettingsUpstreamNatStaticIp, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	fqdn_value := o.Fqdn.ValueStringPointer()
	ipAddress_value := o.IpAddress.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.SdwanLinkSettingsUpstreamNatStaticIp)
	}
	(*obj).Fqdn = fqdn_value
	(*obj).IpAddress = ipAddress_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceModel) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var arp_list types.List
	{
		var arp_tf_entries []EthernetLayer3SubinterfaceDataSourceArpObject
		for _, elt := range obj.Arp {
			entry := EthernetLayer3SubinterfaceDataSourceArpObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			arp_tf_entries = append(arp_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("arp")
		arp_list, list_diags = types.ListValueFrom(ctx, schemaType, arp_tf_entries)
		diags.Append(list_diags...)
	}
	var ip_list types.List
	{
		var ip_tf_entries []EthernetLayer3SubinterfaceDataSourceIpObject
		for _, elt := range obj.Ip {
			entry := EthernetLayer3SubinterfaceDataSourceIpObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			ip_tf_entries = append(ip_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("ip")
		ip_list, list_diags = types.ListValueFrom(ctx, schemaType, ip_tf_entries)
		diags.Append(list_diags...)
	}
	var adjustTcpMss_object *EthernetLayer3SubinterfaceDataSourceAdjustTcpMssObject
	if obj.AdjustTcpMss != nil {
		adjustTcpMss_object = new(EthernetLayer3SubinterfaceDataSourceAdjustTcpMssObject)
		diags.Append(adjustTcpMss_object.CopyFromPango(ctx, ancestors, obj.AdjustTcpMss, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var bonjour_object *EthernetLayer3SubinterfaceDataSourceBonjourObject
	if obj.Bonjour != nil {
		bonjour_object = new(EthernetLayer3SubinterfaceDataSourceBonjourObject)
		diags.Append(bonjour_object.CopyFromPango(ctx, ancestors, obj.Bonjour, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var ddnsConfig_object *EthernetLayer3SubinterfaceDataSourceDdnsConfigObject
	if obj.DdnsConfig != nil {
		ddnsConfig_object = new(EthernetLayer3SubinterfaceDataSourceDdnsConfigObject)
		diags.Append(ddnsConfig_object.CopyFromPango(ctx, ancestors, obj.DdnsConfig, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var dhcpClient_object *EthernetLayer3SubinterfaceDataSourceDhcpClientObject
	if obj.DhcpClient != nil {
		dhcpClient_object = new(EthernetLayer3SubinterfaceDataSourceDhcpClientObject)
		diags.Append(dhcpClient_object.CopyFromPango(ctx, ancestors, obj.DhcpClient, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var ipv6_object *EthernetLayer3SubinterfaceDataSourceIpv6Object
	if obj.Ipv6 != nil {
		ipv6_object = new(EthernetLayer3SubinterfaceDataSourceIpv6Object)
		diags.Append(ipv6_object.CopyFromPango(ctx, ancestors, obj.Ipv6, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var ndpProxy_object *EthernetLayer3SubinterfaceDataSourceNdpProxyObject
	if obj.NdpProxy != nil {
		ndpProxy_object = new(EthernetLayer3SubinterfaceDataSourceNdpProxyObject)
		diags.Append(ndpProxy_object.CopyFromPango(ctx, ancestors, obj.NdpProxy, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var pppoe_object *EthernetLayer3SubinterfaceDataSourcePppoeObject
	if obj.Pppoe != nil {
		pppoe_object = new(EthernetLayer3SubinterfaceDataSourcePppoeObject)
		diags.Append(pppoe_object.CopyFromPango(ctx, ancestors, obj.Pppoe, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var sdwanLinkSettings_object *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsObject
	if obj.SdwanLinkSettings != nil {
		sdwanLinkSettings_object = new(EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsObject)
		diags.Append(sdwanLinkSettings_object.CopyFromPango(ctx, ancestors, obj.SdwanLinkSettings, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var comment_value types.String
	if obj.Comment != nil {
		comment_value = types.StringValue(*obj.Comment)
	}
	var decryptForward_value types.Bool
	if obj.DecryptForward != nil {
		decryptForward_value = types.BoolValue(*obj.DecryptForward)
	}
	var dfIgnore_value types.Bool
	if obj.DfIgnore != nil {
		dfIgnore_value = types.BoolValue(*obj.DfIgnore)
	}
	var interfaceManagementProfile_value types.String
	if obj.InterfaceManagementProfile != nil {
		interfaceManagementProfile_value = types.StringValue(*obj.InterfaceManagementProfile)
	}
	var mtu_value types.Int64
	if obj.Mtu != nil {
		mtu_value = types.Int64Value(*obj.Mtu)
	}
	var netflowProfile_value types.String
	if obj.NetflowProfile != nil {
		netflowProfile_value = types.StringValue(*obj.NetflowProfile)
	}
	var tag_value types.Int64
	if obj.Tag != nil {
		tag_value = types.Int64Value(*obj.Tag)
	}
	o.Name = types.StringValue(obj.Name)
	o.AdjustTcpMss = adjustTcpMss_object
	o.Arp = arp_list
	o.Bonjour = bonjour_object
	o.Comment = comment_value
	o.DdnsConfig = ddnsConfig_object
	o.DecryptForward = decryptForward_value
	o.DfIgnore = dfIgnore_value
	o.DhcpClient = dhcpClient_object
	o.InterfaceManagementProfile = interfaceManagementProfile_value
	o.Ip = ip_list
	o.Ipv6 = ipv6_object
	o.Mtu = mtu_value
	o.NdpProxy = ndpProxy_object
	o.NetflowProfile = netflowProfile_value
	o.Pppoe = pppoe_object
	o.SdwanLinkSettings = sdwanLinkSettings_object
	o.Tag = tag_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceAdjustTcpMssObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.AdjustTcpMss, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var ipv4MssAdjustment_value types.Int64
	if obj.Ipv4MssAdjustment != nil {
		ipv4MssAdjustment_value = types.Int64Value(*obj.Ipv4MssAdjustment)
	}
	var ipv6MssAdjustment_value types.Int64
	if obj.Ipv6MssAdjustment != nil {
		ipv6MssAdjustment_value = types.Int64Value(*obj.Ipv6MssAdjustment)
	}
	o.Enable = enable_value
	o.Ipv4MssAdjustment = ipv4MssAdjustment_value
	o.Ipv6MssAdjustment = ipv6MssAdjustment_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceArpObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Arp, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var hwAddress_value types.String
	if obj.HwAddress != nil {
		hwAddress_value = types.StringValue(*obj.HwAddress)
	}
	o.Name = types.StringValue(obj.Name)
	o.HwAddress = hwAddress_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceBonjourObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Bonjour, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var groupId_value types.Int64
	if obj.GroupId != nil {
		groupId_value = types.Int64Value(*obj.GroupId)
	}
	var ttlCheck_value types.Bool
	if obj.TtlCheck != nil {
		ttlCheck_value = types.BoolValue(*obj.TtlCheck)
	}
	o.Enable = enable_value
	o.GroupId = groupId_value
	o.TtlCheck = ttlCheck_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceDdnsConfigObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.DdnsConfig, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var ddnsIp_list types.List
	{
		var list_diags diag.Diagnostics
		ddnsIp_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DdnsIp)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var ddnsIpv6_list types.List
	{
		var list_diags diag.Diagnostics
		ddnsIpv6_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DdnsIpv6)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var ddnsVendorConfig_list types.List
	{
		var ddnsVendorConfig_tf_entries []EthernetLayer3SubinterfaceDataSourceDdnsConfigDdnsVendorConfigObject
		for _, elt := range obj.DdnsVendorConfig {
			entry := EthernetLayer3SubinterfaceDataSourceDdnsConfigDdnsVendorConfigObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			ddnsVendorConfig_tf_entries = append(ddnsVendorConfig_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("ddns_vendor_config")
		ddnsVendorConfig_list, list_diags = types.ListValueFrom(ctx, schemaType, ddnsVendorConfig_tf_entries)
		diags.Append(list_diags...)
	}

	var ddnsCertProfile_value types.String
	if obj.DdnsCertProfile != nil {
		ddnsCertProfile_value = types.StringValue(*obj.DdnsCertProfile)
	}
	var ddnsEnabled_value types.Bool
	if obj.DdnsEnabled != nil {
		ddnsEnabled_value = types.BoolValue(*obj.DdnsEnabled)
	}
	var ddnsHostname_value types.String
	if obj.DdnsHostname != nil {
		ddnsHostname_value = types.StringValue(*obj.DdnsHostname)
	}
	var ddnsUpdateInterval_value types.Int64
	if obj.DdnsUpdateInterval != nil {
		ddnsUpdateInterval_value = types.Int64Value(*obj.DdnsUpdateInterval)
	}
	var ddnsVendor_value types.String
	if obj.DdnsVendor != nil {
		ddnsVendor_value = types.StringValue(*obj.DdnsVendor)
	}
	o.DdnsCertProfile = ddnsCertProfile_value
	o.DdnsEnabled = ddnsEnabled_value
	o.DdnsHostname = ddnsHostname_value
	o.DdnsIp = ddnsIp_list
	o.DdnsIpv6 = ddnsIpv6_list
	o.DdnsUpdateInterval = ddnsUpdateInterval_value
	o.DdnsVendor = ddnsVendor_value
	o.DdnsVendorConfig = ddnsVendorConfig_list

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceDdnsConfigDdnsVendorConfigObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.DdnsConfigDdnsVendorConfig, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var value_value types.String
	if obj.Value != nil {
		value_value = types.StringValue(*obj.Value)
	}
	o.Name = types.StringValue(obj.Name)
	o.Value = value_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceDhcpClientObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.DhcpClient, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var sendHostname_object *EthernetLayer3SubinterfaceDataSourceDhcpClientSendHostnameObject
	if obj.SendHostname != nil {
		sendHostname_object = new(EthernetLayer3SubinterfaceDataSourceDhcpClientSendHostnameObject)
		diags.Append(sendHostname_object.CopyFromPango(ctx, append(ancestors, o), obj.SendHostname, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var createDefaultRoute_value types.Bool
	if obj.CreateDefaultRoute != nil {
		createDefaultRoute_value = types.BoolValue(*obj.CreateDefaultRoute)
	}
	var defaultRouteMetric_value types.Int64
	if obj.DefaultRouteMetric != nil {
		defaultRouteMetric_value = types.Int64Value(*obj.DefaultRouteMetric)
	}
	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	o.CreateDefaultRoute = createDefaultRoute_value
	o.DefaultRouteMetric = defaultRouteMetric_value
	o.Enable = enable_value
	o.SendHostname = sendHostname_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceDhcpClientSendHostnameObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.DhcpClientSendHostname, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var hostname_value types.String
	if obj.Hostname != nil {
		hostname_value = types.StringValue(*obj.Hostname)
	}
	o.Enable = enable_value
	o.Hostname = hostname_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ip, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var sdwanGateway_value types.String
	if obj.SdwanGateway != nil {
		sdwanGateway_value = types.StringValue(*obj.SdwanGateway)
	}
	o.Name = types.StringValue(obj.Name)
	o.SdwanGateway = sdwanGateway_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6Object) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var address_list types.List
	{
		var address_tf_entries []EthernetLayer3SubinterfaceDataSourceIpv6AddressObject
		for _, elt := range obj.Address {
			entry := EthernetLayer3SubinterfaceDataSourceIpv6AddressObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			address_tf_entries = append(address_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("address")
		address_list, list_diags = types.ListValueFrom(ctx, schemaType, address_tf_entries)
		diags.Append(list_diags...)
	}
	var dhcpClient_object *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientObject
	if obj.DhcpClient != nil {
		dhcpClient_object = new(EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientObject)
		diags.Append(dhcpClient_object.CopyFromPango(ctx, append(ancestors, o), obj.DhcpClient, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var inherited_object *EthernetLayer3SubinterfaceDataSourceIpv6InheritedObject
	if obj.Inherited != nil {
		inherited_object = new(EthernetLayer3SubinterfaceDataSourceIpv6InheritedObject)
		diags.Append(inherited_object.CopyFromPango(ctx, append(ancestors, o), obj.Inherited, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var neighborDiscovery_object *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryObject
	if obj.NeighborDiscovery != nil {
		neighborDiscovery_object = new(EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryObject)
		diags.Append(neighborDiscovery_object.CopyFromPango(ctx, append(ancestors, o), obj.NeighborDiscovery, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enabled_value types.Bool
	if obj.Enabled != nil {
		enabled_value = types.BoolValue(*obj.Enabled)
	}
	var interfaceId_value types.String
	if obj.InterfaceId != nil {
		interfaceId_value = types.StringValue(*obj.InterfaceId)
	}
	o.Address = address_list
	o.DhcpClient = dhcpClient_object
	o.Enabled = enabled_value
	o.Inherited = inherited_object
	o.InterfaceId = interfaceId_value
	o.NeighborDiscovery = neighborDiscovery_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6AddressObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6Address, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var prefix_object *EthernetLayer3SubinterfaceDataSourceIpv6AddressPrefixObject
	if obj.Prefix != nil {
		prefix_object = new(EthernetLayer3SubinterfaceDataSourceIpv6AddressPrefixObject)
		diags.Append(prefix_object.CopyFromPango(ctx, append(ancestors, o), obj.Prefix, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var anycast_object *EthernetLayer3SubinterfaceDataSourceIpv6AddressAnycastObject
	if obj.Anycast != nil {
		anycast_object = new(EthernetLayer3SubinterfaceDataSourceIpv6AddressAnycastObject)
		diags.Append(anycast_object.CopyFromPango(ctx, append(ancestors, o), obj.Anycast, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var advertise_object *EthernetLayer3SubinterfaceDataSourceIpv6AddressAdvertiseObject
	if obj.Advertise != nil {
		advertise_object = new(EthernetLayer3SubinterfaceDataSourceIpv6AddressAdvertiseObject)
		diags.Append(advertise_object.CopyFromPango(ctx, append(ancestors, o), obj.Advertise, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enableOnInterface_value types.Bool
	if obj.EnableOnInterface != nil {
		enableOnInterface_value = types.BoolValue(*obj.EnableOnInterface)
	}
	o.Name = types.StringValue(obj.Name)
	o.EnableOnInterface = enableOnInterface_value
	o.Prefix = prefix_object
	o.Anycast = anycast_object
	o.Advertise = advertise_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6AddressPrefixObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6AddressPrefix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6AddressAnycastObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6AddressAnycast, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6AddressAdvertiseObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6AddressAdvertise, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var validLifetime_value types.String
	if obj.ValidLifetime != nil {
		validLifetime_value = types.StringValue(*obj.ValidLifetime)
	}
	var preferredLifetime_value types.String
	if obj.PreferredLifetime != nil {
		preferredLifetime_value = types.StringValue(*obj.PreferredLifetime)
	}
	var onlinkFlag_value types.Bool
	if obj.OnlinkFlag != nil {
		onlinkFlag_value = types.BoolValue(*obj.OnlinkFlag)
	}
	var autoConfigFlag_value types.Bool
	if obj.AutoConfigFlag != nil {
		autoConfigFlag_value = types.BoolValue(*obj.AutoConfigFlag)
	}
	o.Enable = enable_value
	o.ValidLifetime = validLifetime_value
	o.PreferredLifetime = preferredLifetime_value
	o.OnlinkFlag = onlinkFlag_value
	o.AutoConfigFlag = autoConfigFlag_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClient, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var neighborDiscovery_object *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryObject
	if obj.NeighborDiscovery != nil {
		neighborDiscovery_object = new(EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryObject)
		diags.Append(neighborDiscovery_object.CopyFromPango(ctx, append(ancestors, o), obj.NeighborDiscovery, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var prefixDelegation_object *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationObject
	if obj.PrefixDelegation != nil {
		prefixDelegation_object = new(EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationObject)
		diags.Append(prefixDelegation_object.CopyFromPango(ctx, append(ancestors, o), obj.PrefixDelegation, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var v6Options_object *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsObject
	if obj.V6Options != nil {
		v6Options_object = new(EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsObject)
		diags.Append(v6Options_object.CopyFromPango(ctx, append(ancestors, o), obj.V6Options, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var acceptRaRoute_value types.Bool
	if obj.AcceptRaRoute != nil {
		acceptRaRoute_value = types.BoolValue(*obj.AcceptRaRoute)
	}
	var defaultRouteMetric_value types.Int64
	if obj.DefaultRouteMetric != nil {
		defaultRouteMetric_value = types.Int64Value(*obj.DefaultRouteMetric)
	}
	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var preference_value types.String
	if obj.Preference != nil {
		preference_value = types.StringValue(*obj.Preference)
	}
	o.AcceptRaRoute = acceptRaRoute_value
	o.DefaultRouteMetric = defaultRouteMetric_value
	o.Enable = enable_value
	o.NeighborDiscovery = neighborDiscovery_object
	o.Preference = preference_value
	o.PrefixDelegation = prefixDelegation_object
	o.V6Options = v6Options_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscovery, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var neighbor_list types.List
	{
		var neighbor_tf_entries []EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryNeighborObject
		for _, elt := range obj.Neighbor {
			entry := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryNeighborObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			neighbor_tf_entries = append(neighbor_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("neighbor")
		neighbor_list, list_diags = types.ListValueFrom(ctx, schemaType, neighbor_tf_entries)
		diags.Append(list_diags...)
	}
	var dnsServer_object *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerObject
	if obj.DnsServer != nil {
		dnsServer_object = new(EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerObject)
		diags.Append(dnsServer_object.CopyFromPango(ctx, append(ancestors, o), obj.DnsServer, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var dnsSuffix_object *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixObject
	if obj.DnsSuffix != nil {
		dnsSuffix_object = new(EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixObject)
		diags.Append(dnsSuffix_object.CopyFromPango(ctx, append(ancestors, o), obj.DnsSuffix, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var dadAttempts_value types.Int64
	if obj.DadAttempts != nil {
		dadAttempts_value = types.Int64Value(*obj.DadAttempts)
	}
	var enableDad_value types.Bool
	if obj.EnableDad != nil {
		enableDad_value = types.BoolValue(*obj.EnableDad)
	}
	var enableNdpMonitor_value types.Bool
	if obj.EnableNdpMonitor != nil {
		enableNdpMonitor_value = types.BoolValue(*obj.EnableNdpMonitor)
	}
	var nsInterval_value types.Int64
	if obj.NsInterval != nil {
		nsInterval_value = types.Int64Value(*obj.NsInterval)
	}
	var reachableTime_value types.Int64
	if obj.ReachableTime != nil {
		reachableTime_value = types.Int64Value(*obj.ReachableTime)
	}
	o.DadAttempts = dadAttempts_value
	o.DnsServer = dnsServer_object
	o.DnsSuffix = dnsSuffix_object
	o.EnableDad = enableDad_value
	o.EnableNdpMonitor = enableNdpMonitor_value
	o.Neighbor = neighbor_list
	o.NsInterval = nsInterval_value
	o.ReachableTime = reachableTime_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscoveryDnsServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var source_object *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceObject
	if obj.Source != nil {
		source_object = new(EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceObject)
		diags.Append(source_object.CopyFromPango(ctx, append(ancestors, o), obj.Source, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	o.Enable = enable_value
	o.Source = source_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSource, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dhcpv6_object *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Object
	if obj.Dhcpv6 != nil {
		dhcpv6_object = new(EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Object)
		diags.Append(dhcpv6_object.CopyFromPango(ctx, append(ancestors, o), obj.Dhcpv6, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var manual_object *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualObject
	if obj.Manual != nil {
		manual_object = new(EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualObject)
		diags.Append(manual_object.CopyFromPango(ctx, append(ancestors, o), obj.Manual, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Dhcpv6 = dhcpv6_object
	o.Manual = manual_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Object) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceManual, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var server_list types.List
	{
		var server_tf_entries []EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerObject
		for _, elt := range obj.Server {
			entry := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			server_tf_entries = append(server_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("server")
		server_list, list_diags = types.ListValueFrom(ctx, schemaType, server_tf_entries)
		diags.Append(list_diags...)
	}

	o.Server = server_list

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceManualServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var lifetime_value types.Int64
	if obj.Lifetime != nil {
		lifetime_value = types.Int64Value(*obj.Lifetime)
	}
	o.Name = types.StringValue(obj.Name)
	o.Lifetime = lifetime_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var source_object *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceObject
	if obj.Source != nil {
		source_object = new(EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceObject)
		diags.Append(source_object.CopyFromPango(ctx, append(ancestors, o), obj.Source, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	o.Enable = enable_value
	o.Source = source_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSource, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dhcpv6_object *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Object
	if obj.Dhcpv6 != nil {
		dhcpv6_object = new(EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Object)
		diags.Append(dhcpv6_object.CopyFromPango(ctx, append(ancestors, o), obj.Dhcpv6, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var manual_object *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualObject
	if obj.Manual != nil {
		manual_object = new(EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualObject)
		diags.Append(manual_object.CopyFromPango(ctx, append(ancestors, o), obj.Manual, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Dhcpv6 = dhcpv6_object
	o.Manual = manual_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Object) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceManual, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var suffix_list types.List
	{
		var suffix_tf_entries []EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixObject
		for _, elt := range obj.Suffix {
			entry := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			suffix_tf_entries = append(suffix_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("suffix")
		suffix_list, list_diags = types.ListValueFrom(ctx, schemaType, suffix_tf_entries)
		diags.Append(list_diags...)
	}

	o.Suffix = suffix_list

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var lifetime_value types.Int64
	if obj.Lifetime != nil {
		lifetime_value = types.Int64Value(*obj.Lifetime)
	}
	o.Name = types.StringValue(obj.Name)
	o.Lifetime = lifetime_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryNeighborObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscoveryNeighbor, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var hwAddress_value types.String
	if obj.HwAddress != nil {
		hwAddress_value = types.StringValue(*obj.HwAddress)
	}
	o.Name = types.StringValue(obj.Name)
	o.HwAddress = hwAddress_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientPrefixDelegation, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var enable_object *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableObject
	if obj.Enable != nil {
		enable_object = new(EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableObject)
		diags.Append(enable_object.CopyFromPango(ctx, append(ancestors, o), obj.Enable, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Enable = enable_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientPrefixDelegationEnable, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var no_object *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableNoObject
	if obj.No != nil {
		no_object = new(EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableNoObject)
		diags.Append(no_object.CopyFromPango(ctx, append(ancestors, o), obj.No, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var yes_object *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableYesObject
	if obj.Yes != nil {
		yes_object = new(EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableYesObject)
		diags.Append(yes_object.CopyFromPango(ctx, append(ancestors, o), obj.Yes, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.No = no_object
	o.Yes = yes_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableNoObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientPrefixDelegationEnableNo, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableYesObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientPrefixDelegationEnableYes, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var pfxPoolName_value types.String
	if obj.PfxPoolName != nil {
		pfxPoolName_value = types.StringValue(*obj.PfxPoolName)
	}
	var prefixLen_value types.Int64
	if obj.PrefixLen != nil {
		prefixLen_value = types.Int64Value(*obj.PrefixLen)
	}
	var prefixLenHint_value types.Bool
	if obj.PrefixLenHint != nil {
		prefixLenHint_value = types.BoolValue(*obj.PrefixLenHint)
	}
	o.PfxPoolName = pfxPoolName_value
	o.PrefixLen = prefixLen_value
	o.PrefixLenHint = prefixLenHint_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientV6Options, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var enable_object *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableObject
	if obj.Enable != nil {
		enable_object = new(EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableObject)
		diags.Append(enable_object.CopyFromPango(ctx, append(ancestors, o), obj.Enable, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var duidType_value types.String
	if obj.DuidType != nil {
		duidType_value = types.StringValue(*obj.DuidType)
	}
	var rapidCommit_value types.Bool
	if obj.RapidCommit != nil {
		rapidCommit_value = types.BoolValue(*obj.RapidCommit)
	}
	var supportSrvrReconfig_value types.Bool
	if obj.SupportSrvrReconfig != nil {
		supportSrvrReconfig_value = types.BoolValue(*obj.SupportSrvrReconfig)
	}
	o.DuidType = duidType_value
	o.Enable = enable_object
	o.RapidCommit = rapidCommit_value
	o.SupportSrvrReconfig = supportSrvrReconfig_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientV6OptionsEnable, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var no_object *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableNoObject
	if obj.No != nil {
		no_object = new(EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableNoObject)
		diags.Append(no_object.CopyFromPango(ctx, append(ancestors, o), obj.No, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var yes_object *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableYesObject
	if obj.Yes != nil {
		yes_object = new(EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableYesObject)
		diags.Append(yes_object.CopyFromPango(ctx, append(ancestors, o), obj.Yes, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.No = no_object
	o.Yes = yes_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableNoObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientV6OptionsEnableNo, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableYesObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientV6OptionsEnableYes, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var nonTempAddr_value types.Bool
	if obj.NonTempAddr != nil {
		nonTempAddr_value = types.BoolValue(*obj.NonTempAddr)
	}
	var tempAddr_value types.Bool
	if obj.TempAddr != nil {
		tempAddr_value = types.BoolValue(*obj.TempAddr)
	}
	o.NonTempAddr = nonTempAddr_value
	o.TempAddr = tempAddr_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6Inherited, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var assignAddr_list types.List
	{
		var assignAddr_tf_entries []EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrObject
		for _, elt := range obj.AssignAddr {
			entry := EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			assignAddr_tf_entries = append(assignAddr_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("assign_addr")
		assignAddr_list, list_diags = types.ListValueFrom(ctx, schemaType, assignAddr_tf_entries)
		diags.Append(list_diags...)
	}
	var neighborDiscovery_object *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryObject
	if obj.NeighborDiscovery != nil {
		neighborDiscovery_object = new(EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryObject)
		diags.Append(neighborDiscovery_object.CopyFromPango(ctx, append(ancestors, o), obj.NeighborDiscovery, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	o.AssignAddr = assignAddr_list
	o.Enable = enable_value
	o.NeighborDiscovery = neighborDiscovery_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedAssignAddr, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var type_object *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeObject
	if obj.Type != nil {
		type_object = new(EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeObject)
		diags.Append(type_object.CopyFromPango(ctx, append(ancestors, o), obj.Type, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Name = types.StringValue(obj.Name)
	o.Type = type_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedAssignAddrType, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var gua_object *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaObject
	if obj.Gua != nil {
		gua_object = new(EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaObject)
		diags.Append(gua_object.CopyFromPango(ctx, append(ancestors, o), obj.Gua, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var ula_object *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaObject
	if obj.Ula != nil {
		ula_object = new(EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaObject)
		diags.Append(ula_object.CopyFromPango(ctx, append(ancestors, o), obj.Ula, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Gua = gua_object
	o.Ula = ula_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedAssignAddrTypeGua, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var poolType_object *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeObject
	if obj.PoolType != nil {
		poolType_object = new(EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeObject)
		diags.Append(poolType_object.CopyFromPango(ctx, append(ancestors, o), obj.PoolType, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var advertise_object *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaAdvertiseObject
	if obj.Advertise != nil {
		advertise_object = new(EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaAdvertiseObject)
		diags.Append(advertise_object.CopyFromPango(ctx, append(ancestors, o), obj.Advertise, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enableOnInterface_value types.Bool
	if obj.EnableOnInterface != nil {
		enableOnInterface_value = types.BoolValue(*obj.EnableOnInterface)
	}
	var prefixPool_value types.String
	if obj.PrefixPool != nil {
		prefixPool_value = types.StringValue(*obj.PrefixPool)
	}
	o.EnableOnInterface = enableOnInterface_value
	o.PrefixPool = prefixPool_value
	o.PoolType = poolType_object
	o.Advertise = advertise_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedAssignAddrTypeGuaPoolType, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dynamic_object *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicObject
	if obj.Dynamic != nil {
		dynamic_object = new(EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicObject)
		diags.Append(dynamic_object.CopyFromPango(ctx, append(ancestors, o), obj.Dynamic, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var dynamicId_object *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdObject
	if obj.DynamicId != nil {
		dynamicId_object = new(EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdObject)
		diags.Append(dynamicId_object.CopyFromPango(ctx, append(ancestors, o), obj.DynamicId, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Dynamic = dynamic_object
	o.DynamicId = dynamicId_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedAssignAddrTypeGuaPoolTypeDynamic, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedAssignAddrTypeGuaPoolTypeDynamicId, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var identifier_value types.Int64
	if obj.Identifier != nil {
		identifier_value = types.Int64Value(*obj.Identifier)
	}
	o.Identifier = identifier_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaAdvertiseObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedAssignAddrTypeGuaAdvertise, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var onlinkFlag_value types.Bool
	if obj.OnlinkFlag != nil {
		onlinkFlag_value = types.BoolValue(*obj.OnlinkFlag)
	}
	var autoConfigFlag_value types.Bool
	if obj.AutoConfigFlag != nil {
		autoConfigFlag_value = types.BoolValue(*obj.AutoConfigFlag)
	}
	o.Enable = enable_value
	o.OnlinkFlag = onlinkFlag_value
	o.AutoConfigFlag = autoConfigFlag_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedAssignAddrTypeUla, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var advertise_object *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaAdvertiseObject
	if obj.Advertise != nil {
		advertise_object = new(EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaAdvertiseObject)
		diags.Append(advertise_object.CopyFromPango(ctx, append(ancestors, o), obj.Advertise, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enableOnInterface_value types.Bool
	if obj.EnableOnInterface != nil {
		enableOnInterface_value = types.BoolValue(*obj.EnableOnInterface)
	}
	var address_value types.String
	if obj.Address != nil {
		address_value = types.StringValue(*obj.Address)
	}
	var prefix_value types.Bool
	if obj.Prefix != nil {
		prefix_value = types.BoolValue(*obj.Prefix)
	}
	var anycast_value types.Bool
	if obj.Anycast != nil {
		anycast_value = types.BoolValue(*obj.Anycast)
	}
	o.EnableOnInterface = enableOnInterface_value
	o.Address = address_value
	o.Prefix = prefix_value
	o.Anycast = anycast_value
	o.Advertise = advertise_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaAdvertiseObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedAssignAddrTypeUlaAdvertise, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var validLifetime_value types.String
	if obj.ValidLifetime != nil {
		validLifetime_value = types.StringValue(*obj.ValidLifetime)
	}
	var preferredLifetime_value types.String
	if obj.PreferredLifetime != nil {
		preferredLifetime_value = types.StringValue(*obj.PreferredLifetime)
	}
	var onlinkFlag_value types.Bool
	if obj.OnlinkFlag != nil {
		onlinkFlag_value = types.BoolValue(*obj.OnlinkFlag)
	}
	var autoConfigFlag_value types.Bool
	if obj.AutoConfigFlag != nil {
		autoConfigFlag_value = types.BoolValue(*obj.AutoConfigFlag)
	}
	o.Enable = enable_value
	o.ValidLifetime = validLifetime_value
	o.PreferredLifetime = preferredLifetime_value
	o.OnlinkFlag = onlinkFlag_value
	o.AutoConfigFlag = autoConfigFlag_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscovery, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var neighbor_list types.List
	{
		var neighbor_tf_entries []EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryNeighborObject
		for _, elt := range obj.Neighbor {
			entry := EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryNeighborObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			neighbor_tf_entries = append(neighbor_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("neighbor")
		neighbor_list, list_diags = types.ListValueFrom(ctx, schemaType, neighbor_tf_entries)
		diags.Append(list_diags...)
	}
	var dnsServer_object *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerObject
	if obj.DnsServer != nil {
		dnsServer_object = new(EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerObject)
		diags.Append(dnsServer_object.CopyFromPango(ctx, append(ancestors, o), obj.DnsServer, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var dnsSuffix_object *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixObject
	if obj.DnsSuffix != nil {
		dnsSuffix_object = new(EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixObject)
		diags.Append(dnsSuffix_object.CopyFromPango(ctx, append(ancestors, o), obj.DnsSuffix, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var routerAdvertisement_object *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryRouterAdvertisementObject
	if obj.RouterAdvertisement != nil {
		routerAdvertisement_object = new(EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryRouterAdvertisementObject)
		diags.Append(routerAdvertisement_object.CopyFromPango(ctx, append(ancestors, o), obj.RouterAdvertisement, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var dadAttempts_value types.Int64
	if obj.DadAttempts != nil {
		dadAttempts_value = types.Int64Value(*obj.DadAttempts)
	}
	var enableDad_value types.Bool
	if obj.EnableDad != nil {
		enableDad_value = types.BoolValue(*obj.EnableDad)
	}
	var enableNdpMonitor_value types.Bool
	if obj.EnableNdpMonitor != nil {
		enableNdpMonitor_value = types.BoolValue(*obj.EnableNdpMonitor)
	}
	var nsInterval_value types.Int64
	if obj.NsInterval != nil {
		nsInterval_value = types.Int64Value(*obj.NsInterval)
	}
	var reachableTime_value types.Int64
	if obj.ReachableTime != nil {
		reachableTime_value = types.Int64Value(*obj.ReachableTime)
	}
	o.DadAttempts = dadAttempts_value
	o.DnsServer = dnsServer_object
	o.DnsSuffix = dnsSuffix_object
	o.EnableDad = enableDad_value
	o.EnableNdpMonitor = enableNdpMonitor_value
	o.Neighbor = neighbor_list
	o.NsInterval = nsInterval_value
	o.ReachableTime = reachableTime_value
	o.RouterAdvertisement = routerAdvertisement_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryDnsServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var source_object *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceObject
	if obj.Source != nil {
		source_object = new(EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceObject)
		diags.Append(source_object.CopyFromPango(ctx, append(ancestors, o), obj.Source, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	o.Enable = enable_value
	o.Source = source_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryDnsServerSource, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dhcpv6_object *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Object
	if obj.Dhcpv6 != nil {
		dhcpv6_object = new(EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Object)
		diags.Append(dhcpv6_object.CopyFromPango(ctx, append(ancestors, o), obj.Dhcpv6, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var manual_object *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualObject
	if obj.Manual != nil {
		manual_object = new(EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualObject)
		diags.Append(manual_object.CopyFromPango(ctx, append(ancestors, o), obj.Manual, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Dhcpv6 = dhcpv6_object
	o.Manual = manual_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Object) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var prefixPool_value types.String
	if obj.PrefixPool != nil {
		prefixPool_value = types.StringValue(*obj.PrefixPool)
	}
	o.PrefixPool = prefixPool_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceManual, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var server_list types.List
	{
		var server_tf_entries []EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerObject
		for _, elt := range obj.Server {
			entry := EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			server_tf_entries = append(server_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("server")
		server_list, list_diags = types.ListValueFrom(ctx, schemaType, server_tf_entries)
		diags.Append(list_diags...)
	}

	o.Server = server_list

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceManualServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var lifetime_value types.Int64
	if obj.Lifetime != nil {
		lifetime_value = types.Int64Value(*obj.Lifetime)
	}
	o.Name = types.StringValue(obj.Name)
	o.Lifetime = lifetime_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryDnsSuffix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var source_object *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceObject
	if obj.Source != nil {
		source_object = new(EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceObject)
		diags.Append(source_object.CopyFromPango(ctx, append(ancestors, o), obj.Source, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	o.Enable = enable_value
	o.Source = source_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSource, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dhcpv6_object *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Object
	if obj.Dhcpv6 != nil {
		dhcpv6_object = new(EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Object)
		diags.Append(dhcpv6_object.CopyFromPango(ctx, append(ancestors, o), obj.Dhcpv6, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var manual_object *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualObject
	if obj.Manual != nil {
		manual_object = new(EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualObject)
		diags.Append(manual_object.CopyFromPango(ctx, append(ancestors, o), obj.Manual, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Dhcpv6 = dhcpv6_object
	o.Manual = manual_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Object) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var prefixPool_value types.String
	if obj.PrefixPool != nil {
		prefixPool_value = types.StringValue(*obj.PrefixPool)
	}
	o.PrefixPool = prefixPool_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceManual, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var suffix_list types.List
	{
		var suffix_tf_entries []EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixObject
		for _, elt := range obj.Suffix {
			entry := EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			suffix_tf_entries = append(suffix_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("suffix")
		suffix_list, list_diags = types.ListValueFrom(ctx, schemaType, suffix_tf_entries)
		diags.Append(list_diags...)
	}

	o.Suffix = suffix_list

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var lifetime_value types.Int64
	if obj.Lifetime != nil {
		lifetime_value = types.Int64Value(*obj.Lifetime)
	}
	o.Name = types.StringValue(obj.Name)
	o.Lifetime = lifetime_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryNeighborObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryNeighbor, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var hwAddress_value types.String
	if obj.HwAddress != nil {
		hwAddress_value = types.StringValue(*obj.HwAddress)
	}
	o.Name = types.StringValue(obj.Name)
	o.HwAddress = hwAddress_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryRouterAdvertisementObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryRouterAdvertisement, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var enableConsistencyCheck_value types.Bool
	if obj.EnableConsistencyCheck != nil {
		enableConsistencyCheck_value = types.BoolValue(*obj.EnableConsistencyCheck)
	}
	var hopLimit_value types.String
	if obj.HopLimit != nil {
		hopLimit_value = types.StringValue(*obj.HopLimit)
	}
	var lifetime_value types.Int64
	if obj.Lifetime != nil {
		lifetime_value = types.Int64Value(*obj.Lifetime)
	}
	var linkMtu_value types.String
	if obj.LinkMtu != nil {
		linkMtu_value = types.StringValue(*obj.LinkMtu)
	}
	var managedFlag_value types.Bool
	if obj.ManagedFlag != nil {
		managedFlag_value = types.BoolValue(*obj.ManagedFlag)
	}
	var maxInterval_value types.Int64
	if obj.MaxInterval != nil {
		maxInterval_value = types.Int64Value(*obj.MaxInterval)
	}
	var minInterval_value types.Int64
	if obj.MinInterval != nil {
		minInterval_value = types.Int64Value(*obj.MinInterval)
	}
	var otherFlag_value types.Bool
	if obj.OtherFlag != nil {
		otherFlag_value = types.BoolValue(*obj.OtherFlag)
	}
	var reachableTime_value types.String
	if obj.ReachableTime != nil {
		reachableTime_value = types.StringValue(*obj.ReachableTime)
	}
	var retransmissionTimer_value types.String
	if obj.RetransmissionTimer != nil {
		retransmissionTimer_value = types.StringValue(*obj.RetransmissionTimer)
	}
	var routerPreference_value types.String
	if obj.RouterPreference != nil {
		routerPreference_value = types.StringValue(*obj.RouterPreference)
	}
	o.Enable = enable_value
	o.EnableConsistencyCheck = enableConsistencyCheck_value
	o.HopLimit = hopLimit_value
	o.Lifetime = lifetime_value
	o.LinkMtu = linkMtu_value
	o.ManagedFlag = managedFlag_value
	o.MaxInterval = maxInterval_value
	o.MinInterval = minInterval_value
	o.OtherFlag = otherFlag_value
	o.ReachableTime = reachableTime_value
	o.RetransmissionTimer = retransmissionTimer_value
	o.RouterPreference = routerPreference_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6NeighborDiscovery, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var neighbor_list types.List
	{
		var neighbor_tf_entries []EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryNeighborObject
		for _, elt := range obj.Neighbor {
			entry := EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryNeighborObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			neighbor_tf_entries = append(neighbor_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("neighbor")
		neighbor_list, list_diags = types.ListValueFrom(ctx, schemaType, neighbor_tf_entries)
		diags.Append(list_diags...)
	}
	var routerAdvertisement_object *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementObject
	if obj.RouterAdvertisement != nil {
		routerAdvertisement_object = new(EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementObject)
		diags.Append(routerAdvertisement_object.CopyFromPango(ctx, append(ancestors, o), obj.RouterAdvertisement, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var dadAttempts_value types.Int64
	if obj.DadAttempts != nil {
		dadAttempts_value = types.Int64Value(*obj.DadAttempts)
	}
	var enableDad_value types.Bool
	if obj.EnableDad != nil {
		enableDad_value = types.BoolValue(*obj.EnableDad)
	}
	var enableNdpMonitor_value types.Bool
	if obj.EnableNdpMonitor != nil {
		enableNdpMonitor_value = types.BoolValue(*obj.EnableNdpMonitor)
	}
	var nsInterval_value types.Int64
	if obj.NsInterval != nil {
		nsInterval_value = types.Int64Value(*obj.NsInterval)
	}
	var reachableTime_value types.Int64
	if obj.ReachableTime != nil {
		reachableTime_value = types.Int64Value(*obj.ReachableTime)
	}
	o.DadAttempts = dadAttempts_value
	o.EnableDad = enableDad_value
	o.EnableNdpMonitor = enableNdpMonitor_value
	o.Neighbor = neighbor_list
	o.NsInterval = nsInterval_value
	o.ReachableTime = reachableTime_value
	o.RouterAdvertisement = routerAdvertisement_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryNeighborObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6NeighborDiscoveryNeighbor, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var hwAddress_value types.String
	if obj.HwAddress != nil {
		hwAddress_value = types.StringValue(*obj.HwAddress)
	}
	o.Name = types.StringValue(obj.Name)
	o.HwAddress = hwAddress_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6NeighborDiscoveryRouterAdvertisement, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dnsSupport_object *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportObject
	if obj.DnsSupport != nil {
		dnsSupport_object = new(EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportObject)
		diags.Append(dnsSupport_object.CopyFromPango(ctx, append(ancestors, o), obj.DnsSupport, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var enableConsistencyCheck_value types.Bool
	if obj.EnableConsistencyCheck != nil {
		enableConsistencyCheck_value = types.BoolValue(*obj.EnableConsistencyCheck)
	}
	var hopLimit_value types.String
	if obj.HopLimit != nil {
		hopLimit_value = types.StringValue(*obj.HopLimit)
	}
	var lifetime_value types.Int64
	if obj.Lifetime != nil {
		lifetime_value = types.Int64Value(*obj.Lifetime)
	}
	var linkMtu_value types.String
	if obj.LinkMtu != nil {
		linkMtu_value = types.StringValue(*obj.LinkMtu)
	}
	var managedFlag_value types.Bool
	if obj.ManagedFlag != nil {
		managedFlag_value = types.BoolValue(*obj.ManagedFlag)
	}
	var maxInterval_value types.Int64
	if obj.MaxInterval != nil {
		maxInterval_value = types.Int64Value(*obj.MaxInterval)
	}
	var minInterval_value types.Int64
	if obj.MinInterval != nil {
		minInterval_value = types.Int64Value(*obj.MinInterval)
	}
	var otherFlag_value types.Bool
	if obj.OtherFlag != nil {
		otherFlag_value = types.BoolValue(*obj.OtherFlag)
	}
	var reachableTime_value types.String
	if obj.ReachableTime != nil {
		reachableTime_value = types.StringValue(*obj.ReachableTime)
	}
	var retransmissionTimer_value types.String
	if obj.RetransmissionTimer != nil {
		retransmissionTimer_value = types.StringValue(*obj.RetransmissionTimer)
	}
	var routerPreference_value types.String
	if obj.RouterPreference != nil {
		routerPreference_value = types.StringValue(*obj.RouterPreference)
	}
	o.DnsSupport = dnsSupport_object
	o.Enable = enable_value
	o.EnableConsistencyCheck = enableConsistencyCheck_value
	o.HopLimit = hopLimit_value
	o.Lifetime = lifetime_value
	o.LinkMtu = linkMtu_value
	o.ManagedFlag = managedFlag_value
	o.MaxInterval = maxInterval_value
	o.MinInterval = minInterval_value
	o.OtherFlag = otherFlag_value
	o.ReachableTime = reachableTime_value
	o.RetransmissionTimer = retransmissionTimer_value
	o.RouterPreference = routerPreference_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupport, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var server_list types.List
	{
		var server_tf_entries []EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerObject
		for _, elt := range obj.Server {
			entry := EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			server_tf_entries = append(server_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("server")
		server_list, list_diags = types.ListValueFrom(ctx, schemaType, server_tf_entries)
		diags.Append(list_diags...)
	}
	var suffix_list types.List
	{
		var suffix_tf_entries []EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixObject
		for _, elt := range obj.Suffix {
			entry := EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			suffix_tf_entries = append(suffix_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("suffix")
		suffix_list, list_diags = types.ListValueFrom(ctx, schemaType, suffix_tf_entries)
		diags.Append(list_diags...)
	}

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	o.Enable = enable_value
	o.Server = server_list
	o.Suffix = suffix_list

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupportServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var lifetime_value types.Int64
	if obj.Lifetime != nil {
		lifetime_value = types.Int64Value(*obj.Lifetime)
	}
	o.Name = types.StringValue(obj.Name)
	o.Lifetime = lifetime_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var lifetime_value types.Int64
	if obj.Lifetime != nil {
		lifetime_value = types.Int64Value(*obj.Lifetime)
	}
	o.Name = types.StringValue(obj.Name)
	o.Lifetime = lifetime_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceNdpProxyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.NdpProxy, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var address_list types.List
	{
		var address_tf_entries []EthernetLayer3SubinterfaceDataSourceNdpProxyAddressObject
		for _, elt := range obj.Address {
			entry := EthernetLayer3SubinterfaceDataSourceNdpProxyAddressObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			address_tf_entries = append(address_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("address")
		address_list, list_diags = types.ListValueFrom(ctx, schemaType, address_tf_entries)
		diags.Append(list_diags...)
	}

	var enabled_value types.Bool
	if obj.Enabled != nil {
		enabled_value = types.BoolValue(*obj.Enabled)
	}
	o.Address = address_list
	o.Enabled = enabled_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceNdpProxyAddressObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.NdpProxyAddress, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var negate_value types.Bool
	if obj.Negate != nil {
		negate_value = types.BoolValue(*obj.Negate)
	}
	o.Name = types.StringValue(obj.Name)
	o.Negate = negate_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourcePppoeObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Pppoe, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var passive_object *EthernetLayer3SubinterfaceDataSourcePppoePassiveObject
	if obj.Passive != nil {
		passive_object = new(EthernetLayer3SubinterfaceDataSourcePppoePassiveObject)
		diags.Append(passive_object.CopyFromPango(ctx, append(ancestors, o), obj.Passive, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var staticAddress_object *EthernetLayer3SubinterfaceDataSourcePppoeStaticAddressObject
	if obj.StaticAddress != nil {
		staticAddress_object = new(EthernetLayer3SubinterfaceDataSourcePppoeStaticAddressObject)
		diags.Append(staticAddress_object.CopyFromPango(ctx, append(ancestors, o), obj.StaticAddress, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var accessConcentrator_value types.String
	if obj.AccessConcentrator != nil {
		accessConcentrator_value = types.StringValue(*obj.AccessConcentrator)
	}
	var authentication_value types.String
	if obj.Authentication != nil {
		authentication_value = types.StringValue(*obj.Authentication)
	}
	var createDefaultRoute_value types.Bool
	if obj.CreateDefaultRoute != nil {
		createDefaultRoute_value = types.BoolValue(*obj.CreateDefaultRoute)
	}
	var defaultRouteMetric_value types.Int64
	if obj.DefaultRouteMetric != nil {
		defaultRouteMetric_value = types.Int64Value(*obj.DefaultRouteMetric)
	}
	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var password_value types.String
	if obj.Password != nil {
		valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
		if err != nil {
			diags.AddError("Failed to create encrypted values state key", err.Error())
			return diags
		}

		if evFromState, found := ev.GetEncryptedValue(valueKey); found && ev.PreferServerState() && *obj.Password != evFromState {
			password_value = types.StringPointerValue(obj.Password)
		} else if value, found := ev.GetPlaintextValue(valueKey); found {
			password_value = types.StringValue(value)
		} else {
			diags.AddError("Failed to read encrypted values state", fmt.Sprintf("Missing plaintext value for %s", valueKey))
			return diags
		}

		if !ev.PreferServerState() {
			err = ev.StoreEncryptedValue(valueKey, "solo", *obj.Password)
			if err != nil {
				diags.AddError("Failed to store encrypted values state", err.Error())
				return diags
			}
		}
	}
	var service_value types.String
	if obj.Service != nil {
		service_value = types.StringValue(*obj.Service)
	}
	var username_value types.String
	if obj.Username != nil {
		username_value = types.StringValue(*obj.Username)
	}
	o.AccessConcentrator = accessConcentrator_value
	o.Authentication = authentication_value
	o.CreateDefaultRoute = createDefaultRoute_value
	o.DefaultRouteMetric = defaultRouteMetric_value
	o.Enable = enable_value
	o.Passive = passive_object
	o.Password = password_value
	o.Service = service_value
	o.StaticAddress = staticAddress_object
	o.Username = username_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourcePppoePassiveObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.PppoePassive, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	o.Enable = enable_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourcePppoeStaticAddressObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.PppoeStaticAddress, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var ip_value types.String
	if obj.Ip != nil {
		ip_value = types.StringValue(*obj.Ip)
	}
	o.Ip = ip_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.SdwanLinkSettings, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var upstreamNat_object *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatObject
	if obj.UpstreamNat != nil {
		upstreamNat_object = new(EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatObject)
		diags.Append(upstreamNat_object.CopyFromPango(ctx, append(ancestors, o), obj.UpstreamNat, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var sdwanInterfaceProfile_value types.String
	if obj.SdwanInterfaceProfile != nil {
		sdwanInterfaceProfile_value = types.StringValue(*obj.SdwanInterfaceProfile)
	}
	o.Enable = enable_value
	o.SdwanInterfaceProfile = sdwanInterfaceProfile_value
	o.UpstreamNat = upstreamNat_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.SdwanLinkSettingsUpstreamNat, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var ddns_object *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatDdnsObject
	if obj.Ddns != nil {
		ddns_object = new(EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatDdnsObject)
		diags.Append(ddns_object.CopyFromPango(ctx, append(ancestors, o), obj.Ddns, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var staticIp_object *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatStaticIpObject
	if obj.StaticIp != nil {
		staticIp_object = new(EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatStaticIpObject)
		diags.Append(staticIp_object.CopyFromPango(ctx, append(ancestors, o), obj.StaticIp, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	o.Enable = enable_value
	o.Ddns = ddns_object
	o.StaticIp = staticIp_object

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatDdnsObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.SdwanLinkSettingsUpstreamNatDdns, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatStaticIpObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.SdwanLinkSettingsUpstreamNatStaticIp, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var fqdn_value types.String
	if obj.Fqdn != nil {
		fqdn_value = types.StringValue(*obj.Fqdn)
	}
	var ipAddress_value types.String
	if obj.IpAddress != nil {
		ipAddress_value = types.StringValue(*obj.IpAddress)
	}
	o.Fqdn = fqdn_value
	o.IpAddress = ipAddress_value

	return diags
}

func (o *EthernetLayer3SubinterfaceDataSourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	components = append(components, pangoutil.AsEntryXpath(o.Parent.ValueString()))
	return components, nil
}

func EthernetLayer3SubinterfaceDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": EthernetLayer3SubinterfaceDataSourceLocationSchema(),

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"parent": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"adjust_tcp_mss": EthernetLayer3SubinterfaceDataSourceAdjustTcpMssSchema(),

			"arp": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceDataSourceArpSchema(),
			},

			"bonjour": EthernetLayer3SubinterfaceDataSourceBonjourSchema(),

			"comment": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ddns_config": EthernetLayer3SubinterfaceDataSourceDdnsConfigSchema(),

			"decrypt_forward": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"df_ignore": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dhcp_client": EthernetLayer3SubinterfaceDataSourceDhcpClientSchema(),

			"interface_management_profile": dsschema.StringAttribute{
				Description: "Interface management profile",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ip": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceDataSourceIpSchema(),
			},

			"ipv6": EthernetLayer3SubinterfaceDataSourceIpv6Schema(),

			"mtu": dsschema.Int64Attribute{
				Description: "Maximum Transfer Unit, up to 9216 in Jumbo-Frame mode, up to 1500 otherwise",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ndp_proxy": EthernetLayer3SubinterfaceDataSourceNdpProxySchema(),

			"netflow_profile": dsschema.StringAttribute{
				Description: "Netflow Server Profile",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"pppoe": EthernetLayer3SubinterfaceDataSourcePppoeSchema(),

			"sdwan_link_settings": EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsSchema(),

			"tag": dsschema.Int64Attribute{
				Description: "802.1q VLAN tag",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceModel) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceAdjustTcpMssSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"enable": dsschema.BoolAttribute{
				Description: "Set if TCP MSS value should be reduced based on mtu",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ipv4_mss_adjustment": dsschema.Int64Attribute{
				Description: "IPv4 MSS adjustment size (in bytes)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ipv6_mss_adjustment": dsschema.Int64Attribute{
				Description: "IPv6 MSS adjustment size (in bytes)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceAdjustTcpMssObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceAdjustTcpMssSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceArpSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"hw_address": dsschema.StringAttribute{
				Description: "MAC address (format xx:xx:xx:xx:xx:xx)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceArpObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceArpSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceBonjourSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"enable": dsschema.BoolAttribute{
				Description: "Set to support Bonjour service",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"group_id": dsschema.Int64Attribute{
				Description: "default 0: NO-Group",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ttl_check": dsschema.BoolAttribute{
				Description: "Set to check and update TTL",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceBonjourObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceBonjourSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceDdnsConfigSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"ddns_cert_profile": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ddns_enabled": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ddns_hostname": dsschema.StringAttribute{
				Description: "ddns hostname variable or real address",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ddns_ip": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"ddns_ipv6": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"ddns_update_interval": dsschema.Int64Attribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ddns_vendor": dsschema.StringAttribute{
				Description: "Vendor and product type",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ddns_vendor_config": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceDataSourceDdnsConfigDdnsVendorConfigSchema(),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceDdnsConfigObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceDdnsConfigSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceDdnsConfigDdnsVendorConfigSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"value": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceDdnsConfigDdnsVendorConfigObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceDdnsConfigDdnsVendorConfigSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceDhcpClientSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"create_default_route": dsschema.BoolAttribute{
				Description: "Automatically create default route pointing to default gateway provided by server",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"default_route_metric": dsschema.Int64Attribute{
				Description: "Metric of the default route created",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"enable": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"send_hostname": EthernetLayer3SubinterfaceDataSourceDhcpClientSendHostnameSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceDhcpClientObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceDhcpClientSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceDhcpClientSendHostnameSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"enable": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hostname": dsschema.StringAttribute{
				Description: "Set Interface Hostname",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceDhcpClientSendHostnameObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceDhcpClientSendHostnameSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"sdwan_gateway": dsschema.StringAttribute{
				Description: "Gateway IPv4 Address",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6Schema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"address": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceDataSourceIpv6AddressSchema(),
			},

			"dhcp_client": EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientSchema(),

			"enabled": dsschema.BoolAttribute{
				Description: "Enable IPv6 on the interface",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"inherited": EthernetLayer3SubinterfaceDataSourceIpv6InheritedSchema(),

			"interface_id": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"neighbor_discovery": EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoverySchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6Object) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6AddressSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"enable_on_interface": dsschema.BoolAttribute{
				Description: "configure this address on interface",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"prefix": EthernetLayer3SubinterfaceDataSourceIpv6AddressPrefixSchema(),

			"anycast": EthernetLayer3SubinterfaceDataSourceIpv6AddressAnycastSchema(),

			"advertise": EthernetLayer3SubinterfaceDataSourceIpv6AddressAdvertiseSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6AddressObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6AddressSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6AddressPrefixSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes:  map[string]dsschema.Attribute{},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6AddressPrefixObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6AddressPrefixSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6AddressAnycastSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes:  map[string]dsschema.Attribute{},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6AddressAnycastObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6AddressAnycastSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6AddressAdvertiseSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"enable": dsschema.BoolAttribute{
				Description: "enable advertising this prefix in router advertisements",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"valid_lifetime": dsschema.StringAttribute{
				Description: "Valid Lifetime (in seconds) of the prefix advertised in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"preferred_lifetime": dsschema.StringAttribute{
				Description: "Preferred Lifetime (in seconds) of the prefix advertised in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"onlink_flag": dsschema.BoolAttribute{
				Description: "Set the On-Link Flag (L-bit) of the prefix in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"auto_config_flag": dsschema.BoolAttribute{
				Description: "Set the Auto Address Configuration Flag (A-bit) of the prefix in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6AddressAdvertiseObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6AddressAdvertiseSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"accept_ra_route": dsschema.BoolAttribute{
				Description: "Accept Router Advertised Default Route",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"default_route_metric": dsschema.Int64Attribute{
				Description: "Metric of the default route created",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"enable": dsschema.BoolAttribute{
				Description: "Enable DHCPv6 Client",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"neighbor_discovery": EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoverySchema(),

			"preference": dsschema.StringAttribute{
				Description: "Select Low/Medium/High",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"prefix_delegation": EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationSchema(),

			"v6_options": EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoverySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"dad_attempts": dsschema.Int64Attribute{
				Description: "number of consecutive neighbor solicitation messages sent for duplicate address detection",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dns_server": EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSchema(),

			"dns_suffix": EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSchema(),

			"enable_dad": dsschema.BoolAttribute{
				Description: "Enable Duplicate Address Detection",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"enable_ndp_monitor": dsschema.BoolAttribute{
				Description: "Enable NDP Monitoring",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"neighbor": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryNeighborSchema(),
			},

			"ns_interval": dsschema.Int64Attribute{
				Description: "interval (in seconds) between consecutive neighbor solicitation messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"reachable_time": dsschema.Int64Attribute{
				Description: "time (in seconds) that the Reachable status for a neighbor can be maintained",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoverySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"enable": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source": EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"dhcpv6": EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Schema(),

			"manual": EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Schema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("dhcpv6"),
				path.MatchRelative().AtParent().AtName("manual"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Object) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("dhcpv6"),
				path.MatchRelative().AtParent().AtName("manual"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"server": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerSchema(),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"lifetime": dsschema.Int64Attribute{
				Description: "(4-3600) Lifetime in Seconds",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"enable": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source": EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"dhcpv6": EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Schema(),

			"manual": EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Schema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("dhcpv6"),
				path.MatchRelative().AtParent().AtName("manual"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Object) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("dhcpv6"),
				path.MatchRelative().AtParent().AtName("manual"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"suffix": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixSchema(),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"lifetime": dsschema.Int64Attribute{
				Description: "(4-3600) lifetime in seconds",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryNeighborSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"hw_address": dsschema.StringAttribute{
				Description: "MAC address (format xx:xx:xx:xx:xx:xx)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryNeighborObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientNeighborDiscoveryNeighborSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"enable": EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"no": EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableNoSchema(),

			"yes": EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableYesSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableNoSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("no"),
				path.MatchRelative().AtParent().AtName("yes"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableNoObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableNoSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableYesSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("no"),
				path.MatchRelative().AtParent().AtName("yes"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"pfx_pool_name": dsschema.StringAttribute{
				Description: "Configure unique Prefix Pool Name",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"prefix_len": dsschema.Int64Attribute{
				Description: "Hint DHCP Prefix Length (bits)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"prefix_len_hint": dsschema.BoolAttribute{
				Description: "Send prefix length hint to server",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableYesObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientPrefixDelegationEnableYesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"duid_type": dsschema.StringAttribute{
				Description: "Select DUID-LLT/DUID-LL",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"enable": EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableSchema(),

			"rapid_commit": dsschema.BoolAttribute{
				Description: "Enable Rapid Commit",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"support_srvr_reconfig": dsschema.BoolAttribute{
				Description: "Enable DHCPv6 Server Re-Configuration Support",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"no": EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableNoSchema(),

			"yes": EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableYesSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableNoSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("no"),
				path.MatchRelative().AtParent().AtName("yes"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableNoObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableNoSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableYesSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("no"),
				path.MatchRelative().AtParent().AtName("yes"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"non_temp_addr": dsschema.BoolAttribute{
				Description: "Request Non-Temporary Address Type",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"temp_addr": dsschema.BoolAttribute{
				Description: "Request Temporary Address Type",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableYesObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6DhcpClientV6OptionsEnableYesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"assign_addr": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrSchema(),
			},

			"enable": dsschema.BoolAttribute{
				Description: "Enable Inherited Interface",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"neighbor_discovery": EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoverySchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"type": EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"gua": EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaSchema(),

			"ula": EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("gua"),
				path.MatchRelative().AtParent().AtName("ula"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"enable_on_interface": dsschema.BoolAttribute{
				Description: "Enable on Interface",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"prefix_pool": dsschema.StringAttribute{
				Description: "Prefix-Pool Name",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"pool_type": EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeSchema(),

			"advertise": EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaAdvertiseSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"dynamic": EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicSchema(),

			"dynamic_id": EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("dynamic"),
				path.MatchRelative().AtParent().AtName("dynamic_id"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("dynamic"),
				path.MatchRelative().AtParent().AtName("dynamic_id"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"identifier": dsschema.Int64Attribute{
				Description: "Range [0-4095] must be unqiue for this prefix-pool",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaAdvertiseSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"enable": dsschema.BoolAttribute{
				Description: "Enable advertising this prefix in router advertisements",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"onlink_flag": dsschema.BoolAttribute{
				Description: "Set the On-Link Flag (L-bit) of the prefix in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"auto_config_flag": dsschema.BoolAttribute{
				Description: "Set the Auto Address Configuration Flag (A-bit) of the prefix in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaAdvertiseObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeGuaAdvertiseSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("gua"),
				path.MatchRelative().AtParent().AtName("ula"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"enable_on_interface": dsschema.BoolAttribute{
				Description: "Configure this address on Interface",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"address": dsschema.StringAttribute{
				Description: "Configure ULA (Unique Local Address)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"prefix": dsschema.BoolAttribute{
				Description: "Use this as prefix to form full address with interface id/EUI-64",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"anycast": dsschema.BoolAttribute{
				Description: "Anycast Address",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"advertise": EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaAdvertiseSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaAdvertiseSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"enable": dsschema.BoolAttribute{
				Description: "enable advertising this prefix in router advertisements",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"valid_lifetime": dsschema.StringAttribute{
				Description: "Valid Lifetime (in seconds) of the prefix advertised in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"preferred_lifetime": dsschema.StringAttribute{
				Description: "Preferred Lifetime (in seconds) of the prefix advertised in Router advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"onlink_flag": dsschema.BoolAttribute{
				Description: "Set the On-Link Flag (L-bit) of the prefix in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"auto_config_flag": dsschema.BoolAttribute{
				Description: "Set the Auto Address Configuration Flag (A-bit) of the prefix in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaAdvertiseObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedAssignAddrTypeUlaAdvertiseSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoverySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"dad_attempts": dsschema.Int64Attribute{
				Description: "Number of consecutive neighbor solicitation messages sent for duplicate address detection",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dns_server": EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSchema(),

			"dns_suffix": EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSchema(),

			"enable_dad": dsschema.BoolAttribute{
				Description: "Enable Duplicate Address Detection (DAD)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"enable_ndp_monitor": dsschema.BoolAttribute{
				Description: "Enable NDP Monitoring",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"neighbor": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryNeighborSchema(),
			},

			"ns_interval": dsschema.Int64Attribute{
				Description: "Interval (in seconds) between consecutive neighbor solicitation messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"reachable_time": dsschema.Int64Attribute{
				Description: "Time (in seconds) that the Reachable status for a neighbor can be maintained",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"router_advertisement": EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryRouterAdvertisementSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoverySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"enable": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source": EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"dhcpv6": EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Schema(),

			"manual": EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Schema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("dhcpv6"),
				path.MatchRelative().AtParent().AtName("manual"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"prefix_pool": dsschema.StringAttribute{
				Description: "Prefix-Pool Name",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Object) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("dhcpv6"),
				path.MatchRelative().AtParent().AtName("manual"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"server": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerSchema(),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"lifetime": dsschema.Int64Attribute{
				Description: "(4-3600) Lifetime in Seconds",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"enable": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source": EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"dhcpv6": EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Schema(),

			"manual": EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Schema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("dhcpv6"),
				path.MatchRelative().AtParent().AtName("manual"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"prefix_pool": dsschema.StringAttribute{
				Description: "Prefix-Pool Name",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Object) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("dhcpv6"),
				path.MatchRelative().AtParent().AtName("manual"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"suffix": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixSchema(),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"lifetime": dsschema.Int64Attribute{
				Description: "(4-3600) lifetime in seconds",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryNeighborSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"hw_address": dsschema.StringAttribute{
				Description: "MAC address (format xx:xx:xx:xx:xx:xx)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryNeighborObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryNeighborSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryRouterAdvertisementSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"enable": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"enable_consistency_check": dsschema.BoolAttribute{
				Description: "check consistency of RA messages from other routers.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hop_limit": dsschema.StringAttribute{
				Description: "Current Hop Limit advertised in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"lifetime": dsschema.Int64Attribute{
				Description: "Router Lifetime (in seconds) advertised in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"link_mtu": dsschema.StringAttribute{
				Description: "value of MTU option in Router Advertisement messages, upto 9216 in Jumbo-Frame mode, up to 1500 otherwise",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"managed_flag": dsschema.BoolAttribute{
				Description: "Set the Managed Configuration Flag (M-bit) in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"max_interval": dsschema.Int64Attribute{
				Description: "Maximum interval (seconds) between consecutive unsolicited Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"min_interval": dsschema.Int64Attribute{
				Description: "Minimum interval (seconds) between consecutive unsolicited Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"other_flag": dsschema.BoolAttribute{
				Description: "Set the Other Stateful Configuration Flag (O-bit) in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"reachable_time": dsschema.StringAttribute{
				Description: "Reachable Time (in milliseconds) advertised in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"retransmission_timer": dsschema.StringAttribute{
				Description: "Retransmission Timer (in milliseconds) advertised in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"router_preference": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryRouterAdvertisementObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6InheritedNeighborDiscoveryRouterAdvertisementSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoverySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"dad_attempts": dsschema.Int64Attribute{
				Description: "number of consecutive neighbor solicitation messages sent for duplicate address detection",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"enable_dad": dsschema.BoolAttribute{
				Description: "enable duplicate address detection",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"enable_ndp_monitor": dsschema.BoolAttribute{
				Description: "enable ndp monitoring",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"neighbor": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryNeighborSchema(),
			},

			"ns_interval": dsschema.Int64Attribute{
				Description: "interval (in seconds) between consecutive neighbor solicitation messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"reachable_time": dsschema.Int64Attribute{
				Description: "time (in seconds) that the Reachable status for a neighbor can be maintained",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"router_advertisement": EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoverySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryNeighborSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"hw_address": dsschema.StringAttribute{
				Description: "MAC address (format xx:xx:xx:xx:xx:xx)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryNeighborObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryNeighborSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"dns_support": EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSchema(),

			"enable": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"enable_consistency_check": dsschema.BoolAttribute{
				Description: "check consistency of RA messages from other routers.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hop_limit": dsschema.StringAttribute{
				Description: "Current Hop Limit advertised in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"lifetime": dsschema.Int64Attribute{
				Description: "Router Lifetime (in seconds) advertised in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"link_mtu": dsschema.StringAttribute{
				Description: "value of MTU option in Router Advertisement messages, upto 9216 in Jumbo-Frame mode, up to 1500 otherwise",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"managed_flag": dsschema.BoolAttribute{
				Description: "Set the Managed Configuration Flag (M-bit) in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"max_interval": dsschema.Int64Attribute{
				Description: "Maximum interval (seconds) between consecutive unsolicited Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"min_interval": dsschema.Int64Attribute{
				Description: "Minimum interval (seconds) between consecutive unsolicited Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"other_flag": dsschema.BoolAttribute{
				Description: "Set the Other Stateful Configuration Flag (O-bit) in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"reachable_time": dsschema.StringAttribute{
				Description: "Reachable Time (in milliseconds) advertised in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"retransmission_timer": dsschema.StringAttribute{
				Description: "Retransmission Timer (in milliseconds) advertised in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"router_preference": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"enable": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"server": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerSchema(),
			},

			"suffix": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixSchema(),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"lifetime": dsschema.Int64Attribute{
				Description: "(4-3600) lifetime in seconds",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"lifetime": dsschema.Int64Attribute{
				Description: "(4-3600) lifetime in seconds",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceNdpProxySchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"address": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceDataSourceNdpProxyAddressSchema(),
			},

			"enabled": dsschema.BoolAttribute{
				Description: "Enable proxy NDP on the interface",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceNdpProxyObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceNdpProxySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceNdpProxyAddressSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"negate": dsschema.BoolAttribute{
				Description: "put the prefix or address on a block list",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceNdpProxyAddressObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceNdpProxyAddressSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourcePppoeSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"access_concentrator": dsschema.StringAttribute{
				Description: "desired access concentrator. The valid characters are [a-zA-Z0-9._~!@#$%^*(){},:?/+=\\-]",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication": dsschema.StringAttribute{
				Description: "authentication protocol",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"create_default_route": dsschema.BoolAttribute{
				Description: "automatically create default route pointing to peer",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"default_route_metric": dsschema.Int64Attribute{
				Description: "metric of the default route created",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"enable": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"passive": EthernetLayer3SubinterfaceDataSourcePppoePassiveSchema(),

			"password": dsschema.StringAttribute{
				Description: "password for ppp autentication",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},

			"service": dsschema.StringAttribute{
				Description: "desired service. The valid characters are [a-zA-Z0-9._~!@#$%^*(){},:?/+=\\-]",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"static_address": EthernetLayer3SubinterfaceDataSourcePppoeStaticAddressSchema(),

			"username": dsschema.StringAttribute{
				Description: "username for ppp authentication. The valid characters are [a-zA-Z0-9._~!@#$%^*(){},:?/+=\\-]",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourcePppoeObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourcePppoeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourcePppoePassiveSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"enable": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourcePppoePassiveObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourcePppoePassiveSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourcePppoeStaticAddressSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"ip": dsschema.StringAttribute{
				Description: "static ip address",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourcePppoeStaticAddressObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourcePppoeStaticAddressSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"enable": dsschema.BoolAttribute{
				Description: "Enable sdwan on this ethernet interface",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_interface_profile": dsschema.StringAttribute{
				Description: "Sdwan link characteristics",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"upstream_nat": EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"enable": dsschema.BoolAttribute{
				Description: "Enable upstream NAT IP config",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ddns": EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatDdnsSchema(),

			"static_ip": EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatStaticIpSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatDdnsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("ddns"),
				path.MatchRelative().AtParent().AtName("static_ip"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatDdnsObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatDdnsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatStaticIpSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("ddns"),
				path.MatchRelative().AtParent().AtName("static_ip"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"fqdn": dsschema.StringAttribute{
				Description: "Upstream NAT address FQDN name configuration",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ip_address": dsschema.StringAttribute{
				Description: "Upstream NAT IP address",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatStaticIpObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceDataSourceSdwanLinkSettingsUpstreamNatStaticIpSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceDataSourceLocationSchema() rsschema.Attribute {
	return EthernetLayer3SubinterfaceLocationSchema()
}

// Metadata returns the data source type name.
func (d *EthernetLayer3SubinterfaceDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ethernet_layer3_subinterface"
}

// Schema defines the schema for this data source.
func (d *EthernetLayer3SubinterfaceDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = EthernetLayer3SubinterfaceDataSourceSchema()
}

// Configure prepares the struct.
func (d *EthernetLayer3SubinterfaceDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	d.client = providerData.Client
	specifier, _, err := layer3.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	d.manager = sdkmanager.NewImportableEntryObjectManager(d.client, layer3.NewService(d.client), batchSize, specifier, layer3.SpecMatches)
}
func (o *EthernetLayer3SubinterfaceDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state EthernetLayer3SubinterfaceDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location layer3.Location

	{
		var terraformLocation EthernetLayer3SubinterfaceLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &layer3.SharedLocation{}
			var innerLocation EthernetLayer3SubinterfaceSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &layer3.TemplateLocation{}
			var innerLocation EthernetLayer3SubinterfaceTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &layer3.TemplateStackLocation{}
			var innerLocation EthernetLayer3SubinterfaceTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &layer3.NgfwLocation{}
			var innerLocation EthernetLayer3SubinterfaceNgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_ethernet_layer3_subinterface_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	components, err := savestate.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	object, err := o.manager.Read(ctx, location, components, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, nil, object, ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	{
		component := components[0]
		component = strings.TrimPrefix(component, "entry[@name='")
		component = strings.TrimSuffix(component, "']")
		state.Parent = types.StringValue(component)
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &EthernetLayer3SubinterfaceResource{}
	_ resource.ResourceWithConfigure   = &EthernetLayer3SubinterfaceResource{}
	_ resource.ResourceWithImportState = &EthernetLayer3SubinterfaceResource{}
)

func NewEthernetLayer3SubinterfaceResource() resource.Resource {
	if _, found := resourceFuncMap["panos_ethernet_layer3_subinterface"]; !found {
		resourceFuncMap["panos_ethernet_layer3_subinterface"] = resourceFuncs{
			CreateImportId: EthernetLayer3SubinterfaceImportStateCreator,
		}
	}
	return &EthernetLayer3SubinterfaceResource{}
}

type EthernetLayer3SubinterfaceResource struct {
	client  *pango.Client
	manager *sdkmanager.ImportableEntryObjectManager[*layer3.Entry, layer3.Location, layer3.ImportLocation, *layer3.Service]
}

func EthernetLayer3SubinterfaceResourceLocationSchema() rsschema.Attribute {
	return EthernetLayer3SubinterfaceLocationSchema()
}

type EthernetLayer3SubinterfaceResourceModel struct {
	Location                   types.Object                                               `tfsdk:"location"`
	Name                       types.String                                               `tfsdk:"name"`
	Parent                     types.String                                               `tfsdk:"parent"`
	AdjustTcpMss               *EthernetLayer3SubinterfaceResourceAdjustTcpMssObject      `tfsdk:"adjust_tcp_mss"`
	Arp                        types.List                                                 `tfsdk:"arp"`
	Bonjour                    *EthernetLayer3SubinterfaceResourceBonjourObject           `tfsdk:"bonjour"`
	Comment                    types.String                                               `tfsdk:"comment"`
	DdnsConfig                 *EthernetLayer3SubinterfaceResourceDdnsConfigObject        `tfsdk:"ddns_config"`
	DecryptForward             types.Bool                                                 `tfsdk:"decrypt_forward"`
	DfIgnore                   types.Bool                                                 `tfsdk:"df_ignore"`
	DhcpClient                 *EthernetLayer3SubinterfaceResourceDhcpClientObject        `tfsdk:"dhcp_client"`
	InterfaceManagementProfile types.String                                               `tfsdk:"interface_management_profile"`
	Ip                         types.List                                                 `tfsdk:"ip"`
	Ipv6                       *EthernetLayer3SubinterfaceResourceIpv6Object              `tfsdk:"ipv6"`
	Mtu                        types.Int64                                                `tfsdk:"mtu"`
	NdpProxy                   *EthernetLayer3SubinterfaceResourceNdpProxyObject          `tfsdk:"ndp_proxy"`
	NetflowProfile             types.String                                               `tfsdk:"netflow_profile"`
	Pppoe                      *EthernetLayer3SubinterfaceResourcePppoeObject             `tfsdk:"pppoe"`
	SdwanLinkSettings          *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsObject `tfsdk:"sdwan_link_settings"`
	Tag                        types.Int64                                                `tfsdk:"tag"`
}
type EthernetLayer3SubinterfaceResourceAdjustTcpMssObject struct {
	Enable            types.Bool  `tfsdk:"enable"`
	Ipv4MssAdjustment types.Int64 `tfsdk:"ipv4_mss_adjustment"`
	Ipv6MssAdjustment types.Int64 `tfsdk:"ipv6_mss_adjustment"`
}
type EthernetLayer3SubinterfaceResourceArpObject struct {
	Name      types.String `tfsdk:"name"`
	HwAddress types.String `tfsdk:"hw_address"`
}
type EthernetLayer3SubinterfaceResourceBonjourObject struct {
	Enable   types.Bool  `tfsdk:"enable"`
	GroupId  types.Int64 `tfsdk:"group_id"`
	TtlCheck types.Bool  `tfsdk:"ttl_check"`
}
type EthernetLayer3SubinterfaceResourceDdnsConfigObject struct {
	DdnsCertProfile    types.String `tfsdk:"ddns_cert_profile"`
	DdnsEnabled        types.Bool   `tfsdk:"ddns_enabled"`
	DdnsHostname       types.String `tfsdk:"ddns_hostname"`
	DdnsIp             types.List   `tfsdk:"ddns_ip"`
	DdnsIpv6           types.List   `tfsdk:"ddns_ipv6"`
	DdnsUpdateInterval types.Int64  `tfsdk:"ddns_update_interval"`
	DdnsVendor         types.String `tfsdk:"ddns_vendor"`
	DdnsVendorConfig   types.List   `tfsdk:"ddns_vendor_config"`
}
type EthernetLayer3SubinterfaceResourceDdnsConfigDdnsVendorConfigObject struct {
	Name  types.String `tfsdk:"name"`
	Value types.String `tfsdk:"value"`
}
type EthernetLayer3SubinterfaceResourceDhcpClientObject struct {
	CreateDefaultRoute types.Bool                                                      `tfsdk:"create_default_route"`
	DefaultRouteMetric types.Int64                                                     `tfsdk:"default_route_metric"`
	Enable             types.Bool                                                      `tfsdk:"enable"`
	SendHostname       *EthernetLayer3SubinterfaceResourceDhcpClientSendHostnameObject `tfsdk:"send_hostname"`
}
type EthernetLayer3SubinterfaceResourceDhcpClientSendHostnameObject struct {
	Enable   types.Bool   `tfsdk:"enable"`
	Hostname types.String `tfsdk:"hostname"`
}
type EthernetLayer3SubinterfaceResourceIpObject struct {
	Name         types.String `tfsdk:"name"`
	SdwanGateway types.String `tfsdk:"sdwan_gateway"`
}
type EthernetLayer3SubinterfaceResourceIpv6Object struct {
	Address           types.List                                                     `tfsdk:"address"`
	DhcpClient        *EthernetLayer3SubinterfaceResourceIpv6DhcpClientObject        `tfsdk:"dhcp_client"`
	Enabled           types.Bool                                                     `tfsdk:"enabled"`
	Inherited         *EthernetLayer3SubinterfaceResourceIpv6InheritedObject         `tfsdk:"inherited"`
	InterfaceId       types.String                                                   `tfsdk:"interface_id"`
	NeighborDiscovery *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryObject `tfsdk:"neighbor_discovery"`
}
type EthernetLayer3SubinterfaceResourceIpv6AddressObject struct {
	Name              types.String                                                  `tfsdk:"name"`
	EnableOnInterface types.Bool                                                    `tfsdk:"enable_on_interface"`
	Prefix            *EthernetLayer3SubinterfaceResourceIpv6AddressPrefixObject    `tfsdk:"prefix"`
	Anycast           *EthernetLayer3SubinterfaceResourceIpv6AddressAnycastObject   `tfsdk:"anycast"`
	Advertise         *EthernetLayer3SubinterfaceResourceIpv6AddressAdvertiseObject `tfsdk:"advertise"`
}
type EthernetLayer3SubinterfaceResourceIpv6AddressPrefixObject struct {
}
type EthernetLayer3SubinterfaceResourceIpv6AddressAnycastObject struct {
}
type EthernetLayer3SubinterfaceResourceIpv6AddressAdvertiseObject struct {
	Enable            types.Bool   `tfsdk:"enable"`
	ValidLifetime     types.String `tfsdk:"valid_lifetime"`
	PreferredLifetime types.String `tfsdk:"preferred_lifetime"`
	OnlinkFlag        types.Bool   `tfsdk:"onlink_flag"`
	AutoConfigFlag    types.Bool   `tfsdk:"auto_config_flag"`
}
type EthernetLayer3SubinterfaceResourceIpv6DhcpClientObject struct {
	AcceptRaRoute      types.Bool                                                               `tfsdk:"accept_ra_route"`
	DefaultRouteMetric types.Int64                                                              `tfsdk:"default_route_metric"`
	Enable             types.Bool                                                               `tfsdk:"enable"`
	NeighborDiscovery  *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryObject `tfsdk:"neighbor_discovery"`
	Preference         types.String                                                             `tfsdk:"preference"`
	PrefixDelegation   *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationObject  `tfsdk:"prefix_delegation"`
	V6Options          *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsObject         `tfsdk:"v6_options"`
}
type EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryObject struct {
	DadAttempts      types.Int64                                                                       `tfsdk:"dad_attempts"`
	DnsServer        *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerObject `tfsdk:"dns_server"`
	DnsSuffix        *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixObject `tfsdk:"dns_suffix"`
	EnableDad        types.Bool                                                                        `tfsdk:"enable_dad"`
	EnableNdpMonitor types.Bool                                                                        `tfsdk:"enable_ndp_monitor"`
	Neighbor         types.List                                                                        `tfsdk:"neighbor"`
	NsInterval       types.Int64                                                                       `tfsdk:"ns_interval"`
	ReachableTime    types.Int64                                                                       `tfsdk:"reachable_time"`
}
type EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerObject struct {
	Enable types.Bool                                                                              `tfsdk:"enable"`
	Source *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceObject `tfsdk:"source"`
}
type EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceObject struct {
	Dhcpv6 *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Object `tfsdk:"dhcpv6"`
	Manual *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualObject `tfsdk:"manual"`
}
type EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Object struct {
}
type EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualObject struct {
	Server types.List `tfsdk:"server"`
}
type EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerObject struct {
	Name     types.String `tfsdk:"name"`
	Lifetime types.Int64  `tfsdk:"lifetime"`
}
type EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixObject struct {
	Enable types.Bool                                                                              `tfsdk:"enable"`
	Source *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceObject `tfsdk:"source"`
}
type EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceObject struct {
	Dhcpv6 *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Object `tfsdk:"dhcpv6"`
	Manual *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualObject `tfsdk:"manual"`
}
type EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Object struct {
}
type EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualObject struct {
	Suffix types.List `tfsdk:"suffix"`
}
type EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixObject struct {
	Name     types.String `tfsdk:"name"`
	Lifetime types.Int64  `tfsdk:"lifetime"`
}
type EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryNeighborObject struct {
	Name      types.String `tfsdk:"name"`
	HwAddress types.String `tfsdk:"hw_address"`
}
type EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationObject struct {
	Enable *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableObject `tfsdk:"enable"`
}
type EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableObject struct {
	No  *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableNoObject  `tfsdk:"no"`
	Yes *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableYesObject `tfsdk:"yes"`
}
type EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableNoObject struct {
}
type EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableYesObject struct {
	PfxPoolName   types.String `tfsdk:"pfx_pool_name"`
	PrefixLen     types.Int64  `tfsdk:"prefix_len"`
	PrefixLenHint types.Bool   `tfsdk:"prefix_len_hint"`
}
type EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsObject struct {
	DuidType            types.String                                                           `tfsdk:"duid_type"`
	Enable              *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableObject `tfsdk:"enable"`
	RapidCommit         types.Bool                                                             `tfsdk:"rapid_commit"`
	SupportSrvrReconfig types.Bool                                                             `tfsdk:"support_srvr_reconfig"`
}
type EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableObject struct {
	No  *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableNoObject  `tfsdk:"no"`
	Yes *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableYesObject `tfsdk:"yes"`
}
type EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableNoObject struct {
}
type EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableYesObject struct {
	NonTempAddr types.Bool `tfsdk:"non_temp_addr"`
	TempAddr    types.Bool `tfsdk:"temp_addr"`
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedObject struct {
	AssignAddr        types.List                                                              `tfsdk:"assign_addr"`
	Enable            types.Bool                                                              `tfsdk:"enable"`
	NeighborDiscovery *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryObject `tfsdk:"neighbor_discovery"`
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrObject struct {
	Name types.String                                                         `tfsdk:"name"`
	Type *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeObject `tfsdk:"type"`
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeObject struct {
	Gua *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaObject `tfsdk:"gua"`
	Ula *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaObject `tfsdk:"ula"`
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaObject struct {
	EnableOnInterface types.Bool                                                                       `tfsdk:"enable_on_interface"`
	PrefixPool        types.String                                                                     `tfsdk:"prefix_pool"`
	PoolType          *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeObject  `tfsdk:"pool_type"`
	Advertise         *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaAdvertiseObject `tfsdk:"advertise"`
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeObject struct {
	Dynamic   *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicObject   `tfsdk:"dynamic"`
	DynamicId *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdObject `tfsdk:"dynamic_id"`
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicObject struct {
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdObject struct {
	Identifier types.Int64 `tfsdk:"identifier"`
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaAdvertiseObject struct {
	Enable         types.Bool `tfsdk:"enable"`
	OnlinkFlag     types.Bool `tfsdk:"onlink_flag"`
	AutoConfigFlag types.Bool `tfsdk:"auto_config_flag"`
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaObject struct {
	EnableOnInterface types.Bool                                                                       `tfsdk:"enable_on_interface"`
	Address           types.String                                                                     `tfsdk:"address"`
	Prefix            types.Bool                                                                       `tfsdk:"prefix"`
	Anycast           types.Bool                                                                       `tfsdk:"anycast"`
	Advertise         *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaAdvertiseObject `tfsdk:"advertise"`
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaAdvertiseObject struct {
	Enable            types.Bool   `tfsdk:"enable"`
	ValidLifetime     types.String `tfsdk:"valid_lifetime"`
	PreferredLifetime types.String `tfsdk:"preferred_lifetime"`
	OnlinkFlag        types.Bool   `tfsdk:"onlink_flag"`
	AutoConfigFlag    types.Bool   `tfsdk:"auto_config_flag"`
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryObject struct {
	DadAttempts         types.Int64                                                                                `tfsdk:"dad_attempts"`
	DnsServer           *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerObject           `tfsdk:"dns_server"`
	DnsSuffix           *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixObject           `tfsdk:"dns_suffix"`
	EnableDad           types.Bool                                                                                 `tfsdk:"enable_dad"`
	EnableNdpMonitor    types.Bool                                                                                 `tfsdk:"enable_ndp_monitor"`
	Neighbor            types.List                                                                                 `tfsdk:"neighbor"`
	NsInterval          types.Int64                                                                                `tfsdk:"ns_interval"`
	ReachableTime       types.Int64                                                                                `tfsdk:"reachable_time"`
	RouterAdvertisement *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryRouterAdvertisementObject `tfsdk:"router_advertisement"`
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerObject struct {
	Enable types.Bool                                                                             `tfsdk:"enable"`
	Source *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceObject `tfsdk:"source"`
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceObject struct {
	Dhcpv6 *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Object `tfsdk:"dhcpv6"`
	Manual *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualObject `tfsdk:"manual"`
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Object struct {
	PrefixPool types.String `tfsdk:"prefix_pool"`
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualObject struct {
	Server types.List `tfsdk:"server"`
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerObject struct {
	Name     types.String `tfsdk:"name"`
	Lifetime types.Int64  `tfsdk:"lifetime"`
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixObject struct {
	Enable types.Bool                                                                             `tfsdk:"enable"`
	Source *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceObject `tfsdk:"source"`
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceObject struct {
	Dhcpv6 *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Object `tfsdk:"dhcpv6"`
	Manual *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualObject `tfsdk:"manual"`
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Object struct {
	PrefixPool types.String `tfsdk:"prefix_pool"`
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualObject struct {
	Suffix types.List `tfsdk:"suffix"`
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixObject struct {
	Name     types.String `tfsdk:"name"`
	Lifetime types.Int64  `tfsdk:"lifetime"`
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryNeighborObject struct {
	Name      types.String `tfsdk:"name"`
	HwAddress types.String `tfsdk:"hw_address"`
}
type EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryRouterAdvertisementObject struct {
	Enable                 types.Bool   `tfsdk:"enable"`
	EnableConsistencyCheck types.Bool   `tfsdk:"enable_consistency_check"`
	HopLimit               types.String `tfsdk:"hop_limit"`
	Lifetime               types.Int64  `tfsdk:"lifetime"`
	LinkMtu                types.String `tfsdk:"link_mtu"`
	ManagedFlag            types.Bool   `tfsdk:"managed_flag"`
	MaxInterval            types.Int64  `tfsdk:"max_interval"`
	MinInterval            types.Int64  `tfsdk:"min_interval"`
	OtherFlag              types.Bool   `tfsdk:"other_flag"`
	ReachableTime          types.String `tfsdk:"reachable_time"`
	RetransmissionTimer    types.String `tfsdk:"retransmission_timer"`
	RouterPreference       types.String `tfsdk:"router_preference"`
}
type EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryObject struct {
	DadAttempts         types.Int64                                                                       `tfsdk:"dad_attempts"`
	EnableDad           types.Bool                                                                        `tfsdk:"enable_dad"`
	EnableNdpMonitor    types.Bool                                                                        `tfsdk:"enable_ndp_monitor"`
	Neighbor            types.List                                                                        `tfsdk:"neighbor"`
	NsInterval          types.Int64                                                                       `tfsdk:"ns_interval"`
	ReachableTime       types.Int64                                                                       `tfsdk:"reachable_time"`
	RouterAdvertisement *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementObject `tfsdk:"router_advertisement"`
}
type EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryNeighborObject struct {
	Name      types.String `tfsdk:"name"`
	HwAddress types.String `tfsdk:"hw_address"`
}
type EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementObject struct {
	DnsSupport             *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportObject `tfsdk:"dns_support"`
	Enable                 types.Bool                                                                                  `tfsdk:"enable"`
	EnableConsistencyCheck types.Bool                                                                                  `tfsdk:"enable_consistency_check"`
	HopLimit               types.String                                                                                `tfsdk:"hop_limit"`
	Lifetime               types.Int64                                                                                 `tfsdk:"lifetime"`
	LinkMtu                types.String                                                                                `tfsdk:"link_mtu"`
	ManagedFlag            types.Bool                                                                                  `tfsdk:"managed_flag"`
	MaxInterval            types.Int64                                                                                 `tfsdk:"max_interval"`
	MinInterval            types.Int64                                                                                 `tfsdk:"min_interval"`
	OtherFlag              types.Bool                                                                                  `tfsdk:"other_flag"`
	ReachableTime          types.String                                                                                `tfsdk:"reachable_time"`
	RetransmissionTimer    types.String                                                                                `tfsdk:"retransmission_timer"`
	RouterPreference       types.String                                                                                `tfsdk:"router_preference"`
}
type EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportObject struct {
	Enable types.Bool `tfsdk:"enable"`
	Server types.List `tfsdk:"server"`
	Suffix types.List `tfsdk:"suffix"`
}
type EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerObject struct {
	Name     types.String `tfsdk:"name"`
	Lifetime types.Int64  `tfsdk:"lifetime"`
}
type EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixObject struct {
	Name     types.String `tfsdk:"name"`
	Lifetime types.Int64  `tfsdk:"lifetime"`
}
type EthernetLayer3SubinterfaceResourceNdpProxyObject struct {
	Address types.List `tfsdk:"address"`
	Enabled types.Bool `tfsdk:"enabled"`
}
type EthernetLayer3SubinterfaceResourceNdpProxyAddressObject struct {
	Name   types.String `tfsdk:"name"`
	Negate types.Bool   `tfsdk:"negate"`
}
type EthernetLayer3SubinterfaceResourcePppoeObject struct {
	AccessConcentrator types.String                                                `tfsdk:"access_concentrator"`
	Authentication     types.String                                                `tfsdk:"authentication"`
	CreateDefaultRoute types.Bool                                                  `tfsdk:"create_default_route"`
	DefaultRouteMetric types.Int64                                                 `tfsdk:"default_route_metric"`
	Enable             types.Bool                                                  `tfsdk:"enable"`
	Passive            *EthernetLayer3SubinterfaceResourcePppoePassiveObject       `tfsdk:"passive"`
	Password           types.String                                                `tfsdk:"password"`
	Service            types.String                                                `tfsdk:"service"`
	StaticAddress      *EthernetLayer3SubinterfaceResourcePppoeStaticAddressObject `tfsdk:"static_address"`
	Username           types.String                                                `tfsdk:"username"`
}
type EthernetLayer3SubinterfaceResourcePppoePassiveObject struct {
	Enable types.Bool `tfsdk:"enable"`
}
type EthernetLayer3SubinterfaceResourcePppoeStaticAddressObject struct {
	Ip types.String `tfsdk:"ip"`
}
type EthernetLayer3SubinterfaceResourceSdwanLinkSettingsObject struct {
	Enable                types.Bool                                                            `tfsdk:"enable"`
	SdwanInterfaceProfile types.String                                                          `tfsdk:"sdwan_interface_profile"`
	UpstreamNat           *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatObject `tfsdk:"upstream_nat"`
}
type EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatObject struct {
	Enable   types.Bool                                                                    `tfsdk:"enable"`
	Ddns     *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatDdnsObject     `tfsdk:"ddns"`
	StaticIp *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatStaticIpObject `tfsdk:"static_ip"`
}
type EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatDdnsObject struct {
}
type EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatStaticIpObject struct {
	Fqdn      types.String `tfsdk:"fqdn"`
	IpAddress types.String `tfsdk:"ip_address"`
}

func (r *EthernetLayer3SubinterfaceResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func EthernetLayer3SubinterfaceResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": EthernetLayer3SubinterfaceResourceLocationSchema(),

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"parent": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"adjust_tcp_mss": EthernetLayer3SubinterfaceResourceAdjustTcpMssSchema(),

			"arp": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceResourceArpSchema(),
			},

			"bonjour": EthernetLayer3SubinterfaceResourceBonjourSchema(),

			"comment": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ddns_config": EthernetLayer3SubinterfaceResourceDdnsConfigSchema(),

			"decrypt_forward": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"df_ignore": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"dhcp_client": EthernetLayer3SubinterfaceResourceDhcpClientSchema(),

			"interface_management_profile": rsschema.StringAttribute{
				Description: "Interface management profile",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ip": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceResourceIpSchema(),
			},

			"ipv6": EthernetLayer3SubinterfaceResourceIpv6Schema(),

			"mtu": rsschema.Int64Attribute{
				Description: "Maximum Transfer Unit, up to 9216 in Jumbo-Frame mode, up to 1500 otherwise",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ndp_proxy": EthernetLayer3SubinterfaceResourceNdpProxySchema(),

			"netflow_profile": rsschema.StringAttribute{
				Description: "Netflow Server Profile",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"pppoe": EthernetLayer3SubinterfaceResourcePppoeSchema(),

			"sdwan_link_settings": EthernetLayer3SubinterfaceResourceSdwanLinkSettingsSchema(),

			"tag": rsschema.Int64Attribute{
				Description: "802.1q VLAN tag",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceModel) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceAdjustTcpMssSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"enable": rsschema.BoolAttribute{
				Description: "Set if TCP MSS value should be reduced based on mtu",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ipv4_mss_adjustment": rsschema.Int64Attribute{
				Description: "IPv4 MSS adjustment size (in bytes)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(40),
			},

			"ipv6_mss_adjustment": rsschema.Int64Attribute{
				Description: "IPv6 MSS adjustment size (in bytes)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(60),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceAdjustTcpMssObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceAdjustTcpMssSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceArpSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"hw_address": rsschema.StringAttribute{
				Description: "MAC address (format xx:xx:xx:xx:xx:xx)",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceArpObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceArpSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceBonjourSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"enable": rsschema.BoolAttribute{
				Description: "Set to support Bonjour service",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"group_id": rsschema.Int64Attribute{
				Description: "default 0: NO-Group",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(40),
			},

			"ttl_check": rsschema.BoolAttribute{
				Description: "Set to check and update TTL",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceBonjourObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceBonjourSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceDdnsConfigSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"ddns_cert_profile": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ddns_enabled": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ddns_hostname": rsschema.StringAttribute{
				Description: "ddns hostname variable or real address",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ddns_ip": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"ddns_ipv6": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"ddns_update_interval": rsschema.Int64Attribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(1),
			},

			"ddns_vendor": rsschema.StringAttribute{
				Description: "Vendor and product type",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ddns_vendor_config": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceResourceDdnsConfigDdnsVendorConfigSchema(),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceDdnsConfigObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceDdnsConfigSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceDdnsConfigDdnsVendorConfigSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"value": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceDdnsConfigDdnsVendorConfigObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceDdnsConfigDdnsVendorConfigSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceDhcpClientSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"create_default_route": rsschema.BoolAttribute{
				Description: "Automatically create default route pointing to default gateway provided by server",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"default_route_metric": rsschema.Int64Attribute{
				Description: "Metric of the default route created",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(10),
			},

			"enable": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"send_hostname": EthernetLayer3SubinterfaceResourceDhcpClientSendHostnameSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceDhcpClientObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceDhcpClientSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceDhcpClientSendHostnameSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"enable": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hostname": rsschema.StringAttribute{
				Description: "Set Interface Hostname",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("system-hostname"),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceDhcpClientSendHostnameObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceDhcpClientSendHostnameSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"sdwan_gateway": rsschema.StringAttribute{
				Description: "Gateway IPv4 Address",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6Schema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"address": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceResourceIpv6AddressSchema(),
			},

			"dhcp_client": EthernetLayer3SubinterfaceResourceIpv6DhcpClientSchema(),

			"enabled": rsschema.BoolAttribute{
				Description: "Enable IPv6 on the interface",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"inherited": EthernetLayer3SubinterfaceResourceIpv6InheritedSchema(),

			"interface_id": rsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("EUI-64"),
			},

			"neighbor_discovery": EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoverySchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6Object) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6AddressSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"enable_on_interface": rsschema.BoolAttribute{
				Description: "configure this address on interface",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"prefix": EthernetLayer3SubinterfaceResourceIpv6AddressPrefixSchema(),

			"anycast": EthernetLayer3SubinterfaceResourceIpv6AddressAnycastSchema(),

			"advertise": EthernetLayer3SubinterfaceResourceIpv6AddressAdvertiseSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6AddressObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6AddressSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6AddressPrefixSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes:  map[string]rsschema.Attribute{},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6AddressPrefixObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6AddressPrefixSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6AddressAnycastSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes:  map[string]rsschema.Attribute{},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6AddressAnycastObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6AddressAnycastSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6AddressAdvertiseSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"enable": rsschema.BoolAttribute{
				Description: "enable advertising this prefix in router advertisements",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"valid_lifetime": rsschema.StringAttribute{
				Description: "Valid Lifetime (in seconds) of the prefix advertised in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("2592000"),
			},

			"preferred_lifetime": rsschema.StringAttribute{
				Description: "Preferred Lifetime (in seconds) of the prefix advertised in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("604800"),
			},

			"onlink_flag": rsschema.BoolAttribute{
				Description: "Set the On-Link Flag (L-bit) of the prefix in Router Advertisement messages",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"auto_config_flag": rsschema.BoolAttribute{
				Description: "Set the Auto Address Configuration Flag (A-bit) of the prefix in Router Advertisement messages",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6AddressAdvertiseObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6AddressAdvertiseSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6DhcpClientSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"accept_ra_route": rsschema.BoolAttribute{
				Description: "Accept Router Advertised Default Route",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"default_route_metric": rsschema.Int64Attribute{
				Description: "Metric of the default route created",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(10),
			},

			"enable": rsschema.BoolAttribute{
				Description: "Enable DHCPv6 Client",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"neighbor_discovery": EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoverySchema(),

			"preference": rsschema.StringAttribute{
				Description: "Select Low/Medium/High",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("high"),
			},

			"prefix_delegation": EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationSchema(),

			"v6_options": EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6DhcpClientSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoverySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"dad_attempts": rsschema.Int64Attribute{
				Description: "number of consecutive neighbor solicitation messages sent for duplicate address detection",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(1),
			},

			"dns_server": EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSchema(),

			"dns_suffix": EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSchema(),

			"enable_dad": rsschema.BoolAttribute{
				Description: "Enable Duplicate Address Detection",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"enable_ndp_monitor": rsschema.BoolAttribute{
				Description: "Enable NDP Monitoring",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"neighbor": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryNeighborSchema(),
			},

			"ns_interval": rsschema.Int64Attribute{
				Description: "interval (in seconds) between consecutive neighbor solicitation messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(1),
			},

			"reachable_time": rsschema.Int64Attribute{
				Description: "time (in seconds) that the Reachable status for a neighbor can be maintained",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(30),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoverySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"enable": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source": EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"dhcpv6": EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Schema(),

			"manual": EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Schema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("dhcpv6"),
				path.MatchRelative().AtParent().AtName("manual"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Object) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("dhcpv6"),
				path.MatchRelative().AtParent().AtName("manual"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"server": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerSchema(),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"lifetime": rsschema.Int64Attribute{
				Description: "(4-3600) Lifetime in Seconds",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(1200),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"enable": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source": EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"dhcpv6": EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Schema(),

			"manual": EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Schema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("dhcpv6"),
				path.MatchRelative().AtParent().AtName("manual"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Object) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("dhcpv6"),
				path.MatchRelative().AtParent().AtName("manual"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"suffix": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixSchema(),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"lifetime": rsschema.Int64Attribute{
				Description: "(4-3600) lifetime in seconds",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(1200),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryNeighborSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"hw_address": rsschema.StringAttribute{
				Description: "MAC address (format xx:xx:xx:xx:xx:xx)",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryNeighborObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryNeighborSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"enable": EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"no": EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableNoSchema(),

			"yes": EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableYesSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableNoSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("no"),
				path.MatchRelative().AtParent().AtName("yes"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableNoObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableNoSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableYesSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("no"),
				path.MatchRelative().AtParent().AtName("yes"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"pfx_pool_name": rsschema.StringAttribute{
				Description: "Configure unique Prefix Pool Name",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"prefix_len": rsschema.Int64Attribute{
				Description: "Hint DHCP Prefix Length (bits)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(48),
			},

			"prefix_len_hint": rsschema.BoolAttribute{
				Description: "Send prefix length hint to server",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableYesObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableYesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"duid_type": rsschema.StringAttribute{
				Description: "Select DUID-LLT/DUID-LL",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("duid-type-llt"),
			},

			"enable": EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableSchema(),

			"rapid_commit": rsschema.BoolAttribute{
				Description: "Enable Rapid Commit",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"support_srvr_reconfig": rsschema.BoolAttribute{
				Description: "Enable DHCPv6 Server Re-Configuration Support",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"no": EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableNoSchema(),

			"yes": EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableYesSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableNoSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("no"),
				path.MatchRelative().AtParent().AtName("yes"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableNoObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableNoSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableYesSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("no"),
				path.MatchRelative().AtParent().AtName("yes"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"non_temp_addr": rsschema.BoolAttribute{
				Description: "Request Non-Temporary Address Type",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"temp_addr": rsschema.BoolAttribute{
				Description: "Request Temporary Address Type",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableYesObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableYesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"assign_addr": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrSchema(),
			},

			"enable": rsschema.BoolAttribute{
				Description: "Enable Inherited Interface",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"neighbor_discovery": EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoverySchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"type": EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"gua": EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaSchema(),

			"ula": EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("gua"),
				path.MatchRelative().AtParent().AtName("ula"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"enable_on_interface": rsschema.BoolAttribute{
				Description: "Enable on Interface",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"prefix_pool": rsschema.StringAttribute{
				Description: "Prefix-Pool Name",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"pool_type": EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeSchema(),

			"advertise": EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaAdvertiseSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"dynamic": EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicSchema(),

			"dynamic_id": EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("dynamic"),
				path.MatchRelative().AtParent().AtName("dynamic_id"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("dynamic"),
				path.MatchRelative().AtParent().AtName("dynamic_id"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"identifier": rsschema.Int64Attribute{
				Description: "Range [0-4095] must be unqiue for this prefix-pool",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaAdvertiseSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"enable": rsschema.BoolAttribute{
				Description: "Enable advertising this prefix in router advertisements",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"onlink_flag": rsschema.BoolAttribute{
				Description: "Set the On-Link Flag (L-bit) of the prefix in Router Advertisement messages",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"auto_config_flag": rsschema.BoolAttribute{
				Description: "Set the Auto Address Configuration Flag (A-bit) of the prefix in Router Advertisement messages",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaAdvertiseObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaAdvertiseSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("gua"),
				path.MatchRelative().AtParent().AtName("ula"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"enable_on_interface": rsschema.BoolAttribute{
				Description: "Configure this address on Interface",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"address": rsschema.StringAttribute{
				Description: "Configure ULA (Unique Local Address)",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"prefix": rsschema.BoolAttribute{
				Description: "Use this as prefix to form full address with interface id/EUI-64",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"anycast": rsschema.BoolAttribute{
				Description: "Anycast Address",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"advertise": EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaAdvertiseSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaAdvertiseSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"enable": rsschema.BoolAttribute{
				Description: "enable advertising this prefix in router advertisements",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"valid_lifetime": rsschema.StringAttribute{
				Description: "Valid Lifetime (in seconds) of the prefix advertised in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("2592000"),
			},

			"preferred_lifetime": rsschema.StringAttribute{
				Description: "Preferred Lifetime (in seconds) of the prefix advertised in Router advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("604800"),
			},

			"onlink_flag": rsschema.BoolAttribute{
				Description: "Set the On-Link Flag (L-bit) of the prefix in Router Advertisement messages",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"auto_config_flag": rsschema.BoolAttribute{
				Description: "Set the Auto Address Configuration Flag (A-bit) of the prefix in Router Advertisement messages",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaAdvertiseObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaAdvertiseSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoverySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"dad_attempts": rsschema.Int64Attribute{
				Description: "Number of consecutive neighbor solicitation messages sent for duplicate address detection",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(1),
			},

			"dns_server": EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSchema(),

			"dns_suffix": EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSchema(),

			"enable_dad": rsschema.BoolAttribute{
				Description: "Enable Duplicate Address Detection (DAD)",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"enable_ndp_monitor": rsschema.BoolAttribute{
				Description: "Enable NDP Monitoring",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"neighbor": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryNeighborSchema(),
			},

			"ns_interval": rsschema.Int64Attribute{
				Description: "Interval (in seconds) between consecutive neighbor solicitation messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(1),
			},

			"reachable_time": rsschema.Int64Attribute{
				Description: "Time (in seconds) that the Reachable status for a neighbor can be maintained",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(30),
			},

			"router_advertisement": EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryRouterAdvertisementSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoverySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"enable": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source": EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"dhcpv6": EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Schema(),

			"manual": EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Schema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("dhcpv6"),
				path.MatchRelative().AtParent().AtName("manual"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"prefix_pool": rsschema.StringAttribute{
				Description: "Prefix-Pool Name",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Object) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("dhcpv6"),
				path.MatchRelative().AtParent().AtName("manual"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"server": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerSchema(),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"lifetime": rsschema.Int64Attribute{
				Description: "(4-3600) Lifetime in Seconds",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(1200),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"enable": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source": EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"dhcpv6": EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Schema(),

			"manual": EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Schema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("dhcpv6"),
				path.MatchRelative().AtParent().AtName("manual"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"prefix_pool": rsschema.StringAttribute{
				Description: "Prefix-Pool Name",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Object) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Schema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("dhcpv6"),
				path.MatchRelative().AtParent().AtName("manual"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"suffix": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixSchema(),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"lifetime": rsschema.Int64Attribute{
				Description: "(4-3600) lifetime in seconds",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(1200),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryNeighborSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"hw_address": rsschema.StringAttribute{
				Description: "MAC address (format xx:xx:xx:xx:xx:xx)",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryNeighborObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryNeighborSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryRouterAdvertisementSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"enable": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"enable_consistency_check": rsschema.BoolAttribute{
				Description: "check consistency of RA messages from other routers.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hop_limit": rsschema.StringAttribute{
				Description: "Current Hop Limit advertised in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("64"),
			},

			"lifetime": rsschema.Int64Attribute{
				Description: "Router Lifetime (in seconds) advertised in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(1800),
			},

			"link_mtu": rsschema.StringAttribute{
				Description: "value of MTU option in Router Advertisement messages, upto 9216 in Jumbo-Frame mode, up to 1500 otherwise",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("unspecified"),
			},

			"managed_flag": rsschema.BoolAttribute{
				Description: "Set the Managed Configuration Flag (M-bit) in Router Advertisement messages",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"max_interval": rsschema.Int64Attribute{
				Description: "Maximum interval (seconds) between consecutive unsolicited Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(600),
			},

			"min_interval": rsschema.Int64Attribute{
				Description: "Minimum interval (seconds) between consecutive unsolicited Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(200),
			},

			"other_flag": rsschema.BoolAttribute{
				Description: "Set the Other Stateful Configuration Flag (O-bit) in Router Advertisement messages",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"reachable_time": rsschema.StringAttribute{
				Description: "Reachable Time (in milliseconds) advertised in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("unspecified"),
			},

			"retransmission_timer": rsschema.StringAttribute{
				Description: "Retransmission Timer (in milliseconds) advertised in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("unspecified"),
			},

			"router_preference": rsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("Medium"),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryRouterAdvertisementObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryRouterAdvertisementSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoverySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"dad_attempts": rsschema.Int64Attribute{
				Description: "number of consecutive neighbor solicitation messages sent for duplicate address detection",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(1),
			},

			"enable_dad": rsschema.BoolAttribute{
				Description: "enable duplicate address detection",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"enable_ndp_monitor": rsschema.BoolAttribute{
				Description: "enable ndp monitoring",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"neighbor": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryNeighborSchema(),
			},

			"ns_interval": rsschema.Int64Attribute{
				Description: "interval (in seconds) between consecutive neighbor solicitation messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(1),
			},

			"reachable_time": rsschema.Int64Attribute{
				Description: "time (in seconds) that the Reachable status for a neighbor can be maintained",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(30),
			},

			"router_advertisement": EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoverySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryNeighborSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"hw_address": rsschema.StringAttribute{
				Description: "MAC address (format xx:xx:xx:xx:xx:xx)",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryNeighborObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryNeighborSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"dns_support": EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSchema(),

			"enable": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"enable_consistency_check": rsschema.BoolAttribute{
				Description: "check consistency of RA messages from other routers.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"hop_limit": rsschema.StringAttribute{
				Description: "Current Hop Limit advertised in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("64"),
			},

			"lifetime": rsschema.Int64Attribute{
				Description: "Router Lifetime (in seconds) advertised in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(1800),
			},

			"link_mtu": rsschema.StringAttribute{
				Description: "value of MTU option in Router Advertisement messages, upto 9216 in Jumbo-Frame mode, up to 1500 otherwise",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("unspecified"),
			},

			"managed_flag": rsschema.BoolAttribute{
				Description: "Set the Managed Configuration Flag (M-bit) in Router Advertisement messages",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"max_interval": rsschema.Int64Attribute{
				Description: "Maximum interval (seconds) between consecutive unsolicited Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(600),
			},

			"min_interval": rsschema.Int64Attribute{
				Description: "Minimum interval (seconds) between consecutive unsolicited Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(200),
			},

			"other_flag": rsschema.BoolAttribute{
				Description: "Set the Other Stateful Configuration Flag (O-bit) in Router Advertisement messages",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"reachable_time": rsschema.StringAttribute{
				Description: "Reachable Time (in milliseconds) advertised in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("unspecified"),
			},

			"retransmission_timer": rsschema.StringAttribute{
				Description: "Retransmission Timer (in milliseconds) advertised in Router Advertisement messages",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("unspecified"),
			},

			"router_preference": rsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("Medium"),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"enable": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"server": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerSchema(),
			},

			"suffix": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixSchema(),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"lifetime": rsschema.Int64Attribute{
				Description: "(4-3600) lifetime in seconds",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(1200),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"lifetime": rsschema.Int64Attribute{
				Description: "(4-3600) lifetime in seconds",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(1200),
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceNdpProxySchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"address": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: EthernetLayer3SubinterfaceResourceNdpProxyAddressSchema(),
			},

			"enabled": rsschema.BoolAttribute{
				Description: "Enable proxy NDP on the interface",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceNdpProxyObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceNdpProxySchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceNdpProxyAddressSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"negate": rsschema.BoolAttribute{
				Description: "put the prefix or address on a block list",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceNdpProxyAddressObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceNdpProxyAddressSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourcePppoeSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"access_concentrator": rsschema.StringAttribute{
				Description: "desired access concentrator. The valid characters are [a-zA-Z0-9._~!@#$%^*(){},:?/+=\\-]",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"authentication": rsschema.StringAttribute{
				Description: "authentication protocol",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"create_default_route": rsschema.BoolAttribute{
				Description: "automatically create default route pointing to peer",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"default_route_metric": rsschema.Int64Attribute{
				Description: "metric of the default route created",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(10),
			},

			"enable": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"passive": EthernetLayer3SubinterfaceResourcePppoePassiveSchema(),

			"password": rsschema.StringAttribute{
				Description: "password for ppp autentication",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},

			"service": rsschema.StringAttribute{
				Description: "desired service. The valid characters are [a-zA-Z0-9._~!@#$%^*(){},:?/+=\\-]",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"static_address": EthernetLayer3SubinterfaceResourcePppoeStaticAddressSchema(),

			"username": rsschema.StringAttribute{
				Description: "username for ppp authentication. The valid characters are [a-zA-Z0-9._~!@#$%^*(){},:?/+=\\-]",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourcePppoeObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourcePppoeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourcePppoePassiveSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"enable": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourcePppoePassiveObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourcePppoePassiveSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourcePppoeStaticAddressSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"ip": rsschema.StringAttribute{
				Description: "static ip address",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourcePppoeStaticAddressObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourcePppoeStaticAddressSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceSdwanLinkSettingsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"enable": rsschema.BoolAttribute{
				Description: "Enable sdwan on this ethernet interface",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"sdwan_interface_profile": rsschema.StringAttribute{
				Description: "Sdwan link characteristics",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"upstream_nat": EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceSdwanLinkSettingsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"enable": rsschema.BoolAttribute{
				Description: "Enable upstream NAT IP config",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ddns": EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatDdnsSchema(),

			"static_ip": EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatStaticIpSchema(),
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatDdnsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("ddns"),
				path.MatchRelative().AtParent().AtName("static_ip"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatDdnsObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatDdnsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatStaticIpSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("ddns"),
				path.MatchRelative().AtParent().AtName("static_ip"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"fqdn": rsschema.StringAttribute{
				Description: "Upstream NAT address FQDN name configuration",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,

				Validators: []validator.String{
					stringvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("fqdn"),
						path.MatchRelative().AtParent().AtName("ip_address"),
					}...),
				},
			},

			"ip_address": rsschema.StringAttribute{
				Description: "Upstream NAT IP address",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatStaticIpObject) getTypeFor(name string) attr.Type {
	schema := EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatStaticIpSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *EthernetLayer3SubinterfaceResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ethernet_layer3_subinterface"
}

func (r *EthernetLayer3SubinterfaceResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = EthernetLayer3SubinterfaceResourceSchema()
}

// </ResourceSchema>

func (r *EthernetLayer3SubinterfaceResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	r.client = providerData.Client
	specifier, _, err := layer3.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}

	batchSize := providerData.MultiConfigBatchSize
	r.manager = sdkmanager.NewImportableEntryObjectManager(r.client, layer3.NewService(r.client), batchSize, specifier, layer3.SpecMatches)
}

func (o *EthernetLayer3SubinterfaceResourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj EthernetLayer3SubinterfaceLocation

	var adjustTcpMssObj *EthernetLayer3SubinterfaceResourceAdjustTcpMssObject

	var bonjourObj *EthernetLayer3SubinterfaceResourceBonjourObject

	var ddnsConfigObj *EthernetLayer3SubinterfaceResourceDdnsConfigObject

	var dhcpClientObj *EthernetLayer3SubinterfaceResourceDhcpClientObject

	var ipv6Obj *EthernetLayer3SubinterfaceResourceIpv6Object

	var ndpProxyObj *EthernetLayer3SubinterfaceResourceNdpProxyObject

	var pppoeObj *EthernetLayer3SubinterfaceResourcePppoeObject

	var sdwanLinkSettingsObj *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsObject

	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"name":   types.StringType,
		"parent": types.StringType,
		"adjust_tcp_mss": types.ObjectType{
			AttrTypes: adjustTcpMssObj.AttributeTypes(),
		},
		"arp": types.ListType{},
		"bonjour": types.ObjectType{
			AttrTypes: bonjourObj.AttributeTypes(),
		},
		"comment": types.StringType,
		"ddns_config": types.ObjectType{
			AttrTypes: ddnsConfigObj.AttributeTypes(),
		},
		"decrypt_forward": types.BoolType,
		"df_ignore":       types.BoolType,
		"dhcp_client": types.ObjectType{
			AttrTypes: dhcpClientObj.AttributeTypes(),
		},
		"interface_management_profile": types.StringType,
		"ip":                           types.ListType{},
		"ipv6": types.ObjectType{
			AttrTypes: ipv6Obj.AttributeTypes(),
		},
		"mtu": types.Int64Type,
		"ndp_proxy": types.ObjectType{
			AttrTypes: ndpProxyObj.AttributeTypes(),
		},
		"netflow_profile": types.StringType,
		"pppoe": types.ObjectType{
			AttrTypes: pppoeObj.AttributeTypes(),
		},
		"sdwan_link_settings": types.ObjectType{
			AttrTypes: sdwanLinkSettingsObj.AttributeTypes(),
		},
		"tag": types.Int64Type,
	}
}

func (o EthernetLayer3SubinterfaceResourceModel) AncestorName() string {
	return ""
}

func (o EthernetLayer3SubinterfaceResourceModel) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceAdjustTcpMssObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"enable":              types.BoolType,
		"ipv4_mss_adjustment": types.Int64Type,
		"ipv6_mss_adjustment": types.Int64Type,
	}
}

func (o EthernetLayer3SubinterfaceResourceAdjustTcpMssObject) AncestorName() string {
	return "adjust-tcp-mss"
}

func (o EthernetLayer3SubinterfaceResourceAdjustTcpMssObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceArpObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":       types.StringType,
		"hw_address": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceResourceArpObject) AncestorName() string {
	return "arp"
}

func (o EthernetLayer3SubinterfaceResourceArpObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceResourceBonjourObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"enable":    types.BoolType,
		"group_id":  types.Int64Type,
		"ttl_check": types.BoolType,
	}
}

func (o EthernetLayer3SubinterfaceResourceBonjourObject) AncestorName() string {
	return "bonjour"
}

func (o EthernetLayer3SubinterfaceResourceBonjourObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceDdnsConfigObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"ddns_cert_profile":    types.StringType,
		"ddns_enabled":         types.BoolType,
		"ddns_hostname":        types.StringType,
		"ddns_ip":              types.ListType{},
		"ddns_ipv6":            types.ListType{},
		"ddns_update_interval": types.Int64Type,
		"ddns_vendor":          types.StringType,
		"ddns_vendor_config":   types.ListType{},
	}
}

func (o EthernetLayer3SubinterfaceResourceDdnsConfigObject) AncestorName() string {
	return "ddns-config"
}

func (o EthernetLayer3SubinterfaceResourceDdnsConfigObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceDdnsConfigDdnsVendorConfigObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":  types.StringType,
		"value": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceResourceDdnsConfigDdnsVendorConfigObject) AncestorName() string {
	return "ddns-vendor-config"
}

func (o EthernetLayer3SubinterfaceResourceDdnsConfigDdnsVendorConfigObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceResourceDhcpClientObject) AttributeTypes() map[string]attr.Type {

	var sendHostnameObj *EthernetLayer3SubinterfaceResourceDhcpClientSendHostnameObject
	return map[string]attr.Type{
		"create_default_route": types.BoolType,
		"default_route_metric": types.Int64Type,
		"enable":               types.BoolType,
		"send_hostname": types.ObjectType{
			AttrTypes: sendHostnameObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceDhcpClientObject) AncestorName() string {
	return "dhcp-client"
}

func (o EthernetLayer3SubinterfaceResourceDhcpClientObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceDhcpClientSendHostnameObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"enable":   types.BoolType,
		"hostname": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceResourceDhcpClientSendHostnameObject) AncestorName() string {
	return "send-hostname"
}

func (o EthernetLayer3SubinterfaceResourceDhcpClientSendHostnameObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":          types.StringType,
		"sdwan_gateway": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceResourceIpObject) AncestorName() string {
	return "ip"
}

func (o EthernetLayer3SubinterfaceResourceIpObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceResourceIpv6Object) AttributeTypes() map[string]attr.Type {

	var dhcpClientObj *EthernetLayer3SubinterfaceResourceIpv6DhcpClientObject

	var inheritedObj *EthernetLayer3SubinterfaceResourceIpv6InheritedObject

	var neighborDiscoveryObj *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryObject
	return map[string]attr.Type{
		"address": types.ListType{},
		"dhcp_client": types.ObjectType{
			AttrTypes: dhcpClientObj.AttributeTypes(),
		},
		"enabled": types.BoolType,
		"inherited": types.ObjectType{
			AttrTypes: inheritedObj.AttributeTypes(),
		},
		"interface_id": types.StringType,
		"neighbor_discovery": types.ObjectType{
			AttrTypes: neighborDiscoveryObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6Object) AncestorName() string {
	return "ipv6"
}

func (o EthernetLayer3SubinterfaceResourceIpv6Object) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6AddressObject) AttributeTypes() map[string]attr.Type {

	var prefixObj *EthernetLayer3SubinterfaceResourceIpv6AddressPrefixObject

	var anycastObj *EthernetLayer3SubinterfaceResourceIpv6AddressAnycastObject

	var advertiseObj *EthernetLayer3SubinterfaceResourceIpv6AddressAdvertiseObject
	return map[string]attr.Type{
		"name":                types.StringType,
		"enable_on_interface": types.BoolType,
		"prefix": types.ObjectType{
			AttrTypes: prefixObj.AttributeTypes(),
		},
		"anycast": types.ObjectType{
			AttrTypes: anycastObj.AttributeTypes(),
		},
		"advertise": types.ObjectType{
			AttrTypes: advertiseObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6AddressObject) AncestorName() string {
	return "address"
}

func (o EthernetLayer3SubinterfaceResourceIpv6AddressObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceResourceIpv6AddressPrefixObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o EthernetLayer3SubinterfaceResourceIpv6AddressPrefixObject) AncestorName() string {
	return "prefix"
}

func (o EthernetLayer3SubinterfaceResourceIpv6AddressPrefixObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6AddressAnycastObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o EthernetLayer3SubinterfaceResourceIpv6AddressAnycastObject) AncestorName() string {
	return "anycast"
}

func (o EthernetLayer3SubinterfaceResourceIpv6AddressAnycastObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6AddressAdvertiseObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"enable":             types.BoolType,
		"valid_lifetime":     types.StringType,
		"preferred_lifetime": types.StringType,
		"onlink_flag":        types.BoolType,
		"auto_config_flag":   types.BoolType,
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6AddressAdvertiseObject) AncestorName() string {
	return "advertise"
}

func (o EthernetLayer3SubinterfaceResourceIpv6AddressAdvertiseObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientObject) AttributeTypes() map[string]attr.Type {

	var neighborDiscoveryObj *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryObject

	var prefixDelegationObj *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationObject

	var v6OptionsObj *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsObject
	return map[string]attr.Type{
		"accept_ra_route":      types.BoolType,
		"default_route_metric": types.Int64Type,
		"enable":               types.BoolType,
		"neighbor_discovery": types.ObjectType{
			AttrTypes: neighborDiscoveryObj.AttributeTypes(),
		},
		"preference": types.StringType,
		"prefix_delegation": types.ObjectType{
			AttrTypes: prefixDelegationObj.AttributeTypes(),
		},
		"v6_options": types.ObjectType{
			AttrTypes: v6OptionsObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientObject) AncestorName() string {
	return "dhcp-client"
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryObject) AttributeTypes() map[string]attr.Type {

	var dnsServerObj *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerObject

	var dnsSuffixObj *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixObject

	return map[string]attr.Type{
		"dad_attempts": types.Int64Type,
		"dns_server": types.ObjectType{
			AttrTypes: dnsServerObj.AttributeTypes(),
		},
		"dns_suffix": types.ObjectType{
			AttrTypes: dnsSuffixObj.AttributeTypes(),
		},
		"enable_dad":         types.BoolType,
		"enable_ndp_monitor": types.BoolType,
		"neighbor":           types.ListType{},
		"ns_interval":        types.Int64Type,
		"reachable_time":     types.Int64Type,
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryObject) AncestorName() string {
	return "neighbor-discovery"
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerObject) AttributeTypes() map[string]attr.Type {

	var sourceObj *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceObject
	return map[string]attr.Type{
		"enable": types.BoolType,
		"source": types.ObjectType{
			AttrTypes: sourceObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerObject) AncestorName() string {
	return "dns-server"
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceObject) AttributeTypes() map[string]attr.Type {

	var dhcpv6Obj *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Object

	var manualObj *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualObject
	return map[string]attr.Type{
		"dhcpv6": types.ObjectType{
			AttrTypes: dhcpv6Obj.AttributeTypes(),
		},
		"manual": types.ObjectType{
			AttrTypes: manualObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceObject) AncestorName() string {
	return "source"
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Object) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Object) AncestorName() string {
	return "dhcpv6"
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Object) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"server": types.ListType{},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualObject) AncestorName() string {
	return "manual"
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":     types.StringType,
		"lifetime": types.Int64Type,
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerObject) AncestorName() string {
	return "server"
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixObject) AttributeTypes() map[string]attr.Type {

	var sourceObj *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceObject
	return map[string]attr.Type{
		"enable": types.BoolType,
		"source": types.ObjectType{
			AttrTypes: sourceObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixObject) AncestorName() string {
	return "dns-suffix"
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceObject) AttributeTypes() map[string]attr.Type {

	var dhcpv6Obj *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Object

	var manualObj *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualObject
	return map[string]attr.Type{
		"dhcpv6": types.ObjectType{
			AttrTypes: dhcpv6Obj.AttributeTypes(),
		},
		"manual": types.ObjectType{
			AttrTypes: manualObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceObject) AncestorName() string {
	return "source"
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Object) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Object) AncestorName() string {
	return "dhcpv6"
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Object) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"suffix": types.ListType{},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualObject) AncestorName() string {
	return "manual"
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":     types.StringType,
		"lifetime": types.Int64Type,
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixObject) AncestorName() string {
	return "suffix"
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryNeighborObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":       types.StringType,
		"hw_address": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryNeighborObject) AncestorName() string {
	return "neighbor"
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryNeighborObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationObject) AttributeTypes() map[string]attr.Type {

	var enableObj *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableObject
	return map[string]attr.Type{
		"enable": types.ObjectType{
			AttrTypes: enableObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationObject) AncestorName() string {
	return "prefix-delegation"
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableObject) AttributeTypes() map[string]attr.Type {

	var noObj *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableNoObject

	var yesObj *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableYesObject
	return map[string]attr.Type{
		"no": types.ObjectType{
			AttrTypes: noObj.AttributeTypes(),
		},
		"yes": types.ObjectType{
			AttrTypes: yesObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableObject) AncestorName() string {
	return "enable"
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableNoObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableNoObject) AncestorName() string {
	return "no"
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableNoObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableYesObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"pfx_pool_name":   types.StringType,
		"prefix_len":      types.Int64Type,
		"prefix_len_hint": types.BoolType,
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableYesObject) AncestorName() string {
	return "yes"
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableYesObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsObject) AttributeTypes() map[string]attr.Type {

	var enableObj *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableObject

	return map[string]attr.Type{
		"duid_type": types.StringType,
		"enable": types.ObjectType{
			AttrTypes: enableObj.AttributeTypes(),
		},
		"rapid_commit":          types.BoolType,
		"support_srvr_reconfig": types.BoolType,
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsObject) AncestorName() string {
	return "v6-options"
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableObject) AttributeTypes() map[string]attr.Type {

	var noObj *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableNoObject

	var yesObj *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableYesObject
	return map[string]attr.Type{
		"no": types.ObjectType{
			AttrTypes: noObj.AttributeTypes(),
		},
		"yes": types.ObjectType{
			AttrTypes: yesObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableObject) AncestorName() string {
	return "enable"
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableNoObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableNoObject) AncestorName() string {
	return "no"
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableNoObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableYesObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"non_temp_addr": types.BoolType,
		"temp_addr":     types.BoolType,
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableYesObject) AncestorName() string {
	return "yes"
}

func (o EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableYesObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedObject) AttributeTypes() map[string]attr.Type {

	var neighborDiscoveryObj *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryObject
	return map[string]attr.Type{
		"assign_addr": types.ListType{},
		"enable":      types.BoolType,
		"neighbor_discovery": types.ObjectType{
			AttrTypes: neighborDiscoveryObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedObject) AncestorName() string {
	return "inherited"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrObject) AttributeTypes() map[string]attr.Type {

	var typeObj *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeObject
	return map[string]attr.Type{
		"name": types.StringType,
		"type": types.ObjectType{
			AttrTypes: typeObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrObject) AncestorName() string {
	return "assign-addr"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeObject) AttributeTypes() map[string]attr.Type {

	var guaObj *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaObject

	var ulaObj *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaObject
	return map[string]attr.Type{
		"gua": types.ObjectType{
			AttrTypes: guaObj.AttributeTypes(),
		},
		"ula": types.ObjectType{
			AttrTypes: ulaObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeObject) AncestorName() string {
	return "type"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaObject) AttributeTypes() map[string]attr.Type {

	var poolTypeObj *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeObject

	var advertiseObj *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaAdvertiseObject
	return map[string]attr.Type{
		"enable_on_interface": types.BoolType,
		"prefix_pool":         types.StringType,
		"pool_type": types.ObjectType{
			AttrTypes: poolTypeObj.AttributeTypes(),
		},
		"advertise": types.ObjectType{
			AttrTypes: advertiseObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaObject) AncestorName() string {
	return "gua"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeObject) AttributeTypes() map[string]attr.Type {

	var dynamicObj *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicObject

	var dynamicIdObj *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdObject
	return map[string]attr.Type{
		"dynamic": types.ObjectType{
			AttrTypes: dynamicObj.AttributeTypes(),
		},
		"dynamic_id": types.ObjectType{
			AttrTypes: dynamicIdObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeObject) AncestorName() string {
	return "pool-type"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicObject) AncestorName() string {
	return "dynamic"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"identifier": types.Int64Type,
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdObject) AncestorName() string {
	return "dynamic-id"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaAdvertiseObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"enable":           types.BoolType,
		"onlink_flag":      types.BoolType,
		"auto_config_flag": types.BoolType,
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaAdvertiseObject) AncestorName() string {
	return "advertise"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaAdvertiseObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaObject) AttributeTypes() map[string]attr.Type {

	var advertiseObj *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaAdvertiseObject
	return map[string]attr.Type{
		"enable_on_interface": types.BoolType,
		"address":             types.StringType,
		"prefix":              types.BoolType,
		"anycast":             types.BoolType,
		"advertise": types.ObjectType{
			AttrTypes: advertiseObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaObject) AncestorName() string {
	return "ula"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaAdvertiseObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"enable":             types.BoolType,
		"valid_lifetime":     types.StringType,
		"preferred_lifetime": types.StringType,
		"onlink_flag":        types.BoolType,
		"auto_config_flag":   types.BoolType,
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaAdvertiseObject) AncestorName() string {
	return "advertise"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaAdvertiseObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryObject) AttributeTypes() map[string]attr.Type {

	var dnsServerObj *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerObject

	var dnsSuffixObj *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixObject

	var routerAdvertisementObj *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryRouterAdvertisementObject
	return map[string]attr.Type{
		"dad_attempts": types.Int64Type,
		"dns_server": types.ObjectType{
			AttrTypes: dnsServerObj.AttributeTypes(),
		},
		"dns_suffix": types.ObjectType{
			AttrTypes: dnsSuffixObj.AttributeTypes(),
		},
		"enable_dad":         types.BoolType,
		"enable_ndp_monitor": types.BoolType,
		"neighbor":           types.ListType{},
		"ns_interval":        types.Int64Type,
		"reachable_time":     types.Int64Type,
		"router_advertisement": types.ObjectType{
			AttrTypes: routerAdvertisementObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryObject) AncestorName() string {
	return "neighbor-discovery"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerObject) AttributeTypes() map[string]attr.Type {

	var sourceObj *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceObject
	return map[string]attr.Type{
		"enable": types.BoolType,
		"source": types.ObjectType{
			AttrTypes: sourceObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerObject) AncestorName() string {
	return "dns-server"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceObject) AttributeTypes() map[string]attr.Type {

	var dhcpv6Obj *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Object

	var manualObj *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualObject
	return map[string]attr.Type{
		"dhcpv6": types.ObjectType{
			AttrTypes: dhcpv6Obj.AttributeTypes(),
		},
		"manual": types.ObjectType{
			AttrTypes: manualObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceObject) AncestorName() string {
	return "source"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Object) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"prefix_pool": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Object) AncestorName() string {
	return "dhcpv6"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Object) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"server": types.ListType{},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualObject) AncestorName() string {
	return "manual"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":     types.StringType,
		"lifetime": types.Int64Type,
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerObject) AncestorName() string {
	return "server"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixObject) AttributeTypes() map[string]attr.Type {

	var sourceObj *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceObject
	return map[string]attr.Type{
		"enable": types.BoolType,
		"source": types.ObjectType{
			AttrTypes: sourceObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixObject) AncestorName() string {
	return "dns-suffix"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceObject) AttributeTypes() map[string]attr.Type {

	var dhcpv6Obj *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Object

	var manualObj *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualObject
	return map[string]attr.Type{
		"dhcpv6": types.ObjectType{
			AttrTypes: dhcpv6Obj.AttributeTypes(),
		},
		"manual": types.ObjectType{
			AttrTypes: manualObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceObject) AncestorName() string {
	return "source"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Object) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"prefix_pool": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Object) AncestorName() string {
	return "dhcpv6"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Object) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"suffix": types.ListType{},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualObject) AncestorName() string {
	return "manual"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":     types.StringType,
		"lifetime": types.Int64Type,
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixObject) AncestorName() string {
	return "suffix"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryNeighborObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":       types.StringType,
		"hw_address": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryNeighborObject) AncestorName() string {
	return "neighbor"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryNeighborObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryRouterAdvertisementObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"enable":                   types.BoolType,
		"enable_consistency_check": types.BoolType,
		"hop_limit":                types.StringType,
		"lifetime":                 types.Int64Type,
		"link_mtu":                 types.StringType,
		"managed_flag":             types.BoolType,
		"max_interval":             types.Int64Type,
		"min_interval":             types.Int64Type,
		"other_flag":               types.BoolType,
		"reachable_time":           types.StringType,
		"retransmission_timer":     types.StringType,
		"router_preference":        types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryRouterAdvertisementObject) AncestorName() string {
	return "router-advertisement"
}

func (o EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryRouterAdvertisementObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryObject) AttributeTypes() map[string]attr.Type {

	var routerAdvertisementObj *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementObject
	return map[string]attr.Type{
		"dad_attempts":       types.Int64Type,
		"enable_dad":         types.BoolType,
		"enable_ndp_monitor": types.BoolType,
		"neighbor":           types.ListType{},
		"ns_interval":        types.Int64Type,
		"reachable_time":     types.Int64Type,
		"router_advertisement": types.ObjectType{
			AttrTypes: routerAdvertisementObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryObject) AncestorName() string {
	return "neighbor-discovery"
}

func (o EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryNeighborObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":       types.StringType,
		"hw_address": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryNeighborObject) AncestorName() string {
	return "neighbor"
}

func (o EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryNeighborObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementObject) AttributeTypes() map[string]attr.Type {

	var dnsSupportObj *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportObject

	return map[string]attr.Type{
		"dns_support": types.ObjectType{
			AttrTypes: dnsSupportObj.AttributeTypes(),
		},
		"enable":                   types.BoolType,
		"enable_consistency_check": types.BoolType,
		"hop_limit":                types.StringType,
		"lifetime":                 types.Int64Type,
		"link_mtu":                 types.StringType,
		"managed_flag":             types.BoolType,
		"max_interval":             types.Int64Type,
		"min_interval":             types.Int64Type,
		"other_flag":               types.BoolType,
		"reachable_time":           types.StringType,
		"retransmission_timer":     types.StringType,
		"router_preference":        types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementObject) AncestorName() string {
	return "router-advertisement"
}

func (o EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"enable": types.BoolType,
		"server": types.ListType{},
		"suffix": types.ListType{},
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportObject) AncestorName() string {
	return "dns-support"
}

func (o EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":     types.StringType,
		"lifetime": types.Int64Type,
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerObject) AncestorName() string {
	return "server"
}

func (o EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":     types.StringType,
		"lifetime": types.Int64Type,
	}
}

func (o EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixObject) AncestorName() string {
	return "suffix"
}

func (o EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceResourceNdpProxyObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"address": types.ListType{},
		"enabled": types.BoolType,
	}
}

func (o EthernetLayer3SubinterfaceResourceNdpProxyObject) AncestorName() string {
	return "ndp-proxy"
}

func (o EthernetLayer3SubinterfaceResourceNdpProxyObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceNdpProxyAddressObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":   types.StringType,
		"negate": types.BoolType,
	}
}

func (o EthernetLayer3SubinterfaceResourceNdpProxyAddressObject) AncestorName() string {
	return "address"
}

func (o EthernetLayer3SubinterfaceResourceNdpProxyAddressObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *EthernetLayer3SubinterfaceResourcePppoeObject) AttributeTypes() map[string]attr.Type {

	var passiveObj *EthernetLayer3SubinterfaceResourcePppoePassiveObject

	var staticAddressObj *EthernetLayer3SubinterfaceResourcePppoeStaticAddressObject

	return map[string]attr.Type{
		"access_concentrator":  types.StringType,
		"authentication":       types.StringType,
		"create_default_route": types.BoolType,
		"default_route_metric": types.Int64Type,
		"enable":               types.BoolType,
		"passive": types.ObjectType{
			AttrTypes: passiveObj.AttributeTypes(),
		},
		"password": types.StringType,
		"service":  types.StringType,
		"static_address": types.ObjectType{
			AttrTypes: staticAddressObj.AttributeTypes(),
		},
		"username": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceResourcePppoeObject) AncestorName() string {
	return "pppoe"
}

func (o EthernetLayer3SubinterfaceResourcePppoeObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourcePppoePassiveObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"enable": types.BoolType,
	}
}

func (o EthernetLayer3SubinterfaceResourcePppoePassiveObject) AncestorName() string {
	return "passive"
}

func (o EthernetLayer3SubinterfaceResourcePppoePassiveObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourcePppoeStaticAddressObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"ip": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceResourcePppoeStaticAddressObject) AncestorName() string {
	return "static-address"
}

func (o EthernetLayer3SubinterfaceResourcePppoeStaticAddressObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsObject) AttributeTypes() map[string]attr.Type {

	var upstreamNatObj *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatObject
	return map[string]attr.Type{
		"enable":                  types.BoolType,
		"sdwan_interface_profile": types.StringType,
		"upstream_nat": types.ObjectType{
			AttrTypes: upstreamNatObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceSdwanLinkSettingsObject) AncestorName() string {
	return "sdwan-link-settings"
}

func (o EthernetLayer3SubinterfaceResourceSdwanLinkSettingsObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatObject) AttributeTypes() map[string]attr.Type {

	var ddnsObj *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatDdnsObject

	var staticIpObj *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatStaticIpObject
	return map[string]attr.Type{
		"enable": types.BoolType,
		"ddns": types.ObjectType{
			AttrTypes: ddnsObj.AttributeTypes(),
		},
		"static_ip": types.ObjectType{
			AttrTypes: staticIpObj.AttributeTypes(),
		},
	}
}

func (o EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatObject) AncestorName() string {
	return "upstream-nat"
}

func (o EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatDdnsObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatDdnsObject) AncestorName() string {
	return "ddns"
}

func (o EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatDdnsObject) EntryName() *string {
	return nil
}
func (o *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatStaticIpObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"fqdn":       types.StringType,
		"ip_address": types.StringType,
	}
}

func (o EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatStaticIpObject) AncestorName() string {
	return "static-ip"
}

func (o EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatStaticIpObject) EntryName() *string {
	return nil
}

func (o *EthernetLayer3SubinterfaceResourceModel) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var adjustTcpMss_entry *layer3.AdjustTcpMss
	if o.AdjustTcpMss != nil {
		if *obj != nil && (*obj).AdjustTcpMss != nil {
			adjustTcpMss_entry = (*obj).AdjustTcpMss
		} else {
			adjustTcpMss_entry = new(layer3.AdjustTcpMss)
		}
		// ModelOrObject: Model
		diags.Append(o.AdjustTcpMss.CopyToPango(ctx, ancestors, &adjustTcpMss_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var arp_tf_entries []EthernetLayer3SubinterfaceResourceArpObject
	var arp_pango_entries []layer3.Arp
	{
		d := o.Arp.ElementsAs(ctx, &arp_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range arp_tf_entries {
			var entry *layer3.Arp
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			arp_pango_entries = append(arp_pango_entries, *entry)
		}
	}
	var bonjour_entry *layer3.Bonjour
	if o.Bonjour != nil {
		if *obj != nil && (*obj).Bonjour != nil {
			bonjour_entry = (*obj).Bonjour
		} else {
			bonjour_entry = new(layer3.Bonjour)
		}
		// ModelOrObject: Model
		diags.Append(o.Bonjour.CopyToPango(ctx, ancestors, &bonjour_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	comment_value := o.Comment.ValueStringPointer()
	var ddnsConfig_entry *layer3.DdnsConfig
	if o.DdnsConfig != nil {
		if *obj != nil && (*obj).DdnsConfig != nil {
			ddnsConfig_entry = (*obj).DdnsConfig
		} else {
			ddnsConfig_entry = new(layer3.DdnsConfig)
		}
		// ModelOrObject: Model
		diags.Append(o.DdnsConfig.CopyToPango(ctx, ancestors, &ddnsConfig_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	decryptForward_value := o.DecryptForward.ValueBoolPointer()
	dfIgnore_value := o.DfIgnore.ValueBoolPointer()
	var dhcpClient_entry *layer3.DhcpClient
	if o.DhcpClient != nil {
		if *obj != nil && (*obj).DhcpClient != nil {
			dhcpClient_entry = (*obj).DhcpClient
		} else {
			dhcpClient_entry = new(layer3.DhcpClient)
		}
		// ModelOrObject: Model
		diags.Append(o.DhcpClient.CopyToPango(ctx, ancestors, &dhcpClient_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	interfaceManagementProfile_value := o.InterfaceManagementProfile.ValueStringPointer()
	var ip_tf_entries []EthernetLayer3SubinterfaceResourceIpObject
	var ip_pango_entries []layer3.Ip
	{
		d := o.Ip.ElementsAs(ctx, &ip_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range ip_tf_entries {
			var entry *layer3.Ip
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			ip_pango_entries = append(ip_pango_entries, *entry)
		}
	}
	var ipv6_entry *layer3.Ipv6
	if o.Ipv6 != nil {
		if *obj != nil && (*obj).Ipv6 != nil {
			ipv6_entry = (*obj).Ipv6
		} else {
			ipv6_entry = new(layer3.Ipv6)
		}
		// ModelOrObject: Model
		diags.Append(o.Ipv6.CopyToPango(ctx, ancestors, &ipv6_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	mtu_value := o.Mtu.ValueInt64Pointer()
	var ndpProxy_entry *layer3.NdpProxy
	if o.NdpProxy != nil {
		if *obj != nil && (*obj).NdpProxy != nil {
			ndpProxy_entry = (*obj).NdpProxy
		} else {
			ndpProxy_entry = new(layer3.NdpProxy)
		}
		// ModelOrObject: Model
		diags.Append(o.NdpProxy.CopyToPango(ctx, ancestors, &ndpProxy_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	netflowProfile_value := o.NetflowProfile.ValueStringPointer()
	var pppoe_entry *layer3.Pppoe
	if o.Pppoe != nil {
		if *obj != nil && (*obj).Pppoe != nil {
			pppoe_entry = (*obj).Pppoe
		} else {
			pppoe_entry = new(layer3.Pppoe)
		}
		// ModelOrObject: Model
		diags.Append(o.Pppoe.CopyToPango(ctx, ancestors, &pppoe_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var sdwanLinkSettings_entry *layer3.SdwanLinkSettings
	if o.SdwanLinkSettings != nil {
		if *obj != nil && (*obj).SdwanLinkSettings != nil {
			sdwanLinkSettings_entry = (*obj).SdwanLinkSettings
		} else {
			sdwanLinkSettings_entry = new(layer3.SdwanLinkSettings)
		}
		// ModelOrObject: Model
		diags.Append(o.SdwanLinkSettings.CopyToPango(ctx, ancestors, &sdwanLinkSettings_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	tag_value := o.Tag.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(layer3.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).AdjustTcpMss = adjustTcpMss_entry
	(*obj).Arp = arp_pango_entries
	(*obj).Bonjour = bonjour_entry
	(*obj).Comment = comment_value
	(*obj).DdnsConfig = ddnsConfig_entry
	(*obj).DecryptForward = decryptForward_value
	(*obj).DfIgnore = dfIgnore_value
	(*obj).DhcpClient = dhcpClient_entry
	(*obj).InterfaceManagementProfile = interfaceManagementProfile_value
	(*obj).Ip = ip_pango_entries
	(*obj).Ipv6 = ipv6_entry
	(*obj).Mtu = mtu_value
	(*obj).NdpProxy = ndpProxy_entry
	(*obj).NetflowProfile = netflowProfile_value
	(*obj).Pppoe = pppoe_entry
	(*obj).SdwanLinkSettings = sdwanLinkSettings_entry
	(*obj).Tag = tag_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceAdjustTcpMssObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.AdjustTcpMss, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	ipv4MssAdjustment_value := o.Ipv4MssAdjustment.ValueInt64Pointer()
	ipv6MssAdjustment_value := o.Ipv6MssAdjustment.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(layer3.AdjustTcpMss)
	}
	(*obj).Enable = enable_value
	(*obj).Ipv4MssAdjustment = ipv4MssAdjustment_value
	(*obj).Ipv6MssAdjustment = ipv6MssAdjustment_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceArpObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Arp, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	hwAddress_value := o.HwAddress.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.Arp)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).HwAddress = hwAddress_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceBonjourObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Bonjour, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	groupId_value := o.GroupId.ValueInt64Pointer()
	ttlCheck_value := o.TtlCheck.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(layer3.Bonjour)
	}
	(*obj).Enable = enable_value
	(*obj).GroupId = groupId_value
	(*obj).TtlCheck = ttlCheck_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceDdnsConfigObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.DdnsConfig, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	ddnsCertProfile_value := o.DdnsCertProfile.ValueStringPointer()
	ddnsEnabled_value := o.DdnsEnabled.ValueBoolPointer()
	ddnsHostname_value := o.DdnsHostname.ValueStringPointer()
	ddnsIp_pango_entries := make([]string, 0)
	diags.Append(o.DdnsIp.ElementsAs(ctx, &ddnsIp_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	ddnsIpv6_pango_entries := make([]string, 0)
	diags.Append(o.DdnsIpv6.ElementsAs(ctx, &ddnsIpv6_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	ddnsUpdateInterval_value := o.DdnsUpdateInterval.ValueInt64Pointer()
	ddnsVendor_value := o.DdnsVendor.ValueStringPointer()
	var ddnsVendorConfig_tf_entries []EthernetLayer3SubinterfaceResourceDdnsConfigDdnsVendorConfigObject
	var ddnsVendorConfig_pango_entries []layer3.DdnsConfigDdnsVendorConfig
	{
		d := o.DdnsVendorConfig.ElementsAs(ctx, &ddnsVendorConfig_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range ddnsVendorConfig_tf_entries {
			var entry *layer3.DdnsConfigDdnsVendorConfig
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			ddnsVendorConfig_pango_entries = append(ddnsVendorConfig_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.DdnsConfig)
	}
	(*obj).DdnsCertProfile = ddnsCertProfile_value
	(*obj).DdnsEnabled = ddnsEnabled_value
	(*obj).DdnsHostname = ddnsHostname_value
	(*obj).DdnsIp = ddnsIp_pango_entries
	(*obj).DdnsIpv6 = ddnsIpv6_pango_entries
	(*obj).DdnsUpdateInterval = ddnsUpdateInterval_value
	(*obj).DdnsVendor = ddnsVendor_value
	(*obj).DdnsVendorConfig = ddnsVendorConfig_pango_entries

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceDdnsConfigDdnsVendorConfigObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.DdnsConfigDdnsVendorConfig, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	value_value := o.Value.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.DdnsConfigDdnsVendorConfig)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Value = value_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceDhcpClientObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.DhcpClient, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	createDefaultRoute_value := o.CreateDefaultRoute.ValueBoolPointer()
	defaultRouteMetric_value := o.DefaultRouteMetric.ValueInt64Pointer()
	enable_value := o.Enable.ValueBoolPointer()
	var sendHostname_entry *layer3.DhcpClientSendHostname
	if o.SendHostname != nil {
		if *obj != nil && (*obj).SendHostname != nil {
			sendHostname_entry = (*obj).SendHostname
		} else {
			sendHostname_entry = new(layer3.DhcpClientSendHostname)
		}
		// ModelOrObject: Object
		diags.Append(o.SendHostname.CopyToPango(ctx, append(ancestors, o), &sendHostname_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.DhcpClient)
	}
	(*obj).CreateDefaultRoute = createDefaultRoute_value
	(*obj).DefaultRouteMetric = defaultRouteMetric_value
	(*obj).Enable = enable_value
	(*obj).SendHostname = sendHostname_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceDhcpClientSendHostnameObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.DhcpClientSendHostname, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	hostname_value := o.Hostname.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.DhcpClientSendHostname)
	}
	(*obj).Enable = enable_value
	(*obj).Hostname = hostname_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ip, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	sdwanGateway_value := o.SdwanGateway.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ip)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).SdwanGateway = sdwanGateway_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6Object) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var address_tf_entries []EthernetLayer3SubinterfaceResourceIpv6AddressObject
	var address_pango_entries []layer3.Ipv6Address
	{
		d := o.Address.ElementsAs(ctx, &address_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range address_tf_entries {
			var entry *layer3.Ipv6Address
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			address_pango_entries = append(address_pango_entries, *entry)
		}
	}
	var dhcpClient_entry *layer3.Ipv6DhcpClient
	if o.DhcpClient != nil {
		if *obj != nil && (*obj).DhcpClient != nil {
			dhcpClient_entry = (*obj).DhcpClient
		} else {
			dhcpClient_entry = new(layer3.Ipv6DhcpClient)
		}
		// ModelOrObject: Object
		diags.Append(o.DhcpClient.CopyToPango(ctx, append(ancestors, o), &dhcpClient_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	enabled_value := o.Enabled.ValueBoolPointer()
	var inherited_entry *layer3.Ipv6Inherited
	if o.Inherited != nil {
		if *obj != nil && (*obj).Inherited != nil {
			inherited_entry = (*obj).Inherited
		} else {
			inherited_entry = new(layer3.Ipv6Inherited)
		}
		// ModelOrObject: Object
		diags.Append(o.Inherited.CopyToPango(ctx, append(ancestors, o), &inherited_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	interfaceId_value := o.InterfaceId.ValueStringPointer()
	var neighborDiscovery_entry *layer3.Ipv6NeighborDiscovery
	if o.NeighborDiscovery != nil {
		if *obj != nil && (*obj).NeighborDiscovery != nil {
			neighborDiscovery_entry = (*obj).NeighborDiscovery
		} else {
			neighborDiscovery_entry = new(layer3.Ipv6NeighborDiscovery)
		}
		// ModelOrObject: Object
		diags.Append(o.NeighborDiscovery.CopyToPango(ctx, append(ancestors, o), &neighborDiscovery_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6)
	}
	(*obj).Address = address_pango_entries
	(*obj).DhcpClient = dhcpClient_entry
	(*obj).Enabled = enabled_value
	(*obj).Inherited = inherited_entry
	(*obj).InterfaceId = interfaceId_value
	(*obj).NeighborDiscovery = neighborDiscovery_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6AddressObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6Address, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enableOnInterface_value := o.EnableOnInterface.ValueBoolPointer()
	var prefix_entry *layer3.Ipv6AddressPrefix
	if o.Prefix != nil {
		if *obj != nil && (*obj).Prefix != nil {
			prefix_entry = (*obj).Prefix
		} else {
			prefix_entry = new(layer3.Ipv6AddressPrefix)
		}
		// ModelOrObject: Object
		diags.Append(o.Prefix.CopyToPango(ctx, append(ancestors, o), &prefix_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var anycast_entry *layer3.Ipv6AddressAnycast
	if o.Anycast != nil {
		if *obj != nil && (*obj).Anycast != nil {
			anycast_entry = (*obj).Anycast
		} else {
			anycast_entry = new(layer3.Ipv6AddressAnycast)
		}
		// ModelOrObject: Object
		diags.Append(o.Anycast.CopyToPango(ctx, append(ancestors, o), &anycast_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var advertise_entry *layer3.Ipv6AddressAdvertise
	if o.Advertise != nil {
		if *obj != nil && (*obj).Advertise != nil {
			advertise_entry = (*obj).Advertise
		} else {
			advertise_entry = new(layer3.Ipv6AddressAdvertise)
		}
		// ModelOrObject: Object
		diags.Append(o.Advertise.CopyToPango(ctx, append(ancestors, o), &advertise_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6Address)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).EnableOnInterface = enableOnInterface_value
	(*obj).Prefix = prefix_entry
	(*obj).Anycast = anycast_entry
	(*obj).Advertise = advertise_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6AddressPrefixObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6AddressPrefix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(layer3.Ipv6AddressPrefix)
	}

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6AddressAnycastObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6AddressAnycast, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(layer3.Ipv6AddressAnycast)
	}

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6AddressAdvertiseObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6AddressAdvertise, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	validLifetime_value := o.ValidLifetime.ValueStringPointer()
	preferredLifetime_value := o.PreferredLifetime.ValueStringPointer()
	onlinkFlag_value := o.OnlinkFlag.ValueBoolPointer()
	autoConfigFlag_value := o.AutoConfigFlag.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6AddressAdvertise)
	}
	(*obj).Enable = enable_value
	(*obj).ValidLifetime = validLifetime_value
	(*obj).PreferredLifetime = preferredLifetime_value
	(*obj).OnlinkFlag = onlinkFlag_value
	(*obj).AutoConfigFlag = autoConfigFlag_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClient, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	acceptRaRoute_value := o.AcceptRaRoute.ValueBoolPointer()
	defaultRouteMetric_value := o.DefaultRouteMetric.ValueInt64Pointer()
	enable_value := o.Enable.ValueBoolPointer()
	var neighborDiscovery_entry *layer3.Ipv6DhcpClientNeighborDiscovery
	if o.NeighborDiscovery != nil {
		if *obj != nil && (*obj).NeighborDiscovery != nil {
			neighborDiscovery_entry = (*obj).NeighborDiscovery
		} else {
			neighborDiscovery_entry = new(layer3.Ipv6DhcpClientNeighborDiscovery)
		}
		// ModelOrObject: Object
		diags.Append(o.NeighborDiscovery.CopyToPango(ctx, append(ancestors, o), &neighborDiscovery_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	preference_value := o.Preference.ValueStringPointer()
	var prefixDelegation_entry *layer3.Ipv6DhcpClientPrefixDelegation
	if o.PrefixDelegation != nil {
		if *obj != nil && (*obj).PrefixDelegation != nil {
			prefixDelegation_entry = (*obj).PrefixDelegation
		} else {
			prefixDelegation_entry = new(layer3.Ipv6DhcpClientPrefixDelegation)
		}
		// ModelOrObject: Object
		diags.Append(o.PrefixDelegation.CopyToPango(ctx, append(ancestors, o), &prefixDelegation_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var v6Options_entry *layer3.Ipv6DhcpClientV6Options
	if o.V6Options != nil {
		if *obj != nil && (*obj).V6Options != nil {
			v6Options_entry = (*obj).V6Options
		} else {
			v6Options_entry = new(layer3.Ipv6DhcpClientV6Options)
		}
		// ModelOrObject: Object
		diags.Append(o.V6Options.CopyToPango(ctx, append(ancestors, o), &v6Options_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClient)
	}
	(*obj).AcceptRaRoute = acceptRaRoute_value
	(*obj).DefaultRouteMetric = defaultRouteMetric_value
	(*obj).Enable = enable_value
	(*obj).NeighborDiscovery = neighborDiscovery_entry
	(*obj).Preference = preference_value
	(*obj).PrefixDelegation = prefixDelegation_entry
	(*obj).V6Options = v6Options_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscovery, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	dadAttempts_value := o.DadAttempts.ValueInt64Pointer()
	var dnsServer_entry *layer3.Ipv6DhcpClientNeighborDiscoveryDnsServer
	if o.DnsServer != nil {
		if *obj != nil && (*obj).DnsServer != nil {
			dnsServer_entry = (*obj).DnsServer
		} else {
			dnsServer_entry = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsServer)
		}
		// ModelOrObject: Object
		diags.Append(o.DnsServer.CopyToPango(ctx, append(ancestors, o), &dnsServer_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var dnsSuffix_entry *layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffix
	if o.DnsSuffix != nil {
		if *obj != nil && (*obj).DnsSuffix != nil {
			dnsSuffix_entry = (*obj).DnsSuffix
		} else {
			dnsSuffix_entry = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffix)
		}
		// ModelOrObject: Object
		diags.Append(o.DnsSuffix.CopyToPango(ctx, append(ancestors, o), &dnsSuffix_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	enableDad_value := o.EnableDad.ValueBoolPointer()
	enableNdpMonitor_value := o.EnableNdpMonitor.ValueBoolPointer()
	var neighbor_tf_entries []EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryNeighborObject
	var neighbor_pango_entries []layer3.Ipv6DhcpClientNeighborDiscoveryNeighbor
	{
		d := o.Neighbor.ElementsAs(ctx, &neighbor_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range neighbor_tf_entries {
			var entry *layer3.Ipv6DhcpClientNeighborDiscoveryNeighbor
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			neighbor_pango_entries = append(neighbor_pango_entries, *entry)
		}
	}
	nsInterval_value := o.NsInterval.ValueInt64Pointer()
	reachableTime_value := o.ReachableTime.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscovery)
	}
	(*obj).DadAttempts = dadAttempts_value
	(*obj).DnsServer = dnsServer_entry
	(*obj).DnsSuffix = dnsSuffix_entry
	(*obj).EnableDad = enableDad_value
	(*obj).EnableNdpMonitor = enableNdpMonitor_value
	(*obj).Neighbor = neighbor_pango_entries
	(*obj).NsInterval = nsInterval_value
	(*obj).ReachableTime = reachableTime_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscoveryDnsServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	var source_entry *layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSource
	if o.Source != nil {
		if *obj != nil && (*obj).Source != nil {
			source_entry = (*obj).Source
		} else {
			source_entry = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSource)
		}
		// ModelOrObject: Object
		diags.Append(o.Source.CopyToPango(ctx, append(ancestors, o), &source_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsServer)
	}
	(*obj).Enable = enable_value
	(*obj).Source = source_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSource, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dhcpv6_entry *layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6
	if o.Dhcpv6 != nil {
		if *obj != nil && (*obj).Dhcpv6 != nil {
			dhcpv6_entry = (*obj).Dhcpv6
		} else {
			dhcpv6_entry = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6)
		}
		// ModelOrObject: Object
		diags.Append(o.Dhcpv6.CopyToPango(ctx, append(ancestors, o), &dhcpv6_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var manual_entry *layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceManual
	if o.Manual != nil {
		if *obj != nil && (*obj).Manual != nil {
			manual_entry = (*obj).Manual
		} else {
			manual_entry = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceManual)
		}
		// ModelOrObject: Object
		diags.Append(o.Manual.CopyToPango(ctx, append(ancestors, o), &manual_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSource)
	}
	(*obj).Dhcpv6 = dhcpv6_entry
	(*obj).Manual = manual_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Object) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6)
	}

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceManual, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var server_tf_entries []EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerObject
	var server_pango_entries []layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceManualServer
	{
		d := o.Server.ElementsAs(ctx, &server_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range server_tf_entries {
			var entry *layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceManualServer
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			server_pango_entries = append(server_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceManual)
	}
	(*obj).Server = server_pango_entries

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceManualServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	lifetime_value := o.Lifetime.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceManualServer)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Lifetime = lifetime_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	var source_entry *layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSource
	if o.Source != nil {
		if *obj != nil && (*obj).Source != nil {
			source_entry = (*obj).Source
		} else {
			source_entry = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSource)
		}
		// ModelOrObject: Object
		diags.Append(o.Source.CopyToPango(ctx, append(ancestors, o), &source_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffix)
	}
	(*obj).Enable = enable_value
	(*obj).Source = source_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSource, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dhcpv6_entry *layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6
	if o.Dhcpv6 != nil {
		if *obj != nil && (*obj).Dhcpv6 != nil {
			dhcpv6_entry = (*obj).Dhcpv6
		} else {
			dhcpv6_entry = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6)
		}
		// ModelOrObject: Object
		diags.Append(o.Dhcpv6.CopyToPango(ctx, append(ancestors, o), &dhcpv6_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var manual_entry *layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceManual
	if o.Manual != nil {
		if *obj != nil && (*obj).Manual != nil {
			manual_entry = (*obj).Manual
		} else {
			manual_entry = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceManual)
		}
		// ModelOrObject: Object
		diags.Append(o.Manual.CopyToPango(ctx, append(ancestors, o), &manual_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSource)
	}
	(*obj).Dhcpv6 = dhcpv6_entry
	(*obj).Manual = manual_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Object) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6)
	}

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceManual, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var suffix_tf_entries []EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixObject
	var suffix_pango_entries []layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffix
	{
		d := o.Suffix.ElementsAs(ctx, &suffix_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range suffix_tf_entries {
			var entry *layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffix
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			suffix_pango_entries = append(suffix_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceManual)
	}
	(*obj).Suffix = suffix_pango_entries

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	lifetime_value := o.Lifetime.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffix)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Lifetime = lifetime_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryNeighborObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientNeighborDiscoveryNeighbor, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	hwAddress_value := o.HwAddress.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientNeighborDiscoveryNeighbor)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).HwAddress = hwAddress_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientPrefixDelegation, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var enable_entry *layer3.Ipv6DhcpClientPrefixDelegationEnable
	if o.Enable != nil {
		if *obj != nil && (*obj).Enable != nil {
			enable_entry = (*obj).Enable
		} else {
			enable_entry = new(layer3.Ipv6DhcpClientPrefixDelegationEnable)
		}
		// ModelOrObject: Object
		diags.Append(o.Enable.CopyToPango(ctx, append(ancestors, o), &enable_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientPrefixDelegation)
	}
	(*obj).Enable = enable_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientPrefixDelegationEnable, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var no_entry *layer3.Ipv6DhcpClientPrefixDelegationEnableNo
	if o.No != nil {
		if *obj != nil && (*obj).No != nil {
			no_entry = (*obj).No
		} else {
			no_entry = new(layer3.Ipv6DhcpClientPrefixDelegationEnableNo)
		}
		// ModelOrObject: Object
		diags.Append(o.No.CopyToPango(ctx, append(ancestors, o), &no_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var yes_entry *layer3.Ipv6DhcpClientPrefixDelegationEnableYes
	if o.Yes != nil {
		if *obj != nil && (*obj).Yes != nil {
			yes_entry = (*obj).Yes
		} else {
			yes_entry = new(layer3.Ipv6DhcpClientPrefixDelegationEnableYes)
		}
		// ModelOrObject: Object
		diags.Append(o.Yes.CopyToPango(ctx, append(ancestors, o), &yes_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientPrefixDelegationEnable)
	}
	(*obj).No = no_entry
	(*obj).Yes = yes_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableNoObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientPrefixDelegationEnableNo, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientPrefixDelegationEnableNo)
	}

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableYesObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientPrefixDelegationEnableYes, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	pfxPoolName_value := o.PfxPoolName.ValueStringPointer()
	prefixLen_value := o.PrefixLen.ValueInt64Pointer()
	prefixLenHint_value := o.PrefixLenHint.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientPrefixDelegationEnableYes)
	}
	(*obj).PfxPoolName = pfxPoolName_value
	(*obj).PrefixLen = prefixLen_value
	(*obj).PrefixLenHint = prefixLenHint_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientV6Options, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	duidType_value := o.DuidType.ValueStringPointer()
	var enable_entry *layer3.Ipv6DhcpClientV6OptionsEnable
	if o.Enable != nil {
		if *obj != nil && (*obj).Enable != nil {
			enable_entry = (*obj).Enable
		} else {
			enable_entry = new(layer3.Ipv6DhcpClientV6OptionsEnable)
		}
		// ModelOrObject: Object
		diags.Append(o.Enable.CopyToPango(ctx, append(ancestors, o), &enable_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	rapidCommit_value := o.RapidCommit.ValueBoolPointer()
	supportSrvrReconfig_value := o.SupportSrvrReconfig.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientV6Options)
	}
	(*obj).DuidType = duidType_value
	(*obj).Enable = enable_entry
	(*obj).RapidCommit = rapidCommit_value
	(*obj).SupportSrvrReconfig = supportSrvrReconfig_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientV6OptionsEnable, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var no_entry *layer3.Ipv6DhcpClientV6OptionsEnableNo
	if o.No != nil {
		if *obj != nil && (*obj).No != nil {
			no_entry = (*obj).No
		} else {
			no_entry = new(layer3.Ipv6DhcpClientV6OptionsEnableNo)
		}
		// ModelOrObject: Object
		diags.Append(o.No.CopyToPango(ctx, append(ancestors, o), &no_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var yes_entry *layer3.Ipv6DhcpClientV6OptionsEnableYes
	if o.Yes != nil {
		if *obj != nil && (*obj).Yes != nil {
			yes_entry = (*obj).Yes
		} else {
			yes_entry = new(layer3.Ipv6DhcpClientV6OptionsEnableYes)
		}
		// ModelOrObject: Object
		diags.Append(o.Yes.CopyToPango(ctx, append(ancestors, o), &yes_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientV6OptionsEnable)
	}
	(*obj).No = no_entry
	(*obj).Yes = yes_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableNoObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientV6OptionsEnableNo, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientV6OptionsEnableNo)
	}

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableYesObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6DhcpClientV6OptionsEnableYes, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	nonTempAddr_value := o.NonTempAddr.ValueBoolPointer()
	tempAddr_value := o.TempAddr.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6DhcpClientV6OptionsEnableYes)
	}
	(*obj).NonTempAddr = nonTempAddr_value
	(*obj).TempAddr = tempAddr_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6Inherited, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var assignAddr_tf_entries []EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrObject
	var assignAddr_pango_entries []layer3.Ipv6InheritedAssignAddr
	{
		d := o.AssignAddr.ElementsAs(ctx, &assignAddr_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range assignAddr_tf_entries {
			var entry *layer3.Ipv6InheritedAssignAddr
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			assignAddr_pango_entries = append(assignAddr_pango_entries, *entry)
		}
	}
	enable_value := o.Enable.ValueBoolPointer()
	var neighborDiscovery_entry *layer3.Ipv6InheritedNeighborDiscovery
	if o.NeighborDiscovery != nil {
		if *obj != nil && (*obj).NeighborDiscovery != nil {
			neighborDiscovery_entry = (*obj).NeighborDiscovery
		} else {
			neighborDiscovery_entry = new(layer3.Ipv6InheritedNeighborDiscovery)
		}
		// ModelOrObject: Object
		diags.Append(o.NeighborDiscovery.CopyToPango(ctx, append(ancestors, o), &neighborDiscovery_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6Inherited)
	}
	(*obj).AssignAddr = assignAddr_pango_entries
	(*obj).Enable = enable_value
	(*obj).NeighborDiscovery = neighborDiscovery_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedAssignAddr, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var type_entry *layer3.Ipv6InheritedAssignAddrType
	if o.Type != nil {
		if *obj != nil && (*obj).Type != nil {
			type_entry = (*obj).Type
		} else {
			type_entry = new(layer3.Ipv6InheritedAssignAddrType)
		}
		// ModelOrObject: Object
		diags.Append(o.Type.CopyToPango(ctx, append(ancestors, o), &type_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedAssignAddr)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Type = type_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedAssignAddrType, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var gua_entry *layer3.Ipv6InheritedAssignAddrTypeGua
	if o.Gua != nil {
		if *obj != nil && (*obj).Gua != nil {
			gua_entry = (*obj).Gua
		} else {
			gua_entry = new(layer3.Ipv6InheritedAssignAddrTypeGua)
		}
		// ModelOrObject: Object
		diags.Append(o.Gua.CopyToPango(ctx, append(ancestors, o), &gua_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var ula_entry *layer3.Ipv6InheritedAssignAddrTypeUla
	if o.Ula != nil {
		if *obj != nil && (*obj).Ula != nil {
			ula_entry = (*obj).Ula
		} else {
			ula_entry = new(layer3.Ipv6InheritedAssignAddrTypeUla)
		}
		// ModelOrObject: Object
		diags.Append(o.Ula.CopyToPango(ctx, append(ancestors, o), &ula_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedAssignAddrType)
	}
	(*obj).Gua = gua_entry
	(*obj).Ula = ula_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedAssignAddrTypeGua, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enableOnInterface_value := o.EnableOnInterface.ValueBoolPointer()
	prefixPool_value := o.PrefixPool.ValueStringPointer()
	var poolType_entry *layer3.Ipv6InheritedAssignAddrTypeGuaPoolType
	if o.PoolType != nil {
		if *obj != nil && (*obj).PoolType != nil {
			poolType_entry = (*obj).PoolType
		} else {
			poolType_entry = new(layer3.Ipv6InheritedAssignAddrTypeGuaPoolType)
		}
		// ModelOrObject: Object
		diags.Append(o.PoolType.CopyToPango(ctx, append(ancestors, o), &poolType_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var advertise_entry *layer3.Ipv6InheritedAssignAddrTypeGuaAdvertise
	if o.Advertise != nil {
		if *obj != nil && (*obj).Advertise != nil {
			advertise_entry = (*obj).Advertise
		} else {
			advertise_entry = new(layer3.Ipv6InheritedAssignAddrTypeGuaAdvertise)
		}
		// ModelOrObject: Object
		diags.Append(o.Advertise.CopyToPango(ctx, append(ancestors, o), &advertise_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedAssignAddrTypeGua)
	}
	(*obj).EnableOnInterface = enableOnInterface_value
	(*obj).PrefixPool = prefixPool_value
	(*obj).PoolType = poolType_entry
	(*obj).Advertise = advertise_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedAssignAddrTypeGuaPoolType, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dynamic_entry *layer3.Ipv6InheritedAssignAddrTypeGuaPoolTypeDynamic
	if o.Dynamic != nil {
		if *obj != nil && (*obj).Dynamic != nil {
			dynamic_entry = (*obj).Dynamic
		} else {
			dynamic_entry = new(layer3.Ipv6InheritedAssignAddrTypeGuaPoolTypeDynamic)
		}
		// ModelOrObject: Object
		diags.Append(o.Dynamic.CopyToPango(ctx, append(ancestors, o), &dynamic_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var dynamicId_entry *layer3.Ipv6InheritedAssignAddrTypeGuaPoolTypeDynamicId
	if o.DynamicId != nil {
		if *obj != nil && (*obj).DynamicId != nil {
			dynamicId_entry = (*obj).DynamicId
		} else {
			dynamicId_entry = new(layer3.Ipv6InheritedAssignAddrTypeGuaPoolTypeDynamicId)
		}
		// ModelOrObject: Object
		diags.Append(o.DynamicId.CopyToPango(ctx, append(ancestors, o), &dynamicId_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedAssignAddrTypeGuaPoolType)
	}
	(*obj).Dynamic = dynamic_entry
	(*obj).DynamicId = dynamicId_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedAssignAddrTypeGuaPoolTypeDynamic, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedAssignAddrTypeGuaPoolTypeDynamic)
	}

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedAssignAddrTypeGuaPoolTypeDynamicId, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	identifier_value := o.Identifier.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedAssignAddrTypeGuaPoolTypeDynamicId)
	}
	(*obj).Identifier = identifier_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaAdvertiseObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedAssignAddrTypeGuaAdvertise, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	onlinkFlag_value := o.OnlinkFlag.ValueBoolPointer()
	autoConfigFlag_value := o.AutoConfigFlag.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedAssignAddrTypeGuaAdvertise)
	}
	(*obj).Enable = enable_value
	(*obj).OnlinkFlag = onlinkFlag_value
	(*obj).AutoConfigFlag = autoConfigFlag_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedAssignAddrTypeUla, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enableOnInterface_value := o.EnableOnInterface.ValueBoolPointer()
	address_value := o.Address.ValueStringPointer()
	prefix_value := o.Prefix.ValueBoolPointer()
	anycast_value := o.Anycast.ValueBoolPointer()
	var advertise_entry *layer3.Ipv6InheritedAssignAddrTypeUlaAdvertise
	if o.Advertise != nil {
		if *obj != nil && (*obj).Advertise != nil {
			advertise_entry = (*obj).Advertise
		} else {
			advertise_entry = new(layer3.Ipv6InheritedAssignAddrTypeUlaAdvertise)
		}
		// ModelOrObject: Object
		diags.Append(o.Advertise.CopyToPango(ctx, append(ancestors, o), &advertise_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedAssignAddrTypeUla)
	}
	(*obj).EnableOnInterface = enableOnInterface_value
	(*obj).Address = address_value
	(*obj).Prefix = prefix_value
	(*obj).Anycast = anycast_value
	(*obj).Advertise = advertise_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaAdvertiseObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedAssignAddrTypeUlaAdvertise, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	validLifetime_value := o.ValidLifetime.ValueStringPointer()
	preferredLifetime_value := o.PreferredLifetime.ValueStringPointer()
	onlinkFlag_value := o.OnlinkFlag.ValueBoolPointer()
	autoConfigFlag_value := o.AutoConfigFlag.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedAssignAddrTypeUlaAdvertise)
	}
	(*obj).Enable = enable_value
	(*obj).ValidLifetime = validLifetime_value
	(*obj).PreferredLifetime = preferredLifetime_value
	(*obj).OnlinkFlag = onlinkFlag_value
	(*obj).AutoConfigFlag = autoConfigFlag_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscovery, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	dadAttempts_value := o.DadAttempts.ValueInt64Pointer()
	var dnsServer_entry *layer3.Ipv6InheritedNeighborDiscoveryDnsServer
	if o.DnsServer != nil {
		if *obj != nil && (*obj).DnsServer != nil {
			dnsServer_entry = (*obj).DnsServer
		} else {
			dnsServer_entry = new(layer3.Ipv6InheritedNeighborDiscoveryDnsServer)
		}
		// ModelOrObject: Object
		diags.Append(o.DnsServer.CopyToPango(ctx, append(ancestors, o), &dnsServer_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var dnsSuffix_entry *layer3.Ipv6InheritedNeighborDiscoveryDnsSuffix
	if o.DnsSuffix != nil {
		if *obj != nil && (*obj).DnsSuffix != nil {
			dnsSuffix_entry = (*obj).DnsSuffix
		} else {
			dnsSuffix_entry = new(layer3.Ipv6InheritedNeighborDiscoveryDnsSuffix)
		}
		// ModelOrObject: Object
		diags.Append(o.DnsSuffix.CopyToPango(ctx, append(ancestors, o), &dnsSuffix_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	enableDad_value := o.EnableDad.ValueBoolPointer()
	enableNdpMonitor_value := o.EnableNdpMonitor.ValueBoolPointer()
	var neighbor_tf_entries []EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryNeighborObject
	var neighbor_pango_entries []layer3.Ipv6InheritedNeighborDiscoveryNeighbor
	{
		d := o.Neighbor.ElementsAs(ctx, &neighbor_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range neighbor_tf_entries {
			var entry *layer3.Ipv6InheritedNeighborDiscoveryNeighbor
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			neighbor_pango_entries = append(neighbor_pango_entries, *entry)
		}
	}
	nsInterval_value := o.NsInterval.ValueInt64Pointer()
	reachableTime_value := o.ReachableTime.ValueInt64Pointer()
	var routerAdvertisement_entry *layer3.Ipv6InheritedNeighborDiscoveryRouterAdvertisement
	if o.RouterAdvertisement != nil {
		if *obj != nil && (*obj).RouterAdvertisement != nil {
			routerAdvertisement_entry = (*obj).RouterAdvertisement
		} else {
			routerAdvertisement_entry = new(layer3.Ipv6InheritedNeighborDiscoveryRouterAdvertisement)
		}
		// ModelOrObject: Object
		diags.Append(o.RouterAdvertisement.CopyToPango(ctx, append(ancestors, o), &routerAdvertisement_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscovery)
	}
	(*obj).DadAttempts = dadAttempts_value
	(*obj).DnsServer = dnsServer_entry
	(*obj).DnsSuffix = dnsSuffix_entry
	(*obj).EnableDad = enableDad_value
	(*obj).EnableNdpMonitor = enableNdpMonitor_value
	(*obj).Neighbor = neighbor_pango_entries
	(*obj).NsInterval = nsInterval_value
	(*obj).ReachableTime = reachableTime_value
	(*obj).RouterAdvertisement = routerAdvertisement_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryDnsServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	var source_entry *layer3.Ipv6InheritedNeighborDiscoveryDnsServerSource
	if o.Source != nil {
		if *obj != nil && (*obj).Source != nil {
			source_entry = (*obj).Source
		} else {
			source_entry = new(layer3.Ipv6InheritedNeighborDiscoveryDnsServerSource)
		}
		// ModelOrObject: Object
		diags.Append(o.Source.CopyToPango(ctx, append(ancestors, o), &source_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryDnsServer)
	}
	(*obj).Enable = enable_value
	(*obj).Source = source_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryDnsServerSource, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dhcpv6_entry *layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6
	if o.Dhcpv6 != nil {
		if *obj != nil && (*obj).Dhcpv6 != nil {
			dhcpv6_entry = (*obj).Dhcpv6
		} else {
			dhcpv6_entry = new(layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6)
		}
		// ModelOrObject: Object
		diags.Append(o.Dhcpv6.CopyToPango(ctx, append(ancestors, o), &dhcpv6_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var manual_entry *layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceManual
	if o.Manual != nil {
		if *obj != nil && (*obj).Manual != nil {
			manual_entry = (*obj).Manual
		} else {
			manual_entry = new(layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceManual)
		}
		// ModelOrObject: Object
		diags.Append(o.Manual.CopyToPango(ctx, append(ancestors, o), &manual_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryDnsServerSource)
	}
	(*obj).Dhcpv6 = dhcpv6_entry
	(*obj).Manual = manual_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Object) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	prefixPool_value := o.PrefixPool.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6)
	}
	(*obj).PrefixPool = prefixPool_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceManual, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var server_tf_entries []EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerObject
	var server_pango_entries []layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceManualServer
	{
		d := o.Server.ElementsAs(ctx, &server_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range server_tf_entries {
			var entry *layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceManualServer
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			server_pango_entries = append(server_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceManual)
	}
	(*obj).Server = server_pango_entries

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceManualServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	lifetime_value := o.Lifetime.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceManualServer)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Lifetime = lifetime_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryDnsSuffix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	var source_entry *layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSource
	if o.Source != nil {
		if *obj != nil && (*obj).Source != nil {
			source_entry = (*obj).Source
		} else {
			source_entry = new(layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSource)
		}
		// ModelOrObject: Object
		diags.Append(o.Source.CopyToPango(ctx, append(ancestors, o), &source_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryDnsSuffix)
	}
	(*obj).Enable = enable_value
	(*obj).Source = source_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSource, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dhcpv6_entry *layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6
	if o.Dhcpv6 != nil {
		if *obj != nil && (*obj).Dhcpv6 != nil {
			dhcpv6_entry = (*obj).Dhcpv6
		} else {
			dhcpv6_entry = new(layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6)
		}
		// ModelOrObject: Object
		diags.Append(o.Dhcpv6.CopyToPango(ctx, append(ancestors, o), &dhcpv6_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var manual_entry *layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceManual
	if o.Manual != nil {
		if *obj != nil && (*obj).Manual != nil {
			manual_entry = (*obj).Manual
		} else {
			manual_entry = new(layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceManual)
		}
		// ModelOrObject: Object
		diags.Append(o.Manual.CopyToPango(ctx, append(ancestors, o), &manual_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSource)
	}
	(*obj).Dhcpv6 = dhcpv6_entry
	(*obj).Manual = manual_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Object) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	prefixPool_value := o.PrefixPool.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6)
	}
	(*obj).PrefixPool = prefixPool_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceManual, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var suffix_tf_entries []EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixObject
	var suffix_pango_entries []layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffix
	{
		d := o.Suffix.ElementsAs(ctx, &suffix_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range suffix_tf_entries {
			var entry *layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffix
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			suffix_pango_entries = append(suffix_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceManual)
	}
	(*obj).Suffix = suffix_pango_entries

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	lifetime_value := o.Lifetime.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffix)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Lifetime = lifetime_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryNeighborObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryNeighbor, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	hwAddress_value := o.HwAddress.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryNeighbor)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).HwAddress = hwAddress_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryRouterAdvertisementObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6InheritedNeighborDiscoveryRouterAdvertisement, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	enableConsistencyCheck_value := o.EnableConsistencyCheck.ValueBoolPointer()
	hopLimit_value := o.HopLimit.ValueStringPointer()
	lifetime_value := o.Lifetime.ValueInt64Pointer()
	linkMtu_value := o.LinkMtu.ValueStringPointer()
	managedFlag_value := o.ManagedFlag.ValueBoolPointer()
	maxInterval_value := o.MaxInterval.ValueInt64Pointer()
	minInterval_value := o.MinInterval.ValueInt64Pointer()
	otherFlag_value := o.OtherFlag.ValueBoolPointer()
	reachableTime_value := o.ReachableTime.ValueStringPointer()
	retransmissionTimer_value := o.RetransmissionTimer.ValueStringPointer()
	routerPreference_value := o.RouterPreference.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6InheritedNeighborDiscoveryRouterAdvertisement)
	}
	(*obj).Enable = enable_value
	(*obj).EnableConsistencyCheck = enableConsistencyCheck_value
	(*obj).HopLimit = hopLimit_value
	(*obj).Lifetime = lifetime_value
	(*obj).LinkMtu = linkMtu_value
	(*obj).ManagedFlag = managedFlag_value
	(*obj).MaxInterval = maxInterval_value
	(*obj).MinInterval = minInterval_value
	(*obj).OtherFlag = otherFlag_value
	(*obj).ReachableTime = reachableTime_value
	(*obj).RetransmissionTimer = retransmissionTimer_value
	(*obj).RouterPreference = routerPreference_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6NeighborDiscovery, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	dadAttempts_value := o.DadAttempts.ValueInt64Pointer()
	enableDad_value := o.EnableDad.ValueBoolPointer()
	enableNdpMonitor_value := o.EnableNdpMonitor.ValueBoolPointer()
	var neighbor_tf_entries []EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryNeighborObject
	var neighbor_pango_entries []layer3.Ipv6NeighborDiscoveryNeighbor
	{
		d := o.Neighbor.ElementsAs(ctx, &neighbor_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range neighbor_tf_entries {
			var entry *layer3.Ipv6NeighborDiscoveryNeighbor
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			neighbor_pango_entries = append(neighbor_pango_entries, *entry)
		}
	}
	nsInterval_value := o.NsInterval.ValueInt64Pointer()
	reachableTime_value := o.ReachableTime.ValueInt64Pointer()
	var routerAdvertisement_entry *layer3.Ipv6NeighborDiscoveryRouterAdvertisement
	if o.RouterAdvertisement != nil {
		if *obj != nil && (*obj).RouterAdvertisement != nil {
			routerAdvertisement_entry = (*obj).RouterAdvertisement
		} else {
			routerAdvertisement_entry = new(layer3.Ipv6NeighborDiscoveryRouterAdvertisement)
		}
		// ModelOrObject: Object
		diags.Append(o.RouterAdvertisement.CopyToPango(ctx, append(ancestors, o), &routerAdvertisement_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6NeighborDiscovery)
	}
	(*obj).DadAttempts = dadAttempts_value
	(*obj).EnableDad = enableDad_value
	(*obj).EnableNdpMonitor = enableNdpMonitor_value
	(*obj).Neighbor = neighbor_pango_entries
	(*obj).NsInterval = nsInterval_value
	(*obj).ReachableTime = reachableTime_value
	(*obj).RouterAdvertisement = routerAdvertisement_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryNeighborObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6NeighborDiscoveryNeighbor, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	hwAddress_value := o.HwAddress.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6NeighborDiscoveryNeighbor)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).HwAddress = hwAddress_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6NeighborDiscoveryRouterAdvertisement, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dnsSupport_entry *layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupport
	if o.DnsSupport != nil {
		if *obj != nil && (*obj).DnsSupport != nil {
			dnsSupport_entry = (*obj).DnsSupport
		} else {
			dnsSupport_entry = new(layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupport)
		}
		// ModelOrObject: Object
		diags.Append(o.DnsSupport.CopyToPango(ctx, append(ancestors, o), &dnsSupport_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	enable_value := o.Enable.ValueBoolPointer()
	enableConsistencyCheck_value := o.EnableConsistencyCheck.ValueBoolPointer()
	hopLimit_value := o.HopLimit.ValueStringPointer()
	lifetime_value := o.Lifetime.ValueInt64Pointer()
	linkMtu_value := o.LinkMtu.ValueStringPointer()
	managedFlag_value := o.ManagedFlag.ValueBoolPointer()
	maxInterval_value := o.MaxInterval.ValueInt64Pointer()
	minInterval_value := o.MinInterval.ValueInt64Pointer()
	otherFlag_value := o.OtherFlag.ValueBoolPointer()
	reachableTime_value := o.ReachableTime.ValueStringPointer()
	retransmissionTimer_value := o.RetransmissionTimer.ValueStringPointer()
	routerPreference_value := o.RouterPreference.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6NeighborDiscoveryRouterAdvertisement)
	}
	(*obj).DnsSupport = dnsSupport_entry
	(*obj).Enable = enable_value
	(*obj).EnableConsistencyCheck = enableConsistencyCheck_value
	(*obj).HopLimit = hopLimit_value
	(*obj).Lifetime = lifetime_value
	(*obj).LinkMtu = linkMtu_value
	(*obj).ManagedFlag = managedFlag_value
	(*obj).MaxInterval = maxInterval_value
	(*obj).MinInterval = minInterval_value
	(*obj).OtherFlag = otherFlag_value
	(*obj).ReachableTime = reachableTime_value
	(*obj).RetransmissionTimer = retransmissionTimer_value
	(*obj).RouterPreference = routerPreference_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupport, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	var server_tf_entries []EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerObject
	var server_pango_entries []layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupportServer
	{
		d := o.Server.ElementsAs(ctx, &server_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range server_tf_entries {
			var entry *layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupportServer
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			server_pango_entries = append(server_pango_entries, *entry)
		}
	}
	var suffix_tf_entries []EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixObject
	var suffix_pango_entries []layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffix
	{
		d := o.Suffix.ElementsAs(ctx, &suffix_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range suffix_tf_entries {
			var entry *layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffix
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			suffix_pango_entries = append(suffix_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupport)
	}
	(*obj).Enable = enable_value
	(*obj).Server = server_pango_entries
	(*obj).Suffix = suffix_pango_entries

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupportServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	lifetime_value := o.Lifetime.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupportServer)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Lifetime = lifetime_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	lifetime_value := o.Lifetime.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffix)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Lifetime = lifetime_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceNdpProxyObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.NdpProxy, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var address_tf_entries []EthernetLayer3SubinterfaceResourceNdpProxyAddressObject
	var address_pango_entries []layer3.NdpProxyAddress
	{
		d := o.Address.ElementsAs(ctx, &address_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range address_tf_entries {
			var entry *layer3.NdpProxyAddress
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			address_pango_entries = append(address_pango_entries, *entry)
		}
	}
	enabled_value := o.Enabled.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(layer3.NdpProxy)
	}
	(*obj).Address = address_pango_entries
	(*obj).Enabled = enabled_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceNdpProxyAddressObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.NdpProxyAddress, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	negate_value := o.Negate.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(layer3.NdpProxyAddress)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Negate = negate_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourcePppoeObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.Pppoe, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	accessConcentrator_value := o.AccessConcentrator.ValueStringPointer()
	authentication_value := o.Authentication.ValueStringPointer()
	createDefaultRoute_value := o.CreateDefaultRoute.ValueBoolPointer()
	defaultRouteMetric_value := o.DefaultRouteMetric.ValueInt64Pointer()
	enable_value := o.Enable.ValueBoolPointer()
	var passive_entry *layer3.PppoePassive
	if o.Passive != nil {
		if *obj != nil && (*obj).Passive != nil {
			passive_entry = (*obj).Passive
		} else {
			passive_entry = new(layer3.PppoePassive)
		}
		// ModelOrObject: Object
		diags.Append(o.Passive.CopyToPango(ctx, append(ancestors, o), &passive_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
	if err != nil {
		diags.AddError("Failed to create encrypted values state key", err.Error())
		return diags
	}

	var password_value *string
	err = ev.StorePlaintextValue(valueKey, "solo", o.Password.ValueString())
	if err != nil {
		diags.AddError("Failed to manage encrypted values state", err.Error())
		return diags
	}
	password_value = o.Password.ValueStringPointer()
	service_value := o.Service.ValueStringPointer()
	var staticAddress_entry *layer3.PppoeStaticAddress
	if o.StaticAddress != nil {
		if *obj != nil && (*obj).StaticAddress != nil {
			staticAddress_entry = (*obj).StaticAddress
		} else {
			staticAddress_entry = new(layer3.PppoeStaticAddress)
		}
		// ModelOrObject: Object
		diags.Append(o.StaticAddress.CopyToPango(ctx, append(ancestors, o), &staticAddress_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	username_value := o.Username.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.Pppoe)
	}
	(*obj).AccessConcentrator = accessConcentrator_value
	(*obj).Authentication = authentication_value
	(*obj).CreateDefaultRoute = createDefaultRoute_value
	(*obj).DefaultRouteMetric = defaultRouteMetric_value
	(*obj).Enable = enable_value
	(*obj).Passive = passive_entry
	(*obj).Password = password_value
	(*obj).Service = service_value
	(*obj).StaticAddress = staticAddress_entry
	(*obj).Username = username_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourcePppoePassiveObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.PppoePassive, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(layer3.PppoePassive)
	}
	(*obj).Enable = enable_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourcePppoeStaticAddressObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.PppoeStaticAddress, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	ip_value := o.Ip.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.PppoeStaticAddress)
	}
	(*obj).Ip = ip_value

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.SdwanLinkSettings, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	sdwanInterfaceProfile_value := o.SdwanInterfaceProfile.ValueStringPointer()
	var upstreamNat_entry *layer3.SdwanLinkSettingsUpstreamNat
	if o.UpstreamNat != nil {
		if *obj != nil && (*obj).UpstreamNat != nil {
			upstreamNat_entry = (*obj).UpstreamNat
		} else {
			upstreamNat_entry = new(layer3.SdwanLinkSettingsUpstreamNat)
		}
		// ModelOrObject: Object
		diags.Append(o.UpstreamNat.CopyToPango(ctx, append(ancestors, o), &upstreamNat_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.SdwanLinkSettings)
	}
	(*obj).Enable = enable_value
	(*obj).SdwanInterfaceProfile = sdwanInterfaceProfile_value
	(*obj).UpstreamNat = upstreamNat_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.SdwanLinkSettingsUpstreamNat, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	enable_value := o.Enable.ValueBoolPointer()
	var ddns_entry *layer3.SdwanLinkSettingsUpstreamNatDdns
	if o.Ddns != nil {
		if *obj != nil && (*obj).Ddns != nil {
			ddns_entry = (*obj).Ddns
		} else {
			ddns_entry = new(layer3.SdwanLinkSettingsUpstreamNatDdns)
		}
		// ModelOrObject: Object
		diags.Append(o.Ddns.CopyToPango(ctx, append(ancestors, o), &ddns_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var staticIp_entry *layer3.SdwanLinkSettingsUpstreamNatStaticIp
	if o.StaticIp != nil {
		if *obj != nil && (*obj).StaticIp != nil {
			staticIp_entry = (*obj).StaticIp
		} else {
			staticIp_entry = new(layer3.SdwanLinkSettingsUpstreamNatStaticIp)
		}
		// ModelOrObject: Object
		diags.Append(o.StaticIp.CopyToPango(ctx, append(ancestors, o), &staticIp_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(layer3.SdwanLinkSettingsUpstreamNat)
	}
	(*obj).Enable = enable_value
	(*obj).Ddns = ddns_entry
	(*obj).StaticIp = staticIp_entry

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatDdnsObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.SdwanLinkSettingsUpstreamNatDdns, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(layer3.SdwanLinkSettingsUpstreamNatDdns)
	}

	return diags
}
func (o *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatStaticIpObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **layer3.SdwanLinkSettingsUpstreamNatStaticIp, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	fqdn_value := o.Fqdn.ValueStringPointer()
	ipAddress_value := o.IpAddress.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(layer3.SdwanLinkSettingsUpstreamNatStaticIp)
	}
	(*obj).Fqdn = fqdn_value
	(*obj).IpAddress = ipAddress_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceModel) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var arp_list types.List
	{
		var arp_tf_entries []EthernetLayer3SubinterfaceResourceArpObject
		for _, elt := range obj.Arp {
			entry := EthernetLayer3SubinterfaceResourceArpObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			arp_tf_entries = append(arp_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("arp")
		arp_list, list_diags = types.ListValueFrom(ctx, schemaType, arp_tf_entries)
		diags.Append(list_diags...)
	}
	var ip_list types.List
	{
		var ip_tf_entries []EthernetLayer3SubinterfaceResourceIpObject
		for _, elt := range obj.Ip {
			entry := EthernetLayer3SubinterfaceResourceIpObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			ip_tf_entries = append(ip_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("ip")
		ip_list, list_diags = types.ListValueFrom(ctx, schemaType, ip_tf_entries)
		diags.Append(list_diags...)
	}
	var adjustTcpMss_object *EthernetLayer3SubinterfaceResourceAdjustTcpMssObject
	if obj.AdjustTcpMss != nil {
		adjustTcpMss_object = new(EthernetLayer3SubinterfaceResourceAdjustTcpMssObject)
		diags.Append(adjustTcpMss_object.CopyFromPango(ctx, ancestors, obj.AdjustTcpMss, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var bonjour_object *EthernetLayer3SubinterfaceResourceBonjourObject
	if obj.Bonjour != nil {
		bonjour_object = new(EthernetLayer3SubinterfaceResourceBonjourObject)
		diags.Append(bonjour_object.CopyFromPango(ctx, ancestors, obj.Bonjour, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var ddnsConfig_object *EthernetLayer3SubinterfaceResourceDdnsConfigObject
	if obj.DdnsConfig != nil {
		ddnsConfig_object = new(EthernetLayer3SubinterfaceResourceDdnsConfigObject)
		diags.Append(ddnsConfig_object.CopyFromPango(ctx, ancestors, obj.DdnsConfig, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var dhcpClient_object *EthernetLayer3SubinterfaceResourceDhcpClientObject
	if obj.DhcpClient != nil {
		dhcpClient_object = new(EthernetLayer3SubinterfaceResourceDhcpClientObject)
		diags.Append(dhcpClient_object.CopyFromPango(ctx, ancestors, obj.DhcpClient, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var ipv6_object *EthernetLayer3SubinterfaceResourceIpv6Object
	if obj.Ipv6 != nil {
		ipv6_object = new(EthernetLayer3SubinterfaceResourceIpv6Object)
		diags.Append(ipv6_object.CopyFromPango(ctx, ancestors, obj.Ipv6, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var ndpProxy_object *EthernetLayer3SubinterfaceResourceNdpProxyObject
	if obj.NdpProxy != nil {
		ndpProxy_object = new(EthernetLayer3SubinterfaceResourceNdpProxyObject)
		diags.Append(ndpProxy_object.CopyFromPango(ctx, ancestors, obj.NdpProxy, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var pppoe_object *EthernetLayer3SubinterfaceResourcePppoeObject
	if obj.Pppoe != nil {
		pppoe_object = new(EthernetLayer3SubinterfaceResourcePppoeObject)
		diags.Append(pppoe_object.CopyFromPango(ctx, ancestors, obj.Pppoe, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var sdwanLinkSettings_object *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsObject
	if obj.SdwanLinkSettings != nil {
		sdwanLinkSettings_object = new(EthernetLayer3SubinterfaceResourceSdwanLinkSettingsObject)
		diags.Append(sdwanLinkSettings_object.CopyFromPango(ctx, ancestors, obj.SdwanLinkSettings, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var comment_value types.String
	if obj.Comment != nil {
		comment_value = types.StringValue(*obj.Comment)
	}
	var decryptForward_value types.Bool
	if obj.DecryptForward != nil {
		decryptForward_value = types.BoolValue(*obj.DecryptForward)
	}
	var dfIgnore_value types.Bool
	if obj.DfIgnore != nil {
		dfIgnore_value = types.BoolValue(*obj.DfIgnore)
	}
	var interfaceManagementProfile_value types.String
	if obj.InterfaceManagementProfile != nil {
		interfaceManagementProfile_value = types.StringValue(*obj.InterfaceManagementProfile)
	}
	var mtu_value types.Int64
	if obj.Mtu != nil {
		mtu_value = types.Int64Value(*obj.Mtu)
	}
	var netflowProfile_value types.String
	if obj.NetflowProfile != nil {
		netflowProfile_value = types.StringValue(*obj.NetflowProfile)
	}
	var tag_value types.Int64
	if obj.Tag != nil {
		tag_value = types.Int64Value(*obj.Tag)
	}
	o.Name = types.StringValue(obj.Name)
	o.AdjustTcpMss = adjustTcpMss_object
	o.Arp = arp_list
	o.Bonjour = bonjour_object
	o.Comment = comment_value
	o.DdnsConfig = ddnsConfig_object
	o.DecryptForward = decryptForward_value
	o.DfIgnore = dfIgnore_value
	o.DhcpClient = dhcpClient_object
	o.InterfaceManagementProfile = interfaceManagementProfile_value
	o.Ip = ip_list
	o.Ipv6 = ipv6_object
	o.Mtu = mtu_value
	o.NdpProxy = ndpProxy_object
	o.NetflowProfile = netflowProfile_value
	o.Pppoe = pppoe_object
	o.SdwanLinkSettings = sdwanLinkSettings_object
	o.Tag = tag_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceAdjustTcpMssObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.AdjustTcpMss, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var ipv4MssAdjustment_value types.Int64
	if obj.Ipv4MssAdjustment != nil {
		ipv4MssAdjustment_value = types.Int64Value(*obj.Ipv4MssAdjustment)
	}
	var ipv6MssAdjustment_value types.Int64
	if obj.Ipv6MssAdjustment != nil {
		ipv6MssAdjustment_value = types.Int64Value(*obj.Ipv6MssAdjustment)
	}
	o.Enable = enable_value
	o.Ipv4MssAdjustment = ipv4MssAdjustment_value
	o.Ipv6MssAdjustment = ipv6MssAdjustment_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceArpObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Arp, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var hwAddress_value types.String
	if obj.HwAddress != nil {
		hwAddress_value = types.StringValue(*obj.HwAddress)
	}
	o.Name = types.StringValue(obj.Name)
	o.HwAddress = hwAddress_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceBonjourObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Bonjour, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var groupId_value types.Int64
	if obj.GroupId != nil {
		groupId_value = types.Int64Value(*obj.GroupId)
	}
	var ttlCheck_value types.Bool
	if obj.TtlCheck != nil {
		ttlCheck_value = types.BoolValue(*obj.TtlCheck)
	}
	o.Enable = enable_value
	o.GroupId = groupId_value
	o.TtlCheck = ttlCheck_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceDdnsConfigObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.DdnsConfig, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var ddnsIp_list types.List
	{
		var list_diags diag.Diagnostics
		ddnsIp_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DdnsIp)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var ddnsIpv6_list types.List
	{
		var list_diags diag.Diagnostics
		ddnsIpv6_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DdnsIpv6)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var ddnsVendorConfig_list types.List
	{
		var ddnsVendorConfig_tf_entries []EthernetLayer3SubinterfaceResourceDdnsConfigDdnsVendorConfigObject
		for _, elt := range obj.DdnsVendorConfig {
			entry := EthernetLayer3SubinterfaceResourceDdnsConfigDdnsVendorConfigObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			ddnsVendorConfig_tf_entries = append(ddnsVendorConfig_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("ddns_vendor_config")
		ddnsVendorConfig_list, list_diags = types.ListValueFrom(ctx, schemaType, ddnsVendorConfig_tf_entries)
		diags.Append(list_diags...)
	}

	var ddnsCertProfile_value types.String
	if obj.DdnsCertProfile != nil {
		ddnsCertProfile_value = types.StringValue(*obj.DdnsCertProfile)
	}
	var ddnsEnabled_value types.Bool
	if obj.DdnsEnabled != nil {
		ddnsEnabled_value = types.BoolValue(*obj.DdnsEnabled)
	}
	var ddnsHostname_value types.String
	if obj.DdnsHostname != nil {
		ddnsHostname_value = types.StringValue(*obj.DdnsHostname)
	}
	var ddnsUpdateInterval_value types.Int64
	if obj.DdnsUpdateInterval != nil {
		ddnsUpdateInterval_value = types.Int64Value(*obj.DdnsUpdateInterval)
	}
	var ddnsVendor_value types.String
	if obj.DdnsVendor != nil {
		ddnsVendor_value = types.StringValue(*obj.DdnsVendor)
	}
	o.DdnsCertProfile = ddnsCertProfile_value
	o.DdnsEnabled = ddnsEnabled_value
	o.DdnsHostname = ddnsHostname_value
	o.DdnsIp = ddnsIp_list
	o.DdnsIpv6 = ddnsIpv6_list
	o.DdnsUpdateInterval = ddnsUpdateInterval_value
	o.DdnsVendor = ddnsVendor_value
	o.DdnsVendorConfig = ddnsVendorConfig_list

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceDdnsConfigDdnsVendorConfigObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.DdnsConfigDdnsVendorConfig, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var value_value types.String
	if obj.Value != nil {
		value_value = types.StringValue(*obj.Value)
	}
	o.Name = types.StringValue(obj.Name)
	o.Value = value_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceDhcpClientObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.DhcpClient, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var sendHostname_object *EthernetLayer3SubinterfaceResourceDhcpClientSendHostnameObject
	if obj.SendHostname != nil {
		sendHostname_object = new(EthernetLayer3SubinterfaceResourceDhcpClientSendHostnameObject)
		diags.Append(sendHostname_object.CopyFromPango(ctx, append(ancestors, o), obj.SendHostname, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var createDefaultRoute_value types.Bool
	if obj.CreateDefaultRoute != nil {
		createDefaultRoute_value = types.BoolValue(*obj.CreateDefaultRoute)
	}
	var defaultRouteMetric_value types.Int64
	if obj.DefaultRouteMetric != nil {
		defaultRouteMetric_value = types.Int64Value(*obj.DefaultRouteMetric)
	}
	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	o.CreateDefaultRoute = createDefaultRoute_value
	o.DefaultRouteMetric = defaultRouteMetric_value
	o.Enable = enable_value
	o.SendHostname = sendHostname_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceDhcpClientSendHostnameObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.DhcpClientSendHostname, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var hostname_value types.String
	if obj.Hostname != nil {
		hostname_value = types.StringValue(*obj.Hostname)
	}
	o.Enable = enable_value
	o.Hostname = hostname_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ip, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var sdwanGateway_value types.String
	if obj.SdwanGateway != nil {
		sdwanGateway_value = types.StringValue(*obj.SdwanGateway)
	}
	o.Name = types.StringValue(obj.Name)
	o.SdwanGateway = sdwanGateway_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6Object) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var address_list types.List
	{
		var address_tf_entries []EthernetLayer3SubinterfaceResourceIpv6AddressObject
		for _, elt := range obj.Address {
			entry := EthernetLayer3SubinterfaceResourceIpv6AddressObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			address_tf_entries = append(address_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("address")
		address_list, list_diags = types.ListValueFrom(ctx, schemaType, address_tf_entries)
		diags.Append(list_diags...)
	}
	var dhcpClient_object *EthernetLayer3SubinterfaceResourceIpv6DhcpClientObject
	if obj.DhcpClient != nil {
		dhcpClient_object = new(EthernetLayer3SubinterfaceResourceIpv6DhcpClientObject)
		diags.Append(dhcpClient_object.CopyFromPango(ctx, append(ancestors, o), obj.DhcpClient, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var inherited_object *EthernetLayer3SubinterfaceResourceIpv6InheritedObject
	if obj.Inherited != nil {
		inherited_object = new(EthernetLayer3SubinterfaceResourceIpv6InheritedObject)
		diags.Append(inherited_object.CopyFromPango(ctx, append(ancestors, o), obj.Inherited, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var neighborDiscovery_object *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryObject
	if obj.NeighborDiscovery != nil {
		neighborDiscovery_object = new(EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryObject)
		diags.Append(neighborDiscovery_object.CopyFromPango(ctx, append(ancestors, o), obj.NeighborDiscovery, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enabled_value types.Bool
	if obj.Enabled != nil {
		enabled_value = types.BoolValue(*obj.Enabled)
	}
	var interfaceId_value types.String
	if obj.InterfaceId != nil {
		interfaceId_value = types.StringValue(*obj.InterfaceId)
	}
	o.Address = address_list
	o.DhcpClient = dhcpClient_object
	o.Enabled = enabled_value
	o.Inherited = inherited_object
	o.InterfaceId = interfaceId_value
	o.NeighborDiscovery = neighborDiscovery_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6AddressObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6Address, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var prefix_object *EthernetLayer3SubinterfaceResourceIpv6AddressPrefixObject
	if obj.Prefix != nil {
		prefix_object = new(EthernetLayer3SubinterfaceResourceIpv6AddressPrefixObject)
		diags.Append(prefix_object.CopyFromPango(ctx, append(ancestors, o), obj.Prefix, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var anycast_object *EthernetLayer3SubinterfaceResourceIpv6AddressAnycastObject
	if obj.Anycast != nil {
		anycast_object = new(EthernetLayer3SubinterfaceResourceIpv6AddressAnycastObject)
		diags.Append(anycast_object.CopyFromPango(ctx, append(ancestors, o), obj.Anycast, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var advertise_object *EthernetLayer3SubinterfaceResourceIpv6AddressAdvertiseObject
	if obj.Advertise != nil {
		advertise_object = new(EthernetLayer3SubinterfaceResourceIpv6AddressAdvertiseObject)
		diags.Append(advertise_object.CopyFromPango(ctx, append(ancestors, o), obj.Advertise, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enableOnInterface_value types.Bool
	if obj.EnableOnInterface != nil {
		enableOnInterface_value = types.BoolValue(*obj.EnableOnInterface)
	}
	o.Name = types.StringValue(obj.Name)
	o.EnableOnInterface = enableOnInterface_value
	o.Prefix = prefix_object
	o.Anycast = anycast_object
	o.Advertise = advertise_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6AddressPrefixObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6AddressPrefix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6AddressAnycastObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6AddressAnycast, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6AddressAdvertiseObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6AddressAdvertise, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var validLifetime_value types.String
	if obj.ValidLifetime != nil {
		validLifetime_value = types.StringValue(*obj.ValidLifetime)
	}
	var preferredLifetime_value types.String
	if obj.PreferredLifetime != nil {
		preferredLifetime_value = types.StringValue(*obj.PreferredLifetime)
	}
	var onlinkFlag_value types.Bool
	if obj.OnlinkFlag != nil {
		onlinkFlag_value = types.BoolValue(*obj.OnlinkFlag)
	}
	var autoConfigFlag_value types.Bool
	if obj.AutoConfigFlag != nil {
		autoConfigFlag_value = types.BoolValue(*obj.AutoConfigFlag)
	}
	o.Enable = enable_value
	o.ValidLifetime = validLifetime_value
	o.PreferredLifetime = preferredLifetime_value
	o.OnlinkFlag = onlinkFlag_value
	o.AutoConfigFlag = autoConfigFlag_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClient, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var neighborDiscovery_object *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryObject
	if obj.NeighborDiscovery != nil {
		neighborDiscovery_object = new(EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryObject)
		diags.Append(neighborDiscovery_object.CopyFromPango(ctx, append(ancestors, o), obj.NeighborDiscovery, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var prefixDelegation_object *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationObject
	if obj.PrefixDelegation != nil {
		prefixDelegation_object = new(EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationObject)
		diags.Append(prefixDelegation_object.CopyFromPango(ctx, append(ancestors, o), obj.PrefixDelegation, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var v6Options_object *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsObject
	if obj.V6Options != nil {
		v6Options_object = new(EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsObject)
		diags.Append(v6Options_object.CopyFromPango(ctx, append(ancestors, o), obj.V6Options, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var acceptRaRoute_value types.Bool
	if obj.AcceptRaRoute != nil {
		acceptRaRoute_value = types.BoolValue(*obj.AcceptRaRoute)
	}
	var defaultRouteMetric_value types.Int64
	if obj.DefaultRouteMetric != nil {
		defaultRouteMetric_value = types.Int64Value(*obj.DefaultRouteMetric)
	}
	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var preference_value types.String
	if obj.Preference != nil {
		preference_value = types.StringValue(*obj.Preference)
	}
	o.AcceptRaRoute = acceptRaRoute_value
	o.DefaultRouteMetric = defaultRouteMetric_value
	o.Enable = enable_value
	o.NeighborDiscovery = neighborDiscovery_object
	o.Preference = preference_value
	o.PrefixDelegation = prefixDelegation_object
	o.V6Options = v6Options_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscovery, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var neighbor_list types.List
	{
		var neighbor_tf_entries []EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryNeighborObject
		for _, elt := range obj.Neighbor {
			entry := EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryNeighborObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			neighbor_tf_entries = append(neighbor_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("neighbor")
		neighbor_list, list_diags = types.ListValueFrom(ctx, schemaType, neighbor_tf_entries)
		diags.Append(list_diags...)
	}
	var dnsServer_object *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerObject
	if obj.DnsServer != nil {
		dnsServer_object = new(EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerObject)
		diags.Append(dnsServer_object.CopyFromPango(ctx, append(ancestors, o), obj.DnsServer, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var dnsSuffix_object *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixObject
	if obj.DnsSuffix != nil {
		dnsSuffix_object = new(EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixObject)
		diags.Append(dnsSuffix_object.CopyFromPango(ctx, append(ancestors, o), obj.DnsSuffix, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var dadAttempts_value types.Int64
	if obj.DadAttempts != nil {
		dadAttempts_value = types.Int64Value(*obj.DadAttempts)
	}
	var enableDad_value types.Bool
	if obj.EnableDad != nil {
		enableDad_value = types.BoolValue(*obj.EnableDad)
	}
	var enableNdpMonitor_value types.Bool
	if obj.EnableNdpMonitor != nil {
		enableNdpMonitor_value = types.BoolValue(*obj.EnableNdpMonitor)
	}
	var nsInterval_value types.Int64
	if obj.NsInterval != nil {
		nsInterval_value = types.Int64Value(*obj.NsInterval)
	}
	var reachableTime_value types.Int64
	if obj.ReachableTime != nil {
		reachableTime_value = types.Int64Value(*obj.ReachableTime)
	}
	o.DadAttempts = dadAttempts_value
	o.DnsServer = dnsServer_object
	o.DnsSuffix = dnsSuffix_object
	o.EnableDad = enableDad_value
	o.EnableNdpMonitor = enableNdpMonitor_value
	o.Neighbor = neighbor_list
	o.NsInterval = nsInterval_value
	o.ReachableTime = reachableTime_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscoveryDnsServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var source_object *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceObject
	if obj.Source != nil {
		source_object = new(EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceObject)
		diags.Append(source_object.CopyFromPango(ctx, append(ancestors, o), obj.Source, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	o.Enable = enable_value
	o.Source = source_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSource, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dhcpv6_object *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Object
	if obj.Dhcpv6 != nil {
		dhcpv6_object = new(EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Object)
		diags.Append(dhcpv6_object.CopyFromPango(ctx, append(ancestors, o), obj.Dhcpv6, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var manual_object *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualObject
	if obj.Manual != nil {
		manual_object = new(EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualObject)
		diags.Append(manual_object.CopyFromPango(ctx, append(ancestors, o), obj.Manual, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Dhcpv6 = dhcpv6_object
	o.Manual = manual_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6Object) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceDhcpv6, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceManual, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var server_list types.List
	{
		var server_tf_entries []EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerObject
		for _, elt := range obj.Server {
			entry := EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			server_tf_entries = append(server_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("server")
		server_list, list_diags = types.ListValueFrom(ctx, schemaType, server_tf_entries)
		diags.Append(list_diags...)
	}

	o.Server = server_list

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsServerSourceManualServerObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscoveryDnsServerSourceManualServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var lifetime_value types.Int64
	if obj.Lifetime != nil {
		lifetime_value = types.Int64Value(*obj.Lifetime)
	}
	o.Name = types.StringValue(obj.Name)
	o.Lifetime = lifetime_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var source_object *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceObject
	if obj.Source != nil {
		source_object = new(EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceObject)
		diags.Append(source_object.CopyFromPango(ctx, append(ancestors, o), obj.Source, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	o.Enable = enable_value
	o.Source = source_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSource, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dhcpv6_object *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Object
	if obj.Dhcpv6 != nil {
		dhcpv6_object = new(EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Object)
		diags.Append(dhcpv6_object.CopyFromPango(ctx, append(ancestors, o), obj.Dhcpv6, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var manual_object *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualObject
	if obj.Manual != nil {
		manual_object = new(EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualObject)
		diags.Append(manual_object.CopyFromPango(ctx, append(ancestors, o), obj.Manual, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Dhcpv6 = dhcpv6_object
	o.Manual = manual_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6Object) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceDhcpv6, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceManual, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var suffix_list types.List
	{
		var suffix_tf_entries []EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixObject
		for _, elt := range obj.Suffix {
			entry := EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			suffix_tf_entries = append(suffix_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("suffix")
		suffix_list, list_diags = types.ListValueFrom(ctx, schemaType, suffix_tf_entries)
		diags.Append(list_diags...)
	}

	o.Suffix = suffix_list

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffixObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscoveryDnsSuffixSourceManualSuffix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var lifetime_value types.Int64
	if obj.Lifetime != nil {
		lifetime_value = types.Int64Value(*obj.Lifetime)
	}
	o.Name = types.StringValue(obj.Name)
	o.Lifetime = lifetime_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientNeighborDiscoveryNeighborObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientNeighborDiscoveryNeighbor, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var hwAddress_value types.String
	if obj.HwAddress != nil {
		hwAddress_value = types.StringValue(*obj.HwAddress)
	}
	o.Name = types.StringValue(obj.Name)
	o.HwAddress = hwAddress_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientPrefixDelegation, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var enable_object *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableObject
	if obj.Enable != nil {
		enable_object = new(EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableObject)
		diags.Append(enable_object.CopyFromPango(ctx, append(ancestors, o), obj.Enable, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Enable = enable_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientPrefixDelegationEnable, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var no_object *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableNoObject
	if obj.No != nil {
		no_object = new(EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableNoObject)
		diags.Append(no_object.CopyFromPango(ctx, append(ancestors, o), obj.No, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var yes_object *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableYesObject
	if obj.Yes != nil {
		yes_object = new(EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableYesObject)
		diags.Append(yes_object.CopyFromPango(ctx, append(ancestors, o), obj.Yes, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.No = no_object
	o.Yes = yes_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableNoObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientPrefixDelegationEnableNo, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientPrefixDelegationEnableYesObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientPrefixDelegationEnableYes, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var pfxPoolName_value types.String
	if obj.PfxPoolName != nil {
		pfxPoolName_value = types.StringValue(*obj.PfxPoolName)
	}
	var prefixLen_value types.Int64
	if obj.PrefixLen != nil {
		prefixLen_value = types.Int64Value(*obj.PrefixLen)
	}
	var prefixLenHint_value types.Bool
	if obj.PrefixLenHint != nil {
		prefixLenHint_value = types.BoolValue(*obj.PrefixLenHint)
	}
	o.PfxPoolName = pfxPoolName_value
	o.PrefixLen = prefixLen_value
	o.PrefixLenHint = prefixLenHint_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientV6Options, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var enable_object *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableObject
	if obj.Enable != nil {
		enable_object = new(EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableObject)
		diags.Append(enable_object.CopyFromPango(ctx, append(ancestors, o), obj.Enable, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var duidType_value types.String
	if obj.DuidType != nil {
		duidType_value = types.StringValue(*obj.DuidType)
	}
	var rapidCommit_value types.Bool
	if obj.RapidCommit != nil {
		rapidCommit_value = types.BoolValue(*obj.RapidCommit)
	}
	var supportSrvrReconfig_value types.Bool
	if obj.SupportSrvrReconfig != nil {
		supportSrvrReconfig_value = types.BoolValue(*obj.SupportSrvrReconfig)
	}
	o.DuidType = duidType_value
	o.Enable = enable_object
	o.RapidCommit = rapidCommit_value
	o.SupportSrvrReconfig = supportSrvrReconfig_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientV6OptionsEnable, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var no_object *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableNoObject
	if obj.No != nil {
		no_object = new(EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableNoObject)
		diags.Append(no_object.CopyFromPango(ctx, append(ancestors, o), obj.No, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var yes_object *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableYesObject
	if obj.Yes != nil {
		yes_object = new(EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableYesObject)
		diags.Append(yes_object.CopyFromPango(ctx, append(ancestors, o), obj.Yes, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.No = no_object
	o.Yes = yes_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableNoObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientV6OptionsEnableNo, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6DhcpClientV6OptionsEnableYesObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6DhcpClientV6OptionsEnableYes, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var nonTempAddr_value types.Bool
	if obj.NonTempAddr != nil {
		nonTempAddr_value = types.BoolValue(*obj.NonTempAddr)
	}
	var tempAddr_value types.Bool
	if obj.TempAddr != nil {
		tempAddr_value = types.BoolValue(*obj.TempAddr)
	}
	o.NonTempAddr = nonTempAddr_value
	o.TempAddr = tempAddr_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6Inherited, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var assignAddr_list types.List
	{
		var assignAddr_tf_entries []EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrObject
		for _, elt := range obj.AssignAddr {
			entry := EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			assignAddr_tf_entries = append(assignAddr_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("assign_addr")
		assignAddr_list, list_diags = types.ListValueFrom(ctx, schemaType, assignAddr_tf_entries)
		diags.Append(list_diags...)
	}
	var neighborDiscovery_object *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryObject
	if obj.NeighborDiscovery != nil {
		neighborDiscovery_object = new(EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryObject)
		diags.Append(neighborDiscovery_object.CopyFromPango(ctx, append(ancestors, o), obj.NeighborDiscovery, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	o.AssignAddr = assignAddr_list
	o.Enable = enable_value
	o.NeighborDiscovery = neighborDiscovery_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedAssignAddr, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var type_object *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeObject
	if obj.Type != nil {
		type_object = new(EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeObject)
		diags.Append(type_object.CopyFromPango(ctx, append(ancestors, o), obj.Type, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Name = types.StringValue(obj.Name)
	o.Type = type_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedAssignAddrType, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var gua_object *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaObject
	if obj.Gua != nil {
		gua_object = new(EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaObject)
		diags.Append(gua_object.CopyFromPango(ctx, append(ancestors, o), obj.Gua, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var ula_object *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaObject
	if obj.Ula != nil {
		ula_object = new(EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaObject)
		diags.Append(ula_object.CopyFromPango(ctx, append(ancestors, o), obj.Ula, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Gua = gua_object
	o.Ula = ula_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedAssignAddrTypeGua, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var poolType_object *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeObject
	if obj.PoolType != nil {
		poolType_object = new(EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeObject)
		diags.Append(poolType_object.CopyFromPango(ctx, append(ancestors, o), obj.PoolType, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var advertise_object *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaAdvertiseObject
	if obj.Advertise != nil {
		advertise_object = new(EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaAdvertiseObject)
		diags.Append(advertise_object.CopyFromPango(ctx, append(ancestors, o), obj.Advertise, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enableOnInterface_value types.Bool
	if obj.EnableOnInterface != nil {
		enableOnInterface_value = types.BoolValue(*obj.EnableOnInterface)
	}
	var prefixPool_value types.String
	if obj.PrefixPool != nil {
		prefixPool_value = types.StringValue(*obj.PrefixPool)
	}
	o.EnableOnInterface = enableOnInterface_value
	o.PrefixPool = prefixPool_value
	o.PoolType = poolType_object
	o.Advertise = advertise_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedAssignAddrTypeGuaPoolType, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dynamic_object *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicObject
	if obj.Dynamic != nil {
		dynamic_object = new(EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicObject)
		diags.Append(dynamic_object.CopyFromPango(ctx, append(ancestors, o), obj.Dynamic, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var dynamicId_object *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdObject
	if obj.DynamicId != nil {
		dynamicId_object = new(EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdObject)
		diags.Append(dynamicId_object.CopyFromPango(ctx, append(ancestors, o), obj.DynamicId, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Dynamic = dynamic_object
	o.DynamicId = dynamicId_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedAssignAddrTypeGuaPoolTypeDynamic, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaPoolTypeDynamicIdObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedAssignAddrTypeGuaPoolTypeDynamicId, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var identifier_value types.Int64
	if obj.Identifier != nil {
		identifier_value = types.Int64Value(*obj.Identifier)
	}
	o.Identifier = identifier_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeGuaAdvertiseObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedAssignAddrTypeGuaAdvertise, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var onlinkFlag_value types.Bool
	if obj.OnlinkFlag != nil {
		onlinkFlag_value = types.BoolValue(*obj.OnlinkFlag)
	}
	var autoConfigFlag_value types.Bool
	if obj.AutoConfigFlag != nil {
		autoConfigFlag_value = types.BoolValue(*obj.AutoConfigFlag)
	}
	o.Enable = enable_value
	o.OnlinkFlag = onlinkFlag_value
	o.AutoConfigFlag = autoConfigFlag_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedAssignAddrTypeUla, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var advertise_object *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaAdvertiseObject
	if obj.Advertise != nil {
		advertise_object = new(EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaAdvertiseObject)
		diags.Append(advertise_object.CopyFromPango(ctx, append(ancestors, o), obj.Advertise, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enableOnInterface_value types.Bool
	if obj.EnableOnInterface != nil {
		enableOnInterface_value = types.BoolValue(*obj.EnableOnInterface)
	}
	var address_value types.String
	if obj.Address != nil {
		address_value = types.StringValue(*obj.Address)
	}
	var prefix_value types.Bool
	if obj.Prefix != nil {
		prefix_value = types.BoolValue(*obj.Prefix)
	}
	var anycast_value types.Bool
	if obj.Anycast != nil {
		anycast_value = types.BoolValue(*obj.Anycast)
	}
	o.EnableOnInterface = enableOnInterface_value
	o.Address = address_value
	o.Prefix = prefix_value
	o.Anycast = anycast_value
	o.Advertise = advertise_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedAssignAddrTypeUlaAdvertiseObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedAssignAddrTypeUlaAdvertise, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var validLifetime_value types.String
	if obj.ValidLifetime != nil {
		validLifetime_value = types.StringValue(*obj.ValidLifetime)
	}
	var preferredLifetime_value types.String
	if obj.PreferredLifetime != nil {
		preferredLifetime_value = types.StringValue(*obj.PreferredLifetime)
	}
	var onlinkFlag_value types.Bool
	if obj.OnlinkFlag != nil {
		onlinkFlag_value = types.BoolValue(*obj.OnlinkFlag)
	}
	var autoConfigFlag_value types.Bool
	if obj.AutoConfigFlag != nil {
		autoConfigFlag_value = types.BoolValue(*obj.AutoConfigFlag)
	}
	o.Enable = enable_value
	o.ValidLifetime = validLifetime_value
	o.PreferredLifetime = preferredLifetime_value
	o.OnlinkFlag = onlinkFlag_value
	o.AutoConfigFlag = autoConfigFlag_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscovery, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var neighbor_list types.List
	{
		var neighbor_tf_entries []EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryNeighborObject
		for _, elt := range obj.Neighbor {
			entry := EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryNeighborObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			neighbor_tf_entries = append(neighbor_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("neighbor")
		neighbor_list, list_diags = types.ListValueFrom(ctx, schemaType, neighbor_tf_entries)
		diags.Append(list_diags...)
	}
	var dnsServer_object *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerObject
	if obj.DnsServer != nil {
		dnsServer_object = new(EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerObject)
		diags.Append(dnsServer_object.CopyFromPango(ctx, append(ancestors, o), obj.DnsServer, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var dnsSuffix_object *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixObject
	if obj.DnsSuffix != nil {
		dnsSuffix_object = new(EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixObject)
		diags.Append(dnsSuffix_object.CopyFromPango(ctx, append(ancestors, o), obj.DnsSuffix, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var routerAdvertisement_object *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryRouterAdvertisementObject
	if obj.RouterAdvertisement != nil {
		routerAdvertisement_object = new(EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryRouterAdvertisementObject)
		diags.Append(routerAdvertisement_object.CopyFromPango(ctx, append(ancestors, o), obj.RouterAdvertisement, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var dadAttempts_value types.Int64
	if obj.DadAttempts != nil {
		dadAttempts_value = types.Int64Value(*obj.DadAttempts)
	}
	var enableDad_value types.Bool
	if obj.EnableDad != nil {
		enableDad_value = types.BoolValue(*obj.EnableDad)
	}
	var enableNdpMonitor_value types.Bool
	if obj.EnableNdpMonitor != nil {
		enableNdpMonitor_value = types.BoolValue(*obj.EnableNdpMonitor)
	}
	var nsInterval_value types.Int64
	if obj.NsInterval != nil {
		nsInterval_value = types.Int64Value(*obj.NsInterval)
	}
	var reachableTime_value types.Int64
	if obj.ReachableTime != nil {
		reachableTime_value = types.Int64Value(*obj.ReachableTime)
	}
	o.DadAttempts = dadAttempts_value
	o.DnsServer = dnsServer_object
	o.DnsSuffix = dnsSuffix_object
	o.EnableDad = enableDad_value
	o.EnableNdpMonitor = enableNdpMonitor_value
	o.Neighbor = neighbor_list
	o.NsInterval = nsInterval_value
	o.ReachableTime = reachableTime_value
	o.RouterAdvertisement = routerAdvertisement_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryDnsServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var source_object *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceObject
	if obj.Source != nil {
		source_object = new(EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceObject)
		diags.Append(source_object.CopyFromPango(ctx, append(ancestors, o), obj.Source, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	o.Enable = enable_value
	o.Source = source_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryDnsServerSource, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dhcpv6_object *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Object
	if obj.Dhcpv6 != nil {
		dhcpv6_object = new(EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Object)
		diags.Append(dhcpv6_object.CopyFromPango(ctx, append(ancestors, o), obj.Dhcpv6, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var manual_object *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualObject
	if obj.Manual != nil {
		manual_object = new(EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualObject)
		diags.Append(manual_object.CopyFromPango(ctx, append(ancestors, o), obj.Manual, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Dhcpv6 = dhcpv6_object
	o.Manual = manual_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6Object) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceDhcpv6, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var prefixPool_value types.String
	if obj.PrefixPool != nil {
		prefixPool_value = types.StringValue(*obj.PrefixPool)
	}
	o.PrefixPool = prefixPool_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceManual, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var server_list types.List
	{
		var server_tf_entries []EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerObject
		for _, elt := range obj.Server {
			entry := EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			server_tf_entries = append(server_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("server")
		server_list, list_diags = types.ListValueFrom(ctx, schemaType, server_tf_entries)
		diags.Append(list_diags...)
	}

	o.Server = server_list

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsServerSourceManualServerObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryDnsServerSourceManualServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var lifetime_value types.Int64
	if obj.Lifetime != nil {
		lifetime_value = types.Int64Value(*obj.Lifetime)
	}
	o.Name = types.StringValue(obj.Name)
	o.Lifetime = lifetime_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryDnsSuffix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var source_object *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceObject
	if obj.Source != nil {
		source_object = new(EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceObject)
		diags.Append(source_object.CopyFromPango(ctx, append(ancestors, o), obj.Source, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	o.Enable = enable_value
	o.Source = source_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSource, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dhcpv6_object *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Object
	if obj.Dhcpv6 != nil {
		dhcpv6_object = new(EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Object)
		diags.Append(dhcpv6_object.CopyFromPango(ctx, append(ancestors, o), obj.Dhcpv6, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var manual_object *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualObject
	if obj.Manual != nil {
		manual_object = new(EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualObject)
		diags.Append(manual_object.CopyFromPango(ctx, append(ancestors, o), obj.Manual, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Dhcpv6 = dhcpv6_object
	o.Manual = manual_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6Object) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceDhcpv6, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var prefixPool_value types.String
	if obj.PrefixPool != nil {
		prefixPool_value = types.StringValue(*obj.PrefixPool)
	}
	o.PrefixPool = prefixPool_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceManual, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var suffix_list types.List
	{
		var suffix_tf_entries []EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixObject
		for _, elt := range obj.Suffix {
			entry := EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			suffix_tf_entries = append(suffix_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("suffix")
		suffix_list, list_diags = types.ListValueFrom(ctx, schemaType, suffix_tf_entries)
		diags.Append(list_diags...)
	}

	o.Suffix = suffix_list

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffixObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryDnsSuffixSourceManualSuffix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var lifetime_value types.Int64
	if obj.Lifetime != nil {
		lifetime_value = types.Int64Value(*obj.Lifetime)
	}
	o.Name = types.StringValue(obj.Name)
	o.Lifetime = lifetime_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryNeighborObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryNeighbor, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var hwAddress_value types.String
	if obj.HwAddress != nil {
		hwAddress_value = types.StringValue(*obj.HwAddress)
	}
	o.Name = types.StringValue(obj.Name)
	o.HwAddress = hwAddress_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6InheritedNeighborDiscoveryRouterAdvertisementObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6InheritedNeighborDiscoveryRouterAdvertisement, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var enableConsistencyCheck_value types.Bool
	if obj.EnableConsistencyCheck != nil {
		enableConsistencyCheck_value = types.BoolValue(*obj.EnableConsistencyCheck)
	}
	var hopLimit_value types.String
	if obj.HopLimit != nil {
		hopLimit_value = types.StringValue(*obj.HopLimit)
	}
	var lifetime_value types.Int64
	if obj.Lifetime != nil {
		lifetime_value = types.Int64Value(*obj.Lifetime)
	}
	var linkMtu_value types.String
	if obj.LinkMtu != nil {
		linkMtu_value = types.StringValue(*obj.LinkMtu)
	}
	var managedFlag_value types.Bool
	if obj.ManagedFlag != nil {
		managedFlag_value = types.BoolValue(*obj.ManagedFlag)
	}
	var maxInterval_value types.Int64
	if obj.MaxInterval != nil {
		maxInterval_value = types.Int64Value(*obj.MaxInterval)
	}
	var minInterval_value types.Int64
	if obj.MinInterval != nil {
		minInterval_value = types.Int64Value(*obj.MinInterval)
	}
	var otherFlag_value types.Bool
	if obj.OtherFlag != nil {
		otherFlag_value = types.BoolValue(*obj.OtherFlag)
	}
	var reachableTime_value types.String
	if obj.ReachableTime != nil {
		reachableTime_value = types.StringValue(*obj.ReachableTime)
	}
	var retransmissionTimer_value types.String
	if obj.RetransmissionTimer != nil {
		retransmissionTimer_value = types.StringValue(*obj.RetransmissionTimer)
	}
	var routerPreference_value types.String
	if obj.RouterPreference != nil {
		routerPreference_value = types.StringValue(*obj.RouterPreference)
	}
	o.Enable = enable_value
	o.EnableConsistencyCheck = enableConsistencyCheck_value
	o.HopLimit = hopLimit_value
	o.Lifetime = lifetime_value
	o.LinkMtu = linkMtu_value
	o.ManagedFlag = managedFlag_value
	o.MaxInterval = maxInterval_value
	o.MinInterval = minInterval_value
	o.OtherFlag = otherFlag_value
	o.ReachableTime = reachableTime_value
	o.RetransmissionTimer = retransmissionTimer_value
	o.RouterPreference = routerPreference_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6NeighborDiscovery, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var neighbor_list types.List
	{
		var neighbor_tf_entries []EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryNeighborObject
		for _, elt := range obj.Neighbor {
			entry := EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryNeighborObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			neighbor_tf_entries = append(neighbor_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("neighbor")
		neighbor_list, list_diags = types.ListValueFrom(ctx, schemaType, neighbor_tf_entries)
		diags.Append(list_diags...)
	}
	var routerAdvertisement_object *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementObject
	if obj.RouterAdvertisement != nil {
		routerAdvertisement_object = new(EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementObject)
		diags.Append(routerAdvertisement_object.CopyFromPango(ctx, append(ancestors, o), obj.RouterAdvertisement, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var dadAttempts_value types.Int64
	if obj.DadAttempts != nil {
		dadAttempts_value = types.Int64Value(*obj.DadAttempts)
	}
	var enableDad_value types.Bool
	if obj.EnableDad != nil {
		enableDad_value = types.BoolValue(*obj.EnableDad)
	}
	var enableNdpMonitor_value types.Bool
	if obj.EnableNdpMonitor != nil {
		enableNdpMonitor_value = types.BoolValue(*obj.EnableNdpMonitor)
	}
	var nsInterval_value types.Int64
	if obj.NsInterval != nil {
		nsInterval_value = types.Int64Value(*obj.NsInterval)
	}
	var reachableTime_value types.Int64
	if obj.ReachableTime != nil {
		reachableTime_value = types.Int64Value(*obj.ReachableTime)
	}
	o.DadAttempts = dadAttempts_value
	o.EnableDad = enableDad_value
	o.EnableNdpMonitor = enableNdpMonitor_value
	o.Neighbor = neighbor_list
	o.NsInterval = nsInterval_value
	o.ReachableTime = reachableTime_value
	o.RouterAdvertisement = routerAdvertisement_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryNeighborObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6NeighborDiscoveryNeighbor, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var hwAddress_value types.String
	if obj.HwAddress != nil {
		hwAddress_value = types.StringValue(*obj.HwAddress)
	}
	o.Name = types.StringValue(obj.Name)
	o.HwAddress = hwAddress_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6NeighborDiscoveryRouterAdvertisement, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dnsSupport_object *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportObject
	if obj.DnsSupport != nil {
		dnsSupport_object = new(EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportObject)
		diags.Append(dnsSupport_object.CopyFromPango(ctx, append(ancestors, o), obj.DnsSupport, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var enableConsistencyCheck_value types.Bool
	if obj.EnableConsistencyCheck != nil {
		enableConsistencyCheck_value = types.BoolValue(*obj.EnableConsistencyCheck)
	}
	var hopLimit_value types.String
	if obj.HopLimit != nil {
		hopLimit_value = types.StringValue(*obj.HopLimit)
	}
	var lifetime_value types.Int64
	if obj.Lifetime != nil {
		lifetime_value = types.Int64Value(*obj.Lifetime)
	}
	var linkMtu_value types.String
	if obj.LinkMtu != nil {
		linkMtu_value = types.StringValue(*obj.LinkMtu)
	}
	var managedFlag_value types.Bool
	if obj.ManagedFlag != nil {
		managedFlag_value = types.BoolValue(*obj.ManagedFlag)
	}
	var maxInterval_value types.Int64
	if obj.MaxInterval != nil {
		maxInterval_value = types.Int64Value(*obj.MaxInterval)
	}
	var minInterval_value types.Int64
	if obj.MinInterval != nil {
		minInterval_value = types.Int64Value(*obj.MinInterval)
	}
	var otherFlag_value types.Bool
	if obj.OtherFlag != nil {
		otherFlag_value = types.BoolValue(*obj.OtherFlag)
	}
	var reachableTime_value types.String
	if obj.ReachableTime != nil {
		reachableTime_value = types.StringValue(*obj.ReachableTime)
	}
	var retransmissionTimer_value types.String
	if obj.RetransmissionTimer != nil {
		retransmissionTimer_value = types.StringValue(*obj.RetransmissionTimer)
	}
	var routerPreference_value types.String
	if obj.RouterPreference != nil {
		routerPreference_value = types.StringValue(*obj.RouterPreference)
	}
	o.DnsSupport = dnsSupport_object
	o.Enable = enable_value
	o.EnableConsistencyCheck = enableConsistencyCheck_value
	o.HopLimit = hopLimit_value
	o.Lifetime = lifetime_value
	o.LinkMtu = linkMtu_value
	o.ManagedFlag = managedFlag_value
	o.MaxInterval = maxInterval_value
	o.MinInterval = minInterval_value
	o.OtherFlag = otherFlag_value
	o.ReachableTime = reachableTime_value
	o.RetransmissionTimer = retransmissionTimer_value
	o.RouterPreference = routerPreference_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupport, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var server_list types.List
	{
		var server_tf_entries []EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerObject
		for _, elt := range obj.Server {
			entry := EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			server_tf_entries = append(server_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("server")
		server_list, list_diags = types.ListValueFrom(ctx, schemaType, server_tf_entries)
		diags.Append(list_diags...)
	}
	var suffix_list types.List
	{
		var suffix_tf_entries []EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixObject
		for _, elt := range obj.Suffix {
			entry := EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			suffix_tf_entries = append(suffix_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("suffix")
		suffix_list, list_diags = types.ListValueFrom(ctx, schemaType, suffix_tf_entries)
		diags.Append(list_diags...)
	}

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	o.Enable = enable_value
	o.Server = server_list
	o.Suffix = suffix_list

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportServerObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupportServer, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var lifetime_value types.Int64
	if obj.Lifetime != nil {
		lifetime_value = types.Int64Value(*obj.Lifetime)
	}
	o.Name = types.StringValue(obj.Name)
	o.Lifetime = lifetime_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceIpv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffixObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Ipv6NeighborDiscoveryRouterAdvertisementDnsSupportSuffix, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var lifetime_value types.Int64
	if obj.Lifetime != nil {
		lifetime_value = types.Int64Value(*obj.Lifetime)
	}
	o.Name = types.StringValue(obj.Name)
	o.Lifetime = lifetime_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceNdpProxyObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.NdpProxy, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var address_list types.List
	{
		var address_tf_entries []EthernetLayer3SubinterfaceResourceNdpProxyAddressObject
		for _, elt := range obj.Address {
			entry := EthernetLayer3SubinterfaceResourceNdpProxyAddressObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			address_tf_entries = append(address_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("address")
		address_list, list_diags = types.ListValueFrom(ctx, schemaType, address_tf_entries)
		diags.Append(list_diags...)
	}

	var enabled_value types.Bool
	if obj.Enabled != nil {
		enabled_value = types.BoolValue(*obj.Enabled)
	}
	o.Address = address_list
	o.Enabled = enabled_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceNdpProxyAddressObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.NdpProxyAddress, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var negate_value types.Bool
	if obj.Negate != nil {
		negate_value = types.BoolValue(*obj.Negate)
	}
	o.Name = types.StringValue(obj.Name)
	o.Negate = negate_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourcePppoeObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.Pppoe, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var passive_object *EthernetLayer3SubinterfaceResourcePppoePassiveObject
	if obj.Passive != nil {
		passive_object = new(EthernetLayer3SubinterfaceResourcePppoePassiveObject)
		diags.Append(passive_object.CopyFromPango(ctx, append(ancestors, o), obj.Passive, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var staticAddress_object *EthernetLayer3SubinterfaceResourcePppoeStaticAddressObject
	if obj.StaticAddress != nil {
		staticAddress_object = new(EthernetLayer3SubinterfaceResourcePppoeStaticAddressObject)
		diags.Append(staticAddress_object.CopyFromPango(ctx, append(ancestors, o), obj.StaticAddress, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var accessConcentrator_value types.String
	if obj.AccessConcentrator != nil {
		accessConcentrator_value = types.StringValue(*obj.AccessConcentrator)
	}
	var authentication_value types.String
	if obj.Authentication != nil {
		authentication_value = types.StringValue(*obj.Authentication)
	}
	var createDefaultRoute_value types.Bool
	if obj.CreateDefaultRoute != nil {
		createDefaultRoute_value = types.BoolValue(*obj.CreateDefaultRoute)
	}
	var defaultRouteMetric_value types.Int64
	if obj.DefaultRouteMetric != nil {
		defaultRouteMetric_value = types.Int64Value(*obj.DefaultRouteMetric)
	}
	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var password_value types.String
	if obj.Password != nil {
		valueKey, err := CreateXpathForAttributeWithAncestors(ancestors, "password")
		if err != nil {
			diags.AddError("Failed to create encrypted values state key", err.Error())
			return diags
		}

		if evFromState, found := ev.GetEncryptedValue(valueKey); found && ev.PreferServerState() && *obj.Password != evFromState {
			password_value = types.StringPointerValue(obj.Password)
		} else if value, found := ev.GetPlaintextValue(valueKey); found {
			password_value = types.StringValue(value)
		} else {
			diags.AddError("Failed to read encrypted values state", fmt.Sprintf("Missing plaintext value for %s", valueKey))
			return diags
		}

		if !ev.PreferServerState() {
			err = ev.StoreEncryptedValue(valueKey, "solo", *obj.Password)
			if err != nil {
				diags.AddError("Failed to store encrypted values state", err.Error())
				return diags
			}
		}
	}
	var service_value types.String
	if obj.Service != nil {
		service_value = types.StringValue(*obj.Service)
	}
	var username_value types.String
	if obj.Username != nil {
		username_value = types.StringValue(*obj.Username)
	}
	o.AccessConcentrator = accessConcentrator_value
	o.Authentication = authentication_value
	o.CreateDefaultRoute = createDefaultRoute_value
	o.DefaultRouteMetric = defaultRouteMetric_value
	o.Enable = enable_value
	o.Passive = passive_object
	o.Password = password_value
	o.Service = service_value
	o.StaticAddress = staticAddress_object
	o.Username = username_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourcePppoePassiveObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.PppoePassive, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	o.Enable = enable_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourcePppoeStaticAddressObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.PppoeStaticAddress, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var ip_value types.String
	if obj.Ip != nil {
		ip_value = types.StringValue(*obj.Ip)
	}
	o.Ip = ip_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.SdwanLinkSettings, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var upstreamNat_object *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatObject
	if obj.UpstreamNat != nil {
		upstreamNat_object = new(EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatObject)
		diags.Append(upstreamNat_object.CopyFromPango(ctx, append(ancestors, o), obj.UpstreamNat, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	var sdwanInterfaceProfile_value types.String
	if obj.SdwanInterfaceProfile != nil {
		sdwanInterfaceProfile_value = types.StringValue(*obj.SdwanInterfaceProfile)
	}
	o.Enable = enable_value
	o.SdwanInterfaceProfile = sdwanInterfaceProfile_value
	o.UpstreamNat = upstreamNat_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.SdwanLinkSettingsUpstreamNat, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var ddns_object *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatDdnsObject
	if obj.Ddns != nil {
		ddns_object = new(EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatDdnsObject)
		diags.Append(ddns_object.CopyFromPango(ctx, append(ancestors, o), obj.Ddns, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var staticIp_object *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatStaticIpObject
	if obj.StaticIp != nil {
		staticIp_object = new(EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatStaticIpObject)
		diags.Append(staticIp_object.CopyFromPango(ctx, append(ancestors, o), obj.StaticIp, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var enable_value types.Bool
	if obj.Enable != nil {
		enable_value = types.BoolValue(*obj.Enable)
	}
	o.Enable = enable_value
	o.Ddns = ddns_object
	o.StaticIp = staticIp_object

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatDdnsObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.SdwanLinkSettingsUpstreamNatDdns, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceSdwanLinkSettingsUpstreamNatStaticIpObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *layer3.SdwanLinkSettingsUpstreamNatStaticIp, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	var fqdn_value types.String
	if obj.Fqdn != nil {
		fqdn_value = types.StringValue(*obj.Fqdn)
	}
	var ipAddress_value types.String
	if obj.IpAddress != nil {
		ipAddress_value = types.StringValue(*obj.IpAddress)
	}
	o.Fqdn = fqdn_value
	o.IpAddress = ipAddress_value

	return diags
}

func (o *EthernetLayer3SubinterfaceResourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	components = append(components, pangoutil.AsEntryXpath(o.Parent.ValueString()))
	return components, nil
}

func (r *EthernetLayer3SubinterfaceResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state EthernetLayer3SubinterfaceResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_ethernet_layer3_subinterface_resource",
		"function":      "Create",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	// Determine the location.

	var location layer3.Location

	{
		var terraformLocation EthernetLayer3SubinterfaceLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &layer3.SharedLocation{}
			var innerLocation EthernetLayer3SubinterfaceSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &layer3.TemplateLocation{}
			var innerLocation EthernetLayer3SubinterfaceTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &layer3.TemplateStackLocation{}
			var innerLocation EthernetLayer3SubinterfaceTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &layer3.NgfwLocation{}
			var innerLocation EthernetLayer3SubinterfaceNgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	if err := location.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *layer3.Entry
	resp.Diagnostics.Append(state.CopyToPango(ctx, nil, &obj, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	var importLocation layer3.ImportLocation

	{
		var terraformLocation EthernetLayer3SubinterfaceLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if location.Template != nil {
			{
				var terraformInnerLocation EthernetLayer3SubinterfaceTemplateLocation
				resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &terraformInnerLocation, basetypes.ObjectAsOptions{})...)
				if resp.Diagnostics.HasError() {
					return
				}
				importLocation = layer3.NewTemplateVsysImportLocation(layer3.TemplateVsysImportLocationSpec{
					Vsys: terraformInnerLocation.Vsys.ValueString(),
				})
			}
		}
	}

	created, err := r.manager.Create(ctx, location, components, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	if importLocation != nil {
		err = r.manager.ImportToLocations(ctx, location, []layer3.ImportLocation{importLocation}, obj.Name)
		if err != nil {
			resp.Diagnostics.AddError("Failed to import resource into location", err.Error())
			return
		}
	}

	resp.Diagnostics.Append(state.CopyFromPango(ctx, nil, created, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
func (o *EthernetLayer3SubinterfaceResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state EthernetLayer3SubinterfaceResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	encryptedValues, diags := req.Private.GetKey(ctx, "encrypted_values")
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location layer3.Location

	{
		var terraformLocation EthernetLayer3SubinterfaceLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &layer3.SharedLocation{}
			var innerLocation EthernetLayer3SubinterfaceSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &layer3.TemplateLocation{}
			var innerLocation EthernetLayer3SubinterfaceTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &layer3.TemplateStackLocation{}
			var innerLocation EthernetLayer3SubinterfaceTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &layer3.NgfwLocation{}
			var innerLocation EthernetLayer3SubinterfaceNgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_ethernet_layer3_subinterface_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	components, err := savestate.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	object, err := o.manager.Read(ctx, location, components, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, nil, object, ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	{
		component := components[0]
		component = strings.TrimPrefix(component, "entry[@name='")
		component = strings.TrimSuffix(component, "']")
		state.Parent = types.StringValue(component)
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *EthernetLayer3SubinterfaceResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state EthernetLayer3SubinterfaceResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	encryptedValues, diags := req.Private.GetKey(ctx, "encrypted_values")
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location layer3.Location

	{
		var terraformLocation EthernetLayer3SubinterfaceLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &layer3.SharedLocation{}
			var innerLocation EthernetLayer3SubinterfaceSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &layer3.TemplateLocation{}
			var innerLocation EthernetLayer3SubinterfaceTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &layer3.TemplateStackLocation{}
			var innerLocation EthernetLayer3SubinterfaceTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &layer3.NgfwLocation{}
			var innerLocation EthernetLayer3SubinterfaceNgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_ethernet_layer3_subinterface_resource",
		"function":      "Update",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	obj, err := r.manager.Read(ctx, location, components, plan.Name.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, nil, &obj, ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	components, err = plan.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}

	updated, err := r.manager.Update(ctx, location, components, obj, obj.Name)

	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	copy_diags := state.CopyFromPango(ctx, nil, updated, ev)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *EthernetLayer3SubinterfaceResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state EthernetLayer3SubinterfaceResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_ethernet_layer3_subinterface_resource",
		"function":      "Delete",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var location layer3.Location

	{
		var terraformLocation EthernetLayer3SubinterfaceLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &layer3.SharedLocation{}
			var innerLocation EthernetLayer3SubinterfaceSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &layer3.TemplateLocation{}
			var innerLocation EthernetLayer3SubinterfaceTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &layer3.TemplateStackLocation{}
			var innerLocation EthernetLayer3SubinterfaceTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Ngfw.IsNull() {
			location.Ngfw = &layer3.NgfwLocation{}
			var innerLocation EthernetLayer3SubinterfaceNgfwLocation
			resp.Diagnostics.Append(terraformLocation.Ngfw.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Ngfw.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	var importLocation layer3.ImportLocation

	{
		var terraformLocation EthernetLayer3SubinterfaceLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if location.Template != nil {
			{
				var terraformInnerLocation EthernetLayer3SubinterfaceTemplateLocation
				resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &terraformInnerLocation, basetypes.ObjectAsOptions{})...)
				if resp.Diagnostics.HasError() {
					return
				}
				importLocation = layer3.NewTemplateVsysImportLocation(layer3.TemplateVsysImportLocationSpec{
					Vsys: terraformInnerLocation.Vsys.ValueString(),
				})
			}
		}
	}

	if importLocation != nil {
		err = r.manager.UnimportFromLocations(ctx, location, []layer3.ImportLocation{importLocation}, state.Name.ValueString())
	}
	if err != nil {
		resp.Diagnostics.AddError("Error in delete", err.Error())
		return
	}
	err = r.manager.Delete(ctx, location, []layer3.ImportLocation{importLocation}, components, []string{state.Name.ValueString()})
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
		return
	}

}

type EthernetLayer3SubinterfaceImportState struct {
	Location types.Object `json:"location"`
	Parent   types.String `json:"parent"`
	Name     types.String `json:"name"`
}

func (o EthernetLayer3SubinterfaceImportState) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Location *EthernetLayer3SubinterfaceLocation `json:"location"`
		Parent   *string                             `json:"parent"`
		Name     *string                             `json:"name"`
	}
	var location_object *EthernetLayer3SubinterfaceLocation
	{
		diags := o.Location.As(context.TODO(), &location_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal location into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Location: location_object,
		Parent:   o.Parent.ValueStringPointer(),
		Name:     o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *EthernetLayer3SubinterfaceImportState) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Location *EthernetLayer3SubinterfaceLocation `json:"location"`
		Parent   *string                             `json:"parent"`
		Name     *string                             `json:"name"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var location_object types.Object
	{
		var diags_tmp diag.Diagnostics
		location_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Location.AttributeTypes(), shadow.Location)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into location", diags_tmp.Errors())
		}
	}
	o.Location = location_object
	o.Parent = types.StringPointerValue(shadow.Parent)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}

func EthernetLayer3SubinterfaceImportStateCreator(ctx context.Context, resource types.Object) ([]byte, error) {
	attrs := resource.Attributes()
	if attrs == nil {
		return nil, fmt.Errorf("Object has no attributes")
	}

	locationAttr, ok := attrs["location"]
	if !ok {
		return nil, fmt.Errorf("location attribute missing")
	}

	var location types.Object
	switch value := locationAttr.(type) {
	case types.Object:
		location = value
	default:
		return nil, fmt.Errorf("location attribute expected to be an object")
	}
	nameAttr, ok := attrs["name"]
	if !ok {
		return nil, fmt.Errorf("name attribute missing")
	}

	var name types.String
	switch value := nameAttr.(type) {
	case types.String:
		name = value
	default:
		return nil, fmt.Errorf("name attribute expected to be a string")
	}

	importStruct := EthernetLayer3SubinterfaceImportState{
		Location: location,
		Name:     name,
	}

	return json.Marshal(importStruct)
}

func (r *EthernetLayer3SubinterfaceResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	var obj EthernetLayer3SubinterfaceImportState
	data, err := base64.StdEncoding.DecodeString(req.ID)
	if err != nil {
		resp.Diagnostics.AddError("Failed to decode Import ID", err.Error())
		return
	}

	err = json.Unmarshal(data, &obj)
	if err != nil {
		var diagsErr *DiagnosticsError
		if errors.As(err, &diagsErr) {
			resp.Diagnostics.Append(diagsErr.Diagnostics()...)
		} else {
			resp.Diagnostics.AddError("Failed to unmarshal Import ID", err.Error())
		}
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("location"), obj.Location)...)
	if resp.Diagnostics.HasError() {
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("parent"), obj.Parent)...)
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("name"), obj.Name)...)
}

type EthernetLayer3SubinterfaceSharedLocation struct {
}
type EthernetLayer3SubinterfaceTemplateLocation struct {
	Vsys           types.String `tfsdk:"vsys"`
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type EthernetLayer3SubinterfaceTemplateStackLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type EthernetLayer3SubinterfaceNgfwLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
}
type EthernetLayer3SubinterfaceLocation struct {
	Shared        types.Object `tfsdk:"shared"`
	Template      types.Object `tfsdk:"template"`
	TemplateStack types.Object `tfsdk:"template_stack"`
	Ngfw          types.Object `tfsdk:"ngfw"`
}

func EthernetLayer3SubinterfaceLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"shared": rsschema.SingleNestedAttribute{
				Description: "Panorama shared object",
				Optional:    true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("shared"),
						path.MatchRelative().AtParent().AtName("template"),
						path.MatchRelative().AtParent().AtName("template_stack"),
						path.MatchRelative().AtParent().AtName("ngfw"),
					}...),
				},
			},
			"template": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"vsys": rsschema.StringAttribute{
						Description: "",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Specific Panorama template",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_stack": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template stack",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Specific Panorama template stack",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"ngfw": rsschema.SingleNestedAttribute{
				Description: "Located in a specific NGFW device",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o EthernetLayer3SubinterfaceSharedLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
	}

	obj := shadow{}

	return json.Marshal(obj)
}

func (o *EthernetLayer3SubinterfaceSharedLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}

	return nil
}
func (o EthernetLayer3SubinterfaceTemplateLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
		Vsys           *string `tfsdk:"vsys"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
		Vsys:           o.Vsys.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *EthernetLayer3SubinterfaceTemplateLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
		Vsys           *string `tfsdk:"vsys"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)
	o.Vsys = types.StringPointerValue(shadow.Vsys)

	return nil
}
func (o EthernetLayer3SubinterfaceTemplateStackLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *EthernetLayer3SubinterfaceTemplateStackLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o EthernetLayer3SubinterfaceNgfwLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
	}

	obj := shadow{
		NgfwDevice: o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *EthernetLayer3SubinterfaceNgfwLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o EthernetLayer3SubinterfaceLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Shared        *EthernetLayer3SubinterfaceSharedLocation        `json:"shared,omitempty"`
		Template      *EthernetLayer3SubinterfaceTemplateLocation      `json:"template,omitempty"`
		TemplateStack *EthernetLayer3SubinterfaceTemplateStackLocation `json:"template_stack,omitempty"`
		Ngfw          *EthernetLayer3SubinterfaceNgfwLocation          `json:"ngfw,omitempty"`
	}
	var shared_object *EthernetLayer3SubinterfaceSharedLocation
	{
		diags := o.Shared.As(context.TODO(), &shared_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal shared into JSON document", diags.Errors())
		}
	}
	var template_object *EthernetLayer3SubinterfaceTemplateLocation
	{
		diags := o.Template.As(context.TODO(), &template_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template into JSON document", diags.Errors())
		}
	}
	var templateStack_object *EthernetLayer3SubinterfaceTemplateStackLocation
	{
		diags := o.TemplateStack.As(context.TODO(), &templateStack_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template_stack into JSON document", diags.Errors())
		}
	}
	var ngfw_object *EthernetLayer3SubinterfaceNgfwLocation
	{
		diags := o.Ngfw.As(context.TODO(), &ngfw_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal ngfw into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Shared:        shared_object,
		Template:      template_object,
		TemplateStack: templateStack_object,
		Ngfw:          ngfw_object,
	}

	return json.Marshal(obj)
}

func (o *EthernetLayer3SubinterfaceLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Shared        *EthernetLayer3SubinterfaceSharedLocation        `json:"shared,omitempty"`
		Template      *EthernetLayer3SubinterfaceTemplateLocation      `json:"template,omitempty"`
		TemplateStack *EthernetLayer3SubinterfaceTemplateStackLocation `json:"template_stack,omitempty"`
		Ngfw          *EthernetLayer3SubinterfaceNgfwLocation          `json:"ngfw,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var shared_object types.Object
	{
		var diags_tmp diag.Diagnostics
		shared_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Shared.AttributeTypes(), shadow.Shared)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into shared", diags_tmp.Errors())
		}
	}
	var template_object types.Object
	{
		var diags_tmp diag.Diagnostics
		template_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Template.AttributeTypes(), shadow.Template)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template", diags_tmp.Errors())
		}
	}
	var templateStack_object types.Object
	{
		var diags_tmp diag.Diagnostics
		templateStack_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.TemplateStack.AttributeTypes(), shadow.TemplateStack)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template_stack", diags_tmp.Errors())
		}
	}
	var ngfw_object types.Object
	{
		var diags_tmp diag.Diagnostics
		ngfw_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Ngfw.AttributeTypes(), shadow.Ngfw)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into ngfw", diags_tmp.Errors())
		}
	}
	o.Shared = shared_object
	o.Template = template_object
	o.TemplateStack = templateStack_object
	o.Ngfw = ngfw_object

	return nil
}

func (o *EthernetLayer3SubinterfaceSharedLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}
func (o *EthernetLayer3SubinterfaceTemplateLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"vsys":            types.StringType,
		"panorama_device": types.StringType,
		"name":            types.StringType,
		"ngfw_device":     types.StringType,
	}
}
func (o *EthernetLayer3SubinterfaceTemplateStackLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
		"ngfw_device":     types.StringType,
	}
}
func (o *EthernetLayer3SubinterfaceNgfwLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"ngfw_device": types.StringType,
	}
}
func (o *EthernetLayer3SubinterfaceLocation) AttributeTypes() map[string]attr.Type {
	var sharedObj EthernetLayer3SubinterfaceSharedLocation
	var templateObj EthernetLayer3SubinterfaceTemplateLocation
	var templateStackObj EthernetLayer3SubinterfaceTemplateStackLocation
	var ngfwObj EthernetLayer3SubinterfaceNgfwLocation
	return map[string]attr.Type{
		"shared": types.ObjectType{
			AttrTypes: sharedObj.AttributeTypes(),
		},
		"template": types.ObjectType{
			AttrTypes: templateObj.AttributeTypes(),
		},
		"template_stack": types.ObjectType{
			AttrTypes: templateStackObj.AttributeTypes(),
		},
		"ngfw": types.ObjectType{
			AttrTypes: ngfwObj.AttributeTypes(),
		},
	}
}
