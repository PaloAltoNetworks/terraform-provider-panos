package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"strings"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/movement"
	"github.com/PaloAltoNetworks/pango/policies/rules/security"

	"github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &SecurityPolicyDataSource{}
	_ datasource.DataSourceWithConfigure = &SecurityPolicyDataSource{}
)

func NewSecurityPolicyDataSource() datasource.DataSource {
	return &SecurityPolicyDataSource{}
}

type SecurityPolicyDataSource struct {
	client  *pango.Client
	manager *sdkmanager.UuidObjectManager[*security.Entry, security.Location, *security.Service]
}

type SecurityPolicyDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type SecurityPolicyDataSourceModel struct {
	Location types.Object `tfsdk:"location"`
	Rules    types.List   `tfsdk:"rules"`
}
type SecurityPolicyDataSourceRulesObject struct {
	Name                            types.String                                       `tfsdk:"name"`
	Action                          types.String                                       `tfsdk:"action"`
	Applications                    types.Set                                          `tfsdk:"applications"`
	Category                        types.List                                         `tfsdk:"category"`
	Description                     types.String                                       `tfsdk:"description"`
	DestinationAddresses            types.Set                                          `tfsdk:"destination_addresses"`
	DestinationHip                  types.List                                         `tfsdk:"destination_hip"`
	DisableInspect                  types.Bool                                         `tfsdk:"disable_inspect"`
	DisableServerResponseInspection types.Bool                                         `tfsdk:"disable_server_response_inspection"`
	Disabled                        types.Bool                                         `tfsdk:"disabled"`
	SourceZones                     types.Set                                          `tfsdk:"source_zones"`
	GroupTag                        types.String                                       `tfsdk:"group_tag"`
	IcmpUnreachable                 types.Bool                                         `tfsdk:"icmp_unreachable"`
	LogEnd                          types.Bool                                         `tfsdk:"log_end"`
	LogSetting                      types.String                                       `tfsdk:"log_setting"`
	LogStart                        types.Bool                                         `tfsdk:"log_start"`
	NegateDestination               types.Bool                                         `tfsdk:"negate_destination"`
	NegateSource                    types.Bool                                         `tfsdk:"negate_source"`
	ProfileSetting                  *SecurityPolicyDataSourceRulesProfileSettingObject `tfsdk:"profile_setting"`
	Qos                             *SecurityPolicyDataSourceRulesQosObject            `tfsdk:"qos"`
	RuleType                        types.String                                       `tfsdk:"rule_type"`
	Schedule                        types.String                                       `tfsdk:"schedule"`
	Services                        types.Set                                          `tfsdk:"services"`
	SourceAddresses                 types.Set                                          `tfsdk:"source_addresses"`
	SourceHip                       types.List                                         `tfsdk:"source_hip"`
	SourceImei                      types.List                                         `tfsdk:"source_imei"`
	SourceImsi                      types.List                                         `tfsdk:"source_imsi"`
	SourceNwSlice                   types.List                                         `tfsdk:"source_nw_slice"`
	SourceUsers                     types.Set                                          `tfsdk:"source_users"`
	Tag                             types.List                                         `tfsdk:"tag"`
	Target                          *SecurityPolicyDataSourceRulesTargetObject         `tfsdk:"target"`
	DestinationZones                types.Set                                          `tfsdk:"destination_zones"`
}
type SecurityPolicyDataSourceRulesProfileSettingObject struct {
	Group    types.List                                                 `tfsdk:"group"`
	Profiles *SecurityPolicyDataSourceRulesProfileSettingProfilesObject `tfsdk:"profiles"`
}
type SecurityPolicyDataSourceRulesProfileSettingProfilesObject struct {
	DataFiltering    types.List `tfsdk:"data_filtering"`
	FileBlocking     types.List `tfsdk:"file_blocking"`
	Gtp              types.List `tfsdk:"gtp"`
	Sctp             types.List `tfsdk:"sctp"`
	Spyware          types.List `tfsdk:"spyware"`
	UrlFiltering     types.List `tfsdk:"url_filtering"`
	Virus            types.List `tfsdk:"virus"`
	Vulnerability    types.List `tfsdk:"vulnerability"`
	WildfireAnalysis types.List `tfsdk:"wildfire_analysis"`
}
type SecurityPolicyDataSourceRulesQosObject struct {
	Marking *SecurityPolicyDataSourceRulesQosMarkingObject `tfsdk:"marking"`
}
type SecurityPolicyDataSourceRulesQosMarkingObject struct {
	FollowC2sFlow *SecurityPolicyDataSourceRulesQosMarkingFollowC2sFlowObject `tfsdk:"follow_c2s_flow"`
	IpDscp        types.String                                                `tfsdk:"ip_dscp"`
	IpPrecedence  types.String                                                `tfsdk:"ip_precedence"`
}
type SecurityPolicyDataSourceRulesQosMarkingFollowC2sFlowObject struct {
}
type SecurityPolicyDataSourceRulesTargetObject struct {
	Devices types.List `tfsdk:"devices"`
	Negate  types.Bool `tfsdk:"negate"`
	Tags    types.List `tfsdk:"tags"`
}
type SecurityPolicyDataSourceRulesTargetDevicesObject struct {
	Name types.String `tfsdk:"name"`
	Vsys types.List   `tfsdk:"vsys"`
}
type SecurityPolicyDataSourceRulesTargetDevicesVsysObject struct {
	Name types.String `tfsdk:"name"`
}

func (o *SecurityPolicyDataSourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj SecurityPolicyLocation

	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"rules": types.ListType{},
	}
}

func (o SecurityPolicyDataSourceModel) AncestorName() string {
	return ""
}

func (o SecurityPolicyDataSourceModel) EntryName() *string {
	return nil
}
func (o *SecurityPolicyDataSourceRulesObject) AttributeTypes() map[string]attr.Type {

	var profileSettingObj *SecurityPolicyDataSourceRulesProfileSettingObject

	var qosObj *SecurityPolicyDataSourceRulesQosObject

	var targetObj *SecurityPolicyDataSourceRulesTargetObject

	return map[string]attr.Type{
		"name":                               types.StringType,
		"action":                             types.StringType,
		"applications":                       types.SetType{},
		"category":                           types.ListType{},
		"description":                        types.StringType,
		"destination_addresses":              types.SetType{},
		"destination_hip":                    types.ListType{},
		"disable_inspect":                    types.BoolType,
		"disable_server_response_inspection": types.BoolType,
		"disabled":                           types.BoolType,
		"source_zones":                       types.SetType{},
		"group_tag":                          types.StringType,
		"icmp_unreachable":                   types.BoolType,
		"log_end":                            types.BoolType,
		"log_setting":                        types.StringType,
		"log_start":                          types.BoolType,
		"negate_destination":                 types.BoolType,
		"negate_source":                      types.BoolType,
		"profile_setting": types.ObjectType{
			AttrTypes: profileSettingObj.AttributeTypes(),
		},
		"qos": types.ObjectType{
			AttrTypes: qosObj.AttributeTypes(),
		},
		"rule_type":        types.StringType,
		"schedule":         types.StringType,
		"services":         types.SetType{},
		"source_addresses": types.SetType{},
		"source_hip":       types.ListType{},
		"source_imei":      types.ListType{},
		"source_imsi":      types.ListType{},
		"source_nw_slice":  types.ListType{},
		"source_users":     types.SetType{},
		"tag":              types.ListType{},
		"target": types.ObjectType{
			AttrTypes: targetObj.AttributeTypes(),
		},
		"destination_zones": types.SetType{},
	}
}

func (o SecurityPolicyDataSourceRulesObject) AncestorName() string {
	return "rules"
}

func (o SecurityPolicyDataSourceRulesObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *SecurityPolicyDataSourceRulesProfileSettingObject) AttributeTypes() map[string]attr.Type {

	var profilesObj *SecurityPolicyDataSourceRulesProfileSettingProfilesObject
	return map[string]attr.Type{
		"group": types.ListType{},
		"profiles": types.ObjectType{
			AttrTypes: profilesObj.AttributeTypes(),
		},
	}
}

func (o SecurityPolicyDataSourceRulesProfileSettingObject) AncestorName() string {
	return "profile-setting"
}

func (o SecurityPolicyDataSourceRulesProfileSettingObject) EntryName() *string {
	return nil
}
func (o *SecurityPolicyDataSourceRulesProfileSettingProfilesObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"data_filtering":    types.ListType{},
		"file_blocking":     types.ListType{},
		"gtp":               types.ListType{},
		"sctp":              types.ListType{},
		"spyware":           types.ListType{},
		"url_filtering":     types.ListType{},
		"virus":             types.ListType{},
		"vulnerability":     types.ListType{},
		"wildfire_analysis": types.ListType{},
	}
}

func (o SecurityPolicyDataSourceRulesProfileSettingProfilesObject) AncestorName() string {
	return "profiles"
}

func (o SecurityPolicyDataSourceRulesProfileSettingProfilesObject) EntryName() *string {
	return nil
}
func (o *SecurityPolicyDataSourceRulesQosObject) AttributeTypes() map[string]attr.Type {

	var markingObj *SecurityPolicyDataSourceRulesQosMarkingObject
	return map[string]attr.Type{
		"marking": types.ObjectType{
			AttrTypes: markingObj.AttributeTypes(),
		},
	}
}

func (o SecurityPolicyDataSourceRulesQosObject) AncestorName() string {
	return "qos"
}

func (o SecurityPolicyDataSourceRulesQosObject) EntryName() *string {
	return nil
}
func (o *SecurityPolicyDataSourceRulesQosMarkingObject) AttributeTypes() map[string]attr.Type {

	var followC2sFlowObj *SecurityPolicyDataSourceRulesQosMarkingFollowC2sFlowObject

	return map[string]attr.Type{
		"follow_c2s_flow": types.ObjectType{
			AttrTypes: followC2sFlowObj.AttributeTypes(),
		},
		"ip_dscp":       types.StringType,
		"ip_precedence": types.StringType,
	}
}

func (o SecurityPolicyDataSourceRulesQosMarkingObject) AncestorName() string {
	return "marking"
}

func (o SecurityPolicyDataSourceRulesQosMarkingObject) EntryName() *string {
	return nil
}
func (o *SecurityPolicyDataSourceRulesQosMarkingFollowC2sFlowObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o SecurityPolicyDataSourceRulesQosMarkingFollowC2sFlowObject) AncestorName() string {
	return "follow-c2s-flow"
}

func (o SecurityPolicyDataSourceRulesQosMarkingFollowC2sFlowObject) EntryName() *string {
	return nil
}
func (o *SecurityPolicyDataSourceRulesTargetObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"devices": types.ListType{},
		"negate":  types.BoolType,
		"tags":    types.ListType{},
	}
}

func (o SecurityPolicyDataSourceRulesTargetObject) AncestorName() string {
	return "target"
}

func (o SecurityPolicyDataSourceRulesTargetObject) EntryName() *string {
	return nil
}
func (o *SecurityPolicyDataSourceRulesTargetDevicesObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name": types.StringType,
		"vsys": types.ListType{},
	}
}

func (o SecurityPolicyDataSourceRulesTargetDevicesObject) AncestorName() string {
	return "devices"
}

func (o SecurityPolicyDataSourceRulesTargetDevicesObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *SecurityPolicyDataSourceRulesTargetDevicesVsysObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name": types.StringType,
	}
}

func (o SecurityPolicyDataSourceRulesTargetDevicesVsysObject) AncestorName() string {
	return "vsys"
}

func (o SecurityPolicyDataSourceRulesTargetDevicesVsysObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}

func (o *SecurityPolicyDataSourceRulesObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **security.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	action_value := o.Action.ValueStringPointer()
	applications_pango_entries := make([]string, 0)
	diags.Append(o.Applications.ElementsAs(ctx, &applications_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	category_pango_entries := make([]string, 0)
	diags.Append(o.Category.ElementsAs(ctx, &category_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	description_value := o.Description.ValueStringPointer()
	destinationAddresses_pango_entries := make([]string, 0)
	diags.Append(o.DestinationAddresses.ElementsAs(ctx, &destinationAddresses_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	destinationHip_pango_entries := make([]string, 0)
	diags.Append(o.DestinationHip.ElementsAs(ctx, &destinationHip_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	disableInspect_value := o.DisableInspect.ValueBoolPointer()
	disableServerResponseInspection_value := o.DisableServerResponseInspection.ValueBoolPointer()
	disabled_value := o.Disabled.ValueBoolPointer()
	sourceZones_pango_entries := make([]string, 0)
	diags.Append(o.SourceZones.ElementsAs(ctx, &sourceZones_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	groupTag_value := o.GroupTag.ValueStringPointer()
	icmpUnreachable_value := o.IcmpUnreachable.ValueBoolPointer()
	logEnd_value := o.LogEnd.ValueBoolPointer()
	logSetting_value := o.LogSetting.ValueStringPointer()
	logStart_value := o.LogStart.ValueBoolPointer()
	negateDestination_value := o.NegateDestination.ValueBoolPointer()
	negateSource_value := o.NegateSource.ValueBoolPointer()
	var profileSetting_entry *security.ProfileSetting
	if o.ProfileSetting != nil {
		if *obj != nil && (*obj).ProfileSetting != nil {
			profileSetting_entry = (*obj).ProfileSetting
		} else {
			profileSetting_entry = new(security.ProfileSetting)
		}
		// ModelOrObject: Object
		diags.Append(o.ProfileSetting.CopyToPango(ctx, append(ancestors, o), &profileSetting_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var qos_entry *security.Qos
	if o.Qos != nil {
		if *obj != nil && (*obj).Qos != nil {
			qos_entry = (*obj).Qos
		} else {
			qos_entry = new(security.Qos)
		}
		// ModelOrObject: Object
		diags.Append(o.Qos.CopyToPango(ctx, append(ancestors, o), &qos_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	ruleType_value := o.RuleType.ValueStringPointer()
	schedule_value := o.Schedule.ValueStringPointer()
	services_pango_entries := make([]string, 0)
	diags.Append(o.Services.ElementsAs(ctx, &services_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceAddresses_pango_entries := make([]string, 0)
	diags.Append(o.SourceAddresses.ElementsAs(ctx, &sourceAddresses_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceHip_pango_entries := make([]string, 0)
	diags.Append(o.SourceHip.ElementsAs(ctx, &sourceHip_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceImei_pango_entries := make([]string, 0)
	diags.Append(o.SourceImei.ElementsAs(ctx, &sourceImei_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceImsi_pango_entries := make([]string, 0)
	diags.Append(o.SourceImsi.ElementsAs(ctx, &sourceImsi_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceNwSlice_pango_entries := make([]string, 0)
	diags.Append(o.SourceNwSlice.ElementsAs(ctx, &sourceNwSlice_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceUsers_pango_entries := make([]string, 0)
	diags.Append(o.SourceUsers.ElementsAs(ctx, &sourceUsers_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	tag_pango_entries := make([]string, 0)
	diags.Append(o.Tag.ElementsAs(ctx, &tag_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var target_entry *security.Target
	if o.Target != nil {
		if *obj != nil && (*obj).Target != nil {
			target_entry = (*obj).Target
		} else {
			target_entry = new(security.Target)
		}
		// ModelOrObject: Object
		diags.Append(o.Target.CopyToPango(ctx, append(ancestors, o), &target_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	destinationZones_pango_entries := make([]string, 0)
	diags.Append(o.DestinationZones.ElementsAs(ctx, &destinationZones_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(security.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Action = action_value
	(*obj).Application = applications_pango_entries
	(*obj).Category = category_pango_entries
	(*obj).Description = description_value
	(*obj).Destination = destinationAddresses_pango_entries
	(*obj).DestinationHip = destinationHip_pango_entries
	(*obj).DisableInspect = disableInspect_value
	(*obj).DisableServerResponseInspection = disableServerResponseInspection_value
	(*obj).Disabled = disabled_value
	(*obj).From = sourceZones_pango_entries
	(*obj).GroupTag = groupTag_value
	(*obj).IcmpUnreachable = icmpUnreachable_value
	(*obj).LogEnd = logEnd_value
	(*obj).LogSetting = logSetting_value
	(*obj).LogStart = logStart_value
	(*obj).NegateDestination = negateDestination_value
	(*obj).NegateSource = negateSource_value
	(*obj).ProfileSetting = profileSetting_entry
	(*obj).Qos = qos_entry
	(*obj).RuleType = ruleType_value
	(*obj).Schedule = schedule_value
	(*obj).Service = services_pango_entries
	(*obj).Source = sourceAddresses_pango_entries
	(*obj).SourceHip = sourceHip_pango_entries
	(*obj).SourceImei = sourceImei_pango_entries
	(*obj).SourceImsi = sourceImsi_pango_entries
	(*obj).SourceNwSlice = sourceNwSlice_pango_entries
	(*obj).SourceUser = sourceUsers_pango_entries
	(*obj).Tag = tag_pango_entries
	(*obj).Target = target_entry
	(*obj).To = destinationZones_pango_entries

	return diags
}
func (o *SecurityPolicyDataSourceRulesProfileSettingObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **security.ProfileSetting, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	group_pango_entries := make([]string, 0)
	diags.Append(o.Group.ElementsAs(ctx, &group_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var profiles_entry *security.ProfileSettingProfiles
	if o.Profiles != nil {
		if *obj != nil && (*obj).Profiles != nil {
			profiles_entry = (*obj).Profiles
		} else {
			profiles_entry = new(security.ProfileSettingProfiles)
		}
		// ModelOrObject: Object
		diags.Append(o.Profiles.CopyToPango(ctx, append(ancestors, o), &profiles_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(security.ProfileSetting)
	}
	(*obj).Group = group_pango_entries
	(*obj).Profiles = profiles_entry

	return diags
}
func (o *SecurityPolicyDataSourceRulesProfileSettingProfilesObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **security.ProfileSettingProfiles, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	dataFiltering_pango_entries := make([]string, 0)
	diags.Append(o.DataFiltering.ElementsAs(ctx, &dataFiltering_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	fileBlocking_pango_entries := make([]string, 0)
	diags.Append(o.FileBlocking.ElementsAs(ctx, &fileBlocking_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	gtp_pango_entries := make([]string, 0)
	diags.Append(o.Gtp.ElementsAs(ctx, &gtp_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sctp_pango_entries := make([]string, 0)
	diags.Append(o.Sctp.ElementsAs(ctx, &sctp_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	spyware_pango_entries := make([]string, 0)
	diags.Append(o.Spyware.ElementsAs(ctx, &spyware_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	urlFiltering_pango_entries := make([]string, 0)
	diags.Append(o.UrlFiltering.ElementsAs(ctx, &urlFiltering_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	virus_pango_entries := make([]string, 0)
	diags.Append(o.Virus.ElementsAs(ctx, &virus_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	vulnerability_pango_entries := make([]string, 0)
	diags.Append(o.Vulnerability.ElementsAs(ctx, &vulnerability_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	wildfireAnalysis_pango_entries := make([]string, 0)
	diags.Append(o.WildfireAnalysis.ElementsAs(ctx, &wildfireAnalysis_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(security.ProfileSettingProfiles)
	}
	(*obj).DataFiltering = dataFiltering_pango_entries
	(*obj).FileBlocking = fileBlocking_pango_entries
	(*obj).Gtp = gtp_pango_entries
	(*obj).Sctp = sctp_pango_entries
	(*obj).Spyware = spyware_pango_entries
	(*obj).UrlFiltering = urlFiltering_pango_entries
	(*obj).Virus = virus_pango_entries
	(*obj).Vulnerability = vulnerability_pango_entries
	(*obj).WildfireAnalysis = wildfireAnalysis_pango_entries

	return diags
}
func (o *SecurityPolicyDataSourceRulesQosObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **security.Qos, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var marking_entry *security.QosMarking
	if o.Marking != nil {
		if *obj != nil && (*obj).Marking != nil {
			marking_entry = (*obj).Marking
		} else {
			marking_entry = new(security.QosMarking)
		}
		// ModelOrObject: Object
		diags.Append(o.Marking.CopyToPango(ctx, append(ancestors, o), &marking_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(security.Qos)
	}
	(*obj).Marking = marking_entry

	return diags
}
func (o *SecurityPolicyDataSourceRulesQosMarkingObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **security.QosMarking, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var followC2sFlow_entry *security.QosMarkingFollowC2sFlow
	if o.FollowC2sFlow != nil {
		if *obj != nil && (*obj).FollowC2sFlow != nil {
			followC2sFlow_entry = (*obj).FollowC2sFlow
		} else {
			followC2sFlow_entry = new(security.QosMarkingFollowC2sFlow)
		}
		// ModelOrObject: Object
		diags.Append(o.FollowC2sFlow.CopyToPango(ctx, append(ancestors, o), &followC2sFlow_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	ipDscp_value := o.IpDscp.ValueStringPointer()
	ipPrecedence_value := o.IpPrecedence.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(security.QosMarking)
	}
	(*obj).FollowC2sFlow = followC2sFlow_entry
	(*obj).IpDscp = ipDscp_value
	(*obj).IpPrecedence = ipPrecedence_value

	return diags
}
func (o *SecurityPolicyDataSourceRulesQosMarkingFollowC2sFlowObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **security.QosMarkingFollowC2sFlow, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(security.QosMarkingFollowC2sFlow)
	}

	return diags
}
func (o *SecurityPolicyDataSourceRulesTargetObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **security.Target, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var devices_tf_entries []SecurityPolicyDataSourceRulesTargetDevicesObject
	var devices_pango_entries []security.TargetDevices
	{
		d := o.Devices.ElementsAs(ctx, &devices_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range devices_tf_entries {
			var entry *security.TargetDevices
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			devices_pango_entries = append(devices_pango_entries, *entry)
		}
	}
	negate_value := o.Negate.ValueBoolPointer()
	tags_pango_entries := make([]string, 0)
	diags.Append(o.Tags.ElementsAs(ctx, &tags_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(security.Target)
	}
	(*obj).Devices = devices_pango_entries
	(*obj).Negate = negate_value
	(*obj).Tags = tags_pango_entries

	return diags
}
func (o *SecurityPolicyDataSourceRulesTargetDevicesObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **security.TargetDevices, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var vsys_tf_entries []SecurityPolicyDataSourceRulesTargetDevicesVsysObject
	var vsys_pango_entries []security.TargetDevicesVsys
	{
		d := o.Vsys.ElementsAs(ctx, &vsys_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range vsys_tf_entries {
			var entry *security.TargetDevicesVsys
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			vsys_pango_entries = append(vsys_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(security.TargetDevices)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Vsys = vsys_pango_entries

	return diags
}
func (o *SecurityPolicyDataSourceRulesTargetDevicesVsysObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **security.TargetDevicesVsys, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(security.TargetDevicesVsys)
	}
	(*obj).Name = o.Name.ValueString()

	return diags
}

func (o *SecurityPolicyDataSourceRulesObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *security.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var applications_list types.Set
	{
		var list_diags diag.Diagnostics
		applications_list, list_diags = types.SetValueFrom(ctx, types.StringType, obj.Application)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var destinationAddresses_list types.Set
	{
		var list_diags diag.Diagnostics
		destinationAddresses_list, list_diags = types.SetValueFrom(ctx, types.StringType, obj.Destination)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var sourceZones_list types.Set
	{
		var list_diags diag.Diagnostics
		sourceZones_list, list_diags = types.SetValueFrom(ctx, types.StringType, obj.From)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var services_list types.Set
	{
		var list_diags diag.Diagnostics
		services_list, list_diags = types.SetValueFrom(ctx, types.StringType, obj.Service)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var sourceAddresses_list types.Set
	{
		var list_diags diag.Diagnostics
		sourceAddresses_list, list_diags = types.SetValueFrom(ctx, types.StringType, obj.Source)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var sourceUsers_list types.Set
	{
		var list_diags diag.Diagnostics
		sourceUsers_list, list_diags = types.SetValueFrom(ctx, types.StringType, obj.SourceUser)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var destinationZones_list types.Set
	{
		var list_diags diag.Diagnostics
		destinationZones_list, list_diags = types.SetValueFrom(ctx, types.StringType, obj.To)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var category_list types.List
	{
		var list_diags diag.Diagnostics
		category_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Category)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var destinationHip_list types.List
	{
		var list_diags diag.Diagnostics
		destinationHip_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DestinationHip)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var sourceHip_list types.List
	{
		var list_diags diag.Diagnostics
		sourceHip_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceHip)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var sourceImei_list types.List
	{
		var list_diags diag.Diagnostics
		sourceImei_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceImei)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var sourceImsi_list types.List
	{
		var list_diags diag.Diagnostics
		sourceImsi_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceImsi)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var sourceNwSlice_list types.List
	{
		var list_diags diag.Diagnostics
		sourceNwSlice_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceNwSlice)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var tag_list types.List
	{
		var list_diags diag.Diagnostics
		tag_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tag)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var profileSetting_object *SecurityPolicyDataSourceRulesProfileSettingObject
	if obj.ProfileSetting != nil {
		profileSetting_object = new(SecurityPolicyDataSourceRulesProfileSettingObject)
		diags.Append(profileSetting_object.CopyFromPango(ctx, append(ancestors, o), obj.ProfileSetting, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var qos_object *SecurityPolicyDataSourceRulesQosObject
	if obj.Qos != nil {
		qos_object = new(SecurityPolicyDataSourceRulesQosObject)
		diags.Append(qos_object.CopyFromPango(ctx, append(ancestors, o), obj.Qos, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var target_object *SecurityPolicyDataSourceRulesTargetObject
	if obj.Target != nil {
		target_object = new(SecurityPolicyDataSourceRulesTargetObject)
		diags.Append(target_object.CopyFromPango(ctx, append(ancestors, o), obj.Target, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var action_value types.String
	if obj.Action != nil {
		action_value = types.StringValue(*obj.Action)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var disableInspect_value types.Bool
	if obj.DisableInspect != nil {
		disableInspect_value = types.BoolValue(*obj.DisableInspect)
	}
	var disableServerResponseInspection_value types.Bool
	if obj.DisableServerResponseInspection != nil {
		disableServerResponseInspection_value = types.BoolValue(*obj.DisableServerResponseInspection)
	}
	var disabled_value types.Bool
	if obj.Disabled != nil {
		disabled_value = types.BoolValue(*obj.Disabled)
	}
	var groupTag_value types.String
	if obj.GroupTag != nil {
		groupTag_value = types.StringValue(*obj.GroupTag)
	}
	var icmpUnreachable_value types.Bool
	if obj.IcmpUnreachable != nil {
		icmpUnreachable_value = types.BoolValue(*obj.IcmpUnreachable)
	}
	var logEnd_value types.Bool
	if obj.LogEnd != nil {
		logEnd_value = types.BoolValue(*obj.LogEnd)
	}
	var logSetting_value types.String
	if obj.LogSetting != nil {
		logSetting_value = types.StringValue(*obj.LogSetting)
	}
	var logStart_value types.Bool
	if obj.LogStart != nil {
		logStart_value = types.BoolValue(*obj.LogStart)
	}
	var negateDestination_value types.Bool
	if obj.NegateDestination != nil {
		negateDestination_value = types.BoolValue(*obj.NegateDestination)
	}
	var negateSource_value types.Bool
	if obj.NegateSource != nil {
		negateSource_value = types.BoolValue(*obj.NegateSource)
	}
	var ruleType_value types.String
	if obj.RuleType != nil {
		ruleType_value = types.StringValue(*obj.RuleType)
	}
	var schedule_value types.String
	if obj.Schedule != nil {
		schedule_value = types.StringValue(*obj.Schedule)
	}
	o.Name = types.StringValue(obj.Name)
	o.Action = action_value
	o.Applications = applications_list
	o.Category = category_list
	o.Description = description_value
	o.DestinationAddresses = destinationAddresses_list
	o.DestinationHip = destinationHip_list
	o.DisableInspect = disableInspect_value
	o.DisableServerResponseInspection = disableServerResponseInspection_value
	o.Disabled = disabled_value
	o.SourceZones = sourceZones_list
	o.GroupTag = groupTag_value
	o.IcmpUnreachable = icmpUnreachable_value
	o.LogEnd = logEnd_value
	o.LogSetting = logSetting_value
	o.LogStart = logStart_value
	o.NegateDestination = negateDestination_value
	o.NegateSource = negateSource_value
	o.ProfileSetting = profileSetting_object
	o.Qos = qos_object
	o.RuleType = ruleType_value
	o.Schedule = schedule_value
	o.Services = services_list
	o.SourceAddresses = sourceAddresses_list
	o.SourceHip = sourceHip_list
	o.SourceImei = sourceImei_list
	o.SourceImsi = sourceImsi_list
	o.SourceNwSlice = sourceNwSlice_list
	o.SourceUsers = sourceUsers_list
	o.Tag = tag_list
	o.Target = target_object
	o.DestinationZones = destinationZones_list

	return diags
}

func (o *SecurityPolicyDataSourceRulesProfileSettingObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *security.ProfileSetting, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var group_list types.List
	{
		var list_diags diag.Diagnostics
		group_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Group)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var profiles_object *SecurityPolicyDataSourceRulesProfileSettingProfilesObject
	if obj.Profiles != nil {
		profiles_object = new(SecurityPolicyDataSourceRulesProfileSettingProfilesObject)
		diags.Append(profiles_object.CopyFromPango(ctx, append(ancestors, o), obj.Profiles, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Group = group_list
	o.Profiles = profiles_object

	return diags
}

func (o *SecurityPolicyDataSourceRulesProfileSettingProfilesObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *security.ProfileSettingProfiles, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dataFiltering_list types.List
	{
		var list_diags diag.Diagnostics
		dataFiltering_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DataFiltering)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var fileBlocking_list types.List
	{
		var list_diags diag.Diagnostics
		fileBlocking_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.FileBlocking)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var gtp_list types.List
	{
		var list_diags diag.Diagnostics
		gtp_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Gtp)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var sctp_list types.List
	{
		var list_diags diag.Diagnostics
		sctp_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Sctp)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var spyware_list types.List
	{
		var list_diags diag.Diagnostics
		spyware_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Spyware)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var urlFiltering_list types.List
	{
		var list_diags diag.Diagnostics
		urlFiltering_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.UrlFiltering)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var virus_list types.List
	{
		var list_diags diag.Diagnostics
		virus_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Virus)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var vulnerability_list types.List
	{
		var list_diags diag.Diagnostics
		vulnerability_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Vulnerability)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var wildfireAnalysis_list types.List
	{
		var list_diags diag.Diagnostics
		wildfireAnalysis_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.WildfireAnalysis)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}

	o.DataFiltering = dataFiltering_list
	o.FileBlocking = fileBlocking_list
	o.Gtp = gtp_list
	o.Sctp = sctp_list
	o.Spyware = spyware_list
	o.UrlFiltering = urlFiltering_list
	o.Virus = virus_list
	o.Vulnerability = vulnerability_list
	o.WildfireAnalysis = wildfireAnalysis_list

	return diags
}

func (o *SecurityPolicyDataSourceRulesQosObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *security.Qos, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var marking_object *SecurityPolicyDataSourceRulesQosMarkingObject
	if obj.Marking != nil {
		marking_object = new(SecurityPolicyDataSourceRulesQosMarkingObject)
		diags.Append(marking_object.CopyFromPango(ctx, append(ancestors, o), obj.Marking, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Marking = marking_object

	return diags
}

func (o *SecurityPolicyDataSourceRulesQosMarkingObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *security.QosMarking, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var followC2sFlow_object *SecurityPolicyDataSourceRulesQosMarkingFollowC2sFlowObject
	if obj.FollowC2sFlow != nil {
		followC2sFlow_object = new(SecurityPolicyDataSourceRulesQosMarkingFollowC2sFlowObject)
		diags.Append(followC2sFlow_object.CopyFromPango(ctx, append(ancestors, o), obj.FollowC2sFlow, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var ipDscp_value types.String
	if obj.IpDscp != nil {
		ipDscp_value = types.StringValue(*obj.IpDscp)
	}
	var ipPrecedence_value types.String
	if obj.IpPrecedence != nil {
		ipPrecedence_value = types.StringValue(*obj.IpPrecedence)
	}
	o.FollowC2sFlow = followC2sFlow_object
	o.IpDscp = ipDscp_value
	o.IpPrecedence = ipPrecedence_value

	return diags
}

func (o *SecurityPolicyDataSourceRulesQosMarkingFollowC2sFlowObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *security.QosMarkingFollowC2sFlow, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *SecurityPolicyDataSourceRulesTargetObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *security.Target, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var devices_list types.List
	{
		var devices_tf_entries []SecurityPolicyDataSourceRulesTargetDevicesObject
		for _, elt := range obj.Devices {
			entry := SecurityPolicyDataSourceRulesTargetDevicesObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			devices_tf_entries = append(devices_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("devices")
		devices_list, list_diags = types.ListValueFrom(ctx, schemaType, devices_tf_entries)
		diags.Append(list_diags...)
	}
	var tags_list types.List
	{
		var list_diags diag.Diagnostics
		tags_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tags)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}

	var negate_value types.Bool
	if obj.Negate != nil {
		negate_value = types.BoolValue(*obj.Negate)
	}
	o.Devices = devices_list
	o.Negate = negate_value
	o.Tags = tags_list

	return diags
}

func (o *SecurityPolicyDataSourceRulesTargetDevicesObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *security.TargetDevices, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var vsys_list types.List
	{
		var vsys_tf_entries []SecurityPolicyDataSourceRulesTargetDevicesVsysObject
		for _, elt := range obj.Vsys {
			entry := SecurityPolicyDataSourceRulesTargetDevicesVsysObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			vsys_tf_entries = append(vsys_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("vsys")
		vsys_list, list_diags = types.ListValueFrom(ctx, schemaType, vsys_tf_entries)
		diags.Append(list_diags...)
	}

	o.Name = types.StringValue(obj.Name)
	o.Vsys = vsys_list

	return diags
}

func (o *SecurityPolicyDataSourceRulesTargetDevicesVsysObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *security.TargetDevicesVsys, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	o.Name = types.StringValue(obj.Name)

	return diags
}

func (o *SecurityPolicyDataSourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	return components, nil
}

func SecurityPolicyDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": SecurityPolicyDataSourceLocationSchema(),

			"rules": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     true,
				Optional:     false,
				Computed:     false,
				Sensitive:    false,
				NestedObject: SecurityPolicyDataSourceRulesSchema(),
			},
		},
	}
}

func (o *SecurityPolicyDataSourceModel) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyDataSourceRulesSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"action": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"applications": dsschema.SetAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"category": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"description": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"destination_addresses": dsschema.SetAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"destination_hip": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"disable_inspect": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"disable_server_response_inspection": dsschema.BoolAttribute{
				Description: "Disable inspection of server side traffic",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"disabled": dsschema.BoolAttribute{
				Description: "Disable the rule",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source_zones": dsschema.SetAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"group_tag": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"icmp_unreachable": dsschema.BoolAttribute{
				Description: "Send ICMP unreachable error when action is drop or reset",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_end": dsschema.BoolAttribute{
				Description: "Log at session end (required for certain ACC tables)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_setting": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_start": dsschema.BoolAttribute{
				Description: "Log at session start",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"negate_destination": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"negate_source": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"profile_setting": SecurityPolicyDataSourceRulesProfileSettingSchema(),

			"qos": SecurityPolicyDataSourceRulesQosSchema(),

			"rule_type": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"schedule": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"services": dsschema.SetAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_addresses": dsschema.SetAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_hip": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_imei": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_imsi": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_nw_slice": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_users": dsschema.SetAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"tag": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"target": SecurityPolicyDataSourceRulesTargetSchema(),

			"destination_zones": dsschema.SetAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *SecurityPolicyDataSourceRulesObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyDataSourceRulesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyDataSourceRulesProfileSettingSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"group": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"profiles": SecurityPolicyDataSourceRulesProfileSettingProfilesSchema(),
		},
	}
}

func (o *SecurityPolicyDataSourceRulesProfileSettingObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyDataSourceRulesProfileSettingSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyDataSourceRulesProfileSettingProfilesSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("group"),
				path.MatchRelative().AtParent().AtName("profiles"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{

			"data_filtering": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"file_blocking": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"gtp": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"sctp": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"spyware": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"url_filtering": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"virus": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"vulnerability": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"wildfire_analysis": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *SecurityPolicyDataSourceRulesProfileSettingProfilesObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyDataSourceRulesProfileSettingProfilesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyDataSourceRulesQosSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"marking": SecurityPolicyDataSourceRulesQosMarkingSchema(),
		},
	}
}

func (o *SecurityPolicyDataSourceRulesQosObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyDataSourceRulesQosSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyDataSourceRulesQosMarkingSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"follow_c2s_flow": SecurityPolicyDataSourceRulesQosMarkingFollowC2sFlowSchema(),

			"ip_dscp": dsschema.StringAttribute{
				Description: "IP DSCP",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ip_precedence": dsschema.StringAttribute{
				Description: "IP Precedence",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *SecurityPolicyDataSourceRulesQosMarkingObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyDataSourceRulesQosMarkingSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyDataSourceRulesQosMarkingFollowC2sFlowSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("follow_c2s_flow"),
				path.MatchRelative().AtParent().AtName("ip_dscp"),
				path.MatchRelative().AtParent().AtName("ip_precedence"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *SecurityPolicyDataSourceRulesQosMarkingFollowC2sFlowObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyDataSourceRulesQosMarkingFollowC2sFlowSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyDataSourceRulesTargetSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"devices": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: SecurityPolicyDataSourceRulesTargetDevicesSchema(),
			},

			"negate": dsschema.BoolAttribute{
				Description: "Target to all but these specified devices and tags",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tags": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *SecurityPolicyDataSourceRulesTargetObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyDataSourceRulesTargetSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyDataSourceRulesTargetDevicesSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"vsys": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: SecurityPolicyDataSourceRulesTargetDevicesVsysSchema(),
			},
		},
	}
}

func (o *SecurityPolicyDataSourceRulesTargetDevicesObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyDataSourceRulesTargetDevicesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyDataSourceRulesTargetDevicesVsysSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},
		},
	}
}

func (o *SecurityPolicyDataSourceRulesTargetDevicesVsysObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyDataSourceRulesTargetDevicesVsysSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyDataSourceLocationSchema() rsschema.Attribute {
	return SecurityPolicyLocationSchema()
}

// Metadata returns the data source type name.
func (d *SecurityPolicyDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_security_policy"
}

// Schema defines the schema for this data source.
func (d *SecurityPolicyDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = SecurityPolicyDataSourceSchema()
}

// Configure prepares the struct.
func (d *SecurityPolicyDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	d.client = providerData.Client
	specifier, _, err := security.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	d.manager = sdkmanager.NewUuidObjectManager[*security.Entry, security.Location, *security.Service](d.client, security.NewService(d.client), batchSize, specifier, security.SpecMatches)
}
func (o *SecurityPolicyDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var state SecurityPolicyDataSourceModel

	resp.Diagnostics.Append(req.Config.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_security_policy",
		"function":      "Create",
	})

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location security.Location

	{
		var terraformLocation SecurityPolicyLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &security.SharedLocation{}
			var innerLocation SecurityPolicySharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Shared.Rulebase = innerLocation.Rulebase.ValueString()
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &security.VsysLocation{}
			var innerLocation SecurityPolicyVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &security.DeviceGroupLocation{}
			var innerLocation SecurityPolicyDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
			location.DeviceGroup.Rulebase = innerLocation.Rulebase.ValueString()
		}
	}

	var elements []SecurityPolicyDataSourceRulesObject
	resp.Diagnostics.Append(state.Rules.ElementsAs(ctx, &elements, false)...)
	if resp.Diagnostics.HasError() || len(elements) == 0 {
		return
	}

	entries := make([]*security.Entry, 0, len(elements))
	for _, elt := range elements {
		var entry *security.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, nil, &entry, ev)...)
		if resp.Diagnostics.HasError() {
			return
		}
		entries = append(entries, entry)
	}

	// true

	position := movement.PositionFirst{}
	readEntries, _, err := o.manager.ReadMany(ctx, location, entries, sdkmanager.Exhaustive, position)
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Failed to read entries from the server", err.Error())
		}
		return
	}

	var objects []SecurityPolicyDataSourceRulesObject
	for _, elt := range readEntries {
		var object SecurityPolicyDataSourceRulesObject
		err := object.CopyFromPango(ctx, nil, elt, ev)
		resp.Diagnostics.Append(err...)
		if resp.Diagnostics.HasError() {
			return
		}
		objects = append(objects, object)
	}

	var list_diags diag.Diagnostics
	state.Rules, list_diags = types.ListValueFrom(ctx, state.getTypeFor("rules"), objects)
	resp.Diagnostics.Append(list_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &SecurityPolicyResource{}
	_ resource.ResourceWithConfigure   = &SecurityPolicyResource{}
	_ resource.ResourceWithImportState = &SecurityPolicyResource{}
)

func NewSecurityPolicyResource() resource.Resource {
	if _, found := resourceFuncMap["panos_security_policy"]; !found {
		resourceFuncMap["panos_security_policy"] = resourceFuncs{
			CreateImportId: SecurityPolicyImportStateCreator,
		}
	}
	return &SecurityPolicyResource{}
}

type SecurityPolicyResource struct {
	client  *pango.Client
	manager *sdkmanager.UuidObjectManager[*security.Entry, security.Location, *security.Service]
}

func SecurityPolicyResourceLocationSchema() rsschema.Attribute {
	return SecurityPolicyLocationSchema()
}

type SecurityPolicyResourceModel struct {
	Location types.Object `tfsdk:"location"`
	Rules    types.List   `tfsdk:"rules"`
}
type SecurityPolicyResourceRulesObject struct {
	Name                            types.String                                     `tfsdk:"name"`
	Action                          types.String                                     `tfsdk:"action"`
	Applications                    types.Set                                        `tfsdk:"applications"`
	Category                        types.List                                       `tfsdk:"category"`
	Description                     types.String                                     `tfsdk:"description"`
	DestinationAddresses            types.Set                                        `tfsdk:"destination_addresses"`
	DestinationHip                  types.List                                       `tfsdk:"destination_hip"`
	DisableInspect                  types.Bool                                       `tfsdk:"disable_inspect"`
	DisableServerResponseInspection types.Bool                                       `tfsdk:"disable_server_response_inspection"`
	Disabled                        types.Bool                                       `tfsdk:"disabled"`
	SourceZones                     types.Set                                        `tfsdk:"source_zones"`
	GroupTag                        types.String                                     `tfsdk:"group_tag"`
	IcmpUnreachable                 types.Bool                                       `tfsdk:"icmp_unreachable"`
	LogEnd                          types.Bool                                       `tfsdk:"log_end"`
	LogSetting                      types.String                                     `tfsdk:"log_setting"`
	LogStart                        types.Bool                                       `tfsdk:"log_start"`
	NegateDestination               types.Bool                                       `tfsdk:"negate_destination"`
	NegateSource                    types.Bool                                       `tfsdk:"negate_source"`
	ProfileSetting                  *SecurityPolicyResourceRulesProfileSettingObject `tfsdk:"profile_setting"`
	Qos                             *SecurityPolicyResourceRulesQosObject            `tfsdk:"qos"`
	RuleType                        types.String                                     `tfsdk:"rule_type"`
	Schedule                        types.String                                     `tfsdk:"schedule"`
	Services                        types.Set                                        `tfsdk:"services"`
	SourceAddresses                 types.Set                                        `tfsdk:"source_addresses"`
	SourceHip                       types.List                                       `tfsdk:"source_hip"`
	SourceImei                      types.List                                       `tfsdk:"source_imei"`
	SourceImsi                      types.List                                       `tfsdk:"source_imsi"`
	SourceNwSlice                   types.List                                       `tfsdk:"source_nw_slice"`
	SourceUsers                     types.Set                                        `tfsdk:"source_users"`
	Tag                             types.List                                       `tfsdk:"tag"`
	Target                          *SecurityPolicyResourceRulesTargetObject         `tfsdk:"target"`
	DestinationZones                types.Set                                        `tfsdk:"destination_zones"`
}
type SecurityPolicyResourceRulesProfileSettingObject struct {
	Group    types.List                                               `tfsdk:"group"`
	Profiles *SecurityPolicyResourceRulesProfileSettingProfilesObject `tfsdk:"profiles"`
}
type SecurityPolicyResourceRulesProfileSettingProfilesObject struct {
	DataFiltering    types.List `tfsdk:"data_filtering"`
	FileBlocking     types.List `tfsdk:"file_blocking"`
	Gtp              types.List `tfsdk:"gtp"`
	Sctp             types.List `tfsdk:"sctp"`
	Spyware          types.List `tfsdk:"spyware"`
	UrlFiltering     types.List `tfsdk:"url_filtering"`
	Virus            types.List `tfsdk:"virus"`
	Vulnerability    types.List `tfsdk:"vulnerability"`
	WildfireAnalysis types.List `tfsdk:"wildfire_analysis"`
}
type SecurityPolicyResourceRulesQosObject struct {
	Marking *SecurityPolicyResourceRulesQosMarkingObject `tfsdk:"marking"`
}
type SecurityPolicyResourceRulesQosMarkingObject struct {
	FollowC2sFlow *SecurityPolicyResourceRulesQosMarkingFollowC2sFlowObject `tfsdk:"follow_c2s_flow"`
	IpDscp        types.String                                              `tfsdk:"ip_dscp"`
	IpPrecedence  types.String                                              `tfsdk:"ip_precedence"`
}
type SecurityPolicyResourceRulesQosMarkingFollowC2sFlowObject struct {
}
type SecurityPolicyResourceRulesTargetObject struct {
	Devices types.List `tfsdk:"devices"`
	Negate  types.Bool `tfsdk:"negate"`
	Tags    types.List `tfsdk:"tags"`
}
type SecurityPolicyResourceRulesTargetDevicesObject struct {
	Name types.String `tfsdk:"name"`
	Vsys types.List   `tfsdk:"vsys"`
}
type SecurityPolicyResourceRulesTargetDevicesVsysObject struct {
	Name types.String `tfsdk:"name"`
}

func (r *SecurityPolicyResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
	{
		var resource SecurityPolicyResourceModel
		resp.Diagnostics.Append(req.Config.Get(ctx, &resource)...)
		if resp.Diagnostics.HasError() {
			return
		}

		entries := make(map[string]struct{})
		duplicated := make(map[string]struct{})

		var elements []types.Object
		resp.Diagnostics.Append(resource.Rules.ElementsAs(ctx, &elements, true)...)
		if resp.Diagnostics.HasError() {
			return
		}

		for _, elt := range elements {
			var typedElt SecurityPolicyResourceRulesObject
			resp.Diagnostics.Append(elt.As(ctx, &typedElt, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}

			if typedElt.Name.IsUnknown() {
				continue
			}

			entry := typedElt.Name.ValueString()
			if _, found := entries[entry]; found {
				duplicated[entry] = struct{}{}
			}
			entries[entry] = struct{}{}
		}

		var _ = strings.Join([]string{"a", "b"}, ",")

		if len(duplicated) > 0 {
			var entries []string
			for elt := range duplicated {
				entries = append(entries, fmt.Sprintf("'%s'", elt))
			}
			resp.Diagnostics.AddError("Failed to validate resource", fmt.Sprintf("Non-unique entry names in the list: %s", strings.Join(entries, ",")))
			return
		}

	}
}

// <ResourceSchema>

func SecurityPolicyResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": SecurityPolicyResourceLocationSchema(),

			"rules": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     true,
				Optional:     false,
				Computed:     false,
				Sensitive:    false,
				NestedObject: SecurityPolicyResourceRulesSchema(),
			},
		},
	}
}

func (o *SecurityPolicyResourceModel) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyResourceRulesSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"action": rsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("allow"),

				Validators: []validator.String{
					stringvalidator.OneOf([]string{
						"deny",
						"allow",
						"drop",
						"reset-client",
						"reset-server",
						"reset-both",
					}...),
				},
			},

			"applications": rsschema.SetAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"category": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"description": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"destination_addresses": rsschema.SetAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"destination_hip": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"disable_inspect": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"disable_server_response_inspection": rsschema.BoolAttribute{
				Description: "Disable inspection of server side traffic",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"disabled": rsschema.BoolAttribute{
				Description: "Disable the rule",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"source_zones": rsschema.SetAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"group_tag": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"icmp_unreachable": rsschema.BoolAttribute{
				Description: "Send ICMP unreachable error when action is drop or reset",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_end": rsschema.BoolAttribute{
				Description: "Log at session end (required for certain ACC tables)",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_setting": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_start": rsschema.BoolAttribute{
				Description: "Log at session start",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"negate_destination": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"negate_source": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"profile_setting": SecurityPolicyResourceRulesProfileSettingSchema(),

			"qos": SecurityPolicyResourceRulesQosSchema(),

			"rule_type": rsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("universal"),

				Validators: []validator.String{
					stringvalidator.OneOf([]string{
						"universal",
						"intrazone",
						"interzone",
					}...),
				},
			},

			"schedule": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"services": rsschema.SetAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_addresses": rsschema.SetAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_hip": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_imei": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_imsi": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_nw_slice": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"source_users": rsschema.SetAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"tag": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"target": SecurityPolicyResourceRulesTargetSchema(),

			"destination_zones": rsschema.SetAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *SecurityPolicyResourceRulesObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyResourceRulesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyResourceRulesProfileSettingSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"group": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,

				Validators: []validator.List{
					listvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("group"),
						path.MatchRelative().AtParent().AtName("profiles"),
					}...),
				},
			},

			"profiles": SecurityPolicyResourceRulesProfileSettingProfilesSchema(),
		},
	}
}

func (o *SecurityPolicyResourceRulesProfileSettingObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyResourceRulesProfileSettingSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyResourceRulesProfileSettingProfilesSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("group"),
				path.MatchRelative().AtParent().AtName("profiles"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"data_filtering": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"file_blocking": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"gtp": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"sctp": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"spyware": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"url_filtering": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"virus": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"vulnerability": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"wildfire_analysis": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *SecurityPolicyResourceRulesProfileSettingProfilesObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyResourceRulesProfileSettingProfilesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyResourceRulesQosSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"marking": SecurityPolicyResourceRulesQosMarkingSchema(),
		},
	}
}

func (o *SecurityPolicyResourceRulesQosObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyResourceRulesQosSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyResourceRulesQosMarkingSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"follow_c2s_flow": SecurityPolicyResourceRulesQosMarkingFollowC2sFlowSchema(),

			"ip_dscp": rsschema.StringAttribute{
				Description: "IP DSCP",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ip_precedence": rsschema.StringAttribute{
				Description: "IP Precedence",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *SecurityPolicyResourceRulesQosMarkingObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyResourceRulesQosMarkingSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyResourceRulesQosMarkingFollowC2sFlowSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("follow_c2s_flow"),
				path.MatchRelative().AtParent().AtName("ip_dscp"),
				path.MatchRelative().AtParent().AtName("ip_precedence"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *SecurityPolicyResourceRulesQosMarkingFollowC2sFlowObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyResourceRulesQosMarkingFollowC2sFlowSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyResourceRulesTargetSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"devices": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: SecurityPolicyResourceRulesTargetDevicesSchema(),
			},

			"negate": rsschema.BoolAttribute{
				Description: "Target to all but these specified devices and tags",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tags": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *SecurityPolicyResourceRulesTargetObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyResourceRulesTargetSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyResourceRulesTargetDevicesSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"vsys": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: SecurityPolicyResourceRulesTargetDevicesVsysSchema(),
			},
		},
	}
}

func (o *SecurityPolicyResourceRulesTargetDevicesObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyResourceRulesTargetDevicesSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func SecurityPolicyResourceRulesTargetDevicesVsysSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},
		},
	}
}

func (o *SecurityPolicyResourceRulesTargetDevicesVsysObject) getTypeFor(name string) attr.Type {
	schema := SecurityPolicyResourceRulesTargetDevicesVsysSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *SecurityPolicyResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_security_policy"
}

func (r *SecurityPolicyResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = SecurityPolicyResourceSchema()
}

// </ResourceSchema>

func (r *SecurityPolicyResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	r.client = providerData.Client
	specifier, _, err := security.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	r.manager = sdkmanager.NewUuidObjectManager[*security.Entry, security.Location, *security.Service](r.client, security.NewService(r.client), batchSize, specifier, security.SpecMatches)
}

func (o *SecurityPolicyResourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj SecurityPolicyLocation

	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"rules": types.ListType{},
	}
}

func (o SecurityPolicyResourceModel) AncestorName() string {
	return ""
}

func (o SecurityPolicyResourceModel) EntryName() *string {
	return nil
}
func (o *SecurityPolicyResourceRulesObject) AttributeTypes() map[string]attr.Type {

	var profileSettingObj *SecurityPolicyResourceRulesProfileSettingObject

	var qosObj *SecurityPolicyResourceRulesQosObject

	var targetObj *SecurityPolicyResourceRulesTargetObject

	return map[string]attr.Type{
		"name":                               types.StringType,
		"action":                             types.StringType,
		"applications":                       types.SetType{},
		"category":                           types.ListType{},
		"description":                        types.StringType,
		"destination_addresses":              types.SetType{},
		"destination_hip":                    types.ListType{},
		"disable_inspect":                    types.BoolType,
		"disable_server_response_inspection": types.BoolType,
		"disabled":                           types.BoolType,
		"source_zones":                       types.SetType{},
		"group_tag":                          types.StringType,
		"icmp_unreachable":                   types.BoolType,
		"log_end":                            types.BoolType,
		"log_setting":                        types.StringType,
		"log_start":                          types.BoolType,
		"negate_destination":                 types.BoolType,
		"negate_source":                      types.BoolType,
		"profile_setting": types.ObjectType{
			AttrTypes: profileSettingObj.AttributeTypes(),
		},
		"qos": types.ObjectType{
			AttrTypes: qosObj.AttributeTypes(),
		},
		"rule_type":        types.StringType,
		"schedule":         types.StringType,
		"services":         types.SetType{},
		"source_addresses": types.SetType{},
		"source_hip":       types.ListType{},
		"source_imei":      types.ListType{},
		"source_imsi":      types.ListType{},
		"source_nw_slice":  types.ListType{},
		"source_users":     types.SetType{},
		"tag":              types.ListType{},
		"target": types.ObjectType{
			AttrTypes: targetObj.AttributeTypes(),
		},
		"destination_zones": types.SetType{},
	}
}

func (o SecurityPolicyResourceRulesObject) AncestorName() string {
	return "rules"
}

func (o SecurityPolicyResourceRulesObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *SecurityPolicyResourceRulesProfileSettingObject) AttributeTypes() map[string]attr.Type {

	var profilesObj *SecurityPolicyResourceRulesProfileSettingProfilesObject
	return map[string]attr.Type{
		"group": types.ListType{},
		"profiles": types.ObjectType{
			AttrTypes: profilesObj.AttributeTypes(),
		},
	}
}

func (o SecurityPolicyResourceRulesProfileSettingObject) AncestorName() string {
	return "profile-setting"
}

func (o SecurityPolicyResourceRulesProfileSettingObject) EntryName() *string {
	return nil
}
func (o *SecurityPolicyResourceRulesProfileSettingProfilesObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"data_filtering":    types.ListType{},
		"file_blocking":     types.ListType{},
		"gtp":               types.ListType{},
		"sctp":              types.ListType{},
		"spyware":           types.ListType{},
		"url_filtering":     types.ListType{},
		"virus":             types.ListType{},
		"vulnerability":     types.ListType{},
		"wildfire_analysis": types.ListType{},
	}
}

func (o SecurityPolicyResourceRulesProfileSettingProfilesObject) AncestorName() string {
	return "profiles"
}

func (o SecurityPolicyResourceRulesProfileSettingProfilesObject) EntryName() *string {
	return nil
}
func (o *SecurityPolicyResourceRulesQosObject) AttributeTypes() map[string]attr.Type {

	var markingObj *SecurityPolicyResourceRulesQosMarkingObject
	return map[string]attr.Type{
		"marking": types.ObjectType{
			AttrTypes: markingObj.AttributeTypes(),
		},
	}
}

func (o SecurityPolicyResourceRulesQosObject) AncestorName() string {
	return "qos"
}

func (o SecurityPolicyResourceRulesQosObject) EntryName() *string {
	return nil
}
func (o *SecurityPolicyResourceRulesQosMarkingObject) AttributeTypes() map[string]attr.Type {

	var followC2sFlowObj *SecurityPolicyResourceRulesQosMarkingFollowC2sFlowObject

	return map[string]attr.Type{
		"follow_c2s_flow": types.ObjectType{
			AttrTypes: followC2sFlowObj.AttributeTypes(),
		},
		"ip_dscp":       types.StringType,
		"ip_precedence": types.StringType,
	}
}

func (o SecurityPolicyResourceRulesQosMarkingObject) AncestorName() string {
	return "marking"
}

func (o SecurityPolicyResourceRulesQosMarkingObject) EntryName() *string {
	return nil
}
func (o *SecurityPolicyResourceRulesQosMarkingFollowC2sFlowObject) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}

func (o SecurityPolicyResourceRulesQosMarkingFollowC2sFlowObject) AncestorName() string {
	return "follow-c2s-flow"
}

func (o SecurityPolicyResourceRulesQosMarkingFollowC2sFlowObject) EntryName() *string {
	return nil
}
func (o *SecurityPolicyResourceRulesTargetObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"devices": types.ListType{},
		"negate":  types.BoolType,
		"tags":    types.ListType{},
	}
}

func (o SecurityPolicyResourceRulesTargetObject) AncestorName() string {
	return "target"
}

func (o SecurityPolicyResourceRulesTargetObject) EntryName() *string {
	return nil
}
func (o *SecurityPolicyResourceRulesTargetDevicesObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name": types.StringType,
		"vsys": types.ListType{},
	}
}

func (o SecurityPolicyResourceRulesTargetDevicesObject) AncestorName() string {
	return "devices"
}

func (o SecurityPolicyResourceRulesTargetDevicesObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}
func (o *SecurityPolicyResourceRulesTargetDevicesVsysObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name": types.StringType,
	}
}

func (o SecurityPolicyResourceRulesTargetDevicesVsysObject) AncestorName() string {
	return "vsys"
}

func (o SecurityPolicyResourceRulesTargetDevicesVsysObject) EntryName() *string {
	return o.Name.ValueStringPointer()
}

func (o *SecurityPolicyResourceRulesObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **security.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	action_value := o.Action.ValueStringPointer()
	applications_pango_entries := make([]string, 0)
	diags.Append(o.Applications.ElementsAs(ctx, &applications_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	category_pango_entries := make([]string, 0)
	diags.Append(o.Category.ElementsAs(ctx, &category_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	description_value := o.Description.ValueStringPointer()
	destinationAddresses_pango_entries := make([]string, 0)
	diags.Append(o.DestinationAddresses.ElementsAs(ctx, &destinationAddresses_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	destinationHip_pango_entries := make([]string, 0)
	diags.Append(o.DestinationHip.ElementsAs(ctx, &destinationHip_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	disableInspect_value := o.DisableInspect.ValueBoolPointer()
	disableServerResponseInspection_value := o.DisableServerResponseInspection.ValueBoolPointer()
	disabled_value := o.Disabled.ValueBoolPointer()
	sourceZones_pango_entries := make([]string, 0)
	diags.Append(o.SourceZones.ElementsAs(ctx, &sourceZones_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	groupTag_value := o.GroupTag.ValueStringPointer()
	icmpUnreachable_value := o.IcmpUnreachable.ValueBoolPointer()
	logEnd_value := o.LogEnd.ValueBoolPointer()
	logSetting_value := o.LogSetting.ValueStringPointer()
	logStart_value := o.LogStart.ValueBoolPointer()
	negateDestination_value := o.NegateDestination.ValueBoolPointer()
	negateSource_value := o.NegateSource.ValueBoolPointer()
	var profileSetting_entry *security.ProfileSetting
	if o.ProfileSetting != nil {
		if *obj != nil && (*obj).ProfileSetting != nil {
			profileSetting_entry = (*obj).ProfileSetting
		} else {
			profileSetting_entry = new(security.ProfileSetting)
		}
		// ModelOrObject: Object
		diags.Append(o.ProfileSetting.CopyToPango(ctx, append(ancestors, o), &profileSetting_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var qos_entry *security.Qos
	if o.Qos != nil {
		if *obj != nil && (*obj).Qos != nil {
			qos_entry = (*obj).Qos
		} else {
			qos_entry = new(security.Qos)
		}
		// ModelOrObject: Object
		diags.Append(o.Qos.CopyToPango(ctx, append(ancestors, o), &qos_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	ruleType_value := o.RuleType.ValueStringPointer()
	schedule_value := o.Schedule.ValueStringPointer()
	services_pango_entries := make([]string, 0)
	diags.Append(o.Services.ElementsAs(ctx, &services_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceAddresses_pango_entries := make([]string, 0)
	diags.Append(o.SourceAddresses.ElementsAs(ctx, &sourceAddresses_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceHip_pango_entries := make([]string, 0)
	diags.Append(o.SourceHip.ElementsAs(ctx, &sourceHip_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceImei_pango_entries := make([]string, 0)
	diags.Append(o.SourceImei.ElementsAs(ctx, &sourceImei_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceImsi_pango_entries := make([]string, 0)
	diags.Append(o.SourceImsi.ElementsAs(ctx, &sourceImsi_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceNwSlice_pango_entries := make([]string, 0)
	diags.Append(o.SourceNwSlice.ElementsAs(ctx, &sourceNwSlice_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sourceUsers_pango_entries := make([]string, 0)
	diags.Append(o.SourceUsers.ElementsAs(ctx, &sourceUsers_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	tag_pango_entries := make([]string, 0)
	diags.Append(o.Tag.ElementsAs(ctx, &tag_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var target_entry *security.Target
	if o.Target != nil {
		if *obj != nil && (*obj).Target != nil {
			target_entry = (*obj).Target
		} else {
			target_entry = new(security.Target)
		}
		// ModelOrObject: Object
		diags.Append(o.Target.CopyToPango(ctx, append(ancestors, o), &target_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	destinationZones_pango_entries := make([]string, 0)
	diags.Append(o.DestinationZones.ElementsAs(ctx, &destinationZones_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(security.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Action = action_value
	(*obj).Application = applications_pango_entries
	(*obj).Category = category_pango_entries
	(*obj).Description = description_value
	(*obj).Destination = destinationAddresses_pango_entries
	(*obj).DestinationHip = destinationHip_pango_entries
	(*obj).DisableInspect = disableInspect_value
	(*obj).DisableServerResponseInspection = disableServerResponseInspection_value
	(*obj).Disabled = disabled_value
	(*obj).From = sourceZones_pango_entries
	(*obj).GroupTag = groupTag_value
	(*obj).IcmpUnreachable = icmpUnreachable_value
	(*obj).LogEnd = logEnd_value
	(*obj).LogSetting = logSetting_value
	(*obj).LogStart = logStart_value
	(*obj).NegateDestination = negateDestination_value
	(*obj).NegateSource = negateSource_value
	(*obj).ProfileSetting = profileSetting_entry
	(*obj).Qos = qos_entry
	(*obj).RuleType = ruleType_value
	(*obj).Schedule = schedule_value
	(*obj).Service = services_pango_entries
	(*obj).Source = sourceAddresses_pango_entries
	(*obj).SourceHip = sourceHip_pango_entries
	(*obj).SourceImei = sourceImei_pango_entries
	(*obj).SourceImsi = sourceImsi_pango_entries
	(*obj).SourceNwSlice = sourceNwSlice_pango_entries
	(*obj).SourceUser = sourceUsers_pango_entries
	(*obj).Tag = tag_pango_entries
	(*obj).Target = target_entry
	(*obj).To = destinationZones_pango_entries

	return diags
}
func (o *SecurityPolicyResourceRulesProfileSettingObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **security.ProfileSetting, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	group_pango_entries := make([]string, 0)
	diags.Append(o.Group.ElementsAs(ctx, &group_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var profiles_entry *security.ProfileSettingProfiles
	if o.Profiles != nil {
		if *obj != nil && (*obj).Profiles != nil {
			profiles_entry = (*obj).Profiles
		} else {
			profiles_entry = new(security.ProfileSettingProfiles)
		}
		// ModelOrObject: Object
		diags.Append(o.Profiles.CopyToPango(ctx, append(ancestors, o), &profiles_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(security.ProfileSetting)
	}
	(*obj).Group = group_pango_entries
	(*obj).Profiles = profiles_entry

	return diags
}
func (o *SecurityPolicyResourceRulesProfileSettingProfilesObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **security.ProfileSettingProfiles, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	dataFiltering_pango_entries := make([]string, 0)
	diags.Append(o.DataFiltering.ElementsAs(ctx, &dataFiltering_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	fileBlocking_pango_entries := make([]string, 0)
	diags.Append(o.FileBlocking.ElementsAs(ctx, &fileBlocking_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	gtp_pango_entries := make([]string, 0)
	diags.Append(o.Gtp.ElementsAs(ctx, &gtp_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	sctp_pango_entries := make([]string, 0)
	diags.Append(o.Sctp.ElementsAs(ctx, &sctp_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	spyware_pango_entries := make([]string, 0)
	diags.Append(o.Spyware.ElementsAs(ctx, &spyware_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	urlFiltering_pango_entries := make([]string, 0)
	diags.Append(o.UrlFiltering.ElementsAs(ctx, &urlFiltering_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	virus_pango_entries := make([]string, 0)
	diags.Append(o.Virus.ElementsAs(ctx, &virus_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	vulnerability_pango_entries := make([]string, 0)
	diags.Append(o.Vulnerability.ElementsAs(ctx, &vulnerability_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	wildfireAnalysis_pango_entries := make([]string, 0)
	diags.Append(o.WildfireAnalysis.ElementsAs(ctx, &wildfireAnalysis_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(security.ProfileSettingProfiles)
	}
	(*obj).DataFiltering = dataFiltering_pango_entries
	(*obj).FileBlocking = fileBlocking_pango_entries
	(*obj).Gtp = gtp_pango_entries
	(*obj).Sctp = sctp_pango_entries
	(*obj).Spyware = spyware_pango_entries
	(*obj).UrlFiltering = urlFiltering_pango_entries
	(*obj).Virus = virus_pango_entries
	(*obj).Vulnerability = vulnerability_pango_entries
	(*obj).WildfireAnalysis = wildfireAnalysis_pango_entries

	return diags
}
func (o *SecurityPolicyResourceRulesQosObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **security.Qos, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var marking_entry *security.QosMarking
	if o.Marking != nil {
		if *obj != nil && (*obj).Marking != nil {
			marking_entry = (*obj).Marking
		} else {
			marking_entry = new(security.QosMarking)
		}
		// ModelOrObject: Object
		diags.Append(o.Marking.CopyToPango(ctx, append(ancestors, o), &marking_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(security.Qos)
	}
	(*obj).Marking = marking_entry

	return diags
}
func (o *SecurityPolicyResourceRulesQosMarkingObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **security.QosMarking, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var followC2sFlow_entry *security.QosMarkingFollowC2sFlow
	if o.FollowC2sFlow != nil {
		if *obj != nil && (*obj).FollowC2sFlow != nil {
			followC2sFlow_entry = (*obj).FollowC2sFlow
		} else {
			followC2sFlow_entry = new(security.QosMarkingFollowC2sFlow)
		}
		// ModelOrObject: Object
		diags.Append(o.FollowC2sFlow.CopyToPango(ctx, append(ancestors, o), &followC2sFlow_entry, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	ipDscp_value := o.IpDscp.ValueStringPointer()
	ipPrecedence_value := o.IpPrecedence.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(security.QosMarking)
	}
	(*obj).FollowC2sFlow = followC2sFlow_entry
	(*obj).IpDscp = ipDscp_value
	(*obj).IpPrecedence = ipPrecedence_value

	return diags
}
func (o *SecurityPolicyResourceRulesQosMarkingFollowC2sFlowObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **security.QosMarkingFollowC2sFlow, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(security.QosMarkingFollowC2sFlow)
	}

	return diags
}
func (o *SecurityPolicyResourceRulesTargetObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **security.Target, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var devices_tf_entries []SecurityPolicyResourceRulesTargetDevicesObject
	var devices_pango_entries []security.TargetDevices
	{
		d := o.Devices.ElementsAs(ctx, &devices_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range devices_tf_entries {
			var entry *security.TargetDevices
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			devices_pango_entries = append(devices_pango_entries, *entry)
		}
	}
	negate_value := o.Negate.ValueBoolPointer()
	tags_pango_entries := make([]string, 0)
	diags.Append(o.Tags.ElementsAs(ctx, &tags_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(security.Target)
	}
	(*obj).Devices = devices_pango_entries
	(*obj).Negate = negate_value
	(*obj).Tags = tags_pango_entries

	return diags
}
func (o *SecurityPolicyResourceRulesTargetDevicesObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **security.TargetDevices, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var vsys_tf_entries []SecurityPolicyResourceRulesTargetDevicesVsysObject
	var vsys_pango_entries []security.TargetDevicesVsys
	{
		d := o.Vsys.ElementsAs(ctx, &vsys_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range vsys_tf_entries {
			var entry *security.TargetDevicesVsys
			diags.Append(elt.CopyToPango(ctx, append(ancestors, elt), &entry, ev)...)
			if diags.HasError() {
				return diags
			}
			vsys_pango_entries = append(vsys_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(security.TargetDevices)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Vsys = vsys_pango_entries

	return diags
}
func (o *SecurityPolicyResourceRulesTargetDevicesVsysObject) CopyToPango(ctx context.Context, ancestors []Ancestor, obj **security.TargetDevicesVsys, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(security.TargetDevicesVsys)
	}
	(*obj).Name = o.Name.ValueString()

	return diags
}

func (o *SecurityPolicyResourceRulesObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *security.Entry, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var applications_list types.Set
	{
		var list_diags diag.Diagnostics
		applications_list, list_diags = types.SetValueFrom(ctx, types.StringType, obj.Application)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var destinationAddresses_list types.Set
	{
		var list_diags diag.Diagnostics
		destinationAddresses_list, list_diags = types.SetValueFrom(ctx, types.StringType, obj.Destination)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var sourceZones_list types.Set
	{
		var list_diags diag.Diagnostics
		sourceZones_list, list_diags = types.SetValueFrom(ctx, types.StringType, obj.From)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var services_list types.Set
	{
		var list_diags diag.Diagnostics
		services_list, list_diags = types.SetValueFrom(ctx, types.StringType, obj.Service)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var sourceAddresses_list types.Set
	{
		var list_diags diag.Diagnostics
		sourceAddresses_list, list_diags = types.SetValueFrom(ctx, types.StringType, obj.Source)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var sourceUsers_list types.Set
	{
		var list_diags diag.Diagnostics
		sourceUsers_list, list_diags = types.SetValueFrom(ctx, types.StringType, obj.SourceUser)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var destinationZones_list types.Set
	{
		var list_diags diag.Diagnostics
		destinationZones_list, list_diags = types.SetValueFrom(ctx, types.StringType, obj.To)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var category_list types.List
	{
		var list_diags diag.Diagnostics
		category_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Category)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var destinationHip_list types.List
	{
		var list_diags diag.Diagnostics
		destinationHip_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DestinationHip)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var sourceHip_list types.List
	{
		var list_diags diag.Diagnostics
		sourceHip_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceHip)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var sourceImei_list types.List
	{
		var list_diags diag.Diagnostics
		sourceImei_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceImei)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var sourceImsi_list types.List
	{
		var list_diags diag.Diagnostics
		sourceImsi_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceImsi)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var sourceNwSlice_list types.List
	{
		var list_diags diag.Diagnostics
		sourceNwSlice_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.SourceNwSlice)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var tag_list types.List
	{
		var list_diags diag.Diagnostics
		tag_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tag)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var profileSetting_object *SecurityPolicyResourceRulesProfileSettingObject
	if obj.ProfileSetting != nil {
		profileSetting_object = new(SecurityPolicyResourceRulesProfileSettingObject)
		diags.Append(profileSetting_object.CopyFromPango(ctx, append(ancestors, o), obj.ProfileSetting, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var qos_object *SecurityPolicyResourceRulesQosObject
	if obj.Qos != nil {
		qos_object = new(SecurityPolicyResourceRulesQosObject)
		diags.Append(qos_object.CopyFromPango(ctx, append(ancestors, o), obj.Qos, ev)...)
		if diags.HasError() {
			return diags
		}
	}
	var target_object *SecurityPolicyResourceRulesTargetObject
	if obj.Target != nil {
		target_object = new(SecurityPolicyResourceRulesTargetObject)
		diags.Append(target_object.CopyFromPango(ctx, append(ancestors, o), obj.Target, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var action_value types.String
	if obj.Action != nil {
		action_value = types.StringValue(*obj.Action)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var disableInspect_value types.Bool
	if obj.DisableInspect != nil {
		disableInspect_value = types.BoolValue(*obj.DisableInspect)
	}
	var disableServerResponseInspection_value types.Bool
	if obj.DisableServerResponseInspection != nil {
		disableServerResponseInspection_value = types.BoolValue(*obj.DisableServerResponseInspection)
	}
	var disabled_value types.Bool
	if obj.Disabled != nil {
		disabled_value = types.BoolValue(*obj.Disabled)
	}
	var groupTag_value types.String
	if obj.GroupTag != nil {
		groupTag_value = types.StringValue(*obj.GroupTag)
	}
	var icmpUnreachable_value types.Bool
	if obj.IcmpUnreachable != nil {
		icmpUnreachable_value = types.BoolValue(*obj.IcmpUnreachable)
	}
	var logEnd_value types.Bool
	if obj.LogEnd != nil {
		logEnd_value = types.BoolValue(*obj.LogEnd)
	}
	var logSetting_value types.String
	if obj.LogSetting != nil {
		logSetting_value = types.StringValue(*obj.LogSetting)
	}
	var logStart_value types.Bool
	if obj.LogStart != nil {
		logStart_value = types.BoolValue(*obj.LogStart)
	}
	var negateDestination_value types.Bool
	if obj.NegateDestination != nil {
		negateDestination_value = types.BoolValue(*obj.NegateDestination)
	}
	var negateSource_value types.Bool
	if obj.NegateSource != nil {
		negateSource_value = types.BoolValue(*obj.NegateSource)
	}
	var ruleType_value types.String
	if obj.RuleType != nil {
		ruleType_value = types.StringValue(*obj.RuleType)
	}
	var schedule_value types.String
	if obj.Schedule != nil {
		schedule_value = types.StringValue(*obj.Schedule)
	}
	o.Name = types.StringValue(obj.Name)
	o.Action = action_value
	o.Applications = applications_list
	o.Category = category_list
	o.Description = description_value
	o.DestinationAddresses = destinationAddresses_list
	o.DestinationHip = destinationHip_list
	o.DisableInspect = disableInspect_value
	o.DisableServerResponseInspection = disableServerResponseInspection_value
	o.Disabled = disabled_value
	o.SourceZones = sourceZones_list
	o.GroupTag = groupTag_value
	o.IcmpUnreachable = icmpUnreachable_value
	o.LogEnd = logEnd_value
	o.LogSetting = logSetting_value
	o.LogStart = logStart_value
	o.NegateDestination = negateDestination_value
	o.NegateSource = negateSource_value
	o.ProfileSetting = profileSetting_object
	o.Qos = qos_object
	o.RuleType = ruleType_value
	o.Schedule = schedule_value
	o.Services = services_list
	o.SourceAddresses = sourceAddresses_list
	o.SourceHip = sourceHip_list
	o.SourceImei = sourceImei_list
	o.SourceImsi = sourceImsi_list
	o.SourceNwSlice = sourceNwSlice_list
	o.SourceUsers = sourceUsers_list
	o.Tag = tag_list
	o.Target = target_object
	o.DestinationZones = destinationZones_list

	return diags
}

func (o *SecurityPolicyResourceRulesProfileSettingObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *security.ProfileSetting, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var group_list types.List
	{
		var list_diags diag.Diagnostics
		group_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Group)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var profiles_object *SecurityPolicyResourceRulesProfileSettingProfilesObject
	if obj.Profiles != nil {
		profiles_object = new(SecurityPolicyResourceRulesProfileSettingProfilesObject)
		diags.Append(profiles_object.CopyFromPango(ctx, append(ancestors, o), obj.Profiles, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Group = group_list
	o.Profiles = profiles_object

	return diags
}

func (o *SecurityPolicyResourceRulesProfileSettingProfilesObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *security.ProfileSettingProfiles, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var dataFiltering_list types.List
	{
		var list_diags diag.Diagnostics
		dataFiltering_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.DataFiltering)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var fileBlocking_list types.List
	{
		var list_diags diag.Diagnostics
		fileBlocking_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.FileBlocking)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var gtp_list types.List
	{
		var list_diags diag.Diagnostics
		gtp_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Gtp)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var sctp_list types.List
	{
		var list_diags diag.Diagnostics
		sctp_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Sctp)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var spyware_list types.List
	{
		var list_diags diag.Diagnostics
		spyware_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Spyware)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var urlFiltering_list types.List
	{
		var list_diags diag.Diagnostics
		urlFiltering_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.UrlFiltering)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var virus_list types.List
	{
		var list_diags diag.Diagnostics
		virus_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Virus)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var vulnerability_list types.List
	{
		var list_diags diag.Diagnostics
		vulnerability_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Vulnerability)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}
	var wildfireAnalysis_list types.List
	{
		var list_diags diag.Diagnostics
		wildfireAnalysis_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.WildfireAnalysis)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}

	o.DataFiltering = dataFiltering_list
	o.FileBlocking = fileBlocking_list
	o.Gtp = gtp_list
	o.Sctp = sctp_list
	o.Spyware = spyware_list
	o.UrlFiltering = urlFiltering_list
	o.Virus = virus_list
	o.Vulnerability = vulnerability_list
	o.WildfireAnalysis = wildfireAnalysis_list

	return diags
}

func (o *SecurityPolicyResourceRulesQosObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *security.Qos, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var marking_object *SecurityPolicyResourceRulesQosMarkingObject
	if obj.Marking != nil {
		marking_object = new(SecurityPolicyResourceRulesQosMarkingObject)
		diags.Append(marking_object.CopyFromPango(ctx, append(ancestors, o), obj.Marking, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Marking = marking_object

	return diags
}

func (o *SecurityPolicyResourceRulesQosMarkingObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *security.QosMarking, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var followC2sFlow_object *SecurityPolicyResourceRulesQosMarkingFollowC2sFlowObject
	if obj.FollowC2sFlow != nil {
		followC2sFlow_object = new(SecurityPolicyResourceRulesQosMarkingFollowC2sFlowObject)
		diags.Append(followC2sFlow_object.CopyFromPango(ctx, append(ancestors, o), obj.FollowC2sFlow, ev)...)
		if diags.HasError() {
			return diags
		}
	}

	var ipDscp_value types.String
	if obj.IpDscp != nil {
		ipDscp_value = types.StringValue(*obj.IpDscp)
	}
	var ipPrecedence_value types.String
	if obj.IpPrecedence != nil {
		ipPrecedence_value = types.StringValue(*obj.IpPrecedence)
	}
	o.FollowC2sFlow = followC2sFlow_object
	o.IpDscp = ipDscp_value
	o.IpPrecedence = ipPrecedence_value

	return diags
}

func (o *SecurityPolicyResourceRulesQosMarkingFollowC2sFlowObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *security.QosMarkingFollowC2sFlow, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *SecurityPolicyResourceRulesTargetObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *security.Target, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var devices_list types.List
	{
		var devices_tf_entries []SecurityPolicyResourceRulesTargetDevicesObject
		for _, elt := range obj.Devices {
			entry := SecurityPolicyResourceRulesTargetDevicesObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			devices_tf_entries = append(devices_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("devices")
		devices_list, list_diags = types.ListValueFrom(ctx, schemaType, devices_tf_entries)
		diags.Append(list_diags...)
	}
	var tags_list types.List
	{
		var list_diags diag.Diagnostics
		tags_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Tags)
		diags.Append(list_diags...)
		if diags.HasError() {
			return diags
		}
	}

	var negate_value types.Bool
	if obj.Negate != nil {
		negate_value = types.BoolValue(*obj.Negate)
	}
	o.Devices = devices_list
	o.Negate = negate_value
	o.Tags = tags_list

	return diags
}

func (o *SecurityPolicyResourceRulesTargetDevicesObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *security.TargetDevices, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	var vsys_list types.List
	{
		var vsys_tf_entries []SecurityPolicyResourceRulesTargetDevicesVsysObject
		for _, elt := range obj.Vsys {
			entry := SecurityPolicyResourceRulesTargetDevicesVsysObject{
				Name: types.StringValue(elt.Name),
			}
			diags.Append(entry.CopyFromPango(ctx, append(ancestors, entry), &elt, ev)...)
			if diags.HasError() {
				return diags
			}
			vsys_tf_entries = append(vsys_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("vsys")
		vsys_list, list_diags = types.ListValueFrom(ctx, schemaType, vsys_tf_entries)
		diags.Append(list_diags...)
	}

	o.Name = types.StringValue(obj.Name)
	o.Vsys = vsys_list

	return diags
}

func (o *SecurityPolicyResourceRulesTargetDevicesVsysObject) CopyFromPango(ctx context.Context, ancestors []Ancestor, obj *security.TargetDevicesVsys, ev *EncryptedValuesManager) diag.Diagnostics {
	var diags diag.Diagnostics
	o.Name = types.StringValue(obj.Name)

	return diags
}

func (o *SecurityPolicyResourceModel) resourceXpathParentComponents() ([]string, error) {
	var components []string
	return components, nil
}

func (r *SecurityPolicyResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {

	var state SecurityPolicyResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_security_policy_resource",
		"function":      "Create",
	})

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location security.Location

	{
		var terraformLocation SecurityPolicyLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &security.SharedLocation{}
			var innerLocation SecurityPolicySharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Shared.Rulebase = innerLocation.Rulebase.ValueString()
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &security.VsysLocation{}
			var innerLocation SecurityPolicyVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &security.DeviceGroupLocation{}
			var innerLocation SecurityPolicyDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
			location.DeviceGroup.Rulebase = innerLocation.Rulebase.ValueString()
		}
	}

	var elements []SecurityPolicyResourceRulesObject
	resp.Diagnostics.Append(state.Rules.ElementsAs(ctx, &elements, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	entries := make([]*security.Entry, len(elements))
	for idx, elt := range elements {
		var entry *security.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, nil, &entry, ev)...)
		if resp.Diagnostics.HasError() {
			return
		}
		entries[idx] = entry
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	processed, err := r.manager.CreateMany(ctx, location, components, entries, sdkmanager.Exhaustive, movement.PositionFirst{})
	if err != nil {
		resp.Diagnostics.AddError("Error during CreateMany() call", err.Error())
		return
	}
	objects := make([]SecurityPolicyResourceRulesObject, len(processed))
	for idx, elt := range processed {
		var object SecurityPolicyResourceRulesObject
		copy_diags := object.CopyFromPango(ctx, nil, elt, ev)
		resp.Diagnostics.Append(copy_diags...)
		if resp.Diagnostics.HasError() {
			return
		}
		objects[idx] = object
	}

	var list_diags diag.Diagnostics
	state.Rules, list_diags = types.ListValueFrom(ctx, state.getTypeFor("rules"), objects)
	resp.Diagnostics.Append(list_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (o *SecurityPolicyResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var state SecurityPolicyResourceModel

	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_security_policy",
		"function":      "Create",
	})

	encryptedValues, diags := req.Private.GetKey(ctx, "encrypted_values")
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev, err := NewEncryptedValuesManager(encryptedValues, true)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location security.Location

	{
		var terraformLocation SecurityPolicyLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &security.SharedLocation{}
			var innerLocation SecurityPolicySharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Shared.Rulebase = innerLocation.Rulebase.ValueString()
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &security.VsysLocation{}
			var innerLocation SecurityPolicyVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &security.DeviceGroupLocation{}
			var innerLocation SecurityPolicyDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
			location.DeviceGroup.Rulebase = innerLocation.Rulebase.ValueString()
		}
	}

	var elements []SecurityPolicyResourceRulesObject
	resp.Diagnostics.Append(state.Rules.ElementsAs(ctx, &elements, false)...)
	if resp.Diagnostics.HasError() || len(elements) == 0 {
		return
	}

	entries := make([]*security.Entry, 0, len(elements))
	for _, elt := range elements {
		var entry *security.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, nil, &entry, ev)...)
		if resp.Diagnostics.HasError() {
			return
		}
		entries = append(entries, entry)
	}

	// true

	position := movement.PositionFirst{}
	readEntries, _, err := o.manager.ReadMany(ctx, location, entries, sdkmanager.Exhaustive, position)
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Failed to read entries from the server", err.Error())
		}
		return
	}

	var objects []SecurityPolicyResourceRulesObject
	for _, elt := range readEntries {
		var object SecurityPolicyResourceRulesObject
		err := object.CopyFromPango(ctx, nil, elt, ev)
		resp.Diagnostics.Append(err...)
		if resp.Diagnostics.HasError() {
			return
		}
		objects = append(objects, object)
	}

	var list_diags diag.Diagnostics
	state.Rules, list_diags = types.ListValueFrom(ctx, state.getTypeFor("rules"), objects)
	resp.Diagnostics.Append(list_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *SecurityPolicyResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var state, plan SecurityPolicyResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_security_policy_resource",
		"function":      "Create",
	})

	encryptedValues, diags := req.Private.GetKey(ctx, "encrypted_values")
	resp.Diagnostics.Append(diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	var location security.Location

	{
		var terraformLocation SecurityPolicyLocation
		resp.Diagnostics.Append(plan.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &security.SharedLocation{}
			var innerLocation SecurityPolicySharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Shared.Rulebase = innerLocation.Rulebase.ValueString()
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &security.VsysLocation{}
			var innerLocation SecurityPolicyVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &security.DeviceGroupLocation{}
			var innerLocation SecurityPolicyDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
			location.DeviceGroup.Rulebase = innerLocation.Rulebase.ValueString()
		}
	}

	var elements []SecurityPolicyResourceRulesObject
	resp.Diagnostics.Append(state.Rules.ElementsAs(ctx, &elements, false)...)
	if resp.Diagnostics.HasError() {
		return
	}
	stateEntries := make([]*security.Entry, len(elements))
	for idx, elt := range elements {
		var entry *security.Entry
		resp.Diagnostics.Append(elt.CopyToPango(ctx, nil, &entry, ev)...)
		if resp.Diagnostics.HasError() {
			return
		}
		stateEntries[idx] = entry
	}

	position := movement.PositionFirst{}

	existing, _, err := r.manager.ReadMany(ctx, location, stateEntries, sdkmanager.Exhaustive, position)
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error while reading entries from the server", err.Error())
		return
	}

	existingEntriesByName := make(map[string]*security.Entry, len(existing))
	for _, elt := range existing {
		existingEntriesByName[elt.Name] = elt
	}

	resp.Diagnostics.Append(plan.Rules.ElementsAs(ctx, &elements, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	planEntries := make([]*security.Entry, len(elements))
	for idx, elt := range elements {
		entry, _ := existingEntriesByName[elt.Name.ValueString()]
		resp.Diagnostics.Append(elt.CopyToPango(ctx, nil, &entry, ev)...)
		if resp.Diagnostics.HasError() {
			return
		}
		planEntries[idx] = entry
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}

	processed, err := r.manager.UpdateMany(ctx, location, components, stateEntries, planEntries, sdkmanager.Exhaustive, position)
	if err != nil {
		resp.Diagnostics.AddError("Failed to udpate entries", err.Error())
	}

	objects := make([]*SecurityPolicyResourceRulesObject, len(processed))
	for idx, elt := range processed {
		var object SecurityPolicyResourceRulesObject
		copy_diags := object.CopyFromPango(ctx, nil, elt, ev)
		resp.Diagnostics.Append(copy_diags...)
		if resp.Diagnostics.HasError() {
			return
		}
		objects[idx] = &object
	}

	var list_diags diag.Diagnostics
	plan.Rules, list_diags = types.ListValueFrom(ctx, state.getTypeFor("rules"), objects)
	resp.Diagnostics.Append(list_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	payload, err := json.Marshal(ev)
	if err != nil {
		resp.Diagnostics.AddError("Failed to marshal encrypted values state", err.Error())
		return
	}
	resp.Private.SetKey(ctx, "encrypted_values", payload)

	resp.Diagnostics.Append(resp.State.Set(ctx, &plan)...)

}
func (r *SecurityPolicyResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state SecurityPolicyResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_security_policy_resource",
		"function":      "Delete",
	})
	var elements []SecurityPolicyResourceRulesObject
	resp.Diagnostics.Append(state.Rules.ElementsAs(ctx, &elements, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location security.Location

	{
		var terraformLocation SecurityPolicyLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &security.SharedLocation{}
			var innerLocation SecurityPolicySharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Shared.Rulebase = innerLocation.Rulebase.ValueString()
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &security.VsysLocation{}
			var innerLocation SecurityPolicyVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.DeviceGroup.IsNull() {
			location.DeviceGroup = &security.DeviceGroupLocation{}
			var innerLocation SecurityPolicyDeviceGroupLocation
			resp.Diagnostics.Append(terraformLocation.DeviceGroup.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.DeviceGroup.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.DeviceGroup.DeviceGroup = innerLocation.Name.ValueString()
			location.DeviceGroup.Rulebase = innerLocation.Rulebase.ValueString()
		}
	}

	var names []string
	for _, elt := range elements {
		names = append(names, elt.Name.ValueString())
	}

	components, err := state.resourceXpathParentComponents()
	if err != nil {
		resp.Diagnostics.AddError("Error creating resource xpath", err.Error())
		return
	}
	err = r.manager.Delete(ctx, location, components, names, sdkmanager.Exhaustive)
	if err != nil {
		resp.Diagnostics.AddError("error while deleting entries", err.Error())
		return
	}

}

type SecurityPolicyImportState struct {
	Location types.Object `json:"location"`
	Names    types.List   `json:"names"`
}

func (o SecurityPolicyImportState) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Location *SecurityPolicyLocation `json:"location"`
		Names    []string                `json:"names"`
	}
	var location_object *SecurityPolicyLocation
	{
		diags := o.Location.As(context.TODO(), &location_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal location into JSON document", diags.Errors())
		}
	}
	var names_list []string
	{
		diags := o.Names.ElementsAs(context.TODO(), &names_list, false)
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal names into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Location: location_object,
		Names:    names_list,
	}

	return json.Marshal(obj)
}

func (o *SecurityPolicyImportState) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Location *SecurityPolicyLocation `json:"location"`
		Names    []string                `json:"names"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var location_object types.Object
	{
		var diags_tmp diag.Diagnostics
		location_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Location.AttributeTypes(), shadow.Location)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into location", diags_tmp.Errors())
		}
	}
	var names_list types.List
	{
		var diags_tmp diag.Diagnostics
		names_list, diags_tmp = types.ListValueFrom(context.TODO(), types.StringType, shadow.Names)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into names", diags_tmp.Errors())
		}
	}
	o.Location = location_object
	o.Names = names_list

	return nil
}

func SecurityPolicyImportStateCreator(ctx context.Context, resource types.Object) ([]byte, error) {
	attrs := resource.Attributes()
	if attrs == nil {
		return nil, fmt.Errorf("Object has no attributes")
	}

	locationAttr, ok := attrs["location"]
	if !ok {
		return nil, fmt.Errorf("location attribute missing")
	}

	var location types.Object
	switch value := locationAttr.(type) {
	case types.Object:
		location = value
	default:
		return nil, fmt.Errorf("location attribute expected to be an object")
	}
	itemsAttr, ok := attrs["rules"]
	if !ok {
		return nil, fmt.Errorf("rules attribute missing")
	}

	var items []*SecurityPolicyResourceRulesObject
	switch value := itemsAttr.(type) {
	case types.List:
		diags := value.ElementsAs(ctx, &items, false)
		if diags.HasError() {
			return nil, fmt.Errorf("Invalid rules attribute element type, expected list of valid objects")
		}
	default:
		return nil, fmt.Errorf("Invalid names attribute type, expected list of strings")
	}

	var names []string
	for _, elt := range items {
		names = append(names, elt.Name.ValueString())
	}

	var namesObject types.List
	namesObject, diags_tmp := types.ListValueFrom(ctx, types.StringType, names)
	if diags_tmp.HasError() {
		return nil, NewDiagnosticsError("Failed to generate import ID", diags_tmp.Errors())
	}

	importStruct := SecurityPolicyImportState{
		Location: location,
		Names:    namesObject,
	}

	return json.Marshal(importStruct)
}

func (r *SecurityPolicyResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	var obj SecurityPolicyImportState
	data, err := base64.StdEncoding.DecodeString(req.ID)
	if err != nil {
		resp.Diagnostics.AddError("Failed to decode Import ID", err.Error())
		return
	}

	var encryptedValues []byte
	ev, err := NewEncryptedValuesManager(encryptedValues, false)
	if err != nil {
		resp.Diagnostics.AddError("Failed to read encrypted values from private state", err.Error())
		return
	}

	err = json.Unmarshal(data, &obj)
	if err != nil {
		var diagsErr *DiagnosticsError
		if errors.As(err, &diagsErr) {
			resp.Diagnostics.Append(diagsErr.Diagnostics()...)
		} else {
			resp.Diagnostics.AddError("Failed to unmarshal Import ID", err.Error())
		}
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("location"), obj.Location)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var names []*SecurityPolicyResourceRulesObject
	var objectNames []string
	resp.Diagnostics.Append(obj.Names.ElementsAs(ctx, &objectNames, false)...)
	if resp.Diagnostics.HasError() {
		return
	}
	for _, elt := range objectNames {
		object := &SecurityPolicyResourceRulesObject{}
		resp.Diagnostics.Append(object.CopyFromPango(ctx, nil, &security.Entry{}, ev)...)
		if resp.Diagnostics.HasError() {
			return
		}
		object.Name = types.StringValue(elt)
		names = append(names, object)
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("rules"), names)...)
}

type SecurityPolicySharedLocation struct {
	Rulebase types.String `tfsdk:"rulebase"`
}
type SecurityPolicyVsysLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
	Name       types.String `tfsdk:"name"`
}
type SecurityPolicyDeviceGroupLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	Rulebase       types.String `tfsdk:"rulebase"`
}
type SecurityPolicyLocation struct {
	Shared      types.Object `tfsdk:"shared"`
	Vsys        types.Object `tfsdk:"vsys"`
	DeviceGroup types.Object `tfsdk:"device_group"`
}

func SecurityPolicyLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"shared": rsschema.SingleNestedAttribute{
				Description: "Located in a shared rulebase",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"rulebase": rsschema.StringAttribute{
						Description: "Rulebase name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("pre-rulebase"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("shared"),
						path.MatchRelative().AtParent().AtName("vsys"),
						path.MatchRelative().AtParent().AtName("device_group"),
					}...),
				},
			},
			"vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific vsys.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The vsys name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"device_group": rsschema.SingleNestedAttribute{
				Description: "Located in a specific device group.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "The panorama device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The device group.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"rulebase": rsschema.StringAttribute{
						Description: "The rulebase.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("pre-rulebase"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o SecurityPolicySharedLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Rulebase *string `json:"rulebase,omitempty"`
	}

	obj := shadow{
		Rulebase: o.Rulebase.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *SecurityPolicySharedLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Rulebase *string `json:"rulebase,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.Rulebase = types.StringPointerValue(shadow.Rulebase)

	return nil
}
func (o SecurityPolicyVsysLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
		Name       *string `json:"name,omitempty"`
	}

	obj := shadow{
		NgfwDevice: o.NgfwDevice.ValueStringPointer(),
		Name:       o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *SecurityPolicyVsysLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
		Name       *string `json:"name,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o SecurityPolicyDeviceGroupLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		Rulebase       *string `json:"rulebase,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
		Rulebase:       o.Rulebase.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *SecurityPolicyDeviceGroupLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		Rulebase       *string `json:"rulebase,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)
	o.Rulebase = types.StringPointerValue(shadow.Rulebase)

	return nil
}
func (o SecurityPolicyLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Shared      *SecurityPolicySharedLocation      `json:"shared,omitempty"`
		Vsys        *SecurityPolicyVsysLocation        `json:"vsys,omitempty"`
		DeviceGroup *SecurityPolicyDeviceGroupLocation `json:"device_group,omitempty"`
	}
	var shared_object *SecurityPolicySharedLocation
	{
		diags := o.Shared.As(context.TODO(), &shared_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal shared into JSON document", diags.Errors())
		}
	}
	var vsys_object *SecurityPolicyVsysLocation
	{
		diags := o.Vsys.As(context.TODO(), &vsys_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal vsys into JSON document", diags.Errors())
		}
	}
	var deviceGroup_object *SecurityPolicyDeviceGroupLocation
	{
		diags := o.DeviceGroup.As(context.TODO(), &deviceGroup_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal device_group into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Shared:      shared_object,
		Vsys:        vsys_object,
		DeviceGroup: deviceGroup_object,
	}

	return json.Marshal(obj)
}

func (o *SecurityPolicyLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Shared      *SecurityPolicySharedLocation      `json:"shared,omitempty"`
		Vsys        *SecurityPolicyVsysLocation        `json:"vsys,omitempty"`
		DeviceGroup *SecurityPolicyDeviceGroupLocation `json:"device_group,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var shared_object types.Object
	{
		var diags_tmp diag.Diagnostics
		shared_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Shared.AttributeTypes(), shadow.Shared)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into shared", diags_tmp.Errors())
		}
	}
	var vsys_object types.Object
	{
		var diags_tmp diag.Diagnostics
		vsys_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Vsys.AttributeTypes(), shadow.Vsys)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into vsys", diags_tmp.Errors())
		}
	}
	var deviceGroup_object types.Object
	{
		var diags_tmp diag.Diagnostics
		deviceGroup_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.DeviceGroup.AttributeTypes(), shadow.DeviceGroup)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into device_group", diags_tmp.Errors())
		}
	}
	o.Shared = shared_object
	o.Vsys = vsys_object
	o.DeviceGroup = deviceGroup_object

	return nil
}

func (o *SecurityPolicySharedLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"rulebase": types.StringType,
	}
}
func (o *SecurityPolicyVsysLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"ngfw_device": types.StringType,
		"name":        types.StringType,
	}
}
func (o *SecurityPolicyDeviceGroupLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
		"rulebase":        types.StringType,
	}
}
func (o *SecurityPolicyLocation) AttributeTypes() map[string]attr.Type {
	var sharedObj SecurityPolicySharedLocation
	var vsysObj SecurityPolicyVsysLocation
	var deviceGroupObj SecurityPolicyDeviceGroupLocation
	return map[string]attr.Type{
		"shared": types.ObjectType{
			AttrTypes: sharedObj.AttributeTypes(),
		},
		"vsys": types.ObjectType{
			AttrTypes: vsysObj.AttributeTypes(),
		},
		"device_group": types.ObjectType{
			AttrTypes: deviceGroupObj.AttributeTypes(),
		},
	}
}
