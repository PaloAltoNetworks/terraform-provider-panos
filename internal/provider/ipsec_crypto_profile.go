package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/objects/profiles/ipseccrypto"

	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &IpsecCryptoProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &IpsecCryptoProfileDataSource{}
)

func NewIpsecCryptoProfileDataSource() datasource.DataSource {
	return &IpsecCryptoProfileDataSource{}
}

type IpsecCryptoProfileDataSource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*ipseccrypto.Entry, ipseccrypto.Location, *ipseccrypto.Service]
}

type IpsecCryptoProfileDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type IpsecCryptoProfileDataSourceModel struct {
	Location IpsecCryptoProfileLocation                  `tfsdk:"location"`
	Name     types.String                                `tfsdk:"name"`
	DhGroup  types.String                                `tfsdk:"dh_group"`
	Lifesize *IpsecCryptoProfileDataSourceLifesizeObject `tfsdk:"lifesize"`
	Lifetime *IpsecCryptoProfileDataSourceLifetimeObject `tfsdk:"lifetime"`
	Ah       *IpsecCryptoProfileDataSourceAhObject       `tfsdk:"ah"`
	Esp      *IpsecCryptoProfileDataSourceEspObject      `tfsdk:"esp"`
}
type IpsecCryptoProfileDataSourceLifesizeObject struct {
	Gb types.Int64 `tfsdk:"gb"`
	Kb types.Int64 `tfsdk:"kb"`
	Mb types.Int64 `tfsdk:"mb"`
	Tb types.Int64 `tfsdk:"tb"`
}
type IpsecCryptoProfileDataSourceLifetimeObject struct {
	Hours   types.Int64 `tfsdk:"hours"`
	Minutes types.Int64 `tfsdk:"minutes"`
	Seconds types.Int64 `tfsdk:"seconds"`
	Days    types.Int64 `tfsdk:"days"`
}
type IpsecCryptoProfileDataSourceAhObject struct {
	Authentication types.List `tfsdk:"authentication"`
}
type IpsecCryptoProfileDataSourceEspObject struct {
	Authentication types.List `tfsdk:"authentication"`
	Encryption     types.List `tfsdk:"encryption"`
}

func (o *IpsecCryptoProfileDataSourceModel) CopyToPango(ctx context.Context, obj **ipseccrypto.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	dhGroup_value := o.DhGroup.ValueStringPointer()
	var lifesize_entry *ipseccrypto.Lifesize
	if o.Lifesize != nil {
		if *obj != nil && (*obj).Lifesize != nil {
			lifesize_entry = (*obj).Lifesize
		} else {
			lifesize_entry = new(ipseccrypto.Lifesize)
		}

		diags.Append(o.Lifesize.CopyToPango(ctx, &lifesize_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var lifetime_entry *ipseccrypto.Lifetime
	if o.Lifetime != nil {
		if *obj != nil && (*obj).Lifetime != nil {
			lifetime_entry = (*obj).Lifetime
		} else {
			lifetime_entry = new(ipseccrypto.Lifetime)
		}

		diags.Append(o.Lifetime.CopyToPango(ctx, &lifetime_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var ah_entry *ipseccrypto.Ah
	if o.Ah != nil {
		if *obj != nil && (*obj).Ah != nil {
			ah_entry = (*obj).Ah
		} else {
			ah_entry = new(ipseccrypto.Ah)
		}

		diags.Append(o.Ah.CopyToPango(ctx, &ah_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var esp_entry *ipseccrypto.Esp
	if o.Esp != nil {
		if *obj != nil && (*obj).Esp != nil {
			esp_entry = (*obj).Esp
		} else {
			esp_entry = new(ipseccrypto.Esp)
		}

		diags.Append(o.Esp.CopyToPango(ctx, &esp_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ipseccrypto.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).DhGroup = dhGroup_value
	(*obj).Lifesize = lifesize_entry
	(*obj).Lifetime = lifetime_entry
	(*obj).Ah = ah_entry
	(*obj).Esp = esp_entry

	return diags
}
func (o *IpsecCryptoProfileDataSourceLifesizeObject) CopyToPango(ctx context.Context, obj **ipseccrypto.Lifesize, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	gb_value := o.Gb.ValueInt64Pointer()
	kb_value := o.Kb.ValueInt64Pointer()
	mb_value := o.Mb.ValueInt64Pointer()
	tb_value := o.Tb.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(ipseccrypto.Lifesize)
	}
	(*obj).Gb = gb_value
	(*obj).Kb = kb_value
	(*obj).Mb = mb_value
	(*obj).Tb = tb_value

	return diags
}
func (o *IpsecCryptoProfileDataSourceLifetimeObject) CopyToPango(ctx context.Context, obj **ipseccrypto.Lifetime, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	days_value := o.Days.ValueInt64Pointer()
	hours_value := o.Hours.ValueInt64Pointer()
	minutes_value := o.Minutes.ValueInt64Pointer()
	seconds_value := o.Seconds.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(ipseccrypto.Lifetime)
	}
	(*obj).Days = days_value
	(*obj).Hours = hours_value
	(*obj).Minutes = minutes_value
	(*obj).Seconds = seconds_value

	return diags
}
func (o *IpsecCryptoProfileDataSourceAhObject) CopyToPango(ctx context.Context, obj **ipseccrypto.Ah, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	authentication_pango_entries := make([]string, 0)
	diags.Append(o.Authentication.ElementsAs(ctx, &authentication_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(ipseccrypto.Ah)
	}
	(*obj).Authentication = authentication_pango_entries

	return diags
}
func (o *IpsecCryptoProfileDataSourceEspObject) CopyToPango(ctx context.Context, obj **ipseccrypto.Esp, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	authentication_pango_entries := make([]string, 0)
	diags.Append(o.Authentication.ElementsAs(ctx, &authentication_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	encryption_pango_entries := make([]string, 0)
	diags.Append(o.Encryption.ElementsAs(ctx, &encryption_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(ipseccrypto.Esp)
	}
	(*obj).Authentication = authentication_pango_entries
	(*obj).Encryption = encryption_pango_entries

	return diags
}

func (o *IpsecCryptoProfileDataSourceModel) CopyFromPango(ctx context.Context, obj *ipseccrypto.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var lifesize_object *IpsecCryptoProfileDataSourceLifesizeObject
	if obj.Lifesize != nil {
		lifesize_object = new(IpsecCryptoProfileDataSourceLifesizeObject)

		diags.Append(lifesize_object.CopyFromPango(ctx, obj.Lifesize, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var lifetime_object *IpsecCryptoProfileDataSourceLifetimeObject
	if obj.Lifetime != nil {
		lifetime_object = new(IpsecCryptoProfileDataSourceLifetimeObject)

		diags.Append(lifetime_object.CopyFromPango(ctx, obj.Lifetime, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var ah_object *IpsecCryptoProfileDataSourceAhObject
	if obj.Ah != nil {
		ah_object = new(IpsecCryptoProfileDataSourceAhObject)

		diags.Append(ah_object.CopyFromPango(ctx, obj.Ah, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var esp_object *IpsecCryptoProfileDataSourceEspObject
	if obj.Esp != nil {
		esp_object = new(IpsecCryptoProfileDataSourceEspObject)

		diags.Append(esp_object.CopyFromPango(ctx, obj.Esp, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var dhGroup_value types.String
	if obj.DhGroup != nil {
		dhGroup_value = types.StringValue(*obj.DhGroup)
	}
	o.Name = types.StringValue(obj.Name)
	o.DhGroup = dhGroup_value
	o.Lifesize = lifesize_object
	o.Lifetime = lifetime_object
	o.Ah = ah_object
	o.Esp = esp_object

	return diags
}

func (o *IpsecCryptoProfileDataSourceLifesizeObject) CopyFromPango(ctx context.Context, obj *ipseccrypto.Lifesize, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var gb_value types.Int64
	if obj.Gb != nil {
		gb_value = types.Int64Value(*obj.Gb)
	}
	var kb_value types.Int64
	if obj.Kb != nil {
		kb_value = types.Int64Value(*obj.Kb)
	}
	var mb_value types.Int64
	if obj.Mb != nil {
		mb_value = types.Int64Value(*obj.Mb)
	}
	var tb_value types.Int64
	if obj.Tb != nil {
		tb_value = types.Int64Value(*obj.Tb)
	}
	o.Gb = gb_value
	o.Kb = kb_value
	o.Mb = mb_value
	o.Tb = tb_value

	return diags
}

func (o *IpsecCryptoProfileDataSourceLifetimeObject) CopyFromPango(ctx context.Context, obj *ipseccrypto.Lifetime, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var seconds_value types.Int64
	if obj.Seconds != nil {
		seconds_value = types.Int64Value(*obj.Seconds)
	}
	var days_value types.Int64
	if obj.Days != nil {
		days_value = types.Int64Value(*obj.Days)
	}
	var hours_value types.Int64
	if obj.Hours != nil {
		hours_value = types.Int64Value(*obj.Hours)
	}
	var minutes_value types.Int64
	if obj.Minutes != nil {
		minutes_value = types.Int64Value(*obj.Minutes)
	}
	o.Seconds = seconds_value
	o.Days = days_value
	o.Hours = hours_value
	o.Minutes = minutes_value

	return diags
}

func (o *IpsecCryptoProfileDataSourceAhObject) CopyFromPango(ctx context.Context, obj *ipseccrypto.Ah, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authentication_list types.List
	{
		var list_diags diag.Diagnostics
		authentication_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Authentication)
		diags.Append(list_diags...)
	}

	o.Authentication = authentication_list

	return diags
}

func (o *IpsecCryptoProfileDataSourceEspObject) CopyFromPango(ctx context.Context, obj *ipseccrypto.Esp, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authentication_list types.List
	{
		var list_diags diag.Diagnostics
		authentication_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Authentication)
		diags.Append(list_diags...)
	}
	var encryption_list types.List
	{
		var list_diags diag.Diagnostics
		encryption_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Encryption)
		diags.Append(list_diags...)
	}

	o.Authentication = authentication_list
	o.Encryption = encryption_list

	return diags
}

func IpsecCryptoProfileDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": IpsecCryptoProfileDataSourceLocationSchema(),

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"dh_group": dsschema.StringAttribute{
				Description: "phase-2 DH group (PFS DH group)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"lifesize": IpsecCryptoProfileDataSourceLifesizeSchema(),

			"lifetime": IpsecCryptoProfileDataSourceLifetimeSchema(),

			"ah": IpsecCryptoProfileDataSourceAhSchema(),

			"esp": IpsecCryptoProfileDataSourceEspSchema(),
		},
	}
}

func (o *IpsecCryptoProfileDataSourceModel) getTypeFor(name string) attr.Type {
	schema := IpsecCryptoProfileDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func IpsecCryptoProfileDataSourceLifesizeSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"kb": dsschema.Int64Attribute{
				Description: "specify lifesize in kilobytes(KB)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"mb": dsschema.Int64Attribute{
				Description: "specify lifesize in megabytes(MB)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tb": dsschema.Int64Attribute{
				Description: "specify lifesize in terabytes(TB)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"gb": dsschema.Int64Attribute{
				Description: "specify lifesize in gigabytes(GB)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *IpsecCryptoProfileDataSourceLifesizeObject) getTypeFor(name string) attr.Type {
	schema := IpsecCryptoProfileDataSourceLifesizeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func IpsecCryptoProfileDataSourceLifetimeSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"hours": dsschema.Int64Attribute{
				Description: "specify lifetime in hours",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"minutes": dsschema.Int64Attribute{
				Description: "specify lifetime in minutes",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"seconds": dsschema.Int64Attribute{
				Description: "specify lifetime in seconds",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"days": dsschema.Int64Attribute{
				Description: "specify lifetime in days",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *IpsecCryptoProfileDataSourceLifetimeObject) getTypeFor(name string) attr.Type {
	schema := IpsecCryptoProfileDataSourceLifetimeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func IpsecCryptoProfileDataSourceAhSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"authentication": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *IpsecCryptoProfileDataSourceAhObject) getTypeFor(name string) attr.Type {
	schema := IpsecCryptoProfileDataSourceAhSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func IpsecCryptoProfileDataSourceEspSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"authentication": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"encryption": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *IpsecCryptoProfileDataSourceEspObject) getTypeFor(name string) attr.Type {
	schema := IpsecCryptoProfileDataSourceEspSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func IpsecCryptoProfileDataSourceLocationSchema() rsschema.Attribute {
	return IpsecCryptoProfileLocationSchema()
}

// Metadata returns the data source type name.
func (d *IpsecCryptoProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ipsec_crypto_profile"
}

// Schema defines the schema for this data source.
func (d *IpsecCryptoProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = IpsecCryptoProfileDataSourceSchema()
}

// Configure prepares the struct.
func (d *IpsecCryptoProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*pango.Client)
	specifier, _, err := ipseccrypto.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	d.manager = sdkmanager.NewEntryObjectManager(d.client, ipseccrypto.NewService(d.client), specifier, ipseccrypto.SpecMatches)
}

func (o *IpsecCryptoProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state IpsecCryptoProfileDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location ipseccrypto.Location

	if savestate.Location.Ngfw != nil {
		location.Ngfw = &ipseccrypto.NgfwLocation{

			NgfwDevice: savestate.Location.Ngfw.NgfwDevice.ValueString(),
		}
	}
	if savestate.Location.Template != nil {
		location.Template = &ipseccrypto.TemplateLocation{

			PanoramaDevice: savestate.Location.Template.PanoramaDevice.ValueString(),
			Template:       savestate.Location.Template.Name.ValueString(),
			NgfwDevice:     savestate.Location.Template.NgfwDevice.ValueString(),
		}
	}
	if savestate.Location.TemplateStack != nil {
		location.TemplateStack = &ipseccrypto.TemplateStackLocation{

			PanoramaDevice: savestate.Location.TemplateStack.PanoramaDevice.ValueString(),
			TemplateStack:  savestate.Location.TemplateStack.Name.ValueString(),
			NgfwDevice:     savestate.Location.TemplateStack.NgfwDevice.ValueString(),
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_ipsec_crypto_profile_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, location, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &IpsecCryptoProfileResource{}
	_ resource.ResourceWithConfigure   = &IpsecCryptoProfileResource{}
	_ resource.ResourceWithImportState = &IpsecCryptoProfileResource{}
)

func NewIpsecCryptoProfileResource() resource.Resource {
	if _, found := resourceFuncMap["panos_ipsec_crypto_profile"]; !found {
		resourceFuncMap["panos_ipsec_crypto_profile"] = resourceFuncs{
			CreateImportId: IpsecCryptoProfileImportStateCreator,
		}
	}
	return &IpsecCryptoProfileResource{}
}

type IpsecCryptoProfileResource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*ipseccrypto.Entry, ipseccrypto.Location, *ipseccrypto.Service]
}

func IpsecCryptoProfileResourceLocationSchema() rsschema.Attribute {
	return IpsecCryptoProfileLocationSchema()
}

type IpsecCryptoProfileResourceModel struct {
	Location IpsecCryptoProfileLocation                `tfsdk:"location"`
	Name     types.String                              `tfsdk:"name"`
	Lifesize *IpsecCryptoProfileResourceLifesizeObject `tfsdk:"lifesize"`
	Lifetime *IpsecCryptoProfileResourceLifetimeObject `tfsdk:"lifetime"`
	DhGroup  types.String                              `tfsdk:"dh_group"`
	Ah       *IpsecCryptoProfileResourceAhObject       `tfsdk:"ah"`
	Esp      *IpsecCryptoProfileResourceEspObject      `tfsdk:"esp"`
}
type IpsecCryptoProfileResourceLifesizeObject struct {
	Gb types.Int64 `tfsdk:"gb"`
	Kb types.Int64 `tfsdk:"kb"`
	Mb types.Int64 `tfsdk:"mb"`
	Tb types.Int64 `tfsdk:"tb"`
}
type IpsecCryptoProfileResourceLifetimeObject struct {
	Days    types.Int64 `tfsdk:"days"`
	Hours   types.Int64 `tfsdk:"hours"`
	Minutes types.Int64 `tfsdk:"minutes"`
	Seconds types.Int64 `tfsdk:"seconds"`
}
type IpsecCryptoProfileResourceAhObject struct {
	Authentication types.List `tfsdk:"authentication"`
}
type IpsecCryptoProfileResourceEspObject struct {
	Authentication types.List `tfsdk:"authentication"`
	Encryption     types.List `tfsdk:"encryption"`
}

func (r *IpsecCryptoProfileResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ipsec_crypto_profile"
}

func (r *IpsecCryptoProfileResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func IpsecCryptoProfileResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": IpsecCryptoProfileResourceLocationSchema(),

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"dh_group": rsschema.StringAttribute{
				Description: "phase-2 DH group (PFS DH group)",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("group2"),

				Validators: []validator.String{
					stringvalidator.OneOf([]string{
						"group21",
						"group2",
						"group20",
						"group5",
						"group14",
						"group15",
						"group16",
						"group19",
						"no-pfs",
						"group1",
					}...),
				},
			},

			"lifesize": IpsecCryptoProfileResourceLifesizeSchema(),

			"lifetime": IpsecCryptoProfileResourceLifetimeSchema(),

			"ah": IpsecCryptoProfileResourceAhSchema(),

			"esp": IpsecCryptoProfileResourceEspSchema(),
		},
	}
}

func (o *IpsecCryptoProfileResourceModel) getTypeFor(name string) attr.Type {
	schema := IpsecCryptoProfileResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func IpsecCryptoProfileResourceLifesizeSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"gb": rsschema.Int64Attribute{
				Description: "specify lifesize in gigabytes(GB)",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,

				Validators: []validator.Int64{
					int64validator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("gb"),
						path.MatchRelative().AtParent().AtName("kb"),
						path.MatchRelative().AtParent().AtName("mb"),
						path.MatchRelative().AtParent().AtName("tb"),
					}...),
				},
			},

			"kb": rsschema.Int64Attribute{
				Description: "specify lifesize in kilobytes(KB)",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"mb": rsschema.Int64Attribute{
				Description: "specify lifesize in megabytes(MB)",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"tb": rsschema.Int64Attribute{
				Description: "specify lifesize in terabytes(TB)",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *IpsecCryptoProfileResourceLifesizeObject) getTypeFor(name string) attr.Type {
	schema := IpsecCryptoProfileResourceLifesizeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func IpsecCryptoProfileResourceLifetimeSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"days": rsschema.Int64Attribute{
				Description: "specify lifetime in days",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,

				Validators: []validator.Int64{
					int64validator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("days"),
						path.MatchRelative().AtParent().AtName("hours"),
						path.MatchRelative().AtParent().AtName("minutes"),
						path.MatchRelative().AtParent().AtName("seconds"),
					}...),
				},
			},

			"hours": rsschema.Int64Attribute{
				Description: "specify lifetime in hours",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"minutes": rsschema.Int64Attribute{
				Description: "specify lifetime in minutes",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"seconds": rsschema.Int64Attribute{
				Description: "specify lifetime in seconds",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *IpsecCryptoProfileResourceLifetimeObject) getTypeFor(name string) attr.Type {
	schema := IpsecCryptoProfileResourceLifetimeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func IpsecCryptoProfileResourceAhSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("ah"),
				path.MatchRelative().AtParent().AtName("esp"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{

			"authentication": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *IpsecCryptoProfileResourceAhObject) getTypeFor(name string) attr.Type {
	schema := IpsecCryptoProfileResourceAhSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func IpsecCryptoProfileResourceEspSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"authentication": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"encryption": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *IpsecCryptoProfileResourceEspObject) getTypeFor(name string) attr.Type {
	schema := IpsecCryptoProfileResourceEspSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *IpsecCryptoProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = IpsecCryptoProfileResourceSchema()
}

// </ResourceSchema>

func (r *IpsecCryptoProfileResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*pango.Client)
	specifier, _, err := ipseccrypto.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	r.manager = sdkmanager.NewEntryObjectManager(r.client, ipseccrypto.NewService(r.client), specifier, ipseccrypto.SpecMatches)
}

func (o *IpsecCryptoProfileResourceModel) CopyToPango(ctx context.Context, obj **ipseccrypto.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var lifetime_entry *ipseccrypto.Lifetime
	if o.Lifetime != nil {
		if *obj != nil && (*obj).Lifetime != nil {
			lifetime_entry = (*obj).Lifetime
		} else {
			lifetime_entry = new(ipseccrypto.Lifetime)
		}

		diags.Append(o.Lifetime.CopyToPango(ctx, &lifetime_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	dhGroup_value := o.DhGroup.ValueStringPointer()
	var lifesize_entry *ipseccrypto.Lifesize
	if o.Lifesize != nil {
		if *obj != nil && (*obj).Lifesize != nil {
			lifesize_entry = (*obj).Lifesize
		} else {
			lifesize_entry = new(ipseccrypto.Lifesize)
		}

		diags.Append(o.Lifesize.CopyToPango(ctx, &lifesize_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var ah_entry *ipseccrypto.Ah
	if o.Ah != nil {
		if *obj != nil && (*obj).Ah != nil {
			ah_entry = (*obj).Ah
		} else {
			ah_entry = new(ipseccrypto.Ah)
		}

		diags.Append(o.Ah.CopyToPango(ctx, &ah_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var esp_entry *ipseccrypto.Esp
	if o.Esp != nil {
		if *obj != nil && (*obj).Esp != nil {
			esp_entry = (*obj).Esp
		} else {
			esp_entry = new(ipseccrypto.Esp)
		}

		diags.Append(o.Esp.CopyToPango(ctx, &esp_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(ipseccrypto.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Lifetime = lifetime_entry
	(*obj).DhGroup = dhGroup_value
	(*obj).Lifesize = lifesize_entry
	(*obj).Ah = ah_entry
	(*obj).Esp = esp_entry

	return diags
}
func (o *IpsecCryptoProfileResourceLifesizeObject) CopyToPango(ctx context.Context, obj **ipseccrypto.Lifesize, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	mb_value := o.Mb.ValueInt64Pointer()
	tb_value := o.Tb.ValueInt64Pointer()
	gb_value := o.Gb.ValueInt64Pointer()
	kb_value := o.Kb.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(ipseccrypto.Lifesize)
	}
	(*obj).Mb = mb_value
	(*obj).Tb = tb_value
	(*obj).Gb = gb_value
	(*obj).Kb = kb_value

	return diags
}
func (o *IpsecCryptoProfileResourceLifetimeObject) CopyToPango(ctx context.Context, obj **ipseccrypto.Lifetime, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	days_value := o.Days.ValueInt64Pointer()
	hours_value := o.Hours.ValueInt64Pointer()
	minutes_value := o.Minutes.ValueInt64Pointer()
	seconds_value := o.Seconds.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(ipseccrypto.Lifetime)
	}
	(*obj).Days = days_value
	(*obj).Hours = hours_value
	(*obj).Minutes = minutes_value
	(*obj).Seconds = seconds_value

	return diags
}
func (o *IpsecCryptoProfileResourceAhObject) CopyToPango(ctx context.Context, obj **ipseccrypto.Ah, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	authentication_pango_entries := make([]string, 0)
	diags.Append(o.Authentication.ElementsAs(ctx, &authentication_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(ipseccrypto.Ah)
	}
	(*obj).Authentication = authentication_pango_entries

	return diags
}
func (o *IpsecCryptoProfileResourceEspObject) CopyToPango(ctx context.Context, obj **ipseccrypto.Esp, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	encryption_pango_entries := make([]string, 0)
	diags.Append(o.Encryption.ElementsAs(ctx, &encryption_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	authentication_pango_entries := make([]string, 0)
	diags.Append(o.Authentication.ElementsAs(ctx, &authentication_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(ipseccrypto.Esp)
	}
	(*obj).Encryption = encryption_pango_entries
	(*obj).Authentication = authentication_pango_entries

	return diags
}

func (o *IpsecCryptoProfileResourceModel) CopyFromPango(ctx context.Context, obj *ipseccrypto.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var lifesize_object *IpsecCryptoProfileResourceLifesizeObject
	if obj.Lifesize != nil {
		lifesize_object = new(IpsecCryptoProfileResourceLifesizeObject)

		diags.Append(lifesize_object.CopyFromPango(ctx, obj.Lifesize, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var lifetime_object *IpsecCryptoProfileResourceLifetimeObject
	if obj.Lifetime != nil {
		lifetime_object = new(IpsecCryptoProfileResourceLifetimeObject)

		diags.Append(lifetime_object.CopyFromPango(ctx, obj.Lifetime, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var ah_object *IpsecCryptoProfileResourceAhObject
	if obj.Ah != nil {
		ah_object = new(IpsecCryptoProfileResourceAhObject)

		diags.Append(ah_object.CopyFromPango(ctx, obj.Ah, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var esp_object *IpsecCryptoProfileResourceEspObject
	if obj.Esp != nil {
		esp_object = new(IpsecCryptoProfileResourceEspObject)

		diags.Append(esp_object.CopyFromPango(ctx, obj.Esp, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var dhGroup_value types.String
	if obj.DhGroup != nil {
		dhGroup_value = types.StringValue(*obj.DhGroup)
	}
	o.Name = types.StringValue(obj.Name)
	o.DhGroup = dhGroup_value
	o.Lifesize = lifesize_object
	o.Lifetime = lifetime_object
	o.Ah = ah_object
	o.Esp = esp_object

	return diags
}

func (o *IpsecCryptoProfileResourceLifesizeObject) CopyFromPango(ctx context.Context, obj *ipseccrypto.Lifesize, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var gb_value types.Int64
	if obj.Gb != nil {
		gb_value = types.Int64Value(*obj.Gb)
	}
	var kb_value types.Int64
	if obj.Kb != nil {
		kb_value = types.Int64Value(*obj.Kb)
	}
	var mb_value types.Int64
	if obj.Mb != nil {
		mb_value = types.Int64Value(*obj.Mb)
	}
	var tb_value types.Int64
	if obj.Tb != nil {
		tb_value = types.Int64Value(*obj.Tb)
	}
	o.Gb = gb_value
	o.Kb = kb_value
	o.Mb = mb_value
	o.Tb = tb_value

	return diags
}

func (o *IpsecCryptoProfileResourceLifetimeObject) CopyFromPango(ctx context.Context, obj *ipseccrypto.Lifetime, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var days_value types.Int64
	if obj.Days != nil {
		days_value = types.Int64Value(*obj.Days)
	}
	var hours_value types.Int64
	if obj.Hours != nil {
		hours_value = types.Int64Value(*obj.Hours)
	}
	var minutes_value types.Int64
	if obj.Minutes != nil {
		minutes_value = types.Int64Value(*obj.Minutes)
	}
	var seconds_value types.Int64
	if obj.Seconds != nil {
		seconds_value = types.Int64Value(*obj.Seconds)
	}
	o.Days = days_value
	o.Hours = hours_value
	o.Minutes = minutes_value
	o.Seconds = seconds_value

	return diags
}

func (o *IpsecCryptoProfileResourceAhObject) CopyFromPango(ctx context.Context, obj *ipseccrypto.Ah, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authentication_list types.List
	{
		var list_diags diag.Diagnostics
		authentication_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Authentication)
		diags.Append(list_diags...)
	}

	o.Authentication = authentication_list

	return diags
}

func (o *IpsecCryptoProfileResourceEspObject) CopyFromPango(ctx context.Context, obj *ipseccrypto.Esp, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var authentication_list types.List
	{
		var list_diags diag.Diagnostics
		authentication_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Authentication)
		diags.Append(list_diags...)
	}
	var encryption_list types.List
	{
		var list_diags diag.Diagnostics
		encryption_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Encryption)
		diags.Append(list_diags...)
	}

	o.Authentication = authentication_list
	o.Encryption = encryption_list

	return diags
}

func (r *IpsecCryptoProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state IpsecCryptoProfileResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_ipsec_crypto_profile_resource",
		"function":      "Create",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	// Determine the location.

	var location ipseccrypto.Location

	if state.Location.Ngfw != nil {
		location.Ngfw = &ipseccrypto.NgfwLocation{

			NgfwDevice: state.Location.Ngfw.NgfwDevice.ValueString(),
		}
	}
	if state.Location.Template != nil {
		location.Template = &ipseccrypto.TemplateLocation{

			PanoramaDevice: state.Location.Template.PanoramaDevice.ValueString(),
			Template:       state.Location.Template.Name.ValueString(),
			NgfwDevice:     state.Location.Template.NgfwDevice.ValueString(),
		}
	}
	if state.Location.TemplateStack != nil {
		location.TemplateStack = &ipseccrypto.TemplateStackLocation{

			PanoramaDevice: state.Location.TemplateStack.PanoramaDevice.ValueString(),
			TemplateStack:  state.Location.TemplateStack.Name.ValueString(),
			NgfwDevice:     state.Location.TemplateStack.NgfwDevice.ValueString(),
		}
	}

	if err := location.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *ipseccrypto.Entry

	resp.Diagnostics.Append(state.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.
	created, err := r.manager.Create(ctx, location, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	resp.Diagnostics.Append(state.CopyFromPango(ctx, created, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}
	state.Name = types.StringValue(created.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}

func (o *IpsecCryptoProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state IpsecCryptoProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location ipseccrypto.Location

	if savestate.Location.Ngfw != nil {
		location.Ngfw = &ipseccrypto.NgfwLocation{

			NgfwDevice: savestate.Location.Ngfw.NgfwDevice.ValueString(),
		}
	}
	if savestate.Location.Template != nil {
		location.Template = &ipseccrypto.TemplateLocation{

			Template:       savestate.Location.Template.Name.ValueString(),
			NgfwDevice:     savestate.Location.Template.NgfwDevice.ValueString(),
			PanoramaDevice: savestate.Location.Template.PanoramaDevice.ValueString(),
		}
	}
	if savestate.Location.TemplateStack != nil {
		location.TemplateStack = &ipseccrypto.TemplateStackLocation{

			PanoramaDevice: savestate.Location.TemplateStack.PanoramaDevice.ValueString(),
			TemplateStack:  savestate.Location.TemplateStack.Name.ValueString(),
			NgfwDevice:     savestate.Location.TemplateStack.NgfwDevice.ValueString(),
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_ipsec_crypto_profile_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, location, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

func (r *IpsecCryptoProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state IpsecCryptoProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location ipseccrypto.Location

	if state.Location.Ngfw != nil {
		location.Ngfw = &ipseccrypto.NgfwLocation{

			NgfwDevice: state.Location.Ngfw.NgfwDevice.ValueString(),
		}
	}
	if state.Location.Template != nil {
		location.Template = &ipseccrypto.TemplateLocation{

			PanoramaDevice: state.Location.Template.PanoramaDevice.ValueString(),
			Template:       state.Location.Template.Name.ValueString(),
			NgfwDevice:     state.Location.Template.NgfwDevice.ValueString(),
		}
	}
	if state.Location.TemplateStack != nil {
		location.TemplateStack = &ipseccrypto.TemplateStackLocation{

			PanoramaDevice: state.Location.TemplateStack.PanoramaDevice.ValueString(),
			TemplateStack:  state.Location.TemplateStack.Name.ValueString(),
			NgfwDevice:     state.Location.TemplateStack.NgfwDevice.ValueString(),
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_ipsec_crypto_profile_resource",
		"function":      "Update",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}
	obj, err := r.manager.Read(ctx, location, plan.Name.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Perform the operation.
	updated, err := r.manager.Update(ctx, location, obj, obj.Name)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	copy_diags := state.CopyFromPango(ctx, updated, nil)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

func (r *IpsecCryptoProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state IpsecCryptoProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_ipsec_crypto_profile_resource",
		"function":      "Delete",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var location ipseccrypto.Location

	if state.Location.Ngfw != nil {
		location.Ngfw = &ipseccrypto.NgfwLocation{

			NgfwDevice: state.Location.Ngfw.NgfwDevice.ValueString(),
		}
	}
	if state.Location.Template != nil {
		location.Template = &ipseccrypto.TemplateLocation{

			NgfwDevice:     state.Location.Template.NgfwDevice.ValueString(),
			PanoramaDevice: state.Location.Template.PanoramaDevice.ValueString(),
			Template:       state.Location.Template.Name.ValueString(),
		}
	}
	if state.Location.TemplateStack != nil {
		location.TemplateStack = &ipseccrypto.TemplateStackLocation{

			TemplateStack:  state.Location.TemplateStack.Name.ValueString(),
			NgfwDevice:     state.Location.TemplateStack.NgfwDevice.ValueString(),
			PanoramaDevice: state.Location.TemplateStack.PanoramaDevice.ValueString(),
		}
	}

	err := r.manager.Delete(ctx, location, []string{state.Name.ValueString()})
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}

}

type IpsecCryptoProfileImportState struct {
	Location IpsecCryptoProfileLocation `json:"location"`
	Name     string                     `json:"name"`
}

func IpsecCryptoProfileImportStateCreator(ctx context.Context, resource types.Object) ([]byte, error) {
	attrs := resource.Attributes()
	if attrs == nil {
		return nil, fmt.Errorf("Object has no attributes")
	}

	locationAttr, ok := attrs["location"]
	if !ok {
		return nil, fmt.Errorf("location attribute missing")
	}

	var location IpsecCryptoProfileLocation
	switch value := locationAttr.(type) {
	case types.Object:
		value.As(ctx, &location, basetypes.ObjectAsOptions{})
	default:
		return nil, fmt.Errorf("location attribute expected to be an object")
	}

	nameAttr, ok := attrs["name"]
	if !ok {
		return nil, fmt.Errorf("name attribute missing")
	}

	var name string
	switch value := nameAttr.(type) {
	case types.String:
		name = value.ValueString()
	default:
		return nil, fmt.Errorf("name attribute expected to be a string")
	}

	importStruct := IpsecCryptoProfileImportState{
		Location: location,
		Name:     name,
	}

	return json.Marshal(importStruct)
}

func (r *IpsecCryptoProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	var obj IpsecCryptoProfileImportState
	data, err := base64.StdEncoding.DecodeString(req.ID)
	if err != nil {
		resp.Diagnostics.AddError("Failed to decode Import ID", err.Error())
		return
	}

	err = json.Unmarshal(data, &obj)
	if err != nil {
		resp.Diagnostics.AddError("Failed to unmarshal Import ID", err.Error())
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("location"), obj.Location)...)
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("name"), obj.Name)...)

}

type IpsecCryptoProfileNgfwLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
}
type IpsecCryptoProfileTemplateLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type IpsecCryptoProfileTemplateStackLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type IpsecCryptoProfileLocation struct {
	Ngfw          *IpsecCryptoProfileNgfwLocation          `tfsdk:"ngfw"`
	Template      *IpsecCryptoProfileTemplateLocation      `tfsdk:"template"`
	TemplateStack *IpsecCryptoProfileTemplateStackLocation `tfsdk:"template_stack"`
}

func IpsecCryptoProfileLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"ngfw": rsschema.SingleNestedAttribute{
				Description: "Located in a specific NGFW device",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("ngfw"),
						path.MatchRelative().AtParent().AtName("template"),
						path.MatchRelative().AtParent().AtName("template_stack"),
					}...),
				},
			},
			"template": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Specific Panorama template",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_stack": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template stack",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Specific Panorama template stack",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o IpsecCryptoProfileNgfwLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		NgfwDevice *string `json:"ngfw_device"`
	}{
		NgfwDevice: o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *IpsecCryptoProfileNgfwLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		NgfwDevice *string `json:"ngfw_device"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o IpsecCryptoProfileTemplateLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		PanoramaDevice *string `json:"panorama_device"`
		Name           *string `json:"name"`
		NgfwDevice     *string `json:"ngfw_device"`
	}{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *IpsecCryptoProfileTemplateLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device"`
		Name           *string `json:"name"`
		NgfwDevice     *string `json:"ngfw_device"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o IpsecCryptoProfileTemplateStackLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		PanoramaDevice *string `json:"panorama_device"`
		Name           *string `json:"name"`
		NgfwDevice     *string `json:"ngfw_device"`
	}{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *IpsecCryptoProfileTemplateStackLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device"`
		Name           *string `json:"name"`
		NgfwDevice     *string `json:"ngfw_device"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o IpsecCryptoProfileLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		Ngfw          *IpsecCryptoProfileNgfwLocation          `json:"ngfw"`
		Template      *IpsecCryptoProfileTemplateLocation      `json:"template"`
		TemplateStack *IpsecCryptoProfileTemplateStackLocation `json:"template_stack"`
	}{
		Ngfw:          o.Ngfw,
		Template:      o.Template,
		TemplateStack: o.TemplateStack,
	}

	return json.Marshal(obj)
}

func (o *IpsecCryptoProfileLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Ngfw          *IpsecCryptoProfileNgfwLocation          `json:"ngfw"`
		Template      *IpsecCryptoProfileTemplateLocation      `json:"template"`
		TemplateStack *IpsecCryptoProfileTemplateStackLocation `json:"template_stack"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.Ngfw = shadow.Ngfw
	o.Template = shadow.Template
	o.TemplateStack = shadow.TemplateStack

	return nil
}
