package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/device/profiles/ldap"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &LdapProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &LdapProfileDataSource{}
)

func NewLdapProfileDataSource() datasource.DataSource {
	return &LdapProfileDataSource{}
}

type LdapProfileDataSource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*ldap.Entry, ldap.Location, *ldap.Service]
}

type LdapProfileDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type LdapProfileDataSourceModel struct {
	Location                types.Object `tfsdk:"location"`
	Name                    types.String `tfsdk:"name"`
	Base                    types.String `tfsdk:"base"`
	BindDn                  types.String `tfsdk:"bind_dn"`
	BindPassword            types.String `tfsdk:"bind_password"`
	BindTimelimit           types.Int64  `tfsdk:"bind_timelimit"`
	Disabled                types.Bool   `tfsdk:"disabled"`
	LdapType                types.String `tfsdk:"ldap_type"`
	RetryInterval           types.Int64  `tfsdk:"retry_interval"`
	Servers                 types.List   `tfsdk:"servers"`
	Ssl                     types.Bool   `tfsdk:"ssl"`
	Timelimit               types.Int64  `tfsdk:"timelimit"`
	VerifyServerCertificate types.Bool   `tfsdk:"verify_server_certificate"`
	EncryptedValues         types.Map    `tfsdk:"encrypted_values"`
}
type LdapProfileDataSourceServersObject struct {
	Name    types.String `tfsdk:"name"`
	Address types.String `tfsdk:"address"`
	Port    types.Int64  `tfsdk:"port"`
}

func (o *LdapProfileDataSourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj LdapProfileLocation

	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"name":                      types.StringType,
		"base":                      types.StringType,
		"bind_dn":                   types.StringType,
		"bind_password":             types.StringType,
		"bind_timelimit":            types.Int64Type,
		"disabled":                  types.BoolType,
		"ldap_type":                 types.StringType,
		"retry_interval":            types.Int64Type,
		"servers":                   types.ListType{},
		"ssl":                       types.BoolType,
		"timelimit":                 types.Int64Type,
		"verify_server_certificate": types.BoolType,
		"encrypted_values":          types.MapType{},
	}
}
func (o *LdapProfileDataSourceServersObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":    types.StringType,
		"address": types.StringType,
		"port":    types.Int64Type,
	}
}

func (o *LdapProfileDataSourceModel) CopyToPango(ctx context.Context, obj **ldap.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	base_value := o.Base.ValueStringPointer()
	bindDn_value := o.BindDn.ValueStringPointer()
	(*encrypted)["solo | plaintext |  | bind_password"] = o.BindPassword
	bindPassword_value := o.BindPassword.ValueStringPointer()
	bindTimelimit_value := o.BindTimelimit.ValueInt64Pointer()
	disabled_value := o.Disabled.ValueBoolPointer()
	ldapType_value := o.LdapType.ValueStringPointer()
	retryInterval_value := o.RetryInterval.ValueInt64Pointer()
	var servers_tf_entries []LdapProfileDataSourceServersObject
	var servers_pango_entries []ldap.Server
	{
		d := o.Servers.ElementsAs(ctx, &servers_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range servers_tf_entries {
			var entry *ldap.Server
			diags.Append(elt.CopyToPango(ctx, &entry, encrypted)...)
			if diags.HasError() {
				return diags
			}
			servers_pango_entries = append(servers_pango_entries, *entry)
		}
	}
	ssl_value := o.Ssl.ValueBoolPointer()
	timelimit_value := o.Timelimit.ValueInt64Pointer()
	verifyServerCertificate_value := o.VerifyServerCertificate.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(ldap.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Base = base_value
	(*obj).BindDn = bindDn_value
	(*obj).BindPassword = bindPassword_value
	(*obj).BindTimelimit = bindTimelimit_value
	(*obj).Disabled = disabled_value
	(*obj).LdapType = ldapType_value
	(*obj).RetryInterval = retryInterval_value
	(*obj).Server = servers_pango_entries
	(*obj).Ssl = ssl_value
	(*obj).Timelimit = timelimit_value
	(*obj).VerifyServerCertificate = verifyServerCertificate_value

	return diags
}
func (o *LdapProfileDataSourceServersObject) CopyToPango(ctx context.Context, obj **ldap.Server, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	address_value := o.Address.ValueStringPointer()
	port_value := o.Port.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(ldap.Server)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Address = address_value
	(*obj).Port = port_value

	return diags
}

func (o *LdapProfileDataSourceModel) CopyFromPango(ctx context.Context, obj *ldap.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var servers_list types.List
	{
		var servers_tf_entries []LdapProfileDataSourceServersObject
		for _, elt := range obj.Server {
			var entry LdapProfileDataSourceServersObject
			entry_diags := entry.CopyFromPango(ctx, &elt, encrypted)
			diags.Append(entry_diags...)
			servers_tf_entries = append(servers_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("servers")
		servers_list, list_diags = types.ListValueFrom(ctx, schemaType, servers_tf_entries)
		diags.Append(list_diags...)
	}

	var base_value types.String
	if obj.Base != nil {
		base_value = types.StringValue(*obj.Base)
	}
	var bindDn_value types.String
	if obj.BindDn != nil {
		bindDn_value = types.StringValue(*obj.BindDn)
	}
	var bindPassword_value types.String
	if obj.BindPassword != nil {
		(*encrypted)["solo | encrypted |  | bind_password"] = types.StringValue(*obj.BindPassword)
		if value, ok := (*encrypted)["solo | plaintext |  | bind_password"]; ok {
			bindPassword_value = value
		}
	}
	var bindTimelimit_value types.Int64
	if obj.BindTimelimit != nil {
		bindTimelimit_value = types.Int64Value(*obj.BindTimelimit)
	}
	var disabled_value types.Bool
	if obj.Disabled != nil {
		disabled_value = types.BoolValue(*obj.Disabled)
	}
	var ldapType_value types.String
	if obj.LdapType != nil {
		ldapType_value = types.StringValue(*obj.LdapType)
	}
	var retryInterval_value types.Int64
	if obj.RetryInterval != nil {
		retryInterval_value = types.Int64Value(*obj.RetryInterval)
	}
	var ssl_value types.Bool
	if obj.Ssl != nil {
		ssl_value = types.BoolValue(*obj.Ssl)
	}
	var timelimit_value types.Int64
	if obj.Timelimit != nil {
		timelimit_value = types.Int64Value(*obj.Timelimit)
	}
	var verifyServerCertificate_value types.Bool
	if obj.VerifyServerCertificate != nil {
		verifyServerCertificate_value = types.BoolValue(*obj.VerifyServerCertificate)
	}
	o.Name = types.StringValue(obj.Name)
	o.Base = base_value
	o.BindDn = bindDn_value
	o.BindPassword = bindPassword_value
	o.BindTimelimit = bindTimelimit_value
	o.Disabled = disabled_value
	o.LdapType = ldapType_value
	o.RetryInterval = retryInterval_value
	o.Servers = servers_list
	o.Ssl = ssl_value
	o.Timelimit = timelimit_value
	o.VerifyServerCertificate = verifyServerCertificate_value

	return diags
}

func (o *LdapProfileDataSourceServersObject) CopyFromPango(ctx context.Context, obj *ldap.Server, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var address_value types.String
	if obj.Address != nil {
		address_value = types.StringValue(*obj.Address)
	}
	var port_value types.Int64
	if obj.Port != nil {
		port_value = types.Int64Value(*obj.Port)
	}
	o.Name = types.StringValue(obj.Name)
	o.Address = address_value
	o.Port = port_value

	return diags
}

func LdapProfileDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": LdapProfileDataSourceLocationSchema(),

			"encrypted_values": dsschema.MapAttribute{
				Description: "",
				Required:    false,
				Optional:    false,
				Computed:    true,
				Sensitive:   true,
				ElementType: types.StringType,
			},

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"base": dsschema.StringAttribute{
				Description: "Default base distinguished name (DN) to use for searches",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"bind_dn": dsschema.StringAttribute{
				Description: "bind distinguished name",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"bind_password": dsschema.StringAttribute{
				Description: "bind password",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},

			"bind_timelimit": dsschema.Int64Attribute{
				Description: "number of seconds to use for connecting to servers",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"disabled": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ldap_type": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"retry_interval": dsschema.Int64Attribute{
				Description: "Interval (seconds) for reconnecting LDAP server",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"servers": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: LdapProfileDataSourceServersSchema(),
			},

			"ssl": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"timelimit": dsschema.Int64Attribute{
				Description: "number of seconds to wait for performing searches",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"verify_server_certificate": dsschema.BoolAttribute{
				Description: "Verify server certificate for SSL sessions",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *LdapProfileDataSourceModel) getTypeFor(name string) attr.Type {
	schema := LdapProfileDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func LdapProfileDataSourceServersSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"address": dsschema.StringAttribute{
				Description: "ldap server ip or host name.",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"port": dsschema.Int64Attribute{
				Description: "default 389 for LDAP, 636 for LDAPS",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *LdapProfileDataSourceServersObject) getTypeFor(name string) attr.Type {
	schema := LdapProfileDataSourceServersSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func LdapProfileDataSourceLocationSchema() rsschema.Attribute {
	return LdapProfileLocationSchema()
}

// Metadata returns the data source type name.
func (d *LdapProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ldap_profile"
}

// Schema defines the schema for this data source.
func (d *LdapProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = LdapProfileDataSourceSchema()
}

// Configure prepares the struct.
func (d *LdapProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	d.client = providerData.Client
	specifier, _, err := ldap.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	d.manager = sdkmanager.NewEntryObjectManager(d.client, ldap.NewService(d.client), batchSize, specifier, ldap.SpecMatches)
}
func (o *LdapProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state LdapProfileDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location ldap.Location

	{
		var terraformLocation LdapProfileLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Panorama.IsNull() {
			location.Panorama = &ldap.PanoramaLocation{}
			var innerLocation LdapProfilePanoramaLocation
			resp.Diagnostics.Append(terraformLocation.Panorama.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &ldap.SharedLocation{}
			var innerLocation LdapProfileSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &ldap.VsysLocation{}
			var innerLocation LdapProfileVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &ldap.TemplateLocation{}
			var innerLocation LdapProfileTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
		}

		if !terraformLocation.TemplateVsys.IsNull() {
			location.TemplateVsys = &ldap.TemplateVsysLocation{}
			var innerLocation LdapProfileTemplateVsysLocation
			resp.Diagnostics.Append(terraformLocation.TemplateVsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateVsys.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateVsys.Template = innerLocation.Template.ValueString()
			location.TemplateVsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.TemplateVsys.Vsys = innerLocation.Vsys.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &ldap.TemplateStackLocation{}
			var innerLocation LdapProfileTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
		}

		if !terraformLocation.TemplateStackVsys.IsNull() {
			location.TemplateStackVsys = &ldap.TemplateStackVsysLocation{}
			var innerLocation LdapProfileTemplateStackVsysLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStackVsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStackVsys.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStackVsys.TemplateStack = innerLocation.TemplateStack.ValueString()
			location.TemplateStackVsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.TemplateStackVsys.Vsys = innerLocation.Vsys.ValueString()
		}
	}

	ev := make(map[string]types.String, len(state.EncryptedValues.Elements()))
	resp.Diagnostics.Append(savestate.EncryptedValues.ElementsAs(ctx, &ev, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_ldap_profile_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, location, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, &ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location
	ev_map, ev_diags := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = ev_map
	resp.Diagnostics.Append(ev_diags...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &LdapProfileResource{}
	_ resource.ResourceWithConfigure   = &LdapProfileResource{}
	_ resource.ResourceWithImportState = &LdapProfileResource{}
)

func NewLdapProfileResource() resource.Resource {
	if _, found := resourceFuncMap["panos_ldap_profile"]; !found {
		resourceFuncMap["panos_ldap_profile"] = resourceFuncs{
			CreateImportId: LdapProfileImportStateCreator,
		}
	}
	return &LdapProfileResource{}
}

type LdapProfileResource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*ldap.Entry, ldap.Location, *ldap.Service]
}

func LdapProfileResourceLocationSchema() rsschema.Attribute {
	return LdapProfileLocationSchema()
}

type LdapProfileResourceModel struct {
	Location                types.Object `tfsdk:"location"`
	Name                    types.String `tfsdk:"name"`
	Base                    types.String `tfsdk:"base"`
	BindDn                  types.String `tfsdk:"bind_dn"`
	BindPassword            types.String `tfsdk:"bind_password"`
	BindTimelimit           types.Int64  `tfsdk:"bind_timelimit"`
	Disabled                types.Bool   `tfsdk:"disabled"`
	LdapType                types.String `tfsdk:"ldap_type"`
	RetryInterval           types.Int64  `tfsdk:"retry_interval"`
	Servers                 types.List   `tfsdk:"servers"`
	Ssl                     types.Bool   `tfsdk:"ssl"`
	Timelimit               types.Int64  `tfsdk:"timelimit"`
	VerifyServerCertificate types.Bool   `tfsdk:"verify_server_certificate"`
	EncryptedValues         types.Map    `tfsdk:"encrypted_values"`
}
type LdapProfileResourceServersObject struct {
	Name    types.String `tfsdk:"name"`
	Address types.String `tfsdk:"address"`
	Port    types.Int64  `tfsdk:"port"`
}

func (r *LdapProfileResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func LdapProfileResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": LdapProfileResourceLocationSchema(),

			"encrypted_values": rsschema.MapAttribute{
				Description: "",
				Required:    false,
				Optional:    false,
				Computed:    true,
				Sensitive:   true,
				ElementType: types.StringType,
			},

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"base": rsschema.StringAttribute{
				Description: "Default base distinguished name (DN) to use for searches",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"bind_dn": rsschema.StringAttribute{
				Description: "bind distinguished name",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"bind_password": rsschema.StringAttribute{
				Description: "bind password",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   true,
			},

			"bind_timelimit": rsschema.Int64Attribute{
				Description: "number of seconds to use for connecting to servers",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(30),
			},

			"disabled": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ldap_type": rsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("other"),

				Validators: []validator.String{
					stringvalidator.OneOf([]string{
						"active-directory",
						"e-directory",
						"sun",
						"other",
					}...),
				},
			},

			"retry_interval": rsschema.Int64Attribute{
				Description: "Interval (seconds) for reconnecting LDAP server",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(60),
			},

			"servers": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: LdapProfileResourceServersSchema(),
			},

			"ssl": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"timelimit": rsschema.Int64Attribute{
				Description: "number of seconds to wait for performing searches",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(30),
			},

			"verify_server_certificate": rsschema.BoolAttribute{
				Description: "Verify server certificate for SSL sessions",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *LdapProfileResourceModel) getTypeFor(name string) attr.Type {
	schema := LdapProfileResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func LdapProfileResourceServersSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"address": rsschema.StringAttribute{
				Description: "ldap server ip or host name.",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"port": rsschema.Int64Attribute{
				Description: "default 389 for LDAP, 636 for LDAPS",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(389),
			},
		},
	}
}

func (o *LdapProfileResourceServersObject) getTypeFor(name string) attr.Type {
	schema := LdapProfileResourceServersSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *LdapProfileResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_ldap_profile"
}

func (r *LdapProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = LdapProfileResourceSchema()
}

// </ResourceSchema>

func (r *LdapProfileResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	r.client = providerData.Client
	specifier, _, err := ldap.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	batchSize := providerData.MultiConfigBatchSize
	r.manager = sdkmanager.NewEntryObjectManager(r.client, ldap.NewService(r.client), batchSize, specifier, ldap.SpecMatches)
}

func (o *LdapProfileResourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj LdapProfileLocation

	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"name":                      types.StringType,
		"base":                      types.StringType,
		"bind_dn":                   types.StringType,
		"bind_password":             types.StringType,
		"bind_timelimit":            types.Int64Type,
		"disabled":                  types.BoolType,
		"ldap_type":                 types.StringType,
		"retry_interval":            types.Int64Type,
		"servers":                   types.ListType{},
		"ssl":                       types.BoolType,
		"timelimit":                 types.Int64Type,
		"verify_server_certificate": types.BoolType,
		"encrypted_values":          types.MapType{},
	}
}
func (o *LdapProfileResourceServersObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"name":    types.StringType,
		"address": types.StringType,
		"port":    types.Int64Type,
	}
}

func (o *LdapProfileResourceModel) CopyToPango(ctx context.Context, obj **ldap.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	base_value := o.Base.ValueStringPointer()
	bindDn_value := o.BindDn.ValueStringPointer()
	(*encrypted)["solo | plaintext |  | bind_password"] = o.BindPassword
	bindPassword_value := o.BindPassword.ValueStringPointer()
	bindTimelimit_value := o.BindTimelimit.ValueInt64Pointer()
	disabled_value := o.Disabled.ValueBoolPointer()
	ldapType_value := o.LdapType.ValueStringPointer()
	retryInterval_value := o.RetryInterval.ValueInt64Pointer()
	var servers_tf_entries []LdapProfileResourceServersObject
	var servers_pango_entries []ldap.Server
	{
		d := o.Servers.ElementsAs(ctx, &servers_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range servers_tf_entries {
			var entry *ldap.Server
			diags.Append(elt.CopyToPango(ctx, &entry, encrypted)...)
			if diags.HasError() {
				return diags
			}
			servers_pango_entries = append(servers_pango_entries, *entry)
		}
	}
	ssl_value := o.Ssl.ValueBoolPointer()
	timelimit_value := o.Timelimit.ValueInt64Pointer()
	verifyServerCertificate_value := o.VerifyServerCertificate.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(ldap.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Base = base_value
	(*obj).BindDn = bindDn_value
	(*obj).BindPassword = bindPassword_value
	(*obj).BindTimelimit = bindTimelimit_value
	(*obj).Disabled = disabled_value
	(*obj).LdapType = ldapType_value
	(*obj).RetryInterval = retryInterval_value
	(*obj).Server = servers_pango_entries
	(*obj).Ssl = ssl_value
	(*obj).Timelimit = timelimit_value
	(*obj).VerifyServerCertificate = verifyServerCertificate_value

	return diags
}
func (o *LdapProfileResourceServersObject) CopyToPango(ctx context.Context, obj **ldap.Server, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	address_value := o.Address.ValueStringPointer()
	port_value := o.Port.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(ldap.Server)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Address = address_value
	(*obj).Port = port_value

	return diags
}

func (o *LdapProfileResourceModel) CopyFromPango(ctx context.Context, obj *ldap.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var servers_list types.List
	{
		var servers_tf_entries []LdapProfileResourceServersObject
		for _, elt := range obj.Server {
			var entry LdapProfileResourceServersObject
			entry_diags := entry.CopyFromPango(ctx, &elt, encrypted)
			diags.Append(entry_diags...)
			servers_tf_entries = append(servers_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("servers")
		servers_list, list_diags = types.ListValueFrom(ctx, schemaType, servers_tf_entries)
		diags.Append(list_diags...)
	}

	var base_value types.String
	if obj.Base != nil {
		base_value = types.StringValue(*obj.Base)
	}
	var bindDn_value types.String
	if obj.BindDn != nil {
		bindDn_value = types.StringValue(*obj.BindDn)
	}
	var bindPassword_value types.String
	if obj.BindPassword != nil {
		(*encrypted)["solo | encrypted |  | bind_password"] = types.StringValue(*obj.BindPassword)
		if value, ok := (*encrypted)["solo | plaintext |  | bind_password"]; ok {
			bindPassword_value = value
		}
	}
	var bindTimelimit_value types.Int64
	if obj.BindTimelimit != nil {
		bindTimelimit_value = types.Int64Value(*obj.BindTimelimit)
	}
	var disabled_value types.Bool
	if obj.Disabled != nil {
		disabled_value = types.BoolValue(*obj.Disabled)
	}
	var ldapType_value types.String
	if obj.LdapType != nil {
		ldapType_value = types.StringValue(*obj.LdapType)
	}
	var retryInterval_value types.Int64
	if obj.RetryInterval != nil {
		retryInterval_value = types.Int64Value(*obj.RetryInterval)
	}
	var ssl_value types.Bool
	if obj.Ssl != nil {
		ssl_value = types.BoolValue(*obj.Ssl)
	}
	var timelimit_value types.Int64
	if obj.Timelimit != nil {
		timelimit_value = types.Int64Value(*obj.Timelimit)
	}
	var verifyServerCertificate_value types.Bool
	if obj.VerifyServerCertificate != nil {
		verifyServerCertificate_value = types.BoolValue(*obj.VerifyServerCertificate)
	}
	o.Name = types.StringValue(obj.Name)
	o.Base = base_value
	o.BindDn = bindDn_value
	o.BindPassword = bindPassword_value
	o.BindTimelimit = bindTimelimit_value
	o.Disabled = disabled_value
	o.LdapType = ldapType_value
	o.RetryInterval = retryInterval_value
	o.Servers = servers_list
	o.Ssl = ssl_value
	o.Timelimit = timelimit_value
	o.VerifyServerCertificate = verifyServerCertificate_value

	return diags
}

func (o *LdapProfileResourceServersObject) CopyFromPango(ctx context.Context, obj *ldap.Server, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var address_value types.String
	if obj.Address != nil {
		address_value = types.StringValue(*obj.Address)
	}
	var port_value types.Int64
	if obj.Port != nil {
		port_value = types.Int64Value(*obj.Port)
	}
	o.Name = types.StringValue(obj.Name)
	o.Address = address_value
	o.Port = port_value

	return diags
}

func (r *LdapProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state LdapProfileResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_ldap_profile_resource",
		"function":      "Create",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	// Determine the location.

	var location ldap.Location

	{
		var terraformLocation LdapProfileLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Panorama.IsNull() {
			location.Panorama = &ldap.PanoramaLocation{}
			var innerLocation LdapProfilePanoramaLocation
			resp.Diagnostics.Append(terraformLocation.Panorama.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &ldap.SharedLocation{}
			var innerLocation LdapProfileSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &ldap.VsysLocation{}
			var innerLocation LdapProfileVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &ldap.TemplateLocation{}
			var innerLocation LdapProfileTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
		}

		if !terraformLocation.TemplateVsys.IsNull() {
			location.TemplateVsys = &ldap.TemplateVsysLocation{}
			var innerLocation LdapProfileTemplateVsysLocation
			resp.Diagnostics.Append(terraformLocation.TemplateVsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateVsys.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateVsys.Template = innerLocation.Template.ValueString()
			location.TemplateVsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.TemplateVsys.Vsys = innerLocation.Vsys.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &ldap.TemplateStackLocation{}
			var innerLocation LdapProfileTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
		}

		if !terraformLocation.TemplateStackVsys.IsNull() {
			location.TemplateStackVsys = &ldap.TemplateStackVsysLocation{}
			var innerLocation LdapProfileTemplateStackVsysLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStackVsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStackVsys.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStackVsys.TemplateStack = innerLocation.TemplateStack.ValueString()
			location.TemplateStackVsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.TemplateStackVsys.Vsys = innerLocation.Vsys.ValueString()
		}
	}

	if err := location.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *ldap.Entry

	ev := make(map[string]types.String)
	resp.Diagnostics.Append(state.CopyToPango(ctx, &obj, &ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.
	created, err := r.manager.Create(ctx, location, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	resp.Diagnostics.Append(state.CopyFromPango(ctx, created, &ev)...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev_map, ev_diags := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = ev_map
	resp.Diagnostics.Append(ev_diags...)
	if resp.Diagnostics.HasError() {
		return
	}
	state.Name = types.StringValue(created.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
func (o *LdapProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state LdapProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location ldap.Location

	{
		var terraformLocation LdapProfileLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Panorama.IsNull() {
			location.Panorama = &ldap.PanoramaLocation{}
			var innerLocation LdapProfilePanoramaLocation
			resp.Diagnostics.Append(terraformLocation.Panorama.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &ldap.SharedLocation{}
			var innerLocation LdapProfileSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &ldap.VsysLocation{}
			var innerLocation LdapProfileVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &ldap.TemplateLocation{}
			var innerLocation LdapProfileTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
		}

		if !terraformLocation.TemplateVsys.IsNull() {
			location.TemplateVsys = &ldap.TemplateVsysLocation{}
			var innerLocation LdapProfileTemplateVsysLocation
			resp.Diagnostics.Append(terraformLocation.TemplateVsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateVsys.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateVsys.Template = innerLocation.Template.ValueString()
			location.TemplateVsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.TemplateVsys.Vsys = innerLocation.Vsys.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &ldap.TemplateStackLocation{}
			var innerLocation LdapProfileTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
		}

		if !terraformLocation.TemplateStackVsys.IsNull() {
			location.TemplateStackVsys = &ldap.TemplateStackVsysLocation{}
			var innerLocation LdapProfileTemplateStackVsysLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStackVsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStackVsys.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStackVsys.TemplateStack = innerLocation.TemplateStack.ValueString()
			location.TemplateStackVsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.TemplateStackVsys.Vsys = innerLocation.Vsys.ValueString()
		}
	}

	ev := make(map[string]types.String, len(state.EncryptedValues.Elements()))
	resp.Diagnostics.Append(savestate.EncryptedValues.ElementsAs(ctx, &ev, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_ldap_profile_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, location, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, &ev)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location
	ev_map, ev_diags := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = ev_map
	resp.Diagnostics.Append(ev_diags...)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *LdapProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state LdapProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}
	ev := make(map[string]types.String, len(state.EncryptedValues.Elements()))
	resp.Diagnostics.Append(state.EncryptedValues.ElementsAs(ctx, &ev, false)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location ldap.Location

	{
		var terraformLocation LdapProfileLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Panorama.IsNull() {
			location.Panorama = &ldap.PanoramaLocation{}
			var innerLocation LdapProfilePanoramaLocation
			resp.Diagnostics.Append(terraformLocation.Panorama.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &ldap.SharedLocation{}
			var innerLocation LdapProfileSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &ldap.VsysLocation{}
			var innerLocation LdapProfileVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &ldap.TemplateLocation{}
			var innerLocation LdapProfileTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
		}

		if !terraformLocation.TemplateVsys.IsNull() {
			location.TemplateVsys = &ldap.TemplateVsysLocation{}
			var innerLocation LdapProfileTemplateVsysLocation
			resp.Diagnostics.Append(terraformLocation.TemplateVsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateVsys.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateVsys.Template = innerLocation.Template.ValueString()
			location.TemplateVsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.TemplateVsys.Vsys = innerLocation.Vsys.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &ldap.TemplateStackLocation{}
			var innerLocation LdapProfileTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
		}

		if !terraformLocation.TemplateStackVsys.IsNull() {
			location.TemplateStackVsys = &ldap.TemplateStackVsysLocation{}
			var innerLocation LdapProfileTemplateStackVsysLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStackVsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStackVsys.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStackVsys.TemplateStack = innerLocation.TemplateStack.ValueString()
			location.TemplateStackVsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.TemplateStackVsys.Vsys = innerLocation.Vsys.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_ldap_profile_resource",
		"function":      "Update",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}
	obj, err := r.manager.Read(ctx, location, plan.Name.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, &obj, &ev)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Perform the operation.
	updated, err := r.manager.Update(ctx, location, obj, obj.Name)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	copy_diags := state.CopyFromPango(ctx, updated, &ev)
	ev_map, ev_diags := types.MapValueFrom(ctx, types.StringType, ev)
	state.EncryptedValues = ev_map
	resp.Diagnostics.Append(ev_diags...)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *LdapProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state LdapProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_ldap_profile_resource",
		"function":      "Delete",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var location ldap.Location

	{
		var terraformLocation LdapProfileLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.Panorama.IsNull() {
			location.Panorama = &ldap.PanoramaLocation{}
			var innerLocation LdapProfilePanoramaLocation
			resp.Diagnostics.Append(terraformLocation.Panorama.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Shared.IsNull() {
			location.Shared = &ldap.SharedLocation{}
			var innerLocation LdapProfileSharedLocation
			resp.Diagnostics.Append(terraformLocation.Shared.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
		}

		if !terraformLocation.Vsys.IsNull() {
			location.Vsys = &ldap.VsysLocation{}
			var innerLocation LdapProfileVsysLocation
			resp.Diagnostics.Append(terraformLocation.Vsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Vsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.Vsys.Vsys = innerLocation.Name.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &ldap.TemplateLocation{}
			var innerLocation LdapProfileTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
		}

		if !terraformLocation.TemplateVsys.IsNull() {
			location.TemplateVsys = &ldap.TemplateVsysLocation{}
			var innerLocation LdapProfileTemplateVsysLocation
			resp.Diagnostics.Append(terraformLocation.TemplateVsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateVsys.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateVsys.Template = innerLocation.Template.ValueString()
			location.TemplateVsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.TemplateVsys.Vsys = innerLocation.Vsys.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &ldap.TemplateStackLocation{}
			var innerLocation LdapProfileTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
		}

		if !terraformLocation.TemplateStackVsys.IsNull() {
			location.TemplateStackVsys = &ldap.TemplateStackVsysLocation{}
			var innerLocation LdapProfileTemplateStackVsysLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStackVsys.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStackVsys.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStackVsys.TemplateStack = innerLocation.TemplateStack.ValueString()
			location.TemplateStackVsys.NgfwDevice = innerLocation.NgfwDevice.ValueString()
			location.TemplateStackVsys.Vsys = innerLocation.Vsys.ValueString()
		}
	}

	err := r.manager.Delete(ctx, location, []string{state.Name.ValueString()})
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}

}

type LdapProfileImportState struct {
	Location types.Object `json:"location"`
	Name     types.String `json:"name"`
}

func (o LdapProfileImportState) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Location *LdapProfileLocation `json:"location"`
		Name     *string              `json:"name"`
	}
	var location_object *LdapProfileLocation
	{
		diags := o.Location.As(context.TODO(), &location_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal location into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Location: location_object,
		Name:     o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *LdapProfileImportState) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Location *LdapProfileLocation `json:"location"`
		Name     *string              `json:"name"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var location_object types.Object
	{
		var diags_tmp diag.Diagnostics
		location_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Location.AttributeTypes(), shadow.Location)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into location", diags_tmp.Errors())
		}
	}
	o.Location = location_object
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}

func LdapProfileImportStateCreator(ctx context.Context, resource types.Object) ([]byte, error) {
	attrs := resource.Attributes()
	if attrs == nil {
		return nil, fmt.Errorf("Object has no attributes")
	}

	locationAttr, ok := attrs["location"]
	if !ok {
		return nil, fmt.Errorf("location attribute missing")
	}

	var location types.Object
	switch value := locationAttr.(type) {
	case types.Object:
		location = value
	default:
		return nil, fmt.Errorf("location attribute expected to be an object")
	}
	nameAttr, ok := attrs["name"]
	if !ok {
		return nil, fmt.Errorf("name attribute missing")
	}

	var name types.String
	switch value := nameAttr.(type) {
	case types.String:
		name = value
	default:
		return nil, fmt.Errorf("name attribute expected to be a string")
	}

	importStruct := LdapProfileImportState{
		Location: location,
		Name:     name,
	}

	return json.Marshal(importStruct)
}

func (r *LdapProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	var obj LdapProfileImportState
	data, err := base64.StdEncoding.DecodeString(req.ID)
	if err != nil {
		resp.Diagnostics.AddError("Failed to decode Import ID", err.Error())
		return
	}

	err = json.Unmarshal(data, &obj)
	if err != nil {
		var diagsErr *DiagnosticsError
		if errors.As(err, &diagsErr) {
			resp.Diagnostics.Append(diagsErr.Diagnostics()...)
		} else {
			resp.Diagnostics.AddError("Failed to unmarshal Import ID", err.Error())
		}
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("location"), obj.Location)...)
	if resp.Diagnostics.HasError() {
		return
	}
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("name"), obj.Name)...)
}

type LdapProfilePanoramaLocation struct {
}
type LdapProfileSharedLocation struct {
}
type LdapProfileVsysLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
	Name       types.String `tfsdk:"name"`
}
type LdapProfileTemplateLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
}
type LdapProfileTemplateVsysLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Template       types.String `tfsdk:"template"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
	Vsys           types.String `tfsdk:"vsys"`
}
type LdapProfileTemplateStackLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
}
type LdapProfileTemplateStackVsysLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	TemplateStack  types.String `tfsdk:"template_stack"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
	Vsys           types.String `tfsdk:"vsys"`
}
type LdapProfileLocation struct {
	Panorama          types.Object `tfsdk:"panorama"`
	Shared            types.Object `tfsdk:"shared"`
	Vsys              types.Object `tfsdk:"vsys"`
	Template          types.Object `tfsdk:"template"`
	TemplateVsys      types.Object `tfsdk:"template_vsys"`
	TemplateStack     types.Object `tfsdk:"template_stack"`
	TemplateStackVsys types.Object `tfsdk:"template_stack_vsys"`
}

func LdapProfileLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"panorama": rsschema.SingleNestedAttribute{
				Description: "Located in a panorama.",
				Optional:    true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("panorama"),
						path.MatchRelative().AtParent().AtName("shared"),
						path.MatchRelative().AtParent().AtName("vsys"),
						path.MatchRelative().AtParent().AtName("template"),
						path.MatchRelative().AtParent().AtName("template_vsys"),
						path.MatchRelative().AtParent().AtName("template_stack"),
						path.MatchRelative().AtParent().AtName("template_stack_vsys"),
					}...),
				},
			},
			"shared": rsschema.SingleNestedAttribute{
				Description: "Panorama shared object",
				Optional:    true,
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific Virtual System",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The Virtual System name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Specific Panorama template",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template, device and vsys.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"template": rsschema.StringAttribute{
						Description: "Specific Panorama template",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"vsys": rsschema.StringAttribute{
						Description: "The vsys.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_stack": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The template stack",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_stack_vsys": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template, device and vsys.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Specific Panorama device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"template_stack": rsschema.StringAttribute{
						Description: "The template stack",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"vsys": rsschema.StringAttribute{
						Description: "The vsys.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("vsys1"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o LdapProfilePanoramaLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
	}

	obj := shadow{}

	return json.Marshal(obj)
}

func (o *LdapProfilePanoramaLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}

	return nil
}
func (o LdapProfileSharedLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
	}

	obj := shadow{}

	return json.Marshal(obj)
}

func (o *LdapProfileSharedLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}

	return nil
}
func (o LdapProfileVsysLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
		Name       *string `json:"name,omitempty"`
	}

	obj := shadow{
		NgfwDevice: o.NgfwDevice.ValueStringPointer(),
		Name:       o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *LdapProfileVsysLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
		Name       *string `json:"name,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o LdapProfileTemplateLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *LdapProfileTemplateLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o LdapProfileTemplateVsysLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Template       *string `json:"template,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
		Vsys           *string `json:"vsys,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Template:       o.Template.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
		Vsys:           o.Vsys.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *LdapProfileTemplateVsysLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Template       *string `json:"template,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
		Vsys           *string `json:"vsys,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Template = types.StringPointerValue(shadow.Template)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)
	o.Vsys = types.StringPointerValue(shadow.Vsys)

	return nil
}
func (o LdapProfileTemplateStackLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *LdapProfileTemplateStackLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o LdapProfileTemplateStackVsysLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		TemplateStack  *string `json:"template_stack,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
		Vsys           *string `json:"vsys,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		TemplateStack:  o.TemplateStack.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
		Vsys:           o.Vsys.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *LdapProfileTemplateStackVsysLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		TemplateStack  *string `json:"template_stack,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
		Vsys           *string `json:"vsys,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.TemplateStack = types.StringPointerValue(shadow.TemplateStack)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)
	o.Vsys = types.StringPointerValue(shadow.Vsys)

	return nil
}
func (o LdapProfileLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		Panorama          *LdapProfilePanoramaLocation          `json:"panorama,omitempty"`
		Shared            *LdapProfileSharedLocation            `json:"shared,omitempty"`
		Vsys              *LdapProfileVsysLocation              `json:"vsys,omitempty"`
		Template          *LdapProfileTemplateLocation          `json:"template,omitempty"`
		TemplateVsys      *LdapProfileTemplateVsysLocation      `json:"template_vsys,omitempty"`
		TemplateStack     *LdapProfileTemplateStackLocation     `json:"template_stack,omitempty"`
		TemplateStackVsys *LdapProfileTemplateStackVsysLocation `json:"template_stack_vsys,omitempty"`
	}
	var panorama_object *LdapProfilePanoramaLocation
	{
		diags := o.Panorama.As(context.TODO(), &panorama_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal panorama into JSON document", diags.Errors())
		}
	}
	var shared_object *LdapProfileSharedLocation
	{
		diags := o.Shared.As(context.TODO(), &shared_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal shared into JSON document", diags.Errors())
		}
	}
	var vsys_object *LdapProfileVsysLocation
	{
		diags := o.Vsys.As(context.TODO(), &vsys_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal vsys into JSON document", diags.Errors())
		}
	}
	var template_object *LdapProfileTemplateLocation
	{
		diags := o.Template.As(context.TODO(), &template_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template into JSON document", diags.Errors())
		}
	}
	var templateVsys_object *LdapProfileTemplateVsysLocation
	{
		diags := o.TemplateVsys.As(context.TODO(), &templateVsys_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template_vsys into JSON document", diags.Errors())
		}
	}
	var templateStack_object *LdapProfileTemplateStackLocation
	{
		diags := o.TemplateStack.As(context.TODO(), &templateStack_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template_stack into JSON document", diags.Errors())
		}
	}
	var templateStackVsys_object *LdapProfileTemplateStackVsysLocation
	{
		diags := o.TemplateStackVsys.As(context.TODO(), &templateStackVsys_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template_stack_vsys into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		Panorama:          panorama_object,
		Shared:            shared_object,
		Vsys:              vsys_object,
		Template:          template_object,
		TemplateVsys:      templateVsys_object,
		TemplateStack:     templateStack_object,
		TemplateStackVsys: templateStackVsys_object,
	}

	return json.Marshal(obj)
}

func (o *LdapProfileLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		Panorama          *LdapProfilePanoramaLocation          `json:"panorama,omitempty"`
		Shared            *LdapProfileSharedLocation            `json:"shared,omitempty"`
		Vsys              *LdapProfileVsysLocation              `json:"vsys,omitempty"`
		Template          *LdapProfileTemplateLocation          `json:"template,omitempty"`
		TemplateVsys      *LdapProfileTemplateVsysLocation      `json:"template_vsys,omitempty"`
		TemplateStack     *LdapProfileTemplateStackLocation     `json:"template_stack,omitempty"`
		TemplateStackVsys *LdapProfileTemplateStackVsysLocation `json:"template_stack_vsys,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var panorama_object types.Object
	{
		var diags_tmp diag.Diagnostics
		panorama_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Panorama.AttributeTypes(), shadow.Panorama)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into panorama", diags_tmp.Errors())
		}
	}
	var shared_object types.Object
	{
		var diags_tmp diag.Diagnostics
		shared_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Shared.AttributeTypes(), shadow.Shared)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into shared", diags_tmp.Errors())
		}
	}
	var vsys_object types.Object
	{
		var diags_tmp diag.Diagnostics
		vsys_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Vsys.AttributeTypes(), shadow.Vsys)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into vsys", diags_tmp.Errors())
		}
	}
	var template_object types.Object
	{
		var diags_tmp diag.Diagnostics
		template_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Template.AttributeTypes(), shadow.Template)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template", diags_tmp.Errors())
		}
	}
	var templateVsys_object types.Object
	{
		var diags_tmp diag.Diagnostics
		templateVsys_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.TemplateVsys.AttributeTypes(), shadow.TemplateVsys)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template_vsys", diags_tmp.Errors())
		}
	}
	var templateStack_object types.Object
	{
		var diags_tmp diag.Diagnostics
		templateStack_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.TemplateStack.AttributeTypes(), shadow.TemplateStack)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template_stack", diags_tmp.Errors())
		}
	}
	var templateStackVsys_object types.Object
	{
		var diags_tmp diag.Diagnostics
		templateStackVsys_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.TemplateStackVsys.AttributeTypes(), shadow.TemplateStackVsys)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template_stack_vsys", diags_tmp.Errors())
		}
	}
	o.Panorama = panorama_object
	o.Shared = shared_object
	o.Vsys = vsys_object
	o.Template = template_object
	o.TemplateVsys = templateVsys_object
	o.TemplateStack = templateStack_object
	o.TemplateStackVsys = templateStackVsys_object

	return nil
}

func (o *LdapProfilePanoramaLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}
func (o *LdapProfileSharedLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{}
}
func (o *LdapProfileVsysLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"ngfw_device": types.StringType,
		"name":        types.StringType,
	}
}
func (o *LdapProfileTemplateLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
	}
}
func (o *LdapProfileTemplateVsysLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"template":        types.StringType,
		"ngfw_device":     types.StringType,
		"vsys":            types.StringType,
	}
}
func (o *LdapProfileTemplateStackLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
	}
}
func (o *LdapProfileTemplateStackVsysLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"template_stack":  types.StringType,
		"ngfw_device":     types.StringType,
		"vsys":            types.StringType,
	}
}
func (o *LdapProfileLocation) AttributeTypes() map[string]attr.Type {
	var panoramaObj LdapProfilePanoramaLocation
	var sharedObj LdapProfileSharedLocation
	var vsysObj LdapProfileVsysLocation
	var templateObj LdapProfileTemplateLocation
	var templateVsysObj LdapProfileTemplateVsysLocation
	var templateStackObj LdapProfileTemplateStackLocation
	var templateStackVsysObj LdapProfileTemplateStackVsysLocation
	return map[string]attr.Type{
		"panorama": types.ObjectType{
			AttrTypes: panoramaObj.AttributeTypes(),
		},
		"shared": types.ObjectType{
			AttrTypes: sharedObj.AttributeTypes(),
		},
		"vsys": types.ObjectType{
			AttrTypes: vsysObj.AttributeTypes(),
		},
		"template": types.ObjectType{
			AttrTypes: templateObj.AttributeTypes(),
		},
		"template_vsys": types.ObjectType{
			AttrTypes: templateVsysObj.AttributeTypes(),
		},
		"template_stack": types.ObjectType{
			AttrTypes: templateStackObj.AttributeTypes(),
		},
		"template_stack_vsys": types.ObjectType{
			AttrTypes: templateStackVsysObj.AttributeTypes(),
		},
	}
}
