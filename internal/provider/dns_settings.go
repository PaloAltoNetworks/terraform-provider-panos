package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/device/services/dns"

	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &DnsSettingsDataSource{}
	_ datasource.DataSourceWithConfigure = &DnsSettingsDataSource{}
)

func NewDnsSettingsDataSource() datasource.DataSource {
	return &DnsSettingsDataSource{}
}

type DnsSettingsDataSource struct {
	client  *pango.Client
	manager *sdkmanager.ConfigObjectManager[*dns.Config, dns.Location, *dns.Service]
}

type DnsSettingsDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type DnsSettingsDataSourceModel struct {
	Location        types.Object                            `tfsdk:"location"`
	DnsSettings     *DnsSettingsDataSourceDnsSettingsObject `tfsdk:"dns_settings"`
	FqdnRefreshTime types.Int64                             `tfsdk:"fqdn_refresh_time"`
}
type DnsSettingsDataSourceDnsSettingsObject struct {
	Servers *DnsSettingsDataSourceDnsSettingsServersObject `tfsdk:"servers"`
}
type DnsSettingsDataSourceDnsSettingsServersObject struct {
	Primary   types.String `tfsdk:"primary"`
	Secondary types.String `tfsdk:"secondary"`
}

func (o *DnsSettingsDataSourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj DnsSettingsLocation

	var dnsSettingsObj *DnsSettingsDataSourceDnsSettingsObject

	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"dns_settings": types.ObjectType{
			AttrTypes: dnsSettingsObj.AttributeTypes(),
		},
		"fqdn_refresh_time": types.Int64Type,
	}
}
func (o *DnsSettingsDataSourceDnsSettingsObject) AttributeTypes() map[string]attr.Type {

	var serversObj *DnsSettingsDataSourceDnsSettingsServersObject
	return map[string]attr.Type{
		"servers": types.ObjectType{
			AttrTypes: serversObj.AttributeTypes(),
		},
	}
}
func (o *DnsSettingsDataSourceDnsSettingsServersObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"primary":   types.StringType,
		"secondary": types.StringType,
	}
}

func (o *DnsSettingsDataSourceModel) CopyToPango(ctx context.Context, obj **dns.Config, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var dnsSettings_entry *dns.DnsSetting
	if o.DnsSettings != nil {
		if *obj != nil && (*obj).DnsSetting != nil {
			dnsSettings_entry = (*obj).DnsSetting
		} else {
			dnsSettings_entry = new(dns.DnsSetting)
		}

		diags.Append(o.DnsSettings.CopyToPango(ctx, &dnsSettings_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	fqdnRefreshTime_value := o.FqdnRefreshTime.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(dns.Config)
	}
	(*obj).DnsSetting = dnsSettings_entry
	(*obj).FqdnRefreshTime = fqdnRefreshTime_value

	return diags
}
func (o *DnsSettingsDataSourceDnsSettingsObject) CopyToPango(ctx context.Context, obj **dns.DnsSetting, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var servers_entry *dns.DnsSettingServers
	if o.Servers != nil {
		if *obj != nil && (*obj).Servers != nil {
			servers_entry = (*obj).Servers
		} else {
			servers_entry = new(dns.DnsSettingServers)
		}

		diags.Append(o.Servers.CopyToPango(ctx, &servers_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(dns.DnsSetting)
	}
	(*obj).Servers = servers_entry

	return diags
}
func (o *DnsSettingsDataSourceDnsSettingsServersObject) CopyToPango(ctx context.Context, obj **dns.DnsSettingServers, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	primary_value := o.Primary.ValueStringPointer()
	secondary_value := o.Secondary.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(dns.DnsSettingServers)
	}
	(*obj).Primary = primary_value
	(*obj).Secondary = secondary_value

	return diags
}

func (o *DnsSettingsDataSourceModel) CopyFromPango(ctx context.Context, obj *dns.Config, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var dnsSettings_object *DnsSettingsDataSourceDnsSettingsObject
	if obj.DnsSetting != nil {
		dnsSettings_object = new(DnsSettingsDataSourceDnsSettingsObject)

		diags.Append(dnsSettings_object.CopyFromPango(ctx, obj.DnsSetting, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var fqdnRefreshTime_value types.Int64
	if obj.FqdnRefreshTime != nil {
		fqdnRefreshTime_value = types.Int64Value(*obj.FqdnRefreshTime)
	}
	o.DnsSettings = dnsSettings_object
	o.FqdnRefreshTime = fqdnRefreshTime_value

	return diags
}

func (o *DnsSettingsDataSourceDnsSettingsObject) CopyFromPango(ctx context.Context, obj *dns.DnsSetting, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var servers_object *DnsSettingsDataSourceDnsSettingsServersObject
	if obj.Servers != nil {
		servers_object = new(DnsSettingsDataSourceDnsSettingsServersObject)

		diags.Append(servers_object.CopyFromPango(ctx, obj.Servers, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Servers = servers_object

	return diags
}

func (o *DnsSettingsDataSourceDnsSettingsServersObject) CopyFromPango(ctx context.Context, obj *dns.DnsSettingServers, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var primary_value types.String
	if obj.Primary != nil {
		primary_value = types.StringValue(*obj.Primary)
	}
	var secondary_value types.String
	if obj.Secondary != nil {
		secondary_value = types.StringValue(*obj.Secondary)
	}
	o.Primary = primary_value
	o.Secondary = secondary_value

	return diags
}

func DnsSettingsDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": DnsSettingsDataSourceLocationSchema(),

			"dns_settings": DnsSettingsDataSourceDnsSettingsSchema(),

			"fqdn_refresh_time": dsschema.Int64Attribute{
				Description: "Seconds for Periodic Timer to refresh expired FQDN object entries",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *DnsSettingsDataSourceModel) getTypeFor(name string) attr.Type {
	schema := DnsSettingsDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DnsSettingsDataSourceDnsSettingsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"servers": DnsSettingsDataSourceDnsSettingsServersSchema(),
		},
	}
}

func (o *DnsSettingsDataSourceDnsSettingsObject) getTypeFor(name string) attr.Type {
	schema := DnsSettingsDataSourceDnsSettingsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DnsSettingsDataSourceDnsSettingsServersSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"primary": dsschema.StringAttribute{
				Description: "Primary DNS server IP address",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"secondary": dsschema.StringAttribute{
				Description: "Secondary DNS server IP address",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *DnsSettingsDataSourceDnsSettingsServersObject) getTypeFor(name string) attr.Type {
	schema := DnsSettingsDataSourceDnsSettingsServersSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DnsSettingsDataSourceLocationSchema() rsschema.Attribute {
	return DnsSettingsLocationSchema()
}

// Metadata returns the data source type name.
func (d *DnsSettingsDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_dns_settings"
}

// Schema defines the schema for this data source.
func (d *DnsSettingsDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = DnsSettingsDataSourceSchema()
}

// Configure prepares the struct.
func (d *DnsSettingsDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	d.client = providerData.Client
	specifier, _, err := dns.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	d.manager = sdkmanager.NewConfigObjectManager(d.client, dns.NewService(d.client), specifier)
}
func (o *DnsSettingsDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state DnsSettingsDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location dns.Location

	{
		var terraformLocation DnsSettingsLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.System.IsNull() {
			location.System = &dns.SystemLocation{}
			var innerLocation DnsSettingsSystemLocation
			resp.Diagnostics.Append(terraformLocation.System.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.System.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &dns.TemplateLocation{}
			var innerLocation DnsSettingsTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &dns.TemplateStackLocation{}
			var innerLocation DnsSettingsTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_dns_settings_resource",
		"function":      "Read",
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, location)
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &DnsSettingsResource{}
	_ resource.ResourceWithConfigure   = &DnsSettingsResource{}
	_ resource.ResourceWithImportState = &DnsSettingsResource{}
)

func NewDnsSettingsResource() resource.Resource {
	return &DnsSettingsResource{}
}

type DnsSettingsResource struct {
	client  *pango.Client
	manager *sdkmanager.ConfigObjectManager[*dns.Config, dns.Location, *dns.Service]
}

func DnsSettingsResourceLocationSchema() rsschema.Attribute {
	return DnsSettingsLocationSchema()
}

type DnsSettingsResourceModel struct {
	Location        types.Object                          `tfsdk:"location"`
	DnsSettings     *DnsSettingsResourceDnsSettingsObject `tfsdk:"dns_settings"`
	FqdnRefreshTime types.Int64                           `tfsdk:"fqdn_refresh_time"`
}
type DnsSettingsResourceDnsSettingsObject struct {
	Servers *DnsSettingsResourceDnsSettingsServersObject `tfsdk:"servers"`
}
type DnsSettingsResourceDnsSettingsServersObject struct {
	Primary   types.String `tfsdk:"primary"`
	Secondary types.String `tfsdk:"secondary"`
}

func (r *DnsSettingsResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func DnsSettingsResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": DnsSettingsResourceLocationSchema(),

			"dns_settings": DnsSettingsResourceDnsSettingsSchema(),

			"fqdn_refresh_time": rsschema.Int64Attribute{
				Description: "Seconds for Periodic Timer to refresh expired FQDN object entries",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     int64default.StaticInt64(1800),
			},
		},
	}
}

func (o *DnsSettingsResourceModel) getTypeFor(name string) attr.Type {
	schema := DnsSettingsResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DnsSettingsResourceDnsSettingsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"servers": DnsSettingsResourceDnsSettingsServersSchema(),
		},
	}
}

func (o *DnsSettingsResourceDnsSettingsObject) getTypeFor(name string) attr.Type {
	schema := DnsSettingsResourceDnsSettingsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func DnsSettingsResourceDnsSettingsServersSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"primary": rsschema.StringAttribute{
				Description: "Primary DNS server IP address",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"secondary": rsschema.StringAttribute{
				Description: "Secondary DNS server IP address",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *DnsSettingsResourceDnsSettingsServersObject) getTypeFor(name string) attr.Type {
	schema := DnsSettingsResourceDnsSettingsServersSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *DnsSettingsResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_dns_settings"
}

func (r *DnsSettingsResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = DnsSettingsResourceSchema()
}

// </ResourceSchema>

func (r *DnsSettingsResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	providerData := req.ProviderData.(*ProviderData)
	r.client = providerData.Client
	specifier, _, err := dns.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	r.manager = sdkmanager.NewConfigObjectManager(r.client, dns.NewService(r.client), specifier)
}

func (o *DnsSettingsResourceModel) AttributeTypes() map[string]attr.Type {

	var locationObj DnsSettingsLocation

	var dnsSettingsObj *DnsSettingsResourceDnsSettingsObject

	return map[string]attr.Type{
		"location": types.ObjectType{
			AttrTypes: locationObj.AttributeTypes(),
		},
		"dns_settings": types.ObjectType{
			AttrTypes: dnsSettingsObj.AttributeTypes(),
		},
		"fqdn_refresh_time": types.Int64Type,
	}
}
func (o *DnsSettingsResourceDnsSettingsObject) AttributeTypes() map[string]attr.Type {

	var serversObj *DnsSettingsResourceDnsSettingsServersObject
	return map[string]attr.Type{
		"servers": types.ObjectType{
			AttrTypes: serversObj.AttributeTypes(),
		},
	}
}
func (o *DnsSettingsResourceDnsSettingsServersObject) AttributeTypes() map[string]attr.Type {

	return map[string]attr.Type{
		"primary":   types.StringType,
		"secondary": types.StringType,
	}
}

func (o *DnsSettingsResourceModel) CopyToPango(ctx context.Context, obj **dns.Config, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var dnsSettings_entry *dns.DnsSetting
	if o.DnsSettings != nil {
		if *obj != nil && (*obj).DnsSetting != nil {
			dnsSettings_entry = (*obj).DnsSetting
		} else {
			dnsSettings_entry = new(dns.DnsSetting)
		}

		diags.Append(o.DnsSettings.CopyToPango(ctx, &dnsSettings_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	fqdnRefreshTime_value := o.FqdnRefreshTime.ValueInt64Pointer()

	if (*obj) == nil {
		*obj = new(dns.Config)
	}
	(*obj).DnsSetting = dnsSettings_entry
	(*obj).FqdnRefreshTime = fqdnRefreshTime_value

	return diags
}
func (o *DnsSettingsResourceDnsSettingsObject) CopyToPango(ctx context.Context, obj **dns.DnsSetting, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var servers_entry *dns.DnsSettingServers
	if o.Servers != nil {
		if *obj != nil && (*obj).Servers != nil {
			servers_entry = (*obj).Servers
		} else {
			servers_entry = new(dns.DnsSettingServers)
		}

		diags.Append(o.Servers.CopyToPango(ctx, &servers_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(dns.DnsSetting)
	}
	(*obj).Servers = servers_entry

	return diags
}
func (o *DnsSettingsResourceDnsSettingsServersObject) CopyToPango(ctx context.Context, obj **dns.DnsSettingServers, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	primary_value := o.Primary.ValueStringPointer()
	secondary_value := o.Secondary.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(dns.DnsSettingServers)
	}
	(*obj).Primary = primary_value
	(*obj).Secondary = secondary_value

	return diags
}

func (o *DnsSettingsResourceModel) CopyFromPango(ctx context.Context, obj *dns.Config, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var dnsSettings_object *DnsSettingsResourceDnsSettingsObject
	if obj.DnsSetting != nil {
		dnsSettings_object = new(DnsSettingsResourceDnsSettingsObject)

		diags.Append(dnsSettings_object.CopyFromPango(ctx, obj.DnsSetting, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var fqdnRefreshTime_value types.Int64
	if obj.FqdnRefreshTime != nil {
		fqdnRefreshTime_value = types.Int64Value(*obj.FqdnRefreshTime)
	}
	o.DnsSettings = dnsSettings_object
	o.FqdnRefreshTime = fqdnRefreshTime_value

	return diags
}

func (o *DnsSettingsResourceDnsSettingsObject) CopyFromPango(ctx context.Context, obj *dns.DnsSetting, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var servers_object *DnsSettingsResourceDnsSettingsServersObject
	if obj.Servers != nil {
		servers_object = new(DnsSettingsResourceDnsSettingsServersObject)

		diags.Append(servers_object.CopyFromPango(ctx, obj.Servers, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	o.Servers = servers_object

	return diags
}

func (o *DnsSettingsResourceDnsSettingsServersObject) CopyFromPango(ctx context.Context, obj *dns.DnsSettingServers, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var primary_value types.String
	if obj.Primary != nil {
		primary_value = types.StringValue(*obj.Primary)
	}
	var secondary_value types.String
	if obj.Secondary != nil {
		secondary_value = types.StringValue(*obj.Secondary)
	}
	o.Primary = primary_value
	o.Secondary = secondary_value

	return diags
}

func (r *DnsSettingsResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state DnsSettingsResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_dns_settings_resource",
		"function":      "Create",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	// Determine the location.

	var location dns.Location

	{
		var terraformLocation DnsSettingsLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.System.IsNull() {
			location.System = &dns.SystemLocation{}
			var innerLocation DnsSettingsSystemLocation
			resp.Diagnostics.Append(terraformLocation.System.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.System.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &dns.TemplateLocation{}
			var innerLocation DnsSettingsTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &dns.TemplateStackLocation{}
			var innerLocation DnsSettingsTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	if err := location.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *dns.Config

	resp.Diagnostics.Append(state.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.
	created, err := r.manager.Create(ctx, location, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	resp.Diagnostics.Append(state.CopyFromPango(ctx, created, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
func (o *DnsSettingsResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state DnsSettingsResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location dns.Location

	{
		var terraformLocation DnsSettingsLocation
		resp.Diagnostics.Append(savestate.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.System.IsNull() {
			location.System = &dns.SystemLocation{}
			var innerLocation DnsSettingsSystemLocation
			resp.Diagnostics.Append(terraformLocation.System.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.System.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &dns.TemplateLocation{}
			var innerLocation DnsSettingsTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &dns.TemplateStackLocation{}
			var innerLocation DnsSettingsTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_dns_settings_resource",
		"function":      "Read",
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, location)
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *DnsSettingsResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state DnsSettingsResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location dns.Location

	{
		var terraformLocation DnsSettingsLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.System.IsNull() {
			location.System = &dns.SystemLocation{}
			var innerLocation DnsSettingsSystemLocation
			resp.Diagnostics.Append(terraformLocation.System.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.System.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &dns.TemplateLocation{}
			var innerLocation DnsSettingsTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &dns.TemplateStackLocation{}
			var innerLocation DnsSettingsTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_dns_settings_resource",
		"function":      "Update",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}
	obj, err := r.manager.Read(ctx, location)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Perform the operation.
	updated, err := r.manager.Update(ctx, location, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	copy_diags := state.CopyFromPango(ctx, updated, nil)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *DnsSettingsResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state DnsSettingsResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_dns_settings_resource",
		"function":      "Delete",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var location dns.Location

	{
		var terraformLocation DnsSettingsLocation
		resp.Diagnostics.Append(state.Location.As(ctx, &terraformLocation, basetypes.ObjectAsOptions{})...)
		if resp.Diagnostics.HasError() {
			return
		}

		if !terraformLocation.System.IsNull() {
			location.System = &dns.SystemLocation{}
			var innerLocation DnsSettingsSystemLocation
			resp.Diagnostics.Append(terraformLocation.System.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.System.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.Template.IsNull() {
			location.Template = &dns.TemplateLocation{}
			var innerLocation DnsSettingsTemplateLocation
			resp.Diagnostics.Append(terraformLocation.Template.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.Template.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.Template.Template = innerLocation.Name.ValueString()
			location.Template.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}

		if !terraformLocation.TemplateStack.IsNull() {
			location.TemplateStack = &dns.TemplateStackLocation{}
			var innerLocation DnsSettingsTemplateStackLocation
			resp.Diagnostics.Append(terraformLocation.TemplateStack.As(ctx, &innerLocation, basetypes.ObjectAsOptions{})...)
			if resp.Diagnostics.HasError() {
				return
			}
			location.TemplateStack.PanoramaDevice = innerLocation.PanoramaDevice.ValueString()
			location.TemplateStack.TemplateStack = innerLocation.Name.ValueString()
			location.TemplateStack.NgfwDevice = innerLocation.NgfwDevice.ValueString()
		}
	}

	var obj *dns.Config
	resp.Diagnostics.Append(state.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	err := r.manager.Delete(ctx, location, obj)
	if err != nil && errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}

}

func (r *DnsSettingsResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

}

type DnsSettingsSystemLocation struct {
	NgfwDevice types.String `tfsdk:"ngfw_device"`
}
type DnsSettingsTemplateLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type DnsSettingsTemplateStackLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
	NgfwDevice     types.String `tfsdk:"ngfw_device"`
}
type DnsSettingsLocation struct {
	System        types.Object `tfsdk:"system"`
	Template      types.Object `tfsdk:"template"`
	TemplateStack types.Object `tfsdk:"template_stack"`
}

func DnsSettingsLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"system": rsschema.SingleNestedAttribute{
				Description: "Located in a system settings.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Object{
					objectvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("system"),
						path.MatchRelative().AtParent().AtName("template"),
						path.MatchRelative().AtParent().AtName("template_stack"),
					}...),
				},
			},
			"template": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "The panorama device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The template.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
			"template_stack": rsschema.SingleNestedAttribute{
				Description: "Located in a specific template stack.",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "The panorama device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "The template stack.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"ngfw_device": rsschema.StringAttribute{
						Description: "The NGFW device.",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o DnsSettingsSystemLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
	}

	obj := shadow{
		NgfwDevice: o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *DnsSettingsSystemLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		NgfwDevice *string `json:"ngfw_device,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o DnsSettingsTemplateLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *DnsSettingsTemplateLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o DnsSettingsTemplateStackLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	obj := shadow{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
		NgfwDevice:     o.NgfwDevice.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *DnsSettingsTemplateStackLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device,omitempty"`
		Name           *string `json:"name,omitempty"`
		NgfwDevice     *string `json:"ngfw_device,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)
	o.NgfwDevice = types.StringPointerValue(shadow.NgfwDevice)

	return nil
}
func (o DnsSettingsLocation) MarshalJSON() ([]byte, error) {
	type shadow struct {
		System        *DnsSettingsSystemLocation        `json:"system,omitempty"`
		Template      *DnsSettingsTemplateLocation      `json:"template,omitempty"`
		TemplateStack *DnsSettingsTemplateStackLocation `json:"template_stack,omitempty"`
	}
	var system_object *DnsSettingsSystemLocation
	{
		diags := o.System.As(context.TODO(), &system_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal system into JSON document", diags.Errors())
		}
	}
	var template_object *DnsSettingsTemplateLocation
	{
		diags := o.Template.As(context.TODO(), &template_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template into JSON document", diags.Errors())
		}
	}
	var templateStack_object *DnsSettingsTemplateStackLocation
	{
		diags := o.TemplateStack.As(context.TODO(), &templateStack_object, basetypes.ObjectAsOptions{})
		if diags.HasError() {
			return nil, NewDiagnosticsError("Failed to marshal template_stack into JSON document", diags.Errors())
		}
	}

	obj := shadow{
		System:        system_object,
		Template:      template_object,
		TemplateStack: templateStack_object,
	}

	return json.Marshal(obj)
}

func (o *DnsSettingsLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		System        *DnsSettingsSystemLocation        `json:"system,omitempty"`
		Template      *DnsSettingsTemplateLocation      `json:"template,omitempty"`
		TemplateStack *DnsSettingsTemplateStackLocation `json:"template_stack,omitempty"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	var system_object types.Object
	{
		var diags_tmp diag.Diagnostics
		system_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.System.AttributeTypes(), shadow.System)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into system", diags_tmp.Errors())
		}
	}
	var template_object types.Object
	{
		var diags_tmp diag.Diagnostics
		template_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.Template.AttributeTypes(), shadow.Template)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template", diags_tmp.Errors())
		}
	}
	var templateStack_object types.Object
	{
		var diags_tmp diag.Diagnostics
		templateStack_object, diags_tmp = types.ObjectValueFrom(context.TODO(), shadow.TemplateStack.AttributeTypes(), shadow.TemplateStack)
		if diags_tmp.HasError() {
			return NewDiagnosticsError("Failed to unmarshal JSON document into template_stack", diags_tmp.Errors())
		}
	}
	o.System = system_object
	o.Template = template_object
	o.TemplateStack = templateStack_object

	return nil
}

func (o *DnsSettingsSystemLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"ngfw_device": types.StringType,
	}
}
func (o *DnsSettingsTemplateLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
		"ngfw_device":     types.StringType,
	}
}
func (o *DnsSettingsTemplateStackLocation) AttributeTypes() map[string]attr.Type {
	return map[string]attr.Type{
		"panorama_device": types.StringType,
		"name":            types.StringType,
		"ngfw_device":     types.StringType,
	}
}
func (o *DnsSettingsLocation) AttributeTypes() map[string]attr.Type {
	var systemObj DnsSettingsSystemLocation
	var templateObj DnsSettingsTemplateLocation
	var templateStackObj DnsSettingsTemplateStackLocation
	return map[string]attr.Type{
		"system": types.ObjectType{
			AttrTypes: systemObj.AttributeTypes(),
		},
		"template": types.ObjectType{
			AttrTypes: templateObj.AttributeTypes(),
		},
		"template_stack": types.ObjectType{
			AttrTypes: templateStackObj.AttributeTypes(),
		},
	}
}
