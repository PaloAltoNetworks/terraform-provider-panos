package provider

// Note:  This file is automatically generated.  Manually made changes
// will be overwritten when the provider is generated.

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"

	"github.com/PaloAltoNetworks/pango"
	"github.com/PaloAltoNetworks/pango/objects/profiles/urlfiltering"

	"github.com/hashicorp/terraform-plugin-framework-validators/boolvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/objectvalidator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	dsschema "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	rsschema "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/objectplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	"github.com/hashicorp/terraform-plugin-log/tflog"

	sdkmanager "github.com/PaloAltoNetworks/terraform-provider-panos/internal/manager"
)

// Generate Terraform Data Source object.
var (
	_ datasource.DataSource              = &UrlFilteringSecurityProfileDataSource{}
	_ datasource.DataSourceWithConfigure = &UrlFilteringSecurityProfileDataSource{}
)

func NewUrlFilteringSecurityProfileDataSource() datasource.DataSource {
	return &UrlFilteringSecurityProfileDataSource{}
}

type UrlFilteringSecurityProfileDataSource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*urlfiltering.Entry, urlfiltering.Location, *urlfiltering.Service]
}

type UrlFilteringSecurityProfileDataSourceFilter struct {
	// TODO: Generate Data Source filter via function
}

type UrlFilteringSecurityProfileDataSourceModel struct {
	Location              UrlFilteringSecurityProfileLocation                               `tfsdk:"location"`
	Name                  types.String                                                      `tfsdk:"name"`
	Description           types.String                                                      `tfsdk:"description"`
	LogHttpHdrXff         types.Bool                                                        `tfsdk:"log_http_hdr_xff"`
	Override              types.List                                                        `tfsdk:"override"`
	Alert                 types.List                                                        `tfsdk:"alert"`
	Allow                 types.List                                                        `tfsdk:"allow"`
	CredentialEnforcement *UrlFilteringSecurityProfileDataSourceCredentialEnforcementObject `tfsdk:"credential_enforcement"`
	HttpHeaderInsertion   types.List                                                        `tfsdk:"http_header_insertion"`
	LogHttpHdrUserAgent   types.Bool                                                        `tfsdk:"log_http_hdr_user_agent"`
	MlavCategoryException types.List                                                        `tfsdk:"mlav_category_exception"`
	CloudInlineCat        types.Bool                                                        `tfsdk:"cloud_inline_cat"`
	LogHttpHdrReferer     types.Bool                                                        `tfsdk:"log_http_hdr_referer"`
	EnableContainerPage   types.Bool                                                        `tfsdk:"enable_container_page"`
	LocalInlineCat        types.Bool                                                        `tfsdk:"local_inline_cat"`
	LogContainerPageOnly  types.Bool                                                        `tfsdk:"log_container_page_only"`
	SafeSearchEnforcement types.Bool                                                        `tfsdk:"safe_search_enforcement"`
	Block                 types.List                                                        `tfsdk:"block"`
	Continue              types.List                                                        `tfsdk:"continue"`
	DisableOverride       types.String                                                      `tfsdk:"disable_override"`
}
type UrlFilteringSecurityProfileDataSourceCredentialEnforcementObject struct {
	Alert       types.List                                                            `tfsdk:"alert"`
	Allow       types.List                                                            `tfsdk:"allow"`
	Block       types.List                                                            `tfsdk:"block"`
	Continue    types.List                                                            `tfsdk:"continue"`
	LogSeverity types.String                                                          `tfsdk:"log_severity"`
	Mode        *UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeObject `tfsdk:"mode"`
}
type UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeObject struct {
	Disabled          *UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeDisabledObject          `tfsdk:"disabled"`
	DomainCredentials *UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeDomainCredentialsObject `tfsdk:"domain_credentials"`
	GroupMapping      types.String                                                                           `tfsdk:"group_mapping"`
	IpUser            *UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeIpUserObject            `tfsdk:"ip_user"`
}
type UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeIpUserObject struct {
}
type UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeDisabledObject struct {
}
type UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeDomainCredentialsObject struct {
}
type UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionObject struct {
	Name            types.String `tfsdk:"name"`
	DisableOverride types.String `tfsdk:"disable_override"`
	Type            types.List   `tfsdk:"type"`
}
type UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionTypeObject struct {
	Name    types.String `tfsdk:"name"`
	Headers types.List   `tfsdk:"headers"`
	Domains types.List   `tfsdk:"domains"`
}
type UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionTypeHeadersObject struct {
	Name   types.String `tfsdk:"name"`
	Header types.String `tfsdk:"header"`
	Value  types.String `tfsdk:"value"`
	Log    types.Bool   `tfsdk:"log"`
}

func (o *UrlFilteringSecurityProfileDataSourceModel) CopyToPango(ctx context.Context, obj **urlfiltering.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	localInlineCat_value := o.LocalInlineCat.ValueBoolPointer()
	logContainerPageOnly_value := o.LogContainerPageOnly.ValueBoolPointer()
	safeSearchEnforcement_value := o.SafeSearchEnforcement.ValueBoolPointer()
	block_pango_entries := make([]string, 0)
	diags.Append(o.Block.ElementsAs(ctx, &block_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	continue_pango_entries := make([]string, 0)
	diags.Append(o.Continue.ElementsAs(ctx, &continue_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	disableOverride_value := o.DisableOverride.ValueStringPointer()
	enableContainerPage_value := o.EnableContainerPage.ValueBoolPointer()
	logHttpHdrXff_value := o.LogHttpHdrXff.ValueBoolPointer()
	override_pango_entries := make([]string, 0)
	diags.Append(o.Override.ElementsAs(ctx, &override_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	alert_pango_entries := make([]string, 0)
	diags.Append(o.Alert.ElementsAs(ctx, &alert_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	allow_pango_entries := make([]string, 0)
	diags.Append(o.Allow.ElementsAs(ctx, &allow_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var credentialEnforcement_entry *urlfiltering.CredentialEnforcement
	if o.CredentialEnforcement != nil {
		if *obj != nil && (*obj).CredentialEnforcement != nil {
			credentialEnforcement_entry = (*obj).CredentialEnforcement
		} else {
			credentialEnforcement_entry = new(urlfiltering.CredentialEnforcement)
		}

		diags.Append(o.CredentialEnforcement.CopyToPango(ctx, &credentialEnforcement_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	description_value := o.Description.ValueStringPointer()
	var httpHeaderInsertion_tf_entries []UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionObject
	var httpHeaderInsertion_pango_entries []urlfiltering.HttpHeaderInsertion
	{
		d := o.HttpHeaderInsertion.ElementsAs(ctx, &httpHeaderInsertion_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range httpHeaderInsertion_tf_entries {
			var entry *urlfiltering.HttpHeaderInsertion
			diags.Append(elt.CopyToPango(ctx, &entry, encrypted)...)
			if diags.HasError() {
				return diags
			}
			httpHeaderInsertion_pango_entries = append(httpHeaderInsertion_pango_entries, *entry)
		}
	}
	logHttpHdrUserAgent_value := o.LogHttpHdrUserAgent.ValueBoolPointer()
	mlavCategoryException_pango_entries := make([]string, 0)
	diags.Append(o.MlavCategoryException.ElementsAs(ctx, &mlavCategoryException_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	cloudInlineCat_value := o.CloudInlineCat.ValueBoolPointer()
	logHttpHdrReferer_value := o.LogHttpHdrReferer.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(urlfiltering.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).LocalInlineCat = localInlineCat_value
	(*obj).LogContainerPageOnly = logContainerPageOnly_value
	(*obj).SafeSearchEnforcement = safeSearchEnforcement_value
	(*obj).Block = block_pango_entries
	(*obj).Continue = continue_pango_entries
	(*obj).DisableOverride = disableOverride_value
	(*obj).EnableContainerPage = enableContainerPage_value
	(*obj).LogHttpHdrXff = logHttpHdrXff_value
	(*obj).Override = override_pango_entries
	(*obj).Alert = alert_pango_entries
	(*obj).Allow = allow_pango_entries
	(*obj).CredentialEnforcement = credentialEnforcement_entry
	(*obj).Description = description_value
	(*obj).HttpHeaderInsertion = httpHeaderInsertion_pango_entries
	(*obj).LogHttpHdrUserAgent = logHttpHdrUserAgent_value
	(*obj).MlavCategoryException = mlavCategoryException_pango_entries
	(*obj).CloudInlineCat = cloudInlineCat_value
	(*obj).LogHttpHdrReferer = logHttpHdrReferer_value

	return diags
}
func (o *UrlFilteringSecurityProfileDataSourceCredentialEnforcementObject) CopyToPango(ctx context.Context, obj **urlfiltering.CredentialEnforcement, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	alert_pango_entries := make([]string, 0)
	diags.Append(o.Alert.ElementsAs(ctx, &alert_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	allow_pango_entries := make([]string, 0)
	diags.Append(o.Allow.ElementsAs(ctx, &allow_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	block_pango_entries := make([]string, 0)
	diags.Append(o.Block.ElementsAs(ctx, &block_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	continue_pango_entries := make([]string, 0)
	diags.Append(o.Continue.ElementsAs(ctx, &continue_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	logSeverity_value := o.LogSeverity.ValueStringPointer()
	var mode_entry *urlfiltering.CredentialEnforcementMode
	if o.Mode != nil {
		if *obj != nil && (*obj).Mode != nil {
			mode_entry = (*obj).Mode
		} else {
			mode_entry = new(urlfiltering.CredentialEnforcementMode)
		}

		diags.Append(o.Mode.CopyToPango(ctx, &mode_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(urlfiltering.CredentialEnforcement)
	}
	(*obj).Alert = alert_pango_entries
	(*obj).Allow = allow_pango_entries
	(*obj).Block = block_pango_entries
	(*obj).Continue = continue_pango_entries
	(*obj).LogSeverity = logSeverity_value
	(*obj).Mode = mode_entry

	return diags
}
func (o *UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeObject) CopyToPango(ctx context.Context, obj **urlfiltering.CredentialEnforcementMode, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var disabled_entry *urlfiltering.CredentialEnforcementModeDisabled
	if o.Disabled != nil {
		if *obj != nil && (*obj).Disabled != nil {
			disabled_entry = (*obj).Disabled
		} else {
			disabled_entry = new(urlfiltering.CredentialEnforcementModeDisabled)
		}

		diags.Append(o.Disabled.CopyToPango(ctx, &disabled_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var domainCredentials_entry *urlfiltering.CredentialEnforcementModeDomainCredentials
	if o.DomainCredentials != nil {
		if *obj != nil && (*obj).DomainCredentials != nil {
			domainCredentials_entry = (*obj).DomainCredentials
		} else {
			domainCredentials_entry = new(urlfiltering.CredentialEnforcementModeDomainCredentials)
		}

		diags.Append(o.DomainCredentials.CopyToPango(ctx, &domainCredentials_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	groupMapping_value := o.GroupMapping.ValueStringPointer()
	var ipUser_entry *urlfiltering.CredentialEnforcementModeIpUser
	if o.IpUser != nil {
		if *obj != nil && (*obj).IpUser != nil {
			ipUser_entry = (*obj).IpUser
		} else {
			ipUser_entry = new(urlfiltering.CredentialEnforcementModeIpUser)
		}

		diags.Append(o.IpUser.CopyToPango(ctx, &ipUser_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(urlfiltering.CredentialEnforcementMode)
	}
	(*obj).Disabled = disabled_entry
	(*obj).DomainCredentials = domainCredentials_entry
	(*obj).GroupMapping = groupMapping_value
	(*obj).IpUser = ipUser_entry

	return diags
}
func (o *UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeDisabledObject) CopyToPango(ctx context.Context, obj **urlfiltering.CredentialEnforcementModeDisabled, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(urlfiltering.CredentialEnforcementModeDisabled)
	}

	return diags
}
func (o *UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeDomainCredentialsObject) CopyToPango(ctx context.Context, obj **urlfiltering.CredentialEnforcementModeDomainCredentials, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(urlfiltering.CredentialEnforcementModeDomainCredentials)
	}

	return diags
}
func (o *UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeIpUserObject) CopyToPango(ctx context.Context, obj **urlfiltering.CredentialEnforcementModeIpUser, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(urlfiltering.CredentialEnforcementModeIpUser)
	}

	return diags
}
func (o *UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionObject) CopyToPango(ctx context.Context, obj **urlfiltering.HttpHeaderInsertion, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	disableOverride_value := o.DisableOverride.ValueStringPointer()
	var type_tf_entries []UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionTypeObject
	var type_pango_entries []urlfiltering.HttpHeaderInsertionType
	{
		d := o.Type.ElementsAs(ctx, &type_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range type_tf_entries {
			var entry *urlfiltering.HttpHeaderInsertionType
			diags.Append(elt.CopyToPango(ctx, &entry, encrypted)...)
			if diags.HasError() {
				return diags
			}
			type_pango_entries = append(type_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(urlfiltering.HttpHeaderInsertion)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).DisableOverride = disableOverride_value
	(*obj).Type = type_pango_entries

	return diags
}
func (o *UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionTypeObject) CopyToPango(ctx context.Context, obj **urlfiltering.HttpHeaderInsertionType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var headers_tf_entries []UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionTypeHeadersObject
	var headers_pango_entries []urlfiltering.HttpHeaderInsertionTypeHeaders
	{
		d := o.Headers.ElementsAs(ctx, &headers_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range headers_tf_entries {
			var entry *urlfiltering.HttpHeaderInsertionTypeHeaders
			diags.Append(elt.CopyToPango(ctx, &entry, encrypted)...)
			if diags.HasError() {
				return diags
			}
			headers_pango_entries = append(headers_pango_entries, *entry)
		}
	}
	domains_pango_entries := make([]string, 0)
	diags.Append(o.Domains.ElementsAs(ctx, &domains_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(urlfiltering.HttpHeaderInsertionType)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Headers = headers_pango_entries
	(*obj).Domains = domains_pango_entries

	return diags
}
func (o *UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionTypeHeadersObject) CopyToPango(ctx context.Context, obj **urlfiltering.HttpHeaderInsertionTypeHeaders, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	header_value := o.Header.ValueStringPointer()
	value_value := o.Value.ValueStringPointer()
	log_value := o.Log.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(urlfiltering.HttpHeaderInsertionTypeHeaders)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Header = header_value
	(*obj).Value = value_value
	(*obj).Log = log_value

	return diags
}

func (o *UrlFilteringSecurityProfileDataSourceModel) CopyFromPango(ctx context.Context, obj *urlfiltering.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var block_list types.List
	{
		var list_diags diag.Diagnostics
		block_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Block)
		diags.Append(list_diags...)
	}
	var continue_list types.List
	{
		var list_diags diag.Diagnostics
		continue_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Continue)
		diags.Append(list_diags...)
	}
	var override_list types.List
	{
		var list_diags diag.Diagnostics
		override_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Override)
		diags.Append(list_diags...)
	}
	var alert_list types.List
	{
		var list_diags diag.Diagnostics
		alert_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Alert)
		diags.Append(list_diags...)
	}
	var allow_list types.List
	{
		var list_diags diag.Diagnostics
		allow_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Allow)
		diags.Append(list_diags...)
	}
	var httpHeaderInsertion_list types.List
	{
		var httpHeaderInsertion_tf_entries []UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionObject
		for _, elt := range obj.HttpHeaderInsertion {
			var entry UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionObject
			entry_diags := entry.CopyFromPango(ctx, &elt, encrypted)
			diags.Append(entry_diags...)
			httpHeaderInsertion_tf_entries = append(httpHeaderInsertion_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("http_header_insertion")
		httpHeaderInsertion_list, list_diags = types.ListValueFrom(ctx, schemaType, httpHeaderInsertion_tf_entries)
		diags.Append(list_diags...)
	}
	var mlavCategoryException_list types.List
	{
		var list_diags diag.Diagnostics
		mlavCategoryException_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.MlavCategoryException)
		diags.Append(list_diags...)
	}
	var credentialEnforcement_object *UrlFilteringSecurityProfileDataSourceCredentialEnforcementObject
	if obj.CredentialEnforcement != nil {
		credentialEnforcement_object = new(UrlFilteringSecurityProfileDataSourceCredentialEnforcementObject)

		diags.Append(credentialEnforcement_object.CopyFromPango(ctx, obj.CredentialEnforcement, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var localInlineCat_value types.Bool
	if obj.LocalInlineCat != nil {
		localInlineCat_value = types.BoolValue(*obj.LocalInlineCat)
	}
	var logContainerPageOnly_value types.Bool
	if obj.LogContainerPageOnly != nil {
		logContainerPageOnly_value = types.BoolValue(*obj.LogContainerPageOnly)
	}
	var safeSearchEnforcement_value types.Bool
	if obj.SafeSearchEnforcement != nil {
		safeSearchEnforcement_value = types.BoolValue(*obj.SafeSearchEnforcement)
	}
	var disableOverride_value types.String
	if obj.DisableOverride != nil {
		disableOverride_value = types.StringValue(*obj.DisableOverride)
	}
	var enableContainerPage_value types.Bool
	if obj.EnableContainerPage != nil {
		enableContainerPage_value = types.BoolValue(*obj.EnableContainerPage)
	}
	var logHttpHdrXff_value types.Bool
	if obj.LogHttpHdrXff != nil {
		logHttpHdrXff_value = types.BoolValue(*obj.LogHttpHdrXff)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var logHttpHdrUserAgent_value types.Bool
	if obj.LogHttpHdrUserAgent != nil {
		logHttpHdrUserAgent_value = types.BoolValue(*obj.LogHttpHdrUserAgent)
	}
	var cloudInlineCat_value types.Bool
	if obj.CloudInlineCat != nil {
		cloudInlineCat_value = types.BoolValue(*obj.CloudInlineCat)
	}
	var logHttpHdrReferer_value types.Bool
	if obj.LogHttpHdrReferer != nil {
		logHttpHdrReferer_value = types.BoolValue(*obj.LogHttpHdrReferer)
	}
	o.Name = types.StringValue(obj.Name)
	o.LocalInlineCat = localInlineCat_value
	o.LogContainerPageOnly = logContainerPageOnly_value
	o.SafeSearchEnforcement = safeSearchEnforcement_value
	o.Block = block_list
	o.Continue = continue_list
	o.DisableOverride = disableOverride_value
	o.EnableContainerPage = enableContainerPage_value
	o.LogHttpHdrXff = logHttpHdrXff_value
	o.Override = override_list
	o.Alert = alert_list
	o.Allow = allow_list
	o.CredentialEnforcement = credentialEnforcement_object
	o.Description = description_value
	o.HttpHeaderInsertion = httpHeaderInsertion_list
	o.LogHttpHdrUserAgent = logHttpHdrUserAgent_value
	o.MlavCategoryException = mlavCategoryException_list
	o.CloudInlineCat = cloudInlineCat_value
	o.LogHttpHdrReferer = logHttpHdrReferer_value

	return diags
}

func (o *UrlFilteringSecurityProfileDataSourceCredentialEnforcementObject) CopyFromPango(ctx context.Context, obj *urlfiltering.CredentialEnforcement, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var alert_list types.List
	{
		var list_diags diag.Diagnostics
		alert_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Alert)
		diags.Append(list_diags...)
	}
	var allow_list types.List
	{
		var list_diags diag.Diagnostics
		allow_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Allow)
		diags.Append(list_diags...)
	}
	var block_list types.List
	{
		var list_diags diag.Diagnostics
		block_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Block)
		diags.Append(list_diags...)
	}
	var continue_list types.List
	{
		var list_diags diag.Diagnostics
		continue_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Continue)
		diags.Append(list_diags...)
	}
	var mode_object *UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeObject
	if obj.Mode != nil {
		mode_object = new(UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeObject)

		diags.Append(mode_object.CopyFromPango(ctx, obj.Mode, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var logSeverity_value types.String
	if obj.LogSeverity != nil {
		logSeverity_value = types.StringValue(*obj.LogSeverity)
	}
	o.LogSeverity = logSeverity_value
	o.Mode = mode_object
	o.Alert = alert_list
	o.Allow = allow_list
	o.Block = block_list
	o.Continue = continue_list

	return diags
}

func (o *UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeObject) CopyFromPango(ctx context.Context, obj *urlfiltering.CredentialEnforcementMode, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var domainCredentials_object *UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeDomainCredentialsObject
	if obj.DomainCredentials != nil {
		domainCredentials_object = new(UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeDomainCredentialsObject)

		diags.Append(domainCredentials_object.CopyFromPango(ctx, obj.DomainCredentials, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var ipUser_object *UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeIpUserObject
	if obj.IpUser != nil {
		ipUser_object = new(UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeIpUserObject)

		diags.Append(ipUser_object.CopyFromPango(ctx, obj.IpUser, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var disabled_object *UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeDisabledObject
	if obj.Disabled != nil {
		disabled_object = new(UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeDisabledObject)

		diags.Append(disabled_object.CopyFromPango(ctx, obj.Disabled, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var groupMapping_value types.String
	if obj.GroupMapping != nil {
		groupMapping_value = types.StringValue(*obj.GroupMapping)
	}
	o.DomainCredentials = domainCredentials_object
	o.GroupMapping = groupMapping_value
	o.IpUser = ipUser_object
	o.Disabled = disabled_object

	return diags
}

func (o *UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeDisabledObject) CopyFromPango(ctx context.Context, obj *urlfiltering.CredentialEnforcementModeDisabled, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeDomainCredentialsObject) CopyFromPango(ctx context.Context, obj *urlfiltering.CredentialEnforcementModeDomainCredentials, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeIpUserObject) CopyFromPango(ctx context.Context, obj *urlfiltering.CredentialEnforcementModeIpUser, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionObject) CopyFromPango(ctx context.Context, obj *urlfiltering.HttpHeaderInsertion, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var type_list types.List
	{
		var type_tf_entries []UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionTypeObject
		for _, elt := range obj.Type {
			var entry UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionTypeObject
			entry_diags := entry.CopyFromPango(ctx, &elt, encrypted)
			diags.Append(entry_diags...)
			type_tf_entries = append(type_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("type")
		type_list, list_diags = types.ListValueFrom(ctx, schemaType, type_tf_entries)
		diags.Append(list_diags...)
	}

	var disableOverride_value types.String
	if obj.DisableOverride != nil {
		disableOverride_value = types.StringValue(*obj.DisableOverride)
	}
	o.Name = types.StringValue(obj.Name)
	o.DisableOverride = disableOverride_value
	o.Type = type_list

	return diags
}

func (o *UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionTypeObject) CopyFromPango(ctx context.Context, obj *urlfiltering.HttpHeaderInsertionType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var headers_list types.List
	{
		var headers_tf_entries []UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionTypeHeadersObject
		for _, elt := range obj.Headers {
			var entry UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionTypeHeadersObject
			entry_diags := entry.CopyFromPango(ctx, &elt, encrypted)
			diags.Append(entry_diags...)
			headers_tf_entries = append(headers_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("headers")
		headers_list, list_diags = types.ListValueFrom(ctx, schemaType, headers_tf_entries)
		diags.Append(list_diags...)
	}
	var domains_list types.List
	{
		var list_diags diag.Diagnostics
		domains_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Domains)
		diags.Append(list_diags...)
	}

	o.Name = types.StringValue(obj.Name)
	o.Headers = headers_list
	o.Domains = domains_list

	return diags
}

func (o *UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionTypeHeadersObject) CopyFromPango(ctx context.Context, obj *urlfiltering.HttpHeaderInsertionTypeHeaders, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var header_value types.String
	if obj.Header != nil {
		header_value = types.StringValue(*obj.Header)
	}
	var value_value types.String
	if obj.Value != nil {
		value_value = types.StringValue(*obj.Value)
	}
	var log_value types.Bool
	if obj.Log != nil {
		log_value = types.BoolValue(*obj.Log)
	}
	o.Name = types.StringValue(obj.Name)
	o.Header = header_value
	o.Value = value_value
	o.Log = log_value

	return diags
}

func UrlFilteringSecurityProfileDataSourceSchema() dsschema.Schema {
	return dsschema.Schema{
		Attributes: map[string]dsschema.Attribute{

			"location": UrlFilteringSecurityProfileDataSourceLocationSchema(),

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"http_header_insertion": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionSchema(),
			},

			"log_http_hdr_user_agent": dsschema.BoolAttribute{
				Description: "Log HTTP Header User-Agent field",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"mlav_category_exception": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"cloud_inline_cat": dsschema.BoolAttribute{
				Description: "Enable cloud inline categorization",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_http_hdr_referer": dsschema.BoolAttribute{
				Description: "Log HTTP Header Referer field",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"enable_container_page": dsschema.BoolAttribute{
				Description: "Track container page",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"local_inline_cat": dsschema.BoolAttribute{
				Description: "Enable local inline categorization",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_container_page_only": dsschema.BoolAttribute{
				Description: "Log container page only",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"safe_search_enforcement": dsschema.BoolAttribute{
				Description: "Safe-Search will be enforced if it is set ",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"block": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"continue": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"disable_override": dsschema.StringAttribute{
				Description: "disable object override in child device groups",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"description": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_http_hdr_xff": dsschema.BoolAttribute{
				Description: "Log HTTP Header X-Forwarded-For field",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"override": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"alert": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"allow": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"credential_enforcement": UrlFilteringSecurityProfileDataSourceCredentialEnforcementSchema(),
		},
	}
}

func (o *UrlFilteringSecurityProfileDataSourceModel) getTypeFor(name string) attr.Type {
	schema := UrlFilteringSecurityProfileDataSourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"disable_override": dsschema.StringAttribute{
				Description: "disable object override in child device groups",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"type": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionTypeSchema(),
			},
		},
	}
}

func (o *UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionObject) getTypeFor(name string) attr.Type {
	schema := UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionTypeSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"headers": dsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     true,
				Sensitive:    false,
				NestedObject: UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionTypeHeadersSchema(),
			},

			"domains": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionTypeObject) getTypeFor(name string) attr.Type {
	schema := UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionTypeHeadersSchema() dsschema.NestedAttributeObject {
	return dsschema.NestedAttributeObject{
		Attributes: map[string]dsschema.Attribute{

			"name": dsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"header": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"value": dsschema.StringAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log": dsschema.BoolAttribute{
				Description: "",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionTypeHeadersObject) getTypeFor(name string) attr.Type {
	schema := UrlFilteringSecurityProfileDataSourceHttpHeaderInsertionTypeHeadersSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func UrlFilteringSecurityProfileDataSourceCredentialEnforcementSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"alert": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"allow": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"block": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"continue": dsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    true,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"log_severity": dsschema.StringAttribute{
				Description: "Log severity when credential matched",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"mode": UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeSchema(),
		},
	}
}

func (o *UrlFilteringSecurityProfileDataSourceCredentialEnforcementObject) getTypeFor(name string) attr.Type {
	schema := UrlFilteringSecurityProfileDataSourceCredentialEnforcementSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]dsschema.Attribute{

			"disabled": UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeDisabledSchema(),

			"domain_credentials": UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeDomainCredentialsSchema(),

			"group_mapping": dsschema.StringAttribute{
				Description: "Use Group Mapping",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"ip_user": UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeIpUserSchema(),
		},
	}
}

func (o *UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeObject) getTypeFor(name string) attr.Type {
	schema := UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeIpUserSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("domain_credentials"),
				path.MatchRelative().AtParent().AtName("group_mapping"),
				path.MatchRelative().AtParent().AtName("ip_user"),
				path.MatchRelative().AtParent().AtName("disabled"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeIpUserObject) getTypeFor(name string) attr.Type {
	schema := UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeIpUserSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeDisabledSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("domain_credentials"),
				path.MatchRelative().AtParent().AtName("group_mapping"),
				path.MatchRelative().AtParent().AtName("ip_user"),
				path.MatchRelative().AtParent().AtName("disabled"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeDisabledObject) getTypeFor(name string) attr.Type {
	schema := UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeDisabledSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeDomainCredentialsSchema() dsschema.SingleNestedAttribute {
	return dsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    true,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("domain_credentials"),
				path.MatchRelative().AtParent().AtName("group_mapping"),
				path.MatchRelative().AtParent().AtName("ip_user"),
				path.MatchRelative().AtParent().AtName("disabled"),
			}...),
		},
		Attributes: map[string]dsschema.Attribute{},
	}
}

func (o *UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeDomainCredentialsObject) getTypeFor(name string) attr.Type {
	schema := UrlFilteringSecurityProfileDataSourceCredentialEnforcementModeDomainCredentialsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case dsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case dsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func UrlFilteringSecurityProfileDataSourceLocationSchema() rsschema.Attribute {
	return UrlFilteringSecurityProfileLocationSchema()
}

// Metadata returns the data source type name.
func (d *UrlFilteringSecurityProfileDataSource) Metadata(_ context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_url_filtering_security_profile"
}

// Schema defines the schema for this data source.
func (d *UrlFilteringSecurityProfileDataSource) Schema(_ context.Context, _ datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = UrlFilteringSecurityProfileDataSourceSchema()
}

// Configure prepares the struct.
func (d *UrlFilteringSecurityProfileDataSource) Configure(_ context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	d.client = req.ProviderData.(*pango.Client)
	specifier, _, err := urlfiltering.Versioning(d.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	d.manager = sdkmanager.NewEntryObjectManager(d.client, urlfiltering.NewService(d.client), specifier, urlfiltering.SpecMatches)
}
func (o *UrlFilteringSecurityProfileDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {

	var savestate, state UrlFilteringSecurityProfileDataSourceModel
	resp.Diagnostics.Append(req.Config.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location urlfiltering.Location

	if savestate.Location.DeviceGroup != nil {
		location.DeviceGroup = &urlfiltering.DeviceGroupLocation{

			PanoramaDevice: savestate.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    savestate.Location.DeviceGroup.Name.ValueString(),
		}
	}
	if !savestate.Location.Shared.IsNull() && savestate.Location.Shared.ValueBool() {
		location.Shared = true
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_url_filtering_security_profile_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, location, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.Diagnostics.AddError("Error reading data", err.Error())
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}

// Generate Terraform Resource object
var (
	_ resource.Resource                = &UrlFilteringSecurityProfileResource{}
	_ resource.ResourceWithConfigure   = &UrlFilteringSecurityProfileResource{}
	_ resource.ResourceWithImportState = &UrlFilteringSecurityProfileResource{}
)

func NewUrlFilteringSecurityProfileResource() resource.Resource {
	if _, found := resourceFuncMap["panos_url_filtering_security_profile"]; !found {
		resourceFuncMap["panos_url_filtering_security_profile"] = resourceFuncs{
			CreateImportId: UrlFilteringSecurityProfileImportStateCreator,
		}
	}
	return &UrlFilteringSecurityProfileResource{}
}

type UrlFilteringSecurityProfileResource struct {
	client  *pango.Client
	manager *sdkmanager.EntryObjectManager[*urlfiltering.Entry, urlfiltering.Location, *urlfiltering.Service]
}

func UrlFilteringSecurityProfileResourceLocationSchema() rsschema.Attribute {
	return UrlFilteringSecurityProfileLocationSchema()
}

type UrlFilteringSecurityProfileResourceModel struct {
	Location              UrlFilteringSecurityProfileLocation                             `tfsdk:"location"`
	Name                  types.String                                                    `tfsdk:"name"`
	LogHttpHdrXff         types.Bool                                                      `tfsdk:"log_http_hdr_xff"`
	Override              types.List                                                      `tfsdk:"override"`
	Alert                 types.List                                                      `tfsdk:"alert"`
	Allow                 types.List                                                      `tfsdk:"allow"`
	CredentialEnforcement *UrlFilteringSecurityProfileResourceCredentialEnforcementObject `tfsdk:"credential_enforcement"`
	Description           types.String                                                    `tfsdk:"description"`
	HttpHeaderInsertion   types.List                                                      `tfsdk:"http_header_insertion"`
	LogHttpHdrUserAgent   types.Bool                                                      `tfsdk:"log_http_hdr_user_agent"`
	MlavCategoryException types.List                                                      `tfsdk:"mlav_category_exception"`
	CloudInlineCat        types.Bool                                                      `tfsdk:"cloud_inline_cat"`
	LogHttpHdrReferer     types.Bool                                                      `tfsdk:"log_http_hdr_referer"`
	LocalInlineCat        types.Bool                                                      `tfsdk:"local_inline_cat"`
	LogContainerPageOnly  types.Bool                                                      `tfsdk:"log_container_page_only"`
	SafeSearchEnforcement types.Bool                                                      `tfsdk:"safe_search_enforcement"`
	Block                 types.List                                                      `tfsdk:"block"`
	Continue              types.List                                                      `tfsdk:"continue"`
	DisableOverride       types.String                                                    `tfsdk:"disable_override"`
	EnableContainerPage   types.Bool                                                      `tfsdk:"enable_container_page"`
}
type UrlFilteringSecurityProfileResourceCredentialEnforcementObject struct {
	Alert       types.List                                                          `tfsdk:"alert"`
	Allow       types.List                                                          `tfsdk:"allow"`
	Block       types.List                                                          `tfsdk:"block"`
	Continue    types.List                                                          `tfsdk:"continue"`
	LogSeverity types.String                                                        `tfsdk:"log_severity"`
	Mode        *UrlFilteringSecurityProfileResourceCredentialEnforcementModeObject `tfsdk:"mode"`
}
type UrlFilteringSecurityProfileResourceCredentialEnforcementModeObject struct {
	Disabled          *UrlFilteringSecurityProfileResourceCredentialEnforcementModeDisabledObject          `tfsdk:"disabled"`
	DomainCredentials *UrlFilteringSecurityProfileResourceCredentialEnforcementModeDomainCredentialsObject `tfsdk:"domain_credentials"`
	GroupMapping      types.String                                                                         `tfsdk:"group_mapping"`
	IpUser            *UrlFilteringSecurityProfileResourceCredentialEnforcementModeIpUserObject            `tfsdk:"ip_user"`
}
type UrlFilteringSecurityProfileResourceCredentialEnforcementModeDisabledObject struct {
}
type UrlFilteringSecurityProfileResourceCredentialEnforcementModeDomainCredentialsObject struct {
}
type UrlFilteringSecurityProfileResourceCredentialEnforcementModeIpUserObject struct {
}
type UrlFilteringSecurityProfileResourceHttpHeaderInsertionObject struct {
	Name            types.String `tfsdk:"name"`
	DisableOverride types.String `tfsdk:"disable_override"`
	Type            types.List   `tfsdk:"type"`
}
type UrlFilteringSecurityProfileResourceHttpHeaderInsertionTypeObject struct {
	Name    types.String `tfsdk:"name"`
	Headers types.List   `tfsdk:"headers"`
	Domains types.List   `tfsdk:"domains"`
}
type UrlFilteringSecurityProfileResourceHttpHeaderInsertionTypeHeadersObject struct {
	Name   types.String `tfsdk:"name"`
	Header types.String `tfsdk:"header"`
	Value  types.String `tfsdk:"value"`
	Log    types.Bool   `tfsdk:"log"`
}

func (r *UrlFilteringSecurityProfileResource) ValidateConfig(ctx context.Context, req resource.ValidateConfigRequest, resp *resource.ValidateConfigResponse) {
}

// <ResourceSchema>

func UrlFilteringSecurityProfileResourceSchema() rsschema.Schema {
	return rsschema.Schema{
		Attributes: map[string]rsschema.Attribute{

			"location": UrlFilteringSecurityProfileResourceLocationSchema(),

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"allow": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"credential_enforcement": UrlFilteringSecurityProfileResourceCredentialEnforcementSchema(),

			"description": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_http_hdr_xff": rsschema.BoolAttribute{
				Description: "Log HTTP Header X-Forwarded-For field",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"override": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"alert": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"log_http_hdr_user_agent": rsschema.BoolAttribute{
				Description: "Log HTTP Header User-Agent field",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"mlav_category_exception": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"http_header_insertion": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: UrlFilteringSecurityProfileResourceHttpHeaderInsertionSchema(),
			},

			"log_http_hdr_referer": rsschema.BoolAttribute{
				Description: "Log HTTP Header Referer field",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"cloud_inline_cat": rsschema.BoolAttribute{
				Description: "Enable cloud inline categorization",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"continue": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"disable_override": rsschema.StringAttribute{
				Description: "disable object override in child device groups",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("no"),

				Validators: []validator.String{
					stringvalidator.OneOf([]string{
						"yes",
						"no",
					}...),
				},
			},

			"enable_container_page": rsschema.BoolAttribute{
				Description: "Track container page",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"local_inline_cat": rsschema.BoolAttribute{
				Description: "Enable local inline categorization",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log_container_page_only": rsschema.BoolAttribute{
				Description: "Log container page only",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"safe_search_enforcement": rsschema.BoolAttribute{
				Description: "Safe-Search will be enforced if it is set ",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"block": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *UrlFilteringSecurityProfileResourceModel) getTypeFor(name string) attr.Type {
	schema := UrlFilteringSecurityProfileResourceSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func UrlFilteringSecurityProfileResourceCredentialEnforcementSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"alert": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"allow": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"block": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"continue": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},

			"log_severity": rsschema.StringAttribute{
				Description: "Log severity when credential matched",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("medium"),
			},

			"mode": UrlFilteringSecurityProfileResourceCredentialEnforcementModeSchema(),
		},
	}
}

func (o *UrlFilteringSecurityProfileResourceCredentialEnforcementObject) getTypeFor(name string) attr.Type {
	schema := UrlFilteringSecurityProfileResourceCredentialEnforcementSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func UrlFilteringSecurityProfileResourceCredentialEnforcementModeSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,
		Attributes: map[string]rsschema.Attribute{

			"group_mapping": rsschema.StringAttribute{
				Description: "Use Group Mapping",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,

				Validators: []validator.String{
					stringvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("disabled"),
						path.MatchRelative().AtParent().AtName("domain_credentials"),
						path.MatchRelative().AtParent().AtName("group_mapping"),
						path.MatchRelative().AtParent().AtName("ip_user"),
					}...),
				},
			},

			"ip_user": UrlFilteringSecurityProfileResourceCredentialEnforcementModeIpUserSchema(),

			"disabled": UrlFilteringSecurityProfileResourceCredentialEnforcementModeDisabledSchema(),

			"domain_credentials": UrlFilteringSecurityProfileResourceCredentialEnforcementModeDomainCredentialsSchema(),
		},
	}
}

func (o *UrlFilteringSecurityProfileResourceCredentialEnforcementModeObject) getTypeFor(name string) attr.Type {
	schema := UrlFilteringSecurityProfileResourceCredentialEnforcementModeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func UrlFilteringSecurityProfileResourceCredentialEnforcementModeDisabledSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("disabled"),
				path.MatchRelative().AtParent().AtName("domain_credentials"),
				path.MatchRelative().AtParent().AtName("group_mapping"),
				path.MatchRelative().AtParent().AtName("ip_user"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *UrlFilteringSecurityProfileResourceCredentialEnforcementModeDisabledObject) getTypeFor(name string) attr.Type {
	schema := UrlFilteringSecurityProfileResourceCredentialEnforcementModeDisabledSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func UrlFilteringSecurityProfileResourceCredentialEnforcementModeDomainCredentialsSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("disabled"),
				path.MatchRelative().AtParent().AtName("domain_credentials"),
				path.MatchRelative().AtParent().AtName("group_mapping"),
				path.MatchRelative().AtParent().AtName("ip_user"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *UrlFilteringSecurityProfileResourceCredentialEnforcementModeDomainCredentialsObject) getTypeFor(name string) attr.Type {
	schema := UrlFilteringSecurityProfileResourceCredentialEnforcementModeDomainCredentialsSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func UrlFilteringSecurityProfileResourceCredentialEnforcementModeIpUserSchema() rsschema.SingleNestedAttribute {
	return rsschema.SingleNestedAttribute{
		Description: "",
		Required:    false,
		Computed:    false,
		Optional:    true,
		Sensitive:   false,

		Validators: []validator.Object{
			objectvalidator.ExactlyOneOf(path.Expressions{
				path.MatchRelative().AtParent().AtName("disabled"),
				path.MatchRelative().AtParent().AtName("domain_credentials"),
				path.MatchRelative().AtParent().AtName("group_mapping"),
				path.MatchRelative().AtParent().AtName("ip_user"),
			}...),
		},
		Attributes: map[string]rsschema.Attribute{},
	}
}

func (o *UrlFilteringSecurityProfileResourceCredentialEnforcementModeIpUserObject) getTypeFor(name string) attr.Type {
	schema := UrlFilteringSecurityProfileResourceCredentialEnforcementModeIpUserSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func UrlFilteringSecurityProfileResourceHttpHeaderInsertionSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"disable_override": rsschema.StringAttribute{
				Description: "disable object override in child device groups",
				Computed:    true,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
				Default:     stringdefault.StaticString("no"),
			},

			"type": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: UrlFilteringSecurityProfileResourceHttpHeaderInsertionTypeSchema(),
			},
		},
	}
}

func (o *UrlFilteringSecurityProfileResourceHttpHeaderInsertionObject) getTypeFor(name string) attr.Type {
	schema := UrlFilteringSecurityProfileResourceHttpHeaderInsertionSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func UrlFilteringSecurityProfileResourceHttpHeaderInsertionTypeSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"headers": rsschema.ListNestedAttribute{
				Description:  "",
				Required:     false,
				Optional:     true,
				Computed:     false,
				Sensitive:    false,
				NestedObject: UrlFilteringSecurityProfileResourceHttpHeaderInsertionTypeHeadersSchema(),
			},

			"domains": rsschema.ListAttribute{
				Description: "",
				Required:    false,
				Optional:    true,
				Computed:    false,
				Sensitive:   false,
				ElementType: types.StringType,
			},
		},
	}
}

func (o *UrlFilteringSecurityProfileResourceHttpHeaderInsertionTypeObject) getTypeFor(name string) attr.Type {
	schema := UrlFilteringSecurityProfileResourceHttpHeaderInsertionTypeSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func UrlFilteringSecurityProfileResourceHttpHeaderInsertionTypeHeadersSchema() rsschema.NestedAttributeObject {
	return rsschema.NestedAttributeObject{
		Attributes: map[string]rsschema.Attribute{

			"name": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    true,
				Optional:    false,
				Sensitive:   false,
			},

			"header": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"value": rsschema.StringAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},

			"log": rsschema.BoolAttribute{
				Description: "",
				Computed:    false,
				Required:    false,
				Optional:    true,
				Sensitive:   false,
			},
		},
	}
}

func (o *UrlFilteringSecurityProfileResourceHttpHeaderInsertionTypeHeadersObject) getTypeFor(name string) attr.Type {
	schema := UrlFilteringSecurityProfileResourceHttpHeaderInsertionTypeHeadersSchema()
	if attr, ok := schema.Attributes[name]; !ok {
		panic(fmt.Sprintf("could not resolve schema for attribute %s", name))
	} else {
		switch attr := attr.(type) {
		case rsschema.ListNestedAttribute:
			return attr.NestedObject.Type()
		case rsschema.MapNestedAttribute:
			return attr.NestedObject.Type()
		default:
			return attr.GetType()
		}
	}

	panic("unreachable")
}

func (r *UrlFilteringSecurityProfileResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_url_filtering_security_profile"
}

func (r *UrlFilteringSecurityProfileResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = UrlFilteringSecurityProfileResourceSchema()
}

// </ResourceSchema>

func (r *UrlFilteringSecurityProfileResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	r.client = req.ProviderData.(*pango.Client)
	specifier, _, err := urlfiltering.Versioning(r.client.Versioning())
	if err != nil {
		resp.Diagnostics.AddError("Failed to configure SDK client", err.Error())
		return
	}
	r.manager = sdkmanager.NewEntryObjectManager(r.client, urlfiltering.NewService(r.client), specifier, urlfiltering.SpecMatches)
}

func (o *UrlFilteringSecurityProfileResourceModel) CopyToPango(ctx context.Context, obj **urlfiltering.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	description_value := o.Description.ValueStringPointer()
	logHttpHdrXff_value := o.LogHttpHdrXff.ValueBoolPointer()
	override_pango_entries := make([]string, 0)
	diags.Append(o.Override.ElementsAs(ctx, &override_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	alert_pango_entries := make([]string, 0)
	diags.Append(o.Alert.ElementsAs(ctx, &alert_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	allow_pango_entries := make([]string, 0)
	diags.Append(o.Allow.ElementsAs(ctx, &allow_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	var credentialEnforcement_entry *urlfiltering.CredentialEnforcement
	if o.CredentialEnforcement != nil {
		if *obj != nil && (*obj).CredentialEnforcement != nil {
			credentialEnforcement_entry = (*obj).CredentialEnforcement
		} else {
			credentialEnforcement_entry = new(urlfiltering.CredentialEnforcement)
		}

		diags.Append(o.CredentialEnforcement.CopyToPango(ctx, &credentialEnforcement_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var httpHeaderInsertion_tf_entries []UrlFilteringSecurityProfileResourceHttpHeaderInsertionObject
	var httpHeaderInsertion_pango_entries []urlfiltering.HttpHeaderInsertion
	{
		d := o.HttpHeaderInsertion.ElementsAs(ctx, &httpHeaderInsertion_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range httpHeaderInsertion_tf_entries {
			var entry *urlfiltering.HttpHeaderInsertion
			diags.Append(elt.CopyToPango(ctx, &entry, encrypted)...)
			if diags.HasError() {
				return diags
			}
			httpHeaderInsertion_pango_entries = append(httpHeaderInsertion_pango_entries, *entry)
		}
	}
	logHttpHdrUserAgent_value := o.LogHttpHdrUserAgent.ValueBoolPointer()
	mlavCategoryException_pango_entries := make([]string, 0)
	diags.Append(o.MlavCategoryException.ElementsAs(ctx, &mlavCategoryException_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	cloudInlineCat_value := o.CloudInlineCat.ValueBoolPointer()
	logHttpHdrReferer_value := o.LogHttpHdrReferer.ValueBoolPointer()
	enableContainerPage_value := o.EnableContainerPage.ValueBoolPointer()
	localInlineCat_value := o.LocalInlineCat.ValueBoolPointer()
	logContainerPageOnly_value := o.LogContainerPageOnly.ValueBoolPointer()
	safeSearchEnforcement_value := o.SafeSearchEnforcement.ValueBoolPointer()
	block_pango_entries := make([]string, 0)
	diags.Append(o.Block.ElementsAs(ctx, &block_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	continue_pango_entries := make([]string, 0)
	diags.Append(o.Continue.ElementsAs(ctx, &continue_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	disableOverride_value := o.DisableOverride.ValueStringPointer()

	if (*obj) == nil {
		*obj = new(urlfiltering.Entry)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Description = description_value
	(*obj).LogHttpHdrXff = logHttpHdrXff_value
	(*obj).Override = override_pango_entries
	(*obj).Alert = alert_pango_entries
	(*obj).Allow = allow_pango_entries
	(*obj).CredentialEnforcement = credentialEnforcement_entry
	(*obj).HttpHeaderInsertion = httpHeaderInsertion_pango_entries
	(*obj).LogHttpHdrUserAgent = logHttpHdrUserAgent_value
	(*obj).MlavCategoryException = mlavCategoryException_pango_entries
	(*obj).CloudInlineCat = cloudInlineCat_value
	(*obj).LogHttpHdrReferer = logHttpHdrReferer_value
	(*obj).EnableContainerPage = enableContainerPage_value
	(*obj).LocalInlineCat = localInlineCat_value
	(*obj).LogContainerPageOnly = logContainerPageOnly_value
	(*obj).SafeSearchEnforcement = safeSearchEnforcement_value
	(*obj).Block = block_pango_entries
	(*obj).Continue = continue_pango_entries
	(*obj).DisableOverride = disableOverride_value

	return diags
}
func (o *UrlFilteringSecurityProfileResourceCredentialEnforcementObject) CopyToPango(ctx context.Context, obj **urlfiltering.CredentialEnforcement, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	continue_pango_entries := make([]string, 0)
	diags.Append(o.Continue.ElementsAs(ctx, &continue_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	logSeverity_value := o.LogSeverity.ValueStringPointer()
	var mode_entry *urlfiltering.CredentialEnforcementMode
	if o.Mode != nil {
		if *obj != nil && (*obj).Mode != nil {
			mode_entry = (*obj).Mode
		} else {
			mode_entry = new(urlfiltering.CredentialEnforcementMode)
		}

		diags.Append(o.Mode.CopyToPango(ctx, &mode_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	alert_pango_entries := make([]string, 0)
	diags.Append(o.Alert.ElementsAs(ctx, &alert_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	allow_pango_entries := make([]string, 0)
	diags.Append(o.Allow.ElementsAs(ctx, &allow_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}
	block_pango_entries := make([]string, 0)
	diags.Append(o.Block.ElementsAs(ctx, &block_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(urlfiltering.CredentialEnforcement)
	}
	(*obj).Continue = continue_pango_entries
	(*obj).LogSeverity = logSeverity_value
	(*obj).Mode = mode_entry
	(*obj).Alert = alert_pango_entries
	(*obj).Allow = allow_pango_entries
	(*obj).Block = block_pango_entries

	return diags
}
func (o *UrlFilteringSecurityProfileResourceCredentialEnforcementModeObject) CopyToPango(ctx context.Context, obj **urlfiltering.CredentialEnforcementMode, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var disabled_entry *urlfiltering.CredentialEnforcementModeDisabled
	if o.Disabled != nil {
		if *obj != nil && (*obj).Disabled != nil {
			disabled_entry = (*obj).Disabled
		} else {
			disabled_entry = new(urlfiltering.CredentialEnforcementModeDisabled)
		}

		diags.Append(o.Disabled.CopyToPango(ctx, &disabled_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var domainCredentials_entry *urlfiltering.CredentialEnforcementModeDomainCredentials
	if o.DomainCredentials != nil {
		if *obj != nil && (*obj).DomainCredentials != nil {
			domainCredentials_entry = (*obj).DomainCredentials
		} else {
			domainCredentials_entry = new(urlfiltering.CredentialEnforcementModeDomainCredentials)
		}

		diags.Append(o.DomainCredentials.CopyToPango(ctx, &domainCredentials_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	groupMapping_value := o.GroupMapping.ValueStringPointer()
	var ipUser_entry *urlfiltering.CredentialEnforcementModeIpUser
	if o.IpUser != nil {
		if *obj != nil && (*obj).IpUser != nil {
			ipUser_entry = (*obj).IpUser
		} else {
			ipUser_entry = new(urlfiltering.CredentialEnforcementModeIpUser)
		}

		diags.Append(o.IpUser.CopyToPango(ctx, &ipUser_entry, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	if (*obj) == nil {
		*obj = new(urlfiltering.CredentialEnforcementMode)
	}
	(*obj).Disabled = disabled_entry
	(*obj).DomainCredentials = domainCredentials_entry
	(*obj).GroupMapping = groupMapping_value
	(*obj).IpUser = ipUser_entry

	return diags
}
func (o *UrlFilteringSecurityProfileResourceCredentialEnforcementModeDisabledObject) CopyToPango(ctx context.Context, obj **urlfiltering.CredentialEnforcementModeDisabled, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(urlfiltering.CredentialEnforcementModeDisabled)
	}

	return diags
}
func (o *UrlFilteringSecurityProfileResourceCredentialEnforcementModeDomainCredentialsObject) CopyToPango(ctx context.Context, obj **urlfiltering.CredentialEnforcementModeDomainCredentials, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(urlfiltering.CredentialEnforcementModeDomainCredentials)
	}

	return diags
}
func (o *UrlFilteringSecurityProfileResourceCredentialEnforcementModeIpUserObject) CopyToPango(ctx context.Context, obj **urlfiltering.CredentialEnforcementModeIpUser, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	if (*obj) == nil {
		*obj = new(urlfiltering.CredentialEnforcementModeIpUser)
	}

	return diags
}
func (o *UrlFilteringSecurityProfileResourceHttpHeaderInsertionObject) CopyToPango(ctx context.Context, obj **urlfiltering.HttpHeaderInsertion, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	disableOverride_value := o.DisableOverride.ValueStringPointer()
	var type_tf_entries []UrlFilteringSecurityProfileResourceHttpHeaderInsertionTypeObject
	var type_pango_entries []urlfiltering.HttpHeaderInsertionType
	{
		d := o.Type.ElementsAs(ctx, &type_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range type_tf_entries {
			var entry *urlfiltering.HttpHeaderInsertionType
			diags.Append(elt.CopyToPango(ctx, &entry, encrypted)...)
			if diags.HasError() {
				return diags
			}
			type_pango_entries = append(type_pango_entries, *entry)
		}
	}

	if (*obj) == nil {
		*obj = new(urlfiltering.HttpHeaderInsertion)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).DisableOverride = disableOverride_value
	(*obj).Type = type_pango_entries

	return diags
}
func (o *UrlFilteringSecurityProfileResourceHttpHeaderInsertionTypeObject) CopyToPango(ctx context.Context, obj **urlfiltering.HttpHeaderInsertionType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var headers_tf_entries []UrlFilteringSecurityProfileResourceHttpHeaderInsertionTypeHeadersObject
	var headers_pango_entries []urlfiltering.HttpHeaderInsertionTypeHeaders
	{
		d := o.Headers.ElementsAs(ctx, &headers_tf_entries, false)
		diags.Append(d...)
		if diags.HasError() {
			return diags
		}
		for _, elt := range headers_tf_entries {
			var entry *urlfiltering.HttpHeaderInsertionTypeHeaders
			diags.Append(elt.CopyToPango(ctx, &entry, encrypted)...)
			if diags.HasError() {
				return diags
			}
			headers_pango_entries = append(headers_pango_entries, *entry)
		}
	}
	domains_pango_entries := make([]string, 0)
	diags.Append(o.Domains.ElementsAs(ctx, &domains_pango_entries, false)...)
	if diags.HasError() {
		return diags
	}

	if (*obj) == nil {
		*obj = new(urlfiltering.HttpHeaderInsertionType)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Headers = headers_pango_entries
	(*obj).Domains = domains_pango_entries

	return diags
}
func (o *UrlFilteringSecurityProfileResourceHttpHeaderInsertionTypeHeadersObject) CopyToPango(ctx context.Context, obj **urlfiltering.HttpHeaderInsertionTypeHeaders, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	header_value := o.Header.ValueStringPointer()
	value_value := o.Value.ValueStringPointer()
	log_value := o.Log.ValueBoolPointer()

	if (*obj) == nil {
		*obj = new(urlfiltering.HttpHeaderInsertionTypeHeaders)
	}
	(*obj).Name = o.Name.ValueString()
	(*obj).Header = header_value
	(*obj).Value = value_value
	(*obj).Log = log_value

	return diags
}

func (o *UrlFilteringSecurityProfileResourceModel) CopyFromPango(ctx context.Context, obj *urlfiltering.Entry, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var block_list types.List
	{
		var list_diags diag.Diagnostics
		block_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Block)
		diags.Append(list_diags...)
	}
	var continue_list types.List
	{
		var list_diags diag.Diagnostics
		continue_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Continue)
		diags.Append(list_diags...)
	}
	var alert_list types.List
	{
		var list_diags diag.Diagnostics
		alert_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Alert)
		diags.Append(list_diags...)
	}
	var allow_list types.List
	{
		var list_diags diag.Diagnostics
		allow_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Allow)
		diags.Append(list_diags...)
	}
	var override_list types.List
	{
		var list_diags diag.Diagnostics
		override_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Override)
		diags.Append(list_diags...)
	}
	var httpHeaderInsertion_list types.List
	{
		var httpHeaderInsertion_tf_entries []UrlFilteringSecurityProfileResourceHttpHeaderInsertionObject
		for _, elt := range obj.HttpHeaderInsertion {
			var entry UrlFilteringSecurityProfileResourceHttpHeaderInsertionObject
			entry_diags := entry.CopyFromPango(ctx, &elt, encrypted)
			diags.Append(entry_diags...)
			httpHeaderInsertion_tf_entries = append(httpHeaderInsertion_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("http_header_insertion")
		httpHeaderInsertion_list, list_diags = types.ListValueFrom(ctx, schemaType, httpHeaderInsertion_tf_entries)
		diags.Append(list_diags...)
	}
	var mlavCategoryException_list types.List
	{
		var list_diags diag.Diagnostics
		mlavCategoryException_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.MlavCategoryException)
		diags.Append(list_diags...)
	}
	var credentialEnforcement_object *UrlFilteringSecurityProfileResourceCredentialEnforcementObject
	if obj.CredentialEnforcement != nil {
		credentialEnforcement_object = new(UrlFilteringSecurityProfileResourceCredentialEnforcementObject)

		diags.Append(credentialEnforcement_object.CopyFromPango(ctx, obj.CredentialEnforcement, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var cloudInlineCat_value types.Bool
	if obj.CloudInlineCat != nil {
		cloudInlineCat_value = types.BoolValue(*obj.CloudInlineCat)
	}
	var logHttpHdrReferer_value types.Bool
	if obj.LogHttpHdrReferer != nil {
		logHttpHdrReferer_value = types.BoolValue(*obj.LogHttpHdrReferer)
	}
	var disableOverride_value types.String
	if obj.DisableOverride != nil {
		disableOverride_value = types.StringValue(*obj.DisableOverride)
	}
	var enableContainerPage_value types.Bool
	if obj.EnableContainerPage != nil {
		enableContainerPage_value = types.BoolValue(*obj.EnableContainerPage)
	}
	var localInlineCat_value types.Bool
	if obj.LocalInlineCat != nil {
		localInlineCat_value = types.BoolValue(*obj.LocalInlineCat)
	}
	var logContainerPageOnly_value types.Bool
	if obj.LogContainerPageOnly != nil {
		logContainerPageOnly_value = types.BoolValue(*obj.LogContainerPageOnly)
	}
	var safeSearchEnforcement_value types.Bool
	if obj.SafeSearchEnforcement != nil {
		safeSearchEnforcement_value = types.BoolValue(*obj.SafeSearchEnforcement)
	}
	var description_value types.String
	if obj.Description != nil {
		description_value = types.StringValue(*obj.Description)
	}
	var logHttpHdrXff_value types.Bool
	if obj.LogHttpHdrXff != nil {
		logHttpHdrXff_value = types.BoolValue(*obj.LogHttpHdrXff)
	}
	var logHttpHdrUserAgent_value types.Bool
	if obj.LogHttpHdrUserAgent != nil {
		logHttpHdrUserAgent_value = types.BoolValue(*obj.LogHttpHdrUserAgent)
	}
	o.Name = types.StringValue(obj.Name)
	o.CloudInlineCat = cloudInlineCat_value
	o.LogHttpHdrReferer = logHttpHdrReferer_value
	o.Block = block_list
	o.Continue = continue_list
	o.DisableOverride = disableOverride_value
	o.EnableContainerPage = enableContainerPage_value
	o.LocalInlineCat = localInlineCat_value
	o.LogContainerPageOnly = logContainerPageOnly_value
	o.SafeSearchEnforcement = safeSearchEnforcement_value
	o.Alert = alert_list
	o.Allow = allow_list
	o.CredentialEnforcement = credentialEnforcement_object
	o.Description = description_value
	o.LogHttpHdrXff = logHttpHdrXff_value
	o.Override = override_list
	o.HttpHeaderInsertion = httpHeaderInsertion_list
	o.LogHttpHdrUserAgent = logHttpHdrUserAgent_value
	o.MlavCategoryException = mlavCategoryException_list

	return diags
}

func (o *UrlFilteringSecurityProfileResourceCredentialEnforcementObject) CopyFromPango(ctx context.Context, obj *urlfiltering.CredentialEnforcement, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var alert_list types.List
	{
		var list_diags diag.Diagnostics
		alert_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Alert)
		diags.Append(list_diags...)
	}
	var allow_list types.List
	{
		var list_diags diag.Diagnostics
		allow_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Allow)
		diags.Append(list_diags...)
	}
	var block_list types.List
	{
		var list_diags diag.Diagnostics
		block_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Block)
		diags.Append(list_diags...)
	}
	var continue_list types.List
	{
		var list_diags diag.Diagnostics
		continue_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Continue)
		diags.Append(list_diags...)
	}
	var mode_object *UrlFilteringSecurityProfileResourceCredentialEnforcementModeObject
	if obj.Mode != nil {
		mode_object = new(UrlFilteringSecurityProfileResourceCredentialEnforcementModeObject)

		diags.Append(mode_object.CopyFromPango(ctx, obj.Mode, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var logSeverity_value types.String
	if obj.LogSeverity != nil {
		logSeverity_value = types.StringValue(*obj.LogSeverity)
	}
	o.Alert = alert_list
	o.Allow = allow_list
	o.Block = block_list
	o.Continue = continue_list
	o.LogSeverity = logSeverity_value
	o.Mode = mode_object

	return diags
}

func (o *UrlFilteringSecurityProfileResourceCredentialEnforcementModeObject) CopyFromPango(ctx context.Context, obj *urlfiltering.CredentialEnforcementMode, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var disabled_object *UrlFilteringSecurityProfileResourceCredentialEnforcementModeDisabledObject
	if obj.Disabled != nil {
		disabled_object = new(UrlFilteringSecurityProfileResourceCredentialEnforcementModeDisabledObject)

		diags.Append(disabled_object.CopyFromPango(ctx, obj.Disabled, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var domainCredentials_object *UrlFilteringSecurityProfileResourceCredentialEnforcementModeDomainCredentialsObject
	if obj.DomainCredentials != nil {
		domainCredentials_object = new(UrlFilteringSecurityProfileResourceCredentialEnforcementModeDomainCredentialsObject)

		diags.Append(domainCredentials_object.CopyFromPango(ctx, obj.DomainCredentials, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}
	var ipUser_object *UrlFilteringSecurityProfileResourceCredentialEnforcementModeIpUserObject
	if obj.IpUser != nil {
		ipUser_object = new(UrlFilteringSecurityProfileResourceCredentialEnforcementModeIpUserObject)

		diags.Append(ipUser_object.CopyFromPango(ctx, obj.IpUser, encrypted)...)
		if diags.HasError() {
			return diags
		}
	}

	var groupMapping_value types.String
	if obj.GroupMapping != nil {
		groupMapping_value = types.StringValue(*obj.GroupMapping)
	}
	o.Disabled = disabled_object
	o.DomainCredentials = domainCredentials_object
	o.GroupMapping = groupMapping_value
	o.IpUser = ipUser_object

	return diags
}

func (o *UrlFilteringSecurityProfileResourceCredentialEnforcementModeDisabledObject) CopyFromPango(ctx context.Context, obj *urlfiltering.CredentialEnforcementModeDisabled, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *UrlFilteringSecurityProfileResourceCredentialEnforcementModeDomainCredentialsObject) CopyFromPango(ctx context.Context, obj *urlfiltering.CredentialEnforcementModeDomainCredentials, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *UrlFilteringSecurityProfileResourceCredentialEnforcementModeIpUserObject) CopyFromPango(ctx context.Context, obj *urlfiltering.CredentialEnforcementModeIpUser, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	return diags
}

func (o *UrlFilteringSecurityProfileResourceHttpHeaderInsertionObject) CopyFromPango(ctx context.Context, obj *urlfiltering.HttpHeaderInsertion, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var type_list types.List
	{
		var type_tf_entries []UrlFilteringSecurityProfileResourceHttpHeaderInsertionTypeObject
		for _, elt := range obj.Type {
			var entry UrlFilteringSecurityProfileResourceHttpHeaderInsertionTypeObject
			entry_diags := entry.CopyFromPango(ctx, &elt, encrypted)
			diags.Append(entry_diags...)
			type_tf_entries = append(type_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("type")
		type_list, list_diags = types.ListValueFrom(ctx, schemaType, type_tf_entries)
		diags.Append(list_diags...)
	}

	var disableOverride_value types.String
	if obj.DisableOverride != nil {
		disableOverride_value = types.StringValue(*obj.DisableOverride)
	}
	o.Name = types.StringValue(obj.Name)
	o.Type = type_list
	o.DisableOverride = disableOverride_value

	return diags
}

func (o *UrlFilteringSecurityProfileResourceHttpHeaderInsertionTypeObject) CopyFromPango(ctx context.Context, obj *urlfiltering.HttpHeaderInsertionType, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics
	var headers_list types.List
	{
		var headers_tf_entries []UrlFilteringSecurityProfileResourceHttpHeaderInsertionTypeHeadersObject
		for _, elt := range obj.Headers {
			var entry UrlFilteringSecurityProfileResourceHttpHeaderInsertionTypeHeadersObject
			entry_diags := entry.CopyFromPango(ctx, &elt, encrypted)
			diags.Append(entry_diags...)
			headers_tf_entries = append(headers_tf_entries, entry)
		}
		var list_diags diag.Diagnostics
		schemaType := o.getTypeFor("headers")
		headers_list, list_diags = types.ListValueFrom(ctx, schemaType, headers_tf_entries)
		diags.Append(list_diags...)
	}
	var domains_list types.List
	{
		var list_diags diag.Diagnostics
		domains_list, list_diags = types.ListValueFrom(ctx, types.StringType, obj.Domains)
		diags.Append(list_diags...)
	}

	o.Name = types.StringValue(obj.Name)
	o.Headers = headers_list
	o.Domains = domains_list

	return diags
}

func (o *UrlFilteringSecurityProfileResourceHttpHeaderInsertionTypeHeadersObject) CopyFromPango(ctx context.Context, obj *urlfiltering.HttpHeaderInsertionTypeHeaders, encrypted *map[string]types.String) diag.Diagnostics {
	var diags diag.Diagnostics

	var header_value types.String
	if obj.Header != nil {
		header_value = types.StringValue(*obj.Header)
	}
	var value_value types.String
	if obj.Value != nil {
		value_value = types.StringValue(*obj.Value)
	}
	var log_value types.Bool
	if obj.Log != nil {
		log_value = types.BoolValue(*obj.Log)
	}
	o.Name = types.StringValue(obj.Name)
	o.Header = header_value
	o.Value = value_value
	o.Log = log_value

	return diags
}

func (r *UrlFilteringSecurityProfileResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var state UrlFilteringSecurityProfileResourceModel
	resp.Diagnostics.Append(req.Plan.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource create", map[string]any{
		"resource_name": "panos_url_filtering_security_profile_resource",
		"function":      "Create",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	// Determine the location.

	var location urlfiltering.Location

	if !state.Location.Shared.IsNull() && state.Location.Shared.ValueBool() {
		location.Shared = true
	}
	if state.Location.DeviceGroup != nil {
		location.DeviceGroup = &urlfiltering.DeviceGroupLocation{

			DeviceGroup:    state.Location.DeviceGroup.Name.ValueString(),
			PanoramaDevice: state.Location.DeviceGroup.PanoramaDevice.ValueString(),
		}
	}

	if err := location.IsValid(); err != nil {
		resp.Diagnostics.AddError("Invalid location", err.Error())
		return
	}

	// Load the desired config.
	var obj *urlfiltering.Entry

	resp.Diagnostics.Append(state.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	/*
		// Timeout handling.
		ctx, cancel := context.WithTimeout(ctx, GetTimeout(state.Timeouts.Create))
		defer cancel()
	*/

	// Perform the operation.
	created, err := r.manager.Create(ctx, location, obj)
	if err != nil {
		resp.Diagnostics.AddError("Error in create", err.Error())
		return
	}

	resp.Diagnostics.Append(state.CopyFromPango(ctx, created, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}
	state.Name = types.StringValue(created.Name)

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)
}
func (o *UrlFilteringSecurityProfileResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {

	var savestate, state UrlFilteringSecurityProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &savestate)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location urlfiltering.Location

	if !savestate.Location.Shared.IsNull() && savestate.Location.Shared.ValueBool() {
		location.Shared = true
	}
	if savestate.Location.DeviceGroup != nil {
		location.DeviceGroup = &urlfiltering.DeviceGroupLocation{

			PanoramaDevice: savestate.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    savestate.Location.DeviceGroup.Name.ValueString(),
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource read", map[string]any{
		"resource_name": "panos_url_filtering_security_profile_resource",
		"function":      "Read",
		"name":          savestate.Name.ValueString(),
	})

	// Perform the operation.
	object, err := o.manager.Read(ctx, location, savestate.Name.ValueString())
	if err != nil {
		if errors.Is(err, sdkmanager.ErrObjectNotFound) {
			resp.State.RemoveResource(ctx)
		} else {
			resp.Diagnostics.AddError("Error reading entry", err.Error())
		}
		return
	}

	copy_diags := state.CopyFromPango(ctx, object, nil)
	resp.Diagnostics.Append(copy_diags...)

	/*
			// Keep the timeouts.
		    // TODO: This won't work for state import.
			state.Timeouts = savestate.Timeouts
	*/

	state.Location = savestate.Location

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *UrlFilteringSecurityProfileResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {

	var plan, state UrlFilteringSecurityProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	resp.Diagnostics.Append(req.Plan.Get(ctx, &plan)...)
	if resp.Diagnostics.HasError() {
		return
	}

	var location urlfiltering.Location

	if !state.Location.Shared.IsNull() && state.Location.Shared.ValueBool() {
		location.Shared = true
	}
	if state.Location.DeviceGroup != nil {
		location.DeviceGroup = &urlfiltering.DeviceGroupLocation{

			PanoramaDevice: state.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    state.Location.DeviceGroup.Name.ValueString(),
		}
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource update", map[string]any{
		"resource_name": "panos_url_filtering_security_profile_resource",
		"function":      "Update",
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}
	obj, err := r.manager.Read(ctx, location, plan.Name.ValueString())
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	resp.Diagnostics.Append(plan.CopyToPango(ctx, &obj, nil)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Perform the operation.
	updated, err := r.manager.Update(ctx, location, obj, obj.Name)
	if err != nil {
		resp.Diagnostics.AddError("Error in update", err.Error())
		return
	}

	// Save the location.
	state.Location = plan.Location

	/*
		// Keep the timeouts.
		state.Timeouts = plan.Timeouts
	*/

	copy_diags := state.CopyFromPango(ctx, updated, nil)
	resp.Diagnostics.Append(copy_diags...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Done.
	resp.Diagnostics.Append(resp.State.Set(ctx, &state)...)

}
func (r *UrlFilteringSecurityProfileResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {

	var state UrlFilteringSecurityProfileResourceModel
	resp.Diagnostics.Append(req.State.Get(ctx, &state)...)
	if resp.Diagnostics.HasError() {
		return
	}

	// Basic logging.
	tflog.Info(ctx, "performing resource delete", map[string]any{
		"resource_name": "panos_url_filtering_security_profile_resource",
		"function":      "Delete",
		"name":          state.Name.ValueString(),
	})

	// Verify mode.
	if r.client.Hostname == "" {
		resp.Diagnostics.AddError("Invalid mode error", InspectionModeError)
		return
	}

	var location urlfiltering.Location

	if !state.Location.Shared.IsNull() && state.Location.Shared.ValueBool() {
		location.Shared = true
	}
	if state.Location.DeviceGroup != nil {
		location.DeviceGroup = &urlfiltering.DeviceGroupLocation{

			PanoramaDevice: state.Location.DeviceGroup.PanoramaDevice.ValueString(),
			DeviceGroup:    state.Location.DeviceGroup.Name.ValueString(),
		}
	}

	err := r.manager.Delete(ctx, location, []string{state.Name.ValueString()})
	if err != nil && !errors.Is(err, sdkmanager.ErrObjectNotFound) {
		resp.Diagnostics.AddError("Error in delete", err.Error())
	}

}

type UrlFilteringSecurityProfileImportState struct {
	Location UrlFilteringSecurityProfileLocation `json:"location"`
	Name     string                              `json:"name"`
}

func UrlFilteringSecurityProfileImportStateCreator(ctx context.Context, resource types.Object) ([]byte, error) {
	attrs := resource.Attributes()
	if attrs == nil {
		return nil, fmt.Errorf("Object has no attributes")
	}

	locationAttr, ok := attrs["location"]
	if !ok {
		return nil, fmt.Errorf("location attribute missing")
	}

	var location UrlFilteringSecurityProfileLocation
	switch value := locationAttr.(type) {
	case types.Object:
		value.As(ctx, &location, basetypes.ObjectAsOptions{})
	default:
		return nil, fmt.Errorf("location attribute expected to be an object")
	}

	nameAttr, ok := attrs["name"]
	if !ok {
		return nil, fmt.Errorf("name attribute missing")
	}

	var name string
	switch value := nameAttr.(type) {
	case types.String:
		name = value.ValueString()
	default:
		return nil, fmt.Errorf("name attribute expected to be a string")
	}

	importStruct := UrlFilteringSecurityProfileImportState{
		Location: location,
		Name:     name,
	}

	return json.Marshal(importStruct)
}

func (r *UrlFilteringSecurityProfileResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {

	var obj UrlFilteringSecurityProfileImportState
	data, err := base64.StdEncoding.DecodeString(req.ID)
	if err != nil {
		resp.Diagnostics.AddError("Failed to decode Import ID", err.Error())
		return
	}

	err = json.Unmarshal(data, &obj)
	if err != nil {
		resp.Diagnostics.AddError("Failed to unmarshal Import ID", err.Error())
		return
	}

	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("location"), obj.Location)...)
	resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("name"), obj.Name)...)

}

type UrlFilteringSecurityProfileDeviceGroupLocation struct {
	PanoramaDevice types.String `tfsdk:"panorama_device"`
	Name           types.String `tfsdk:"name"`
}
type UrlFilteringSecurityProfileLocation struct {
	Shared      types.Bool                                      `tfsdk:"shared"`
	DeviceGroup *UrlFilteringSecurityProfileDeviceGroupLocation `tfsdk:"device_group"`
}

func UrlFilteringSecurityProfileLocationSchema() rsschema.Attribute {
	return rsschema.SingleNestedAttribute{
		Description: "The location of this object.",
		Required:    true,
		Attributes: map[string]rsschema.Attribute{
			"shared": rsschema.BoolAttribute{
				Description: "Location in Shared Panorama",
				Optional:    true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplace(),
				},

				Validators: []validator.Bool{
					boolvalidator.ExactlyOneOf(path.Expressions{
						path.MatchRelative().AtParent().AtName("shared"),
						path.MatchRelative().AtParent().AtName("device_group"),
					}...),
				},
			},
			"device_group": rsschema.SingleNestedAttribute{
				Description: "Located in a specific Device Group",
				Optional:    true,
				Attributes: map[string]rsschema.Attribute{
					"panorama_device": rsschema.StringAttribute{
						Description: "Panorama device name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString("localhost.localdomain"),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
					"name": rsschema.StringAttribute{
						Description: "Device Group name",
						Optional:    true,
						Computed:    true,
						Default:     stringdefault.StaticString(""),
						PlanModifiers: []planmodifier.String{
							stringplanmodifier.RequiresReplace(),
						},
					},
				},
				PlanModifiers: []planmodifier.Object{
					objectplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

func (o UrlFilteringSecurityProfileDeviceGroupLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		PanoramaDevice *string `json:"panorama_device"`
		Name           *string `json:"name"`
	}{
		PanoramaDevice: o.PanoramaDevice.ValueStringPointer(),
		Name:           o.Name.ValueStringPointer(),
	}

	return json.Marshal(obj)
}

func (o *UrlFilteringSecurityProfileDeviceGroupLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		PanoramaDevice *string `json:"panorama_device"`
		Name           *string `json:"name"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.PanoramaDevice = types.StringPointerValue(shadow.PanoramaDevice)
	o.Name = types.StringPointerValue(shadow.Name)

	return nil
}
func (o UrlFilteringSecurityProfileLocation) MarshalJSON() ([]byte, error) {
	obj := struct {
		DeviceGroup *UrlFilteringSecurityProfileDeviceGroupLocation `json:"device_group"`
		Shared      *bool                                           `json:"shared"`
	}{
		DeviceGroup: o.DeviceGroup,
		Shared:      o.Shared.ValueBoolPointer(),
	}

	return json.Marshal(obj)
}

func (o *UrlFilteringSecurityProfileLocation) UnmarshalJSON(data []byte) error {
	var shadow struct {
		DeviceGroup *UrlFilteringSecurityProfileDeviceGroupLocation `json:"device_group"`
		Shared      *bool                                           `json:"shared"`
	}

	err := json.Unmarshal(data, &shadow)
	if err != nil {
		return err
	}
	o.DeviceGroup = shadow.DeviceGroup
	o.Shared = types.BoolPointerValue(shadow.Shared)

	return nil
}
