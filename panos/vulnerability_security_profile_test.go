package panos

import (
	"fmt"
	"testing"

	"github.com/PaloAltoNetworks/pango"
	vuln "github.com/PaloAltoNetworks/pango/objs/profile/security/vulnerability"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/acctest"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/resource"
	"github.com/hashicorp/terraform-plugin-sdk/v2/terraform"
)

// Data source listing tests.
func TestAccPanosDsVulnerabilitySecurityProfileList(t *testing.T) {
	if len(testAccPredefinedVulnerabilityThreats) == 0 {
		t.Skip("No predefined vulnerability threats present")
	}

	name := fmt.Sprintf("tf%s", acctest.RandString(6))
	tName := testAccPredefinedVulnerabilityThreats[acctest.RandInt()%len(testAccPredefinedVulnerabilityThreats)].Name

	resource.Test(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccDsVulnerabilitySecurityProfileConfig(name, tName),
				Check:  checkDataSourceListing("panos_vulnerability_security_profiles"),
			},
		},
	})
}

// Data source tests.
func TestAccPanosDsVulnerabilitySecurityProfile_basic(t *testing.T) {
	if len(testAccPredefinedVulnerabilityThreats) == 0 {
		t.Skip("No predefined vulnerability threats present")
	}

	name := fmt.Sprintf("tf%s", acctest.RandString(6))
	tName := testAccPredefinedVulnerabilityThreats[acctest.RandInt()%len(testAccPredefinedVulnerabilityThreats)].Name

	resource.Test(t, resource.TestCase{
		PreCheck:  func() { testAccPreCheck(t) },
		Providers: testAccProviders,
		Steps: []resource.TestStep{
			{
				Config: testAccDsVulnerabilitySecurityProfileConfig(name, tName),
				Check: checkDataSource("panos_vulnerability_security_profile", []string{
					"name", "description",
					"rule.0.name", "rule.0.threat_name", "rule.0.host", "rule.0.category", "rule.0.action", "rule.0.packet_capture",
					"exception.0.name", "exception.0.packet_capture", "exception.0.action",
				}),
			},
		},
	})
}

func testAccDsVulnerabilitySecurityProfileConfig(name, tName string) string {
	return fmt.Sprintf(`
data "panos_vulnerability_security_profiles" "test" {}

data "panos_vulnerability_security_profile" "test" {
    name = panos_vulnerability_security_profile.x.name
}

resource "panos_vulnerability_security_profile" "x" {
    name = %q
    description = "vulnerability sec prof acctest"
    rule {
        name = "foo"
        category = "info-leak"
        threat_name = "any"
        action = "alert"
        host = "client"
        severities = ["any"]
        cves = ["any"]
        vendor_ids = ["any"]
    }
    exception {
        name = %q
        action = "drop"
    }
}
`, name, tName)
}

// Resource tests.
func TestAccPanosVulnerabilitySecurityProfile_basic(t *testing.T) {
	if len(testAccPredefinedVulnerabilityThreats) == 0 {
		t.Skip("No predefined vulnerability threats present")
	}

	var o vuln.Entry
	name := fmt.Sprintf("tf%s", acctest.RandString(6))
	eName := testAccPredefinedVulnerabilityThreats[acctest.RandInt()%len(testAccPredefinedVulnerabilityThreats)].Name

	resource.Test(t, resource.TestCase{
		PreCheck:     func() { testAccPreCheck(t) },
		Providers:    testAccProviders,
		CheckDestroy: testAccPanosVulnerabilitySecurityProfileDestroy,
		Steps: []resource.TestStep{
			{
				Config: testAccVulnerabilitySecurityProfileConfig(name, "desc one", "first", "first threat", "cve1", "cve2", vuln.HostClient, "vendor5", "critical", "high", "brute-force", vuln.ActionDrop, vuln.SinglePacket, eName, vuln.ExtendedCapture, vuln.ActionDrop, "192.168.66.66", "192.168.55.55"),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckPanosVulnerabilitySecurityProfileExists("panos_vulnerability_security_profile.test", &o),
					testAccCheckPanosVulnerabilitySecurityProfileAttributes(&o, name, "desc one", "first", "first threat", "cve1", "cve2", vuln.HostClient, "vendor5", "critical", "high", "brute-force", vuln.ActionDrop, vuln.SinglePacket, eName, vuln.ExtendedCapture, vuln.ActionDrop, "192.168.66.66", "192.168.55.55"),
				),
			},
			{
				Config: testAccVulnerabilitySecurityProfileConfig(name, "desc two", "second", "next threat", "cve3", "cve2", vuln.HostAny, "vendor4", "low", "medium", "dos", vuln.ActionResetBoth, vuln.Disable, eName, vuln.Disable, vuln.ActionResetServer, "192.168.66.66", "192.168.77.77"),
				Check: resource.ComposeTestCheckFunc(
					testAccCheckPanosVulnerabilitySecurityProfileExists("panos_vulnerability_security_profile.test", &o),
					testAccCheckPanosVulnerabilitySecurityProfileAttributes(&o, name, "desc two", "second", "next threat", "cve3", "cve2", vuln.HostAny, "vendor4", "low", "medium", "dos", vuln.ActionResetBoth, vuln.Disable, eName, vuln.Disable, vuln.ActionResetServer, "192.168.66.66", "192.168.77.77"),
				),
			},
		},
	})
}

func testAccCheckPanosVulnerabilitySecurityProfileExists(n string, o *vuln.Entry) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		rs, ok := s.RootModule().Resources[n]
		if !ok {
			return fmt.Errorf("Resource not found: %s", n)
		}

		if rs.Primary.ID == "" {
			return fmt.Errorf("Object label ID is not set")
		}

		var err error
		var v vuln.Entry

		switch con := testAccProvider.Meta().(type) {
		case *pango.Firewall:
			vsys, name := parseVulnerabilitySecurityProfileId(rs.Primary.ID)
			v, err = con.Objects.VulnerabilityProfile.Get(vsys, name)
		case *pango.Panorama:
			dg, name := parseVulnerabilitySecurityProfileId(rs.Primary.ID)
			v, err = con.Objects.VulnerabilityProfile.Get(dg, name)
		}

		if err != nil {
			return fmt.Errorf("Error in get: %s", err)
		}

		*o = v

		return nil
	}
}

func testAccCheckPanosVulnerabilitySecurityProfileAttributes(o *vuln.Entry, name, desc, rName, tn, cve1, cve2, host, vid, sev1, sev2, rCat, rAction, rCap, eName, eCap, eAction, e1, e2 string) resource.TestCheckFunc {
	return func(s *terraform.State) error {
		if o.Name != name {
			return fmt.Errorf("Name is %s, expected %s", o.Name, name)
		}

		if o.Description != desc {
			return fmt.Errorf("Description is %q, expected %q", o.Description, desc)
		}

		if len(o.Rules) != 1 {
			return fmt.Errorf("rules is not length 1: %#v", o.Rules)
		}

		r := o.Rules[0]
		if r.Name != rName {
			return fmt.Errorf("rule name is %q, expected %q", r.Name, rName)
		}

		if r.ThreatName != tn {
			return fmt.Errorf("rule threat name is %q, not %q", r.ThreatName, tn)
		}

		if len(r.Cves) != 2 {
			return fmt.Errorf("rule cves is not len 2: %#v", r.Cves)
		}

		if r.Cves[0] != cve1 && r.Cves[1] != cve1 {
			return fmt.Errorf("rule cve %q not in cves: %#v", cve1, r.Cves)
		}

		if r.Cves[0] != cve2 && r.Cves[1] != cve2 {
			return fmt.Errorf("rule cve %q not in cves: %#v", cve2, r.Cves)
		}

		if r.Host != host {
			return fmt.Errorf("rule host is %q, not %q", r.Host, host)
		}

		if len(r.VendorIds) != 1 {
			return fmt.Errorf("rule vendor ids is not len 1: %#v", r.VendorIds)
		}

		if r.VendorIds[0] != vid {
			return fmt.Errorf("rule vendor id 0 is %q, not %q", r.VendorIds[0], vid)
		}

		if len(r.Severities) != 2 {
			return fmt.Errorf("rule severities is not 2: %#v", r.Severities)
		}

		if r.Severities[0] != sev1 {
			return fmt.Errorf("rule sev1 is %q, not %q", r.Severities[0], sev1)
		}

		if r.Severities[1] != sev2 {
			return fmt.Errorf("rule sev2 is %q, not %q", r.Severities[1], sev2)
		}

		if r.Category != rCat {
			return fmt.Errorf("rule category is %q, not %q", r.Category, rCat)
		}

		if r.Action != rAction {
			return fmt.Errorf("rule action is %q, not %q", r.Action, rAction)
		}

		if r.PacketCapture != rCap {
			return fmt.Errorf("rule packet capture is %q, not %q", r.PacketCapture, rCap)
		}

		if len(o.Exceptions) != 1 {
			return fmt.Errorf("Exceptions is not len 1: %#v", o.Exceptions)
		}

		e := o.Exceptions[0]
		if e.Name != eName {
			return fmt.Errorf("exception name is %q, not %q", e.Name, eName)
		}

		if e.PacketCapture != eCap {
			return fmt.Errorf("exception packet capture is %q, not %q", e.PacketCapture, eCap)
		}

		if e.Action != eAction {
			return fmt.Errorf("exception action is %q, not %q", e.Action, eAction)
		}

		if len(e.ExemptIps) != 2 {
			return fmt.Errorf("exception exempt ips is not len 2: %#v", e.ExemptIps)
		}

		if e.ExemptIps[0] != e1 {
			return fmt.Errorf("exception exempt ip1 is %q, not %q", e.ExemptIps[0], e1)
		}

		if e.ExemptIps[1] != e2 {
			return fmt.Errorf("exception exempt ip2 is %q, not %q", e.ExemptIps[1], e2)
		}

		return nil
	}
}

func testAccPanosVulnerabilitySecurityProfileDestroy(s *terraform.State) error {
	for _, rs := range s.RootModule().Resources {
		if rs.Type != "panos_vulnerability_security_profile" {
			continue
		}

		if rs.Primary.ID != "" {
			var err error

			switch con := testAccProvider.Meta().(type) {
			case *pango.Firewall:
				vsys, name := parseVulnerabilitySecurityProfileId(rs.Primary.ID)
				_, err = con.Objects.VulnerabilityProfile.Get(vsys, name)
			case *pango.Panorama:
				dg, name := parseVulnerabilitySecurityProfileId(rs.Primary.ID)
				_, err = con.Objects.VulnerabilityProfile.Get(dg, name)
			}
			if err == nil {
				return fmt.Errorf("Object %q still exists", rs.Primary.ID)
			}
		}
		return nil
	}

	return nil
}

func testAccVulnerabilitySecurityProfileConfig(name, desc, rName, tn, cve1, cve2, host, vid, sev1, sev2, rCat, rAction, rCap, eName, eCap, eAction, e1, e2 string) string {
	return fmt.Sprintf(`
resource "panos_vulnerability_security_profile" "test" {
    name = %q
    description = %q
    rule {
        name = %q
        threat_name = %q
        cves = [%q, %q]
        host = %q
        vendor_ids = [%q]
        severities = [%q, %q]
        category = %q
        action = %q
        packet_capture = %q
    }
    exception {
        name = %q
        packet_capture = %q
        action = %q
        exempt_ips = [%q, %q]
    }
}
`, name, desc, rName, tn, cve1, cve2, host, vid, sev1, sev2, rCat, rAction, rCap, eName, eCap, eAction, e1, e2)
}
