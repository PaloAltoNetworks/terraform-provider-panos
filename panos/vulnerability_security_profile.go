package panos

import (
	"log"
	"strings"

	"github.com/PaloAltoNetworks/pango"
	vuln "github.com/PaloAltoNetworks/pango/objs/profile/security/vulnerability"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

// Data source (listing).
func dataSourceVulnerabilitySecurityProfiles() *schema.Resource {
	s := listingSchema()
	s["vsys"] = vsysSchema("vsys1")
	s["device_group"] = deviceGroupSchema()

	return &schema.Resource{
		Read: dataSourceVulnerabilitySecurityProfilesRead,

		Schema: s,
	}
}

func dataSourceVulnerabilitySecurityProfilesRead(d *schema.ResourceData, meta interface{}) error {
	var err error
	var listing []string
	var id string

	switch con := meta.(type) {
	case *pango.Firewall:
		id = d.Get("vsys").(string)
		listing, err = con.Objects.VulnerabilityProfile.GetList(id)
	case *pango.Panorama:
		id = d.Get("device_group").(string)
		listing, err = con.Objects.VulnerabilityProfile.GetList(id)
	}

	if err != nil {
		return err
	}

	d.SetId(id)
	saveListing(d, listing)
	return nil
}

// Data source.
func dataSourceVulnerabilitySecurityProfile() *schema.Resource {
	return &schema.Resource{
		Read: dataSourceVulnerabilitySecurityProfileRead,

		Schema: vulnerabilitySecurityProfileSchema(false),
	}
}

func dataSourceVulnerabilitySecurityProfileRead(d *schema.ResourceData, meta interface{}) error {
	var err error
	var id string
	var o vuln.Entry
	name := d.Get("name").(string)

	switch con := meta.(type) {
	case *pango.Firewall:
		vsys := d.Get("vsys").(string)
		id = buildVulnerabilitySecurityProfileId(vsys, name)
		o, err = con.Objects.VulnerabilityProfile.Get(vsys, name)
	case *pango.Panorama:
		dg := d.Get("device_group").(string)
		id = buildVulnerabilitySecurityProfileId(dg, name)
		o, err = con.Objects.VulnerabilityProfile.Get(dg, name)
	}

	if err != nil {
		if isObjectNotFound(err) {
			d.SetId("")
			return nil
		}
		return err
	}

	d.SetId(id)
	saveVulnerabilitySecurityProfile(d, o)

	return nil
}

// Resource.
func resourceVulnerabilitySecurityProfile() *schema.Resource {
	return &schema.Resource{
		Create: createVulnerabilitySecurityProfile,
		Read:   readVulnerabilitySecurityProfile,
		Update: updateVulnerabilitySecurityProfile,
		Delete: deleteVulnerabilitySecurityProfile,

		Importer: &schema.ResourceImporter{
			State: schema.ImportStatePassthrough,
		},

		Schema: vulnerabilitySecurityProfileSchema(true),
	}
}

func createVulnerabilitySecurityProfile(d *schema.ResourceData, meta interface{}) error {
	var err error
	var id string
	o := loadVulnerabilitySecurityProfile(d)

	switch con := meta.(type) {
	case *pango.Firewall:
		vsys := d.Get("vsys").(string)
		id = buildVulnerabilitySecurityProfileId(vsys, o.Name)
		err = con.Objects.VulnerabilityProfile.Set(vsys, o)
	case *pango.Panorama:
		dg := d.Get("device_group").(string)
		id = buildVulnerabilitySecurityProfileId(dg, o.Name)
		err = con.Objects.VulnerabilityProfile.Set(dg, o)
	}

	if err != nil {
		return err
	}

	d.SetId(id)
	return readVulnerabilitySecurityProfile(d, meta)
}

func readVulnerabilitySecurityProfile(d *schema.ResourceData, meta interface{}) error {
	var err error
	var o vuln.Entry

	switch con := meta.(type) {
	case *pango.Firewall:
		vsys, name := parseVulnerabilitySecurityProfileId(d.Id())
		o, err = con.Objects.VulnerabilityProfile.Get(vsys, name)
	case *pango.Panorama:
		dg, name := parseVulnerabilitySecurityProfileId(d.Id())
		o, err = con.Objects.VulnerabilityProfile.Get(dg, name)
	}

	if err != nil {
		if isObjectNotFound(err) {
			d.SetId("")
			return nil
		}
		return err
	}

	saveVulnerabilitySecurityProfile(d, o)
	return nil
}

func updateVulnerabilitySecurityProfile(d *schema.ResourceData, meta interface{}) error {
	o := loadVulnerabilitySecurityProfile(d)

	switch con := meta.(type) {
	case *pango.Firewall:
		vsys := d.Get("vsys").(string)
		lo, err := con.Objects.VulnerabilityProfile.Get(vsys, o.Name)
		if err != nil {
			return err
		}
		lo.Copy(o)
		if err = con.Objects.VulnerabilityProfile.Edit(vsys, lo); err != nil {
			return err
		}
	case *pango.Panorama:
		dg := d.Get("device_group").(string)
		lo, err := con.Objects.VulnerabilityProfile.Get(dg, o.Name)
		if err != nil {
			return err
		}
		lo.Copy(o)
		if err = con.Objects.VulnerabilityProfile.Edit(dg, lo); err != nil {
			return err
		}
	}

	return readVulnerabilitySecurityProfile(d, meta)
}

func deleteVulnerabilitySecurityProfile(d *schema.ResourceData, meta interface{}) error {
	var err error

	switch con := meta.(type) {
	case *pango.Firewall:
		vsys, name := parseVulnerabilitySecurityProfileId(d.Id())
		err = con.Objects.VulnerabilityProfile.Delete(vsys, name)
	case *pango.Panorama:
		dg, name := parseVulnerabilitySecurityProfileId(d.Id())
		err = con.Objects.VulnerabilityProfile.Delete(dg, name)
	}

	if err != nil {
		if !isObjectNotFound(err) {
			return err
		}
	}

	d.SetId("")
	return nil
}

// Schema handling.
func vulnerabilitySecurityProfileSchema(isResource bool) map[string]*schema.Schema {
	ans := map[string]*schema.Schema{
		"vsys":         vsysSchema("vsys1"),
		"device_group": deviceGroupSchema(),
		"name": {
			Type:        schema.TypeString,
			Required:    true,
			ForceNew:    true,
			Description: "Security profile name",
		},
		"description": {
			Type:        schema.TypeString,
			Optional:    true,
			Description: "Description",
		},
		"rule": {
			Type:        schema.TypeList,
			Optional:    true,
			Description: "Rule list specs",
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					"name": {
						Type:        schema.TypeString,
						Required:    true,
						Description: "Rule name",
					},
					"threat_name": {
						Type:        schema.TypeString,
						Optional:    true,
						Description: "The threat name",
						Default:     "any",
					},
					"cves": {
						Type:        schema.TypeSet,
						Optional:    true,
						Description: "List of CVEs",
						Elem: &schema.Schema{
							Type: schema.TypeString,
						},
					},
					"host": {
						Type:        schema.TypeString,
						Optional:    true,
						Description: "The host",
						Default:     vuln.HostAny,
						ValidateFunc: validateStringIn(
							vuln.HostAny,
							vuln.HostClient,
							vuln.HostServer,
						),
					},
					"vendor_ids": {
						Type:        schema.TypeSet,
						Optional:    true,
						Description: "List of vendor IDs",
						Elem: &schema.Schema{
							Type: schema.TypeString,
						},
					},
					"severities": {
						Type:        schema.TypeList,
						Optional:    true,
						Description: "List of severities",
						Elem: &schema.Schema{
							Type: schema.TypeString,
						},
					},
					"category": {
						Type:        schema.TypeString,
						Optional:    true,
						Description: "The category",
						Default:     "any",
					},
					"action": {
						Type:        schema.TypeString,
						Optional:    true,
						Description: "The action",
						Default:     vuln.ActionDefault,
						ValidateFunc: validateStringIn(
							vuln.ActionDefault,
							vuln.ActionAllow,
							vuln.ActionAlert,
							vuln.ActionDrop,
							vuln.ActionResetClient,
							vuln.ActionResetServer,
							vuln.ActionResetBoth,
							vuln.ActionBlockIp,
						),
					},
					"block_ip_track_by": {
						Type:        schema.TypeString,
						Optional:    true,
						Description: "Track by setting",
					},
					"block_ip_duration": {
						Type:        schema.TypeInt,
						Optional:    true,
						Description: "Track by duration",
					},
					"packet_capture": {
						Type:        schema.TypeString,
						Optional:    true,
						Description: "Packet capture setting",
						Default:     vuln.Disable,
						ValidateFunc: validateStringIn(
							vuln.Disable,
							vuln.SinglePacket,
							vuln.ExtendedCapture,
						),
					},
				},
			},
		},
		"exception": {
			Type:        schema.TypeList,
			Optional:    true,
			Description: "Exception list spec",
			Elem: &schema.Resource{
				Schema: map[string]*schema.Schema{
					"name": {
						Type:        schema.TypeString,
						Required:    true,
						Description: "Name",
					},
					"packet_capture": {
						Type:        schema.TypeString,
						Optional:    true,
						Description: "Packet capture setting",
						Default:     vuln.Disable,
						ValidateFunc: validateStringIn(
							vuln.Disable,
							vuln.SinglePacket,
							vuln.ExtendedCapture,
						),
					},
					"action": {
						Type:        schema.TypeString,
						Optional:    true,
						Description: "The action",
						Default:     vuln.ActionDefault,
						ValidateFunc: validateStringIn(
							vuln.ActionDefault,
							vuln.ActionAllow,
							vuln.ActionAlert,
							vuln.ActionDrop,
							vuln.ActionResetClient,
							vuln.ActionResetServer,
							vuln.ActionResetBoth,
							vuln.ActionBlockIp,
						),
					},
					"block_ip_track_by": {
						Type:        schema.TypeString,
						Optional:    true,
						Description: "Track by setting",
					},
					"block_ip_duration": {
						Type:        schema.TypeInt,
						Optional:    true,
						Description: "Track by duration",
					},
					"time_interval": {
						Type:        schema.TypeInt,
						Optional:    true,
						Description: "Time interval",
					},
					"time_threshold": {
						Type:        schema.TypeInt,
						Optional:    true,
						Description: "Time threshold",
					},
					"time_track_by": {
						Type:        schema.TypeString,
						Optional:    true,
						Description: "Time track by setting",
						ValidateFunc: validateStringIn(
							"",
							vuln.TrackBySource,
							vuln.TrackByDestination,
							vuln.TrackBySourceAndDestination,
						),
					},
					"exempt_ips": {
						Type:        schema.TypeList,
						Optional:    true,
						Description: "List of exempt IP addresses",
						Elem: &schema.Schema{
							Type: schema.TypeString,
						},
					},
				},
			},
		},
	}

	if !isResource {
		computed(ans, "", []string{"vsys", "device_group", "name"})
	}

	return ans
}

func loadVulnerabilitySecurityProfile(d *schema.ResourceData) vuln.Entry {
	var list []interface{}

	var rules []vuln.Rule
	list = d.Get("rule").([]interface{})
	if len(list) > 0 {
		rules = make([]vuln.Rule, 0, len(list))
		for i := range list {
			elm := list[i].(map[string]interface{})
			rules = append(rules, vuln.Rule{
				Name:            elm["name"].(string),
				ThreatName:      elm["threat_name"].(string),
				Cves:            setAsList(elm["cves"].(*schema.Set)),
				Host:            elm["host"].(string),
				VendorIds:       setAsList(elm["vendor_ids"].(*schema.Set)),
				Severities:      asStringList(elm["severities"].([]interface{})),
				Category:        elm["category"].(string),
				Action:          elm["action"].(string),
				BlockIpTrackBy:  elm["block_ip_track_by"].(string),
				BlockIpDuration: elm["block_ip_duration"].(int),
				PacketCapture:   elm["packet_capture"].(string),
			})
		}
	}

	var exceptions []vuln.Exception
	list = d.Get("exception").([]interface{})
	if len(list) > 0 {
		exceptions = make([]vuln.Exception, 0, len(list))
		for i := range list {
			elm := list[i].(map[string]interface{})
			exceptions = append(exceptions, vuln.Exception{
				Name:            elm["name"].(string),
				PacketCapture:   elm["packet_capture"].(string),
				Action:          elm["action"].(string),
				BlockIpTrackBy:  elm["block_ip_track_by"].(string),
				BlockIpDuration: elm["block_ip_duration"].(int),
				TimeInterval:    elm["time_interval"].(int),
				TimeThreshold:   elm["time_threshold"].(int),
				TimeTrackBy:     elm["time_track_by"].(string),
				ExemptIps:       asStringList(elm["exempt_ips"].([]interface{})),
			})
		}
	}

	return vuln.Entry{
		Name:        d.Get("name").(string),
		Description: d.Get("description").(string),
		Rules:       rules,
		Exceptions:  exceptions,
	}
}

func saveVulnerabilitySecurityProfile(d *schema.ResourceData, o vuln.Entry) {
	d.Set("name", o.Name)
	d.Set("description", o.Description)

	if len(o.Rules) == 0 {
		d.Set("rule", nil)
	} else {
		list := make([]interface{}, 0, len(o.Rules))
		for _, x := range o.Rules {
			list = append(list, map[string]interface{}{
				"name":              x.Name,
				"threat_name":       x.ThreatName,
				"cves":              listAsSet(x.Cves),
				"host":              x.Host,
				"vendor_ids":        listAsSet(x.VendorIds),
				"severities":        x.Severities,
				"category":          x.Category,
				"action":            x.Action,
				"block_ip_track_by": x.BlockIpTrackBy,
				"block_ip_duration": x.BlockIpDuration,
				"packet_capture":    x.PacketCapture,
			})
		}
		if err := d.Set("rule", list); err != nil {
			log.Printf("[WARN] Error setting 'rule' for %q: %s", d.Id(), err)
		}
	}

	if len(o.Exceptions) == 0 {
		d.Set("exception", nil)
	} else {
		list := make([]interface{}, 0, len(o.Exceptions))
		for _, x := range o.Exceptions {
			list = append(list, map[string]interface{}{
				"name":              x.Name,
				"packet_capture":    x.PacketCapture,
				"action":            x.Action,
				"block_ip_track_by": x.BlockIpTrackBy,
				"block_ip_duration": x.BlockIpDuration,
				"time_interval":     x.TimeInterval,
				"time_threshold":    x.TimeThreshold,
				"time_track_by":     x.TimeTrackBy,
				"exempt_ips":        x.ExemptIps,
			})
		}
		if err := d.Set("exception", list); err != nil {
			log.Printf("[WARN] Error setting 'exception' for %q: %s", d.Id(), err)
		}
	}
}

// Id functions.
func buildVulnerabilitySecurityProfileId(a, b string) string {
	return strings.Join([]string{a, b}, IdSeparator)
}

func parseVulnerabilitySecurityProfileId(v string) (string, string) {
	t := strings.Split(v, IdSeparator)
	return t[0], t[1]
}
